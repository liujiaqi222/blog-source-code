{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/Vue小案例-图书管理系统.md","hash":"0d338512727f486bcf8eb8e0f0980773b5c9963a","modified":1627713788264},{"_id":"source/_posts/使用正则格式化时间.md","hash":"b888a88e50dc973f978eed64759527f1f363bfb5","modified":1627703340212},{"_id":"source/CNAME","hash":"040d6055d50b54e4634ebc26dda5ec003447deb0","modified":1624522410156},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"source/_posts/对象属性描述符和访问器属性.md","hash":"1d3869b530656e3aaeb3b55ae5e1ad3190586f38","modified":1627381055916},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"dac9d10d95b9e179e8cd7c439300b450db51f0c2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"523b9db3801ca892124502c17d72864457cc4b21","modified":1624507817157},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"45b68110fcaf5819452f45ecd77282f97d1386f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"248ecd01aead6e07ac1904a7b7c45395a922bcc7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"b0e5f75271be18fdca6c88a48fd62626574ee55c","modified":1624515712948},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":499162500000},{"_id":"source/_posts/JavaScript-ES6学习笔记.md","hash":"69d5c73055723b2ae4412d8dcfe9442dac026a01","modified":1627381112717},{"_id":"source/_posts/Vue学习笔记.md","hash":"87f7a934f79446778e4452ebf40485bfe3773c16","modified":1627639153385},{"_id":"public/local-search.xml","hash":"9f259c4abed18f4c61e82cc362eee4a7795524a5","modified":1628076896640},{"_id":"public/archives/index.html","hash":"6f41bd72afc1a1ba1f31ca4716d1a834df2fd5db","modified":1628076896640},{"_id":"public/archives/2021/index.html","hash":"41de810658c67f6f119e659d06595801d37fb9e6","modified":1628076896640},{"_id":"public/archives/2021/06/index.html","hash":"039efc8907b2b2d0ba2a80ff327bbacf518722c5","modified":1628076896640},{"_id":"public/archives/2021/07/index.html","hash":"9940255dcbf9c84c917ba422491cf882c00547c8","modified":1628076896640},{"_id":"public/index.html","hash":"b94a6e874a0e27ea8225bb3506c00a3cd4329b58","modified":1628076896640},{"_id":"public/tags/JavaScript/index.html","hash":"0a82f9cd155746f3368125f767416d4595940615","modified":1627703425022},{"_id":"public/tags/Vue/index.html","hash":"695fd640c9710352e1468d2a0bde60a5ea5439bf","modified":1627889144086},{"_id":"public/tags/正则/index.html","hash":"11c215f550ab7b8f020daffbefa6b9eb27aa6f8e","modified":1627703425022},{"_id":"public/tags/VUE/index.html","hash":"f01d409abc7922f26b5c632dad80809948259a15","modified":1627703425022},{"_id":"public/tags/案例/index.html","hash":"710e0237e47d63b6d3454a88ef29e0217a91d5ab","modified":1627703425022},{"_id":"public/tags/javascript/index.html","hash":"2fc112205179f85ea80e570fe03e2f0619d048aa","modified":1627703425022},{"_id":"public/404.html","hash":"9131fca5f959d1b181ec0f3a54c7235424194175","modified":1627703425022},{"_id":"public/tags/index.html","hash":"349c9a0a1c9e7fbce2104bf7dd83fec9bbbb3ea8","modified":1628076896640},{"_id":"public/categories/index.html","hash":"37464d611e0bc61ba90999155bae58a40ee022bf","modified":1627703425022},{"_id":"public/links/index.html","hash":"0c061d6ef255d8ec5d3b7905a3d4e97dc62cdbf6","modified":1627703425022},{"_id":"public/2021/07/31/使用正则格式化时间/index.html","hash":"294b1a5fee9de1d718f8a902cb234d57204bffd1","modified":1627810362971},{"_id":"public/2021/07/30/Vue小案例-图书管理系统/index.html","hash":"c7bd1e18f0a0677407feb55134e5843e9d6fe84b","modified":1627743589945},{"_id":"public/2021/07/27/Vue学习笔记/index.html","hash":"8e6253d0f983184d82e5c448b4e6ca37c30ac86b","modified":1627703425022},{"_id":"public/2021/07/27/对象属性描述符和访问器属性/index.html","hash":"81514efa166fae3083f801caafef00b5f369123b","modified":1627703425022},{"_id":"public/2021/06/24/JavaScript-ES6学习笔记/index.html","hash":"76cae5757cd1fa82758cd839929452bc4f8ea9b1","modified":1627703425022},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1627703425022},{"_id":"public/img/favicon.png","hash":"b0e5f75271be18fdca6c88a48fd62626574ee55c","modified":1627703425022},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1627703425022},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1627703425022},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1627703425022},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1627703425022},{"_id":"public/CNAME","hash":"040d6055d50b54e4634ebc26dda5ec003447deb0","modified":1627703425022},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1627703425022},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1627703425022},{"_id":"public/css/main.css","hash":"be9a0652de06d61fa26f4b4128b29bcc5a4a0ad7","modified":1627703425022},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1627703425022},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1627703425022},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1627703425022},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1627703425022},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1627703425022},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1627703425022},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1627703425022},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1627703425022},{"_id":"source/_posts/Git学习.md","hash":"eedea49d3b59f142a726ad9b41bc77cbe790afa9","modified":1627743770779},{"_id":"source/_posts/YAML学习笔记.md","hash":"ac7abf6ca77d962109f64cd4dbbfe73881e8899e","modified":1627739806187},{"_id":"public/2021/07/31/YAML学习笔记/index.html","hash":"551c65b0517cf63bdeecb85ce38a6551daa91ba6","modified":1627810362971},{"_id":"public/tags/YAML/index.html","hash":"af58fb8b00e2ace34752d817bbe368929ed18a4c","modified":1627743589945},{"_id":"public/2021/07/31/Git学习/index.html","hash":"8fa08c724b8c608b037a070fa30477851bf78861","modified":1627810362971},{"_id":"source/_posts/axios学习.md","hash":"73280a0c5880e2de2a6fa667f65e52cfa5ac0302","modified":1627810110813},{"_id":"public/archives/2021/08/index.html","hash":"4c095abda46273475f810ba90773ff560ed41d60","modified":1628076896640},{"_id":"public/tags/Git/index.html","hash":"98fe390a2d1c5e6f8c65e381df6baa9c24277e99","modified":1627810362971},{"_id":"public/tags/axios/index.html","hash":"fda86bb676c31f458cd8ca8f3b83e884c2693ca3","modified":1627889144086},{"_id":"public/2021/08/01/axios学习/index.html","hash":"fb2eb8bc15ecce549e1c4b99401c20bb2c3a3f5d","modified":1627889144086},{"_id":"source/_posts/Vue路由学习笔记.md","hash":"2921c1933f43c35ea0e89afa0d78be204fed466a","modified":1628053907516},{"_id":"source/_posts/基于接口的图书管理系统.md","hash":"5af316ec5bd7ea32ea7b262071d71267ab674bf5","modified":1627876732590},{"_id":"source/_posts/网络请求学习笔记.md","hash":"6893c5f4c4b58127ef8e50fa03e1db510e0c6fdf","modified":1627902194950},{"_id":"public/archives/page/2/index.html","hash":"ad1c728e662fc4632ef89769efacaefbcc34fe44","modified":1628076896640},{"_id":"public/archives/2021/page/2/index.html","hash":"4020fc9e657dbc5cadbddb3b829007db80877a8d","modified":1628076896640},{"_id":"public/page/2/index.html","hash":"d2de5ef79c10f9a4a68f2ed8284385dadc6e8c52","modified":1628076896640},{"_id":"public/tags/Vue路由/index.html","hash":"4e43f0a79553324d856d8586b138a05e3cf80839","modified":1627889144086},{"_id":"public/tags/express/index.html","hash":"15dda43d6730e60171c42cf9696bb37b6cdb2c75","modified":1627889144086},{"_id":"public/tags/fetch/index.html","hash":"3c716f3ec658f23178fe86a4e6a7f3080a1e2bfc","modified":1627889144086},{"_id":"public/tags/url/index.html","hash":"5ad66a5852880f952baefa89973d7e531b0c5481","modified":1627889144086},{"_id":"public/2021/08/02/网络请求学习笔记/index.html","hash":"baff6c82c906920a0aebe32564e6c5f55fc54e3d","modified":1628076896640},{"_id":"public/2021/08/02/Vue路由学习笔记/index.html","hash":"47b6acca17e5650a1ceeb4dc0b3d20206e6fc9a0","modified":1628076896640},{"_id":"public/2021/08/01/基于接口的图书管理系统/index.html","hash":"3fca47fdf8daccc85f00cc5e072144586c8c3c85","modified":1627889144086},{"_id":"source/_posts/JS模块化及EventLoop语法学习.md","hash":"c2a6acee35d57fbf6d71a92c9f80f5a4da33ad7e","modified":1628076880425},{"_id":"public/tags/es6/index.html","hash":"a84d5cde65860d527486374e0b6038a5432a5d0f","modified":1628076896640},{"_id":"public/tags/EventLoop/index.html","hash":"d09ac601fa7c43cd4c11b8ca89fadea8a26763f9","modified":1628076896640},{"_id":"public/tags/模块化/index.html","hash":"4d1c1001c6dca0bca6dd12c1f16299fdd1d13a67","modified":1628076896640},{"_id":"public/tags/微任务/index.html","hash":"b43be9f0aee8b9d7d18cca4a081a0bb008432345","modified":1628076896640},{"_id":"public/tags/宏任务/index.html","hash":"f2493d173ed0cfd88d610ac29259599c7ba03df2","modified":1628076896640},{"_id":"public/2021/08/04/JS模块化及EventLoop语法学习/index.html","hash":"228675ce522cc8a7f7ae7ea4666066e8238eb06b","modified":1628076896640}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"JavaScript ES6 学习笔记","date":"2021-06-24T04:19:35.000Z","_content":"\n# ES6简介\n\n![image-20210530104137712](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104138.png)\n\n![image-20210530104351721](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104352.png)\n\n![image-20210530104439339](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104440.png)\n\n# const\n\nconst就是为了那些一旦初始化就不希望重新赋值的情况设计的。使用 const声明常量，一旦声明，就必须立即初始化。\n\nconst声明的常量，允许在**不重新赋值**的情况下修改它的值。\n\n```js\nconst person={gender:\"male\"};\nperson[gender]=\"female\";\n```\n\n# let、const、var的区别\n\n![image-20210530131645190](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530131646.png)\n\n1.重复声明：已经存在的变量，又声明了一次。\n\nvar允许重复声明，let、 const不允许重复声明\n\n2.变量提升\n\nvar 会提升变量的声明到当前作用域顶部，但是赋值不会提升；let和const不会变量提升。\n\n3.暂时性死区\n\n只要作用域内存在 let、const，它们所声明的变量或常量就自动“绑定”这个区域，不再受到外部作用域的影响。\n\nlet、const存在暂时性死区，var不存在。\n\n```js\nlet c=2;\nlet d=2;\nfunction func(){\n    console.log(\"d\",d);//d\n    //console.log(\"c\",c);//  Cannot access 'c' before initialization\n    let c=1;\n}\nfunc(c);\n```\n\n4.window 对象的属性和方法\n\n在全局作用域中，var声明的变量，通过function声明的函数会自动变为window对象的属性和方法；let、const不会。\n\n```js\nvar age=18;\nvar add=function(){}\nconsole.log(window.add) //18\nconsole.log(window.add===add);//true    \nlet height=158;\nconst grow=function(){}\nconsole.log(window.height); //undefined\nconsole.log(window.grow===grow)//false\n```\n\n5.块级作用域\n\nvar没有块级作用域，let和const有块级作用域。\n\n## 非常经典的案例\n\n```html\n<button class=\"btn\">0</button>\n<button class=\"btn\">1</button>\n<button class=\"btn\">2</button>\n<script>\nvar btns=document.querySelectorAll(\".btn\");\n//1.var\nfor(var i=0;i<btns.length;i++){\n    btns[i].addEventListener(\"click\",function(){\n        console.log(i); //都会输出3\n    },false)\n} //执行for循环的时候，会给所有的btn添加监听(瞬间就能完成)，退出for循环的时候，全局变量i的值为3\n//当点击的按钮的时候，自然会输出i=3.\n\n//2.闭包\nfor(var i=0;i<btns.length;i++){\n    (function(index){\n        btns[index].addEventListener(\"click\",function(){\n        console.log(index); \n    },false)\n    })(i)\n} \n\n//3.let\n// //此时的i不再是全局变量\nfor(let i=0;i<btns.length;i++){\n    btns[i].addEventListener(\"click\",function(){\n        console.log(i); \n    },false)\n}\n```\n\n1.使用var\n\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144638.png\" alt=\"2.let 和 const 的应用-var\" style=\"zoom: 67%;\" />\n\n2.使用闭包\n\n![3.let 和 const 的应用-闭包](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144714.png)\n\n3.使用let\n\n![4.let 和 const 的应用-let](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144732.png)\n\n# 模板字符串\n\n```html\n模板字符串使用反引号 (``) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（`${expression}`）的占位符。\n```\n\n```js\n/ 1.认识模板字符串\n// 模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。\nconst user1='alex';\nconst user2=`alex`;\nconsole.log(user1,user2,user1===user2); //alex alex true\n\n// 2.模板字符串和一般字符串的区别\nconst person={\n    name:'alex',\n    age:18,\n    gender:\"male\"\n}\n// 一般字符串\n// const info=\"name:\"+person.name+\", age:\"+person.age+\", gender:\"+person.gender;\n// 模板字符串\nconst info=`name:${person.name}, age:${person.age}, gender:${person.gender}`;\nconsole.log(info);\n```\n\n![image-20210530154645752](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530154647.png)\n\n```js\n//1.输出多行字符串\n// 模板字符串中，所有的空格、换行或缩进都会保留在输出中。\n    const info=`hello\nworld!`;\n    console.log(info);\n//  2. 输出`和\\等特殊字符\nconsole.log(`\\``,`\\\\`); //` \\\n\n// 3. 模板字符串的注入\nconst name=\"alex\";\nconst person={age:18,gender:\"male\"};\nconst getSex=function(gender){\n    return gender===\"male\"?\"男\":\"女\";\n}\nconst alex=`${name},${person.age+2},${getSex(person.gender)}`;\n//alex,20,男\nconsole.log(alex);\n```\n\n# 箭头函数\n\n```js\n// 1.认识箭头函数，箭头函数是匿名函数\n\nconst add=(x,y)=>{return x+y};\n\nconsole.log(add(2,3));\n\n// 2.箭头函数的结构\n\n// 参数=>函数体\n```\n\n注意：\n\n1.单个参数时可以去掉参数的圆括号；无参数或者多个参数时不能省略参数圆括号。\n\n2.如果函数体只有return语句，可以直接同时省略函数体的花括号和return关键字。\n\n3.返回值是单行对象时，可以省略return关键词，然后在对象的花括号外面加上圆括号。\n\n\n\n```js\n// 1.单个参数\nconst add=x=>{return x+1;}\nconsole.log(add(2));\n\n// 2.单行函数体\nconst add2=x=>x+1;\nconsole.log(add2(2));\n\n// 3.单行对象\nconst add3=(x,y)=>({value:x+y});\nconsole.log(add3(2,2));\n```\n\n## this指向\n\n1.非箭头函数中this指向问题\n\n只有在函数调用的时候，this指向才能确定；this的指向和函数在哪调用无关，只和函数被谁调用有关\n\n```js\nfunction add(){\n    console.log(this); \n}\n// 只有在函数调用的时候，this指向才能确定\n// this的指向和函数在哪调用无关，只和函数被谁调用有关\nadd(); // 非严格模式下this指向window，严格模式下是undefined\nwindow.add() // window\n\nconst calc={\n    add:add\n}\ncalc.add(); //calc\n\nconst adder=calc.add;\nadder();// 非严格模式下this指向window，严格模式下是undefined\n\ndocument.onclick=function(){\n    console.log(this); //this指向绑定的dom，此时为document\n}\n\nfunction Person(name){\n    this.name=name;\n    console.log(this);\n}\nvar p=new Person(\"Alex\"); // this指向实例化生产的对象\n```\n\n2.箭头函数中的this指向\n\n 箭头函数没有自己的this，它会沿着作用域链向外查找。\n\n```js\n// 箭头函数没有自己的this\nconst calc={\n    add:()=>{console.log(this)}\n}\ncalc.add(); //window\n// 因为箭头函数没有自己的this，所以它会通过作用域链向外查找至全局作用域，而全局作用中this指向window\n\n\nconst c={\n    add:function(){\n        const adder=()=>{\n            console.log(this);\n        }\n        adder();\n    }\n};\nc.add(); // 指向c对象\n\nconst addFn=c.add;\naddFn(); // 指向window\n```\n\n3.箭头函数不适用的场景\n\n```js\n// 1.作为构造函数\n// 箭头函数没有this\n// const Person=()=>{};\n// new Person();\n\n// 2.需要this 指向调用对象的时候\ndocument.onclick=()=>{\n    console.log(this); //此时会指向window对象\n}\n// 3.需要使用arguments时\nfunction add(){\n    console.log(arguments);\n}\nadd(1,2); //[1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]\nconst addFn=()=>{\n    console.log(arguments);\n}\naddFn(); //会报错\n```\n\n4.箭头函数的应用\n\n如果代码写成下面这样，程序执行会有问题，因为`setInterval`中的回调函数中的`this`会指向`window`对象，导致无法进行加法。\n\n```html\n<button id=\"btn\">开始</button>\n<span id=\"result\">0</span>\n<script>\n    const btn=document.getElementById(\"btn\");\n    const result=document.getElementById(\"result\");\n    const timer={\n        time:0,\n        start:function(){\n            btn.addEventListener(\n                \"click\",function(){\n                    setInterval(function(){\n                        console.log(this);\n                        this.time++;\n                        result.innerHTML=this.time;\n                    },1000);\n                }\n            ,false);\n        }\n    }\n    timer.start();\n</script>\n```\n\n常规的解决是备份`this`。\n\n```js\nconst timer={\n    time:0,\n    start:function(){\n        var self =this;\n        btn.addEventListener(\n            \"click\",function(){\n                setInterval(function(){\n                    console.log(this);\n                    self.time++;\n                    result.innerHTML=self.time;\n                },1000);\n            }\n        ,false);\n    }\n}\n timer.start();\n```\n\n但是可以使用**箭头函数**来解决这个问题，箭头函数本身没有`this`，所以它会向外层的作用域链查找`this`。\n\n注意，此时也要把`addEventListener`中的匿名函数改为箭头函数，不然`setInterval`的箭头函数会向外到`addEventListener`中的匿名函数找`this`，而该函数this为绑定的dom节点，从而`setInterval`的箭头函数会把btn（绑定的dom）当做this。\n\n```js\nconst timer={\n    time:0,\n    start:function(){\n        btn.addEventListener(\n            \"click\",()=>{\n                setInterval(()=>{\n                    console.log(this);\n                    this.time++;\n                    result.innerHTML=this.time;\n                },1000);\n            }\n        ,false);\n    }\n}\n timer.start();\n```\n\n将这两个部分都改为箭头函数后，`setInterval`中的匿名函数最终会在`start()`方法找`this`。\n\n而注意到最后会调用`timer.start()`，所以start()中的this就是指向`timer`, 因此 `this.time++;` 和`result.innerHTML=this.time;` 这两句中的`this` 指向的就是`timer`。 \n\n# 解构赋值\n\n## 数组解构赋值\n\n![image-20210603194723759](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194725.png)\n\n![image-20210603194752249](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194753.png)\n\n![image-20210603194903992](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194905.png)\n\n![image-20210603195036092](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603195037.png)\n\n### 1.解构赋值的定义\n\n解析某一数据的结构，将想要的东西提取出来，赋值给变量或常量。\n\n```javascript\nconst arr = [1, 2, 3];\n// const a=arr[0];\n// const b=arr[1];\n// const c=arr[2];\nconst [a, b, c] = [1, 2, 3];\nconsole.log(a, b, c); //1 2 3\n```\n\n```javascript\n// 模式(结构)匹配,索引值相对应\nlet [a,b,c]=[1,2,3];\n\n// 如果想要取出1,5,3\nconst [d,[,,e],f]=[1,[2,4,5],3];\nconsole.log(d,e,f); //1 5 3\n```\n\n### 2.解构赋值的默认值\n\n只有当一个数组成员严格等于（===） undefined时，它的的默认值才会生生效。如果默认值是表达式时，默认值表达式是惰性求值的。\n\n```javascript\nconst [a, b] = []; //a=undefined,b=undefined\nconst [c = 1, d = 2] = []; //1 2\n\n//只有当一个数组成员严格等于（===） undefined时，对应的默认值才会生生效。\nconst [e = 1, f = 2] = [3, 4] //3,4\nconst [i = 2, j = 6] = [5] //5 6\nconsole.log(a, b, c, d, e, f, i, j); //undefined undefined 1 2 3 4 5 6\n\n// 如果默认值是表达式时，默认值表达式是惰性求值的\nconst func = () => {\n    console.log(\"我被执行了\")\n    return 2;\n};\nconst [x = func()] = [1]; // 此时函数func并没有执行\nconst [y=func()]=[];\nconsole.log(x,y); //1 2 \n```\n\n### 3.解构赋值的应用\n\n#### 类数组可以进行解构赋值\n\n```javascript\n// 1.常见的类数组的解构赋值\n// arguments\nfunction func(){\n    const [a,b]=arguments;\n    console.log(a,b); //1 2\n}\nfunc(1,2); \n\n// NodeList\nconsole.log(document.querySelectorAll('p')); //NodeList(3) [p, p, p]\nconst [p1,p2,p3]=(document.querySelectorAll(\"p\"));\nconsole.log(p1,p2,p3);\n```\n\n#### 函数参数的解构赋值\n\n```javascript\nconst array=[1,2];\n// 不用解构赋值参数的写法如下\n// const add=arr=>arr[0]+arr[1];\n// 使用解构赋值\nconst add=([x,y])=>x+y;\nconsole.log(add(array)); //3 \n\n//还可以给形参添加默认值\nconst add1=([x=1,y=3])=>x+y;\nconsole.log(add1([])); //4\n```\n\n#### 交换变量的值\n\n```javascript\nlet x=1 ,y=2;\n//相当于[x,y] =[2,1]，而不是右边的y赋值给x，x赋值给y\n[x,y]=[y,x];\nconsole.log(x,y); //2 1\n```\n\n## 对象解构赋值\n\n1.模式匹配，属性名相同的完成赋值，不需要按照顺序\n\n```javascript\n// 1.模式匹配，属性名相同的完成赋值，不需要按照顺序\n//简写形式\nconst {age,name}={name:\"alex\",age:18};\nconsole.log(age,name); //18 \"alex\"\n// 完整形式\nconst {age:age1,name:name1}={name:\"alex\",age:18};\nconsole.log(name1,age1); //alex 18\n```\n\n2.对象解构赋值的注意事项\n\n```javascript\n// 1.默认值的生效条件\n// 对象的数值值严格等于undefined时，对应的默认值才会生效\nconst {name } = { name: \"alex\"};\nconsole.log(name); //\"alex\"\n// 注意默认值的赋值是用等号，而不是用冒号\nconst {name1=\"billie\",age=0}={};\nconsole.log(name1);\n// 2.如果默认值是表达式，默认值表达式是惰性求值的\n\n// 3.将一个已经声明的变量用于解构赋值\nlet x=1;\n// {x}={x:3}; 会报错，和解决箭头函数的单行语句的返回值是对象一样，在整个外层加上括号\n({x}={x:3});\nconsole.log(x); //3\n\n// 4.可以取到继承的属性\nconst {toString}={};\nconsole.log(toString);// 并没有输出undefined\n// toString的属性继承自Object\nconsole.log(Object.prototype);\nconst {a}={};\nconsole.log(a); //undefined\n```\n\n3.对象解构赋值的应用\n\n```jsx\n// 函数参数的解构赋值\n//const info=user=>console.log(user.name,user.age);\nconst info=({age,name})=>console.log(age,name);\ninfo({name:\"hh\",age:12});\n```\n\n## 其他数组类型的解构赋值\n\n1.字符串的解构赋值\n\n```jsx\n//数组形式的解构赋值\nconst [a,b,,,c]=\"hello\";\nconsole.log(a,b,c); //h e o\n// 对象形式解构赋值\nconst {0:x,1:y,length}=\"hello\";\nconsole.log(x,y,length); //h e 5\n```\n\n2.数值和布尔值的解构赋值(只能按照对象形式解构赋值), 会自动将右侧的数值或布尔值转换为对象\n\n```jsx\nconst {aa,toString}=123;\nconsole.log(aa,toString); //toString属性是继承而来的\n```\n\n3.undefined和null的解构赋值会报错\n\n```jsx\n// 由于undefined和null，无法转化为对象，所以对它们进行解构赋值都会报错\nconst {ff}=undefined;\nconsole.log(ff); //报错\n```\n\n\n\n# 简介表示\n\n## 属性和方法的简洁表示\n\n### 1.属性的简洁表示\n\n当键名和变量名(常量名)一样的时候，可以只写一个。\n\n```javascript\nconst age=19;\nconst person1={\n    // age:age, 直接写age\n    age,\n}        \nconsole.log(person1.age);\n```\n\n### 2.方法的简洁表示\n\n```javascript\nconst person2={\n    // speak:function(){}\n    speak(){}\n}\n```\n\n## 方括号语法\n\n```js\n// 1.方括号语法\nconst prop=\"age\";\nconst person={};\nperson[prop]=18; // {age:18}\n// ES6新增如下\nconst person1={\n    [prop]:19\n}\n\n// 2.方括号可以放[值或者计算可以得到的值(表达式)]\nconst prop1=\"age\";\nconst func=()=>'gender';\nconst person2={\n    [prop1]:18,\n    [func()]:'female'\n}\n// {age: 18, gender: \"female\"}\n\n// 3.方括号语法和点语法的区别\n// 点语法是方括号语法的特殊形式\nconst person3=[];\n// perosn.age 等价于 person['age']\n```\n\n# 函数默认参数值\n\n**函数默认参数**允许在没有值或`undefined`被传入时使用默认形参。只有在①不传参数 ②明确传递undefined作为参数 这两种情况下,默认值才会生效。\n\n### 1.基本概念\n\n```js\n// 1.函数参数的默认值\nfunction multiply(a,b=1){\n    return a*b;\n}\nconsole.log(multiply(3) ) //3\n\n// 2.默认值的生效\n// ①不传参数 ②明确传递undefined作为参数 只有这两种情况下,默认值才会生效\nconsole.log(multiply(2,undefined)); //2\nconsole.log(multiply(2,\"\")); //2*\"\" 最后结果会被隐形转换为0\n\n// 3.默认值表达式\n// 如果默认值是表达式，默认值表达式是惰性求值的\n\n\n// 4.设置默认值的小技巧\n// 函数参数的默认值最好从参数列表的右边开始设置。\n\nconst multiply2=(x=1,y)=>x*y;\n// 此时如果想要使用第一个默认值，必须明确传递undefined\nconsole.log(multiply(undefined,2))\n```\n\n### 2.函数默认参数的应用\n\n```js\n// 1.接收多参数，如果按照默认写法，传参的时候需要记住参数顺序\nconst user=(name=\"zhangsan\",age=12,gender=\"female\")=>\n    console.log(name,age,gender);\nuser(\"alex\",18,'male');\n\n// 2. 法一：接收一个对象作为参数\nconst user1=option=>console.log(\n    option.name,option.age,option.gender);\nuser1({\n    name:'alex',\n    age:18,\n    gender:\"male\"\n});\n\n// 3.法二：解构赋值的默认值\nconst user2=({name=\"zhangsan\",age=12,gender=\"female\"})=>\nconsole.log(name,age,gender);\n\nuser2({name:\"alex\"});\n// 但是不能什么都不传，如果什么都不传就相当于传了undefined\n// 而无法对undefined进行解构赋值\n// user2();\n\n// 4.法三：函数参数的默认值\n// 把{name=\"zhangsan\",age=12,gender=\"female\"}看为option\n// option的默认参数为{}，当无不传入参数或者传入undefined的时候\n// option={} 会把空对象赋值给option，也就是下面一行的解构赋值\n// {name=\"zhangsan\",age=12,gender=\"female\"}={}\n\nconst user3=({name=\"zhangsan\",age=12,gender=\"female\"}={})=>\nconsole.log(name,age,gender);\nuser3(); //此时不会报错\n```\n\n# 剩余参数与展开语法\n\n## 剩余参数\n\n### 剩余参数定义\n\n**剩余参数**语法允许我们将一个不定数量的参数表示为一个数组。\n\n```js\n// 1.认识剩余参数\n// 当不知道参数有多少个，可以用省略号代替，省略号后面接参数名\nconst add1=(x,y,z,...args)=>{};\n\n// 2.剩余参数的本质，剩余参数是一个数组，如果没有值则是空数组\nconst add2=(x,y,z,...args)=>{\n    console.log(x,y,args);\n};\nadd2(1); //1 undefined []\nadd2(1,2,3,4,5,6);  //1 2 [4, 5, 6]\n\n// 3.箭头函数与剩余参数\n// 箭头函数的参数部分即使只有一个剩余参数，也不能省略括号\nconst add3=(...args)=>{};\n\n// 4.使用剩余参数替代arguments获取实际参数\nconst add4=function(){\n    // 记住箭头函数没有arguments，因为它没有this\n    // arguments是类数组，而剩余参数是个数组\n    console.log(arguments);\n}\nadd4(1,2);\n\nconst add5=(...args)=>{\n    console.log(args);\n}\n// 5.剩余参数的位置\n// 剩余参数只能作为最后一个参数\n```\n\n### 剩余参数应用\n\n```js\n// 1.add函数\nconst add=(...args)=>{\n    let sum=0;\n    for(let i=0 ;i<args.length;i++){\n        sum+=args[i];\n    }\n    return sum;\n};\nconsole.log(add(1,2,3,4));\n// 使用reduce方法\nconst add_reduce=(...args)=>{\n    return args.reduce((total,currentValue)=>{ return total+currentValue});\n};\nconsole.log(add_reduce(1,2,3,4,5,9));\n\n\n// 2.与解构赋值结合使用\n// 当剩余参数不是作为函数的参数时，剩余参数叫做剩余元素(Rest element)\n\n// 剩余元素+数组解构赋值\nconst [num,...args]=[1,2,3,4];\nconsole.log(num,args); //1 [2, 3, 4]\n\n// 剩余参数+数组解构赋值+箭头函数\nconst func=([num,...args])=>{};\nfunc([1,2,3]);\n\n// 剩余元素+对象解构赋值\n// 此时剩余元素为数组\nconst {x,y,...z}={x:1,b:2,y:3,d:4};\nconsole.log(x,y,z); //1 3 {b: 2, d: 4}\n\n// 剩余参数+对象解构赋值+箭头函数\nconst fun=({m,n,...o})=>{\n    console.log(m,n,o);\n};\nfun({m:1,n:3,p:3,z:8});\n```\n\n## 展开语法\n\n**展开语法(Spread syntax),** 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开。\n\n### 基本概念\n\n```js\n// 1.展开语法\nconsole.log(Math.min(...[3,1,2])); // 相当于Math.min(3,1,2);\n\n// 2.展开语法和剩余参数的区别\n// 展开语法[3,1,2]->3,1,2\n// 剩余参数 (3,1,2)->[3,1,2]\n\n// 剩余参数\nconst add=(...args)=>{\n    // 展开语法\n    console.log(...args);\n};\nadd(1,2,3);\n```\n\n### 展开语法的应用\n\n```js\n// 1.复制数组\nconst a = [1, 2, 3];\nconst b = a;\nconsole.log(a === b); //true 引用\n\nconst c = [...a]; //等价于const c=[1,2,3];\nconsole.log(a === c); //false\n\n// 2.合并数组\nconst m=[1,2];\nconst n=[3,4,5];\nconst i=[7,...m,...n]; \nconsole.log(i); //[7,1, 2, 3, 4, 5]\n\n// 3.字符串转数组\nconsole.log(...\"app\"); // console.log(\"a\",\"b\",\"c\");\nconsole.log([...\"apple\"]); // [\"a\", \"p\", \"p\", \"l\", \"e\"]\n\n// 4.常见的类数组转数组\n// arguments\nfunction func(){\n    console.log(...arguments); //console.log(1,2,3);\n    console.log([...arguments]);\n}\nfunc(1,2,3);\n// NodeList\nconsole.log([...document.querySelectorAll(\"p\")]);\n```\n\n### 对象展开\n\n对象的展开就是相当于把对象的所有属性罗列出来。\n\n```js\n// 1.展开对象\n// 对象的展开就是相当于把对象的所有属性罗列出来\n// 对象必须在{}中展开，不能直接展开\nconst apple={\n    color:\"red\",\n    taste:\"sweet\"\n}\nconsole.log({...apple}); //{color:\"red\",taste:\"sweet\"}\n\n// 2.合并对象\n//新对象拥有全部的属性，相同属性，后者会覆盖前者 \nconst banana={\n    color:\"yellow\",\n    category:\"fruit\"\n}\nconsole.log({...apple,...banana});\n// {color: \"yellow\", taste: \"sweet\", category: \"fruit\"}\n```\n\n### 对象展开的注意事项\n\n```js\n// 1.空对象的展开\n// 如果展开空对象，是没有任何效果\n// 对象的展开，相当于把所有对象的属性罗列出来\nconsole.log({...{}}); //{}\n\n// 2.非对象的展开\n// 如果展开的不是对象，则自动会将其转为对象，再将其罗列出来\nconsole.log({...1}); //{} 1转为对象后，并没有属性罗列\nconsole.log({...null}); //{}\nconsole.log({...\"alex\"}); //{0: \"a\", 1: \"l\", 2: \"e\", 3: \"x\"}\nconsole.log({...[1,2]}); //{0: 1, 1: 2}\n\n\n// 3.含对象属性的对象的\n// 对象属性不会继续被展开\nconst apple={\n    feature:{\n        taste:\"甜\"\n    }\n};\nconst pen={\n    feature:{\n        color:\"black\"\n    },\n    use:\"写字\"\n}\nconsole.log({...apple}); //{feature: {…}}\nconsole.log({...apple,...pen}); //{feature: {…}, use: \"写字\"}\n```\n\n### 对象展开的应用\n\n```js\n// 1.复制对象\nconst a={x:1,y:2};\nconst b={...a};\nconsole.log(a===b); //false\n\n// 2.用户参数和默认参数\n// 法一： 解构赋值+函数默认参数\nconst user1=({name=\"zhangsan\",age=0,gender=\"male\"}={})=>{\n    console.log(name,age,gender);\n};\n// 法二: 对象展开 +解构赋值\nconst user2=userParm=>{\n    const defaultParm={name:\"zhangsan\",age:0,gender:\"male\"};\n    // 合并默认参数和用户参数，还可以对结果进行解构\n    const {name,age,gender}={...defaultParm,...userParm};\n    console.log(name,age,gender);\n}\n```\n\n# Set与Map\n\n## Set\n\nSet是一系列**无序、没有重复值**的数据集合。 Set 对象允许你存储任何类型的**唯一值**，无论是原始值或者是对象引用。\n\n```js\n//创建Set\nconst s=new Set();\n```\n\n### Set实例的属性和方法\n\n#### 1.add方法\n\n在`Set`对象尾部添加一个元素，返回该`Set`对象。\n\n```js\n//创建Set\nconst s=new Set();\ns.add(1);\ns.add(3);\ns.add(4).add(5);  //Set(4) {1, 3, 4, 5}\n```\n\n#### 2.has方法\n\n返回一个布尔值，表示该值在`Set`中存在与否。\n\n```js\nconsole.log(s.has(1)); //true\n```\n\n#### 3.delete 方法\n\n移除`Set`中指定的元素。\n\n```js\ns.delete(1); //删除元素1\n```\n\n#### 4.clear方法\n\n移除`Set`对象内的所有元素。\n\n```js\ns.clear();\n```\n\n#### 5.forEach()方法\n\n`forEach` 方法会根据集合中元素的插入顺序，依次执行提供的回调函数。\n\n```js\n// 按照成员添加进集合的顺序遍历的\n// 回调函数后面的参数是用来改变上下文的\ns.forEach(function(value,key,set){\n    // 在set中，value与key是等价的\n    console.log(value,key,set);\n},document);\n\n```\n\n### 6.size属性\n\n判断Set实例中有多少元素。\n\n### Set的构造函数\n\n```js\n// 1.数组\nconst s =new Set([1,2,3,1]);\nconsole.log(s);  //Set(3) {1, 2, 3}\n\n// 2.字符串、arguments、NodeList、Set\n//字符串做参数\nconsole.log(new Set(\"hi\")) //Set(2) {\"h\", \"i\"}\n\n//arguments做参数\nfunction fun(){\n    console.log(new Set(arguments));\n}\nfun(1,2,1);\n//NodeList做参数\nconsole.log(new Set(document.querySelectorAll('p'))); \n//Set(3) {p, p, p}\n\n// Set实例做参数\nconsole.log(new Set(s));\n//Set(3) {1, 2, 3}\n\n// 和原来完全相同，但不等于原来的，相当于复制。\nconsole.log(new Set(s)===s); \n//false\n```\n\n## Set重复判定方式\n\nSet 对重复值的判断基本遵循严格相等(===)， 但是对于NaN的判断与===不同，Set中NaN等于NaN。\n\n```js\n// Set实例会把2个NaN看做相等的元素\nconsole.log(NaN===NaN ); //false\nconsole.log(new Set([NaN,2,NaN]));\n//Set(2) {NaN, 2}\n\n\nconst s=new Set();\ns.add({}).add({});\nconsole.log(s); //此时s中有2个空对象\n```\n\n## Set应用\n\n```js\n// 1.数组或字符串去重时\n//Set(3) {1, 2, 3}\nconst s=new Set([1,2,2,3,2,1]);\nconsole.log(s);\n\n// 再将Set实例转换为数组\n// ①使用forEach\nlet arr=[];\ns.forEach((value)=>arr.push(value));\n// ②使用展开语法\nconsole.log([...s]);\n\n// 2.字符串去重\nconst s1=new Set('abbacd');\n// 将s1转为数组后，再用数组的join方法转为字符串\nconsole.log([...s1].join(\"\"));\n\n// 3.存放dom元素\nconst s2=new Set(document.querySelectorAll(\"p\"));\n// 使用forEach改变p标签文本颜色\ns2.forEach((elem)=>elem.style.color='red');\n```\n\n\n\n## Map\n\n### 定义\n\n**`Map`** 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者[原始值](https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive)) 都可以作为一个键或一个值。\n\n```js\n// 1.Map和对象本质上都是键值对的集合\n// 对象\nconst person={\n    name:\"alex\",\n    age:19\n}\n// Map\nconst m=new Map();\nm.set('name','alex');\nm.set('age',18);\nconsole.log(m);\n\n// 2.Map和对象的区别\n// 对象一般使用字符串当做键\nconst obj={\n    name:'alex'\n}\n\n// Map的键可以为基本数据类型，也可以为引用数据类型。\n// 基本数据类型：数字、字符串、布尔值、undefined、null\n// 引用数据类型：对象、数组、Set、Map、函数等\nconst mm=new Map();\nmm.set(true,'true');\nmm.set({},'object');\nmm.set(new Set([1,2]),'set');\nconsole.log(mm);\n// {true => \"true\", {…} => \"object\", Set(2) => \"set\"}\n```\n\n### 方法和属性\n\n```js\n// 1.set方法\n// 使用set添加的新成员，键如果已经存在，后添加的键值对覆盖已有的\nconst m=new Map();\nm.set(\"age\",18).set(true,\"true\").set(\"age\",20);\nconsole.log(m);\n\n// 2.get方法，用于获取指定成员\nconsole.log(m.get('age')); //20\nconsole.log(m.get(true)); //true\n\n// 3.has方法 用于判断是否有指定的键\nconsole.log(m.has('age'));\n\n// 4.delete方法\n// 删除不存在的成员，什么都不会发生，也不会报错\nm.delete('age');\nconsole.log(m);\n\n// 5.clear方法 删除所有的成员\nm.clear();\n\n// 6.forEach()方法\nconst mm=new Map();\nmm.set(\"age\",12).set(\"gender\",\"male\").set(\"name\",\"xiaoming\");\nmm.forEach((value,index,map)=>console.log(value,index,map==mm));\n// 12 \"age\"  true\n// male gender true\n// xiaoming name true\n\n// 7.size属性\nconsole.log(mm.size); //3\n```\n\n### Map构造函数的参数\n\n```js\n// 1.只能传二维数组，必须体现键和值\nconst m1=new Map([[\"name\",\"alex\"],[\"age\",18]]);\nconsole.log(m1);\n// Map(2) {\"name\" => \"alex\", \"age\" => 18}\n\n// 2.Set, Map等\n// Set中也必须体现键和值\nconst s=new Set([[\"gender\",\"male\"],[\"name\",\"xiaoming\"]]);\nconst m2=new Map(s);\nconsole.log(m2); \n//Map(2) {\"gender\" => \"male\", \"name\" => \"xiaoming\"}\n\nconst m3=new Map(m1);\nconsole.log(m3, m3==m1);\n//Map(2) {\"name\" => \"alex\", \"age\" => 18} false\n```\n\n### Map注意事项\n\n```js\n// 1.Map中判断键名是否相同\n// 基本遵循严格相等(===)\n// 例外就是Map中NaN等于NaN\n\nconst m1=new Map();\nm1.set(NaN,1).set(NaN,2);\nconsole.log(m1); //Map(1) {NaN => 2}\n\n// 2.什么时候使用Map什么使用对象\n// 2.1如果只需要Key->Value结构\n// 2.2或者需要除了字符串以为的值做键，使用Map更合适\n// 只有模拟现实世界的实体的时候才会使用对象\n```\n\n```html\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<script>\nconst [p1, p2, p3] = document.querySelectorAll('p');\n// 二维数组做Map构造函数的参数\nconst m = new Map([\n    [p1, { color: \"red\", backgroundColor: \"yellow\", fontSize: \"20px\" }],\n    [p2, { color: \"pink\", backgroundColor: \"orange\", fontSize: \"20px\" }],\n    [p3, { color: \"green\", backgroundColor: \"blue\", fontSize: \"20px\" }]\n]);\nm.forEach((value, key) => {\n    for(const p in value){\n        // 有点难理解，多想想还是能理解的\n        key.style[p]=value[p];\n    }\n});\n</script>\n```\n\nSeT/Map总结\n\n![image-20210610175416433](https://i.loli.net/2021/06/10/xEzm7YcGRnAQhOs.png)\n\n![image-20210610175506099](https://i.loli.net/2021/06/10/E1XHQBYURp8IgjC.png)\n\n![image-20210610175655315](https://i.loli.net/2021/06/10/JNXSG9yTZjbPFdK.png)\n\n![image-20210610175710050](https://i.loli.net/2021/06/10/aXh4TLvYSuf1qQE.png)\n\n![image-20210610175745097](https://i.loli.net/2021/06/10/FOBbacWuGtU1I23.png)\n\n![image-20210610175848667](https://i.loli.net/2021/06/10/drQIFyD9Gmx2YJ7.png)\n\n# Iterator\n\n![image-20210610180620847](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610180623.png)\n\n### 定义\n\nIterator是如下的过程：Symbol.iterator(可遍历对象的生成方法)->it(可遍历对象)->next()->next()->(知道done为true)\n\n```js\n// 数组的.__proto__原型中有Symbol.iterator这个方法\n// 而这个方法不符合命名规范，因此用方括号来调用。\n\n// Symbol.iterator 可遍历对象的生成方法\n// it：可遍历对象 (可迭代对象)\nconst it = [1, 2][Symbol.iterator]();\nconsole.log(it); //Array Iterator {}\n\n// value表示值，done表示遍历还没有完成\nconsole.log(it.next());//{value: 1, done: false}\nconsole.log(it.next()); //{value: 2, done: false}\nconsole.log(it.next()); //{value: undefined, done: true}\n\n\n```\n\n为什么需要Iterator遍历器\n\n遍历数组： for循环、forEach方法 ，遍历对象：for in循环。Iterator 遍历器是一个统一的遍历方式\n\n### for of 用法\n\nfor of将下面Iterator过程封装起来。\n\n```js\nconst arr=[1,2,3];\nconst it =arr[Symbol.iterator]();\nlet next=it.next();\nwhile(!next.done){\n    console.log(next.value);\n    next=it.next();\n}\n```\n\nfor of循环只会遍历出那些done为false时对应的value值\n\n```js\nfor(let i of arr){\n    console.log(i);\n}\n```\n\nfor of可以和break、continue一起使用\n\n```js\nconst arr2=[4,5,6,7,8];\nfor (let i of arr2){\n    if(i===7){\n        break;\n    }\n    console.log(i);\n}\n```\n\n在for of循环中获取索引值\n\n```js\n// keys()得到的是索引的可遍历对象，可以遍历出索引值\nconst arr3=['a','b','c','d'];\nfor(let keys of arr3.keys()){\n    console.log(keys); //\n}\n// values()得到的是值的可遍历对象，可以遍历出值\nfor(let value of arr3.values()){\n    console.log(value); // a b c d\n}\n// entries()可以得到索引和值组成的数组的可遍历对象\nfor(let entries of arr3.entries()){\n    console.log(entries);\n}\n// 结合解构赋值\nfor(let [index, value] of arr3.entries()){\n    console.log(index,value);\n}\n```\n\n### 可遍历\n\n只要有Symbol.iterator方法，并且这个方法可以生成可遍历对象，就是可遍历的。\n\n只要可遍历，就可以使用for...of循环来统一遍历。\n\n#### 原生可遍历\n\n数组、字符串、Set、Map、arguments、NodeList这些原生可遍历。\n\n```js\nfor(const i of [1,2,3]){\n    console.log(i);\n} // 1 2 3\n\nfor(const i of new Set([4,5,6])){\n    console.log(i);\n} // 4 5 6\n\nfor(const i of document.querySelectorAll('p')){\n    console.log(i);\n    i.style.color='red';\n}\n```\n\n#### 非原生可遍历\n\n没有Symbol.iterator属性的，可以为它手动添加该属性就可以使用for...of循环了。\n\n1.一般的对象\n\n```js\nconst person ={age:18,sex:'male'};\n// 给一般的对象手动添加Symbol.iterator属性\nperson[Symbol.iterator]=()=>{\n    let index=0;\n    return {\n        next(){\n            index++;\n            if(index===1){\n                return{\n                    value:person.age,\n                    done:false\n                }\n            }else if(index===2){\n                return{\n                    value:person.sex,\n                    done:false\n                }\n            }else{\n                return{\n                    value:undefined,\n                    done:true\n                }\n            }\n        }\n    }\n};\nfor(let item of person){\n    console.log(item);\n}\n```\n\n2.有length和索引值的对象\n\n```js\nconst obj={\n    0:'alex',\n    1:'male',\n    length:2\n}\nobj[Symbol.iterator]=()=>{\n    let index=0;\n    return {\n        next(){\n            let value,done;\n            if(index<obj.length){\n                value=obj[index];\n                done=false\n            }else{\n                done=true;\n            }\n            index++;\n            return{\n                value,\n                done\n            }\n        }\n    }\n}\n\n// 或者直接使用数组原型链的Symbol.iterator属性\nobj[Symbol.iterator]=Array.prototype[Symbol.iterator];\n\nfor(let i of obj){\n    console.log(i);\n}\n```\n\n### 使用Iterator的场合\n\n 1.数组的展开运算符\n\n只要是原生可遍历的，就可以使用数组的展开运算。数组、字符串、Set、Map、arguments、NodeList这些原生可遍历。\n\n```js\nconsole.log(...[1,2,3]); //1 2 3\nconsole.log(...\"str\"); // s t r\nconsole.log(...new Set([1,2,3]));\n```\n\n2.数组的解构赋值\n\n只要是原生可遍历的，就可以使用数组的进行解构赋值。因为可以在解构赋值前，进行展开运算让其变为数组。\n\n```js\n\nconst [a,b]=[1,2];\n// 在解构赋值前，\"hi\"进行了展开运算 [...\"hi\"]\nconst [c,d]=\"hi\";\nconst [e,f]=new Set([7,8]);\nconsole.log(a,b,c,d,e,f);\n\n```\n\n### Iterator总结\n\n![image-20210610222129343](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222130.png)\n\n![image-20210610222156497](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222157.png)\n\n![image-20210610222304196](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222305.png)\n\n![image-20210610220808524](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222325.png)\n\n\n\n# ES6新增方法\n\n## 字符串的新增方法\n\n### includes()\n\n**`includes()`** 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。\n\n```js\n// 1.基本用法\nconsole.log('abc'.includes('a')); //true\nconsole.log('abc'.includes('ab')); //true\nconsole.log('abc'.includes('ac')); //false\n\n// 2.第二个参数\n// 表示开始搜索的位置，默认是0\nconsole.log('abc'.includes('a',1));//false\n```\n\n### padStart()和padEnd()\n\n**`padStart()`** 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。\n\n> ```js\n> str.padStart(targetLength [, padString])\n> ```\n\n`targetLength`\n\n当前字符串需要填充到的目标长度。**如果这个数值小于当前字符串的长度，则返回当前字符串本身。**\n\n`padString` 可选\n\n填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 \" \"（空格）。\n\n```js\n'abc'.padStart(10);         // \"       abc\"\n'abc'.padStart(10, \"foo\");  // \"foofoofabc\"\n'abc'.padStart(6,\"123465\"); // \"123abc\"\n'abc'.padStart(8, \"0\");     // \"00000abc\"\n'abc'.padStart(1);          // \"abc\"\n```\n\n**`padEnd()`** 方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。\n\n### trimStart()和trimEnd()\n\n**`trimStart()`** 方法从字符串的开头删除空格。`trimEnd() `方法从一个字符串的末端移除空白字符。**`trim()`** 方法会从一个字符串的两端删除空白字符。\n\n`trimLeft()` 是`trimStart()`的别名。`trimRight()` 是`trimEnd() `的别名。\n\n```js\nconst s=\"   abc  \";\nconsole.log(s.trimStart()); //\"abc  \"\nconsole.log(s.trimEnd()); //\"   abc\"\nconsole.log(s.trim()); //\"abc\"\nconsole.log(s); //\"   abc  \"\n```\n\n## 数组新增方法\n\n### includes()\n\n`includes()` 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。\n\n> ```js\n> arr.includes(valueToFind[, fromIndex])\n> ```\n\n`valueToFind`\n\n需要查找的元素值。**Note:** 使用 `includes()`比较字符串和字符时是区分大小写。\n\n`fromIndex` 可选\n\n从`fromIndex` 索引处开始查找 `valueToFind`。如果为负值，则按升序从 `array.length + fromIndex` 的索引开始搜 。如果计算出的索引小于 0，则整个数组都会被搜索。默认为 0。\n\n```js\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n```\n\n### Array.from()\n\n`Array.from()` 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n\n> ```js\n> Array.from(arrayLike[, mapFn[, thisArg]])\n> ```\n\n`arrayLike`\n\n想要转换成数组的伪数组对象或可迭代对象。\n\n`mapFn` 可选\n\n如果指定了该参数，新数组中的每个元素会执行该回调函数。\n\n`thisArg` 可选\n\n可选参数，执行回调函数 `mapFn` 时 `this` 对象。\n\n```js\n//从 String 生成数组\nArray.from('foo');\n// [ \"f\", \"o\", \"o\" ]\n\n//从Set生成数组\nconst set = new Set(['foo', 'bar', 'baz', 'foo']);\nArray.from(set);\n// [ \"foo\", \"bar\", \"baz\" ]\n[...new Set([1,2,3])]; //使用展开语法会更方便\n\n//从 Map 生成数组\nconst map = new Map([[1, 2], [2, 4], [4, 8]]);\nArray.from(map);\n// [[1, 2], [2, 4], [4, 8]]\n\nconst mapper = new Map([['1', 'a'], ['2', 'b']]);\nArray.from(mapper.values());\n// ['a', 'b'];\n\nArray.from(mapper.keys());\n// ['1', '2'];\n```\n\n拥有length的任意对象都可以通过Array.from()转换为数组。\n\n```js\nconst obj={length:2};\nconsole.log(Array.from(obj)); \n// [undefined, undefined]\n\nconst obj1={length:2,0:\"liu\",1:\"jiaqi\",3:\"haha\"};\nconsole.log(Array.from(obj1)); //[\"liu\", \"jiaqi\"]\n```\n\n在Array.from()中使用箭头函数\n\n作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组中。\n\n```js\n// 在Array.from()中使用箭头函数\n// 作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组中。\nconsole.log([1,2,3].map((value)=>value*2)); //2 4 6\n\nconsole.log(Array.from({length:4},(value,index)=>value=index*2));\n// 0 2 4 6\n```\n\n### find()和findIndex()\n\n `find()` 方法返回数组中满足提供的测试函数的**第一个元素**的值，否则返回undefined。\n\n`findIndex()`方法返回数组中满足提供的测试函数的第一个元素的**索引**。若没有找到对应元素则返回-1。\n\n> ```js\n> arr.find(callback[, thisArg])\n> ```\n\n`callback`在数组每一项上执行的函数，接收 3 个参数：\n\n- `element`当前遍历到的元素。\n- `index`可选 当前遍历到的索引。\n- `array`可选 数组本身。\n\n`thisArg`可选,执行回调时用作`this` 的对象。\n\n```js\n//返回找到的第一个质数\nfunction isPrime(element, index, array) {\n  var start = 2;\n  while (start <= Math.sqrt(element)) {\n    if (element % start++ < 1) {\n      return false;\n    }\n  }\n  return element > 1;\n}\n\nconsole.log([4, 6, 8, 12].find(isPrime)); // undefined, not found\nconsole.log([4, 5, 8, 12].find(isPrime)); // 5\n\n```\n\n```js\n//用对象的属性查找数组里的对象\nvar inventory = [\n    {name: 'apples', quantity: 2},\n    {name: 'bananas', quantity: 0},\n    {name: 'cherries', quantity: 5}\n];\n\nfunction findCherries(fruit) {\n    return fruit.name === 'cherries';\n}\n\nconsole.log(inventory.find(findCherries)); // { name: 'cherries', quantity: 5 }\n```\n\n\n\n## 对象的新增方法\n\n### Object.assign()\n\n#### 定义\n\n`Object.assign()` 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。\n\n如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。\n\n> ```js\n> Object.assign(target, ...sources)\n> ```\n\n```js\nconst apple = {\n    color: \"red\",\n    taste: \"sweet\"\n}\n\nconst banana = {\n    color: \"yellow\",\n    category: \"fruit\"\n}\n// Object.assign直接合并到了第一个对象中，返回的就是合并后的对象\nconsole.log(Object.assign(apple,banana));\nconsole.log(Object.assign(apple,banana)===apple); \n//因为此时的apple 已经被改变了 true\n\n// 对象是引用类型的，Object.assign会直接修改第一个对象。\n// 如果想要原来的对象不被修改，可以第一个参数放空对象\nconsole.log(Object.assign({},apple,banana));\n```\n\n#### 注意事项\n\n```js\n// Object.assign(目标对象，源对象);\n// 1.基本数据类型作为源对象\n// 与对象的展开类似，先转换为对象，再合并\nconsole.log(Object.assign({},undefined)); //{}\nconsole.log(Object.assign({},null)); //{}\nconsole.log(Object.assign({},22)); //{}\nconsole.log(Object.assign({},22)); //{}\nconsole.log(Object.assign({},\"str\")); //{0: \"s\", 1: \"t\", 2: \"r\"}\n\n// 2.同名属性的替换\n// 后面的属性直接覆盖前面的属性\nconst apple = {\n    color: [\"蓝色\",\"紫色\"],\n    taste: \"sweet\"\n}\nconst banana = {\n    color: [\"红色\",\"黄色\"],\n    category: \"fruit\"\n}\nconsole.log(Object.assign(apple,banana)); //{color:[\"红色\", \"黄色\"], taste: \"sweet\", category: \"fruit\"}\n```\n\n#### 应用\n\n```js\nconst user=useroptions=>{\n    const defaults={\n        name:\"alex\",\n        age:0,\n        gender:\"male\"\n    }\n    const options=Object.assign({},defaults,useroptions);\n    console.log(options);\n};\nuser();\n```\n\n### Object.keys()、Object.values()、Object.entries()\n\n#### 用法\n\n```js\nconst person={\n    name:\"Alex\",\n    age:18\n}\nconsole.log(Object.keys(person)); // [\"name\", \"age\"]\nconsole.log(Object.values(person)); // [\"Alex\", 18]\nconsole.log(Object.entries(person)); // [ [\"name\", \"Alex\"],[\"age\", 18]]\n```\n\n#### 与数组的类似方法的区别\n\n数组的keys(), values(), entries()等方法都是实例方法，返回的都是可遍历对象。对象的Object.keys(), Object.values(),Object.values()等方法返回的都是数组。\n\n```js\n// 2.与数组类似的方法的区别\nconsole.log([1,2].keys()); // 返回可遍历对象\nconsole.log([1,2].values()); // 返回可遍历对象\nconsole.log([1,2].entries()); // 返回可遍历对象\n```\n\n#### for...of\n\n```js\nconst person={\nname:\"Alex\",\nage:18\n}\n\nfor (const [key,value] of Object.entries(person)){\n    console.log(key,value)\n}\n\n// Object.keys(), Object.values(), Object.entires()\n// 这三个方法并不能保证顺序，和for...in 一样无法保证顺序\n```\n\n## 新增方法总结\n\n![image-20210611160231073](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160239.png)\n\n![image-20210611160310273](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160311.png)\n\n![image-20210611160444694](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160445.png)\n\n![image-20210611160655803](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160657.png)\n\n![image-20210611160733628](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160735.png)\n\n![image-20210611160904401](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160905.png)\n\n\n\n# Promise\n\n### 定义\n\nPromise 一般用来解决层层嵌套的回调函数(回调地狱callback hell)的问题。\n\n### 基本用法\n\n![image-20210611181350553](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611181352.png)\n\n```js\n// 1.实例化构造函数生成实例对象\n// Promise 解决的不是回调函数，而是用于解决回调地域的问题。\nconst p = new Promise((resolve, reject) => {\n    resolve({ name: 'alex' });\n    // reject(new Error(\"reason\"));\n});\nconsole.log(p);\n// 2.Promise的状态\n// Promise的状态一旦完成变化，就不会再改变了 \n// Promise有3种状态，一开始是pending(未完成),执行resolve,变成fulfilled(resolved)已成功, 执行reject，变成rejected，已失败\n// 执行resolve();\n// pending->fulfilled\n// 执行reject();\n// pending->rejected\n\n// 3.then()方法\n// 当Promise的状态变为fulfilled时，执行第一个then()方法\n// 当Promise的状态变为rejected时，执行第二个then()方法\np.then((data) => {\n    console.log(\"success\", data);\n}, (err) => {\n    console.log(\"error\",err);\n});\n\n// 4.resolve和reject函数的参数\n// 执行resole或者reject函数所传的参数，可以被then中的回调函数接收\n```\n\n### then()\n\n![image-20210611183459134](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611183500.png)\n\n![image-20210611183554286](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611183555.png)\n\n```js\n// 1.then()什么时候执行\n// pending->fulfilled时，执行then的第一个回调函数\n// pending->rejected时，执行then的第二个回调函数\n\n// 2.执行后的返回值\n// then()执行后返回一个新的Promise对象，返回的新的Promise对象又可以继续调用then();\nconst p =new Promise((resolve,reject)=>{\n    reject();\n});\n// 在then()的回调函数中，return后面的东西，会用Promise包装一下\n// return undefined 等价于 return new Promise((resolve)=>{resolve(undefined);});\n// then()执行后返回新的Promise对象，新的Promise对象调用then，默认会返回成功状态的Promise对象\n// 如果想要返回失败状态的Promise对象，return的时候写完整。return new Promise((resolve,reject)=>{reject();})\n\np.then(\n    ()=>{\n        console.log('success1');\n    },\n    ()=>{\n        console.log('error1');\n        return 123;\n    }\n).then(\n    (data)=>{\n        console.log('success2',data);\n    },\n    ()=>{\n        \n        console.log('error2');\n    }\n);\n\n// 3.then()方法返回的Promise对象的状态是如何改变的\n```\n\n### 使用Promise解决回调地狱\n\n```js\n// Promise 一般用来解决层层嵌套的回调函数(回调地狱callback hell)的问题\nconst move = (el, { x = 0, y = 0 } = {}, end = () => { }) => {\n    el.style.transform = `translate3d(${x}px,${y}px,0)`;\n    el.addEventListener(\n        'transitionend', () => {\n            end();\n        }, false\n    );\n};\nconst box = document.getElementById(\"box\");\n// document.addEventListener('click',()=>{\n//     move(box,{x:150},()=>{\n//         move(box,{x:150,y:150},()=>{\n//             move(box,{y:150},()=>{\n//                 move(box,{x:0,y:0});\n//             })\n//         })\n//     })\n// },false);\nconst movePromise = (el, point) => {\n    return new Promise((resolve) => {\n        move(el, point, () => {\n            resolve();\n        })\n    })\n}\n\ndocument.addEventListener('click', () => {\n    movePromise(box, { x: 150 }).then(() => {\n        return movePromise(box, { x: 150, y: 150 })\n    }).then(() => {\n        return movePromise(box, { x: 0, y: 150 })\n    }).then(() => {\n        return movePromise(box, { x: 0, y: 0 })\n    });\n}, false);\n```\n\n### catch()\n\n```js\n// 1.尽管then()方法的第一个回调函数可以传成功后执行的回调函数，第二个传失败后执行的回调函数\n// 2.但为了更好地语义化，一般只在then()中传成功后执行的，catch()传reject()后执行的回调函数\n// catch专门用来处理rejected的状态，catch的本质是then的特例\nnew Promise((resolve,reject)=>{\n    // resolve(123);\n    reject('reason');\n}).then((data)=>{\n    console.log(data);\n}).catch((err)=>{\n    console.log(err);\n    // 同样会默认返回一个成功的Promise对象。\n    // 如果想要返回一个错误的Promise对象\n    // 可以throw一个错误\n    throw new Error('errrrr');\n});\n// 3.catch()可以捕获前面的错误\n// 一般总是Promise对象后面要跟着catch方法，这样可以处理Promise内部发生的错误\n```\n\n### Promise.resolve()和Promise.reject()\n\n```js\n// 1.Promise.resolve()\n// 是成功状态Promise的一种简写形式\nnew Promise((resolve) => { resolve(\"foo\"); });\n// 简写\nPromise.resolve(\"foo\");\n\n//① 参数：一般参数\nPromise.resolve(\"foo\").then(data => console.log(data));\n//②当Promise.resolve()接收的是Promise对象时，直接返回的是这个Promise对象，什么也不做\nconst p1 = new Promise(resolve => {\n    setTimeout(resolve, 1000, \"我执行了\");\n});\nPromise.resolve(p1).then(data => {\n    console.log(data);\n})\nconsole.log(Promise.resolve(p1) === p1); //true\n// 当resolve函数接收的是Promise对象时，后面的then会根据传递的Promise对象的状态变化决定执行哪一个回调\nnew Promise(resolve => resolve(p1)).then(data => { console.log(data) });\n\n// ③具有then方法的对象，对象中的then()方法和new Promise()差不多\nconst thenable={\n    // 和new Promise()里的参数差不多\n    then(resolve, reject){\n        console.log(\"thenable\");\n        resolve(\"123\");\n    }\n}\nPromise.resolve(thenable).then(data=>console.log(data),err=>console.log(err));\n\n// 2.Promise.reject();\n// 是失败状态的一种简写形式\nnew Promise((resolve,reject)=>{\n    reject('reason');\n});\nPromise.reject('reason');\n// 不管什么参数都会原封不动的向后传递，作为后续方法的参数\nPromise.reject(p1).catch((err)=>{\n    console.log(err);\n});\n```\n\n### Promise.all()\n\n```js\n// Promise.all()用来关注多个Promise对象的状态变化\n// 可以传入多个Promise实例，包装成一个新的Promise对象返回\nconst delay=ms=>{\n    return new Promise(resolve=>{\n        setTimeout(resolve,ms);\n    })\n};\nconst p1=delay(1000).then(()=>{\n    console.log('p1 finished');\n    // return Promise.reject(\"uifsf\");\n    return '我是p1';\n});\nconst p2=delay(2000).then(()=>{\n    console.log('p2 finished');\n    return '我是p2';\n});\n// Promise.all()的状态变化与所有传入的Promise实例对象状态变化有关\n// 所有状态都变成了resolved，最终的状态才会变为resolved\n// 只要有一个变成了rejected，最终的状态才会变为rejected\n\n// 要给Promise.all()中传入数组，或者任何可遍历的参数\nconst p=Promise.all([p1,p2]);\np.then(data=>{\n    console.log(data);\n},(err)=>{\n    console.log(err);\n});\n```\n\n### Promise.race()和Promise.allSettled()\n\n```js\n// 1.Promise.race()\nconst delay=ms=>{\n    return new Promise(resolve=>{\n        setTimeout(resolve,ms);\n    });\n};\nconst p1=delay(1000).then(()=>{\n    console.log('p1 finished');\n    return \"我是p1\";\n});\nconst p2=delay(2000).then(()=>{\n    console.log('p2 finised');\n    return \"我是p2\";\n});\n// Promise.race()的状态取决于第一个完成的Promise实例对象\n// 如果第一个完成的成功了，就是最终的成功\n// 如果第一个完成的失败了，就是最终的失败\nconst racePromise=Promise.race([p1,p2]);\nracePromise.then(data=>{\n    console.log(data);\n},(err)=>{\n    console.log(err);\n});\n```\n\n```js\n// 2.Promise.allSetted()\nconst delay=ms=>{\n    return new Promise(resolve=>{\n        setTimeout(resolve,ms);\n    });\n};\nconst p1=delay(1000).then(()=>{\n    console.log(\"p1 finished\");\n    return Promise.reject(\"fjsf\");\n    // return \"我是p1\";\n});\n\nconst p2=delay(200).then(()=>{\n    console.log(\"p2 finished\");\n    return \"我是p2\";\n});\n\nconst allSettedPromise=Promise.allSettled([p1,p2]);\n// Promise.allSetted()的状态与传入的Promise的状态无关\n// 永远都是成功的，它只会忠实的记录各个Promise的表现\n\nallSettedPromise.then((data)=>{\n    console.log(\"succeed\",data);\n},(err)=>{\n    console.log(\"fail\",err);\n});\n```\n\n### 注意事项\n\n![image-20210612210200175](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210612210208.png)\n\n```js\n// 1.resolve和reject函数执行后的代码\n// 推荐在调用resolve或reject函数的时候加上return，不再执行它们后面的代码\nnew Promise((resolve, reject) => {\n    resolve(123);\n    // reject(\"reason\");\n    console.log(\"hi\"); //还可以执行\n});\n\n// 2.Promise.all/race/allSettled的参数\n// 参数如果不是Promise数组，会将不是Promise的数组元素转变成Promise对象\n// Promise.all([1,2,3]).then(datas=>{\n//     console.log(datas);\n// });\n// 等价于\nPromise.all([\n    Promise.resolve(1),\n    Promise.resolve(2),\n    Promise.resolve(3)\n]).then(data => {\n    console.log(data);\n}) //[1,2,3]\n\n// 除了数组，任何可遍历的都可以作为数组\n// 数组、字符串、Set、Map、NodeList、arguments\nPromise.all(new Set([1, 2, 3])).then(data => {\n    console.log(data);\n}) //[1,2,3]\n\n// 3.Promise.all/race/allsettled错误处理\n// 错误既可以单独处理，也可以统一处理\n// 一旦被处理，就不会再处理一遍\nconst delay = ms => {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n};\nconst p1 = delay(1000).then(data => {\n    console.log(\"p1 finished\");\n    return \"我是P1\";\n});\nconst p2 = delay(2000).then(data => {\n    console.log(\"p2 finished\");\n    return Promise.reject('rej');\n\n});\n\nconst allPromise = Promise.all([p1, p2]);\nallPromise.then((datas) => {\n    console.log(datas);\n}).catch(err => {\n    console.log(err);\n});\n```\n\nPromise应用异步加载图片\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        #img{\n            width: 80%;\n            padding: 10%;\n        }\n    </style>\n</head>\n<body>\n    <img id=\"img\" src=\"https://img.mukewang.com/szimg/5feb016d097497d905400304.jpg\" alt=\"\">\n    <script>\n        // 1.异步加载图片\n        const loadImgAsync=url=>{\n            return new Promise((resolve,reject)=>{\n                // Image()函数将会创建一个新的HTMLImageElement实例。\n                // 它的功能等价于 document.createElement('img')\n                const img=new Image();\n                // Promise函数中不用写具体过程，只需要决定用resolve还是reject即可\n                // onload 属性是一个事件处理程序用于处理Window, XMLHttpRequest, <img> 等元素的加载事件，当资源已加载时被触发。     \n                img.onload=()=>{\n                    console.log(\"sb\");\n                    resolve(img);\n                };\n                // 当一项资源（如<img>或<script>）加载失败，加载资源的元素会触发一个Event接口的error事件，并执行该元素上的onerror()处理函数。\n                img.onerror=()=>{\n                    reject(new Error(`couldn't load image at ${url}`));\n                }\n                img.src=url;\n            });\n        }\n        let url1='https://img4.mukewang.com/szimg/60b9864a09995aa605400304.png';\n        const imgDom=document.getElementById('img');\n        loadImgAsync(url1).then(img=>{\n            console.log(img.src);\n            setTimeout(()=>{\n                imgDom.src=img.src;\n            },1000);\n        }).catch(err=>{\n            console.log(err);\n        });\n    </script>\n</body>\n</html>\n```\n\n### 总结\n\n![image-20210613141548090](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141556.png)\n\n![image-20210613141645235](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141646.png)\n\n![image-20210613141717621](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141718.png)\n\n![image-20210613141849863](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141850.png)\n\n![image-20210613142007368](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142008.png)\n\n![image-20210613142050967](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142051.png)\n\n![image-20210613142135558](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142136.png)\n\n![image-20210613142150152](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142151.png)\n\n![image-20210613142216303](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142217.png)\n\n![image-20210613163042772](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163043.png)\n\n![image-20210613163153293](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163154.png)\n\n![image-20210613163219353](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163220.png)\n\n![image-20210613163245239](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163246.png)\n\n![image-20210613163303168](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163304.png)\n\n# class\n\n### 定义\n\n**class 声明**创建一个基于原型继承的具有给定名称的新类。\n\n要注意类的写法，并没有圆括号直接跟上了花括号，方法和方法之间不需要用逗号分隔。\n\n```js\n// 类可以看做是对象的模板，用一个类可以创建出许多不同的对象\n// 类名一般来说，首字母是大写的\nclass Person{\n    // 实例化时必须执行构造方法，所以必须有构造方法，但是可以不写出来\n    constructor(name,age){\n        this.name=name;\n        this.age=age;\n        // 一般只在构造方法中定义属性，方法不在构造方法中定义\n    }\n    // 各个实例共用的方法\n    speak(){\n        console.log('speak');\n    }\n}\n// 实例对象\nconst zs=new Person('张三',18);\nconst ls=new Person('ls',58);\nconsole.log(zs.speak===ls.speak); //true\n```\n\n声明的Person类本质上是一个函数，和构造函数差不多。\n\n```js\nconsole.log(typeof Person); //function\nconsole.log(Person.prototype.speak);\n```\n\n对比一下Person构造函数。\n\n```js\n// 构造函数\nfunction Person1(name,age){\n    this.name=name;\n    this.age=age;\n}\nPerson1.prototype.speak=function(){\n    console.log('speak');\n}\n```\n\n### 2种定义形式\n\n```js\n// 1.声明形式\nclass Person{\n    constructor(){\n\n    }\n    speak(){}\n}\n\n// 2.表达式形式\nconst Person1=class{\n    constructor(){\n\n    }\n};\n```\n\n### 立即执行的类\n\n类也可以像立即执行的匿名函数一样立即执行，但要记得在类前面加上关键字`new`，否则会报错。\n\n```js\n// 立即执行的类\nnew (class{\n    constructor(){\n        console.log(\"hahah\");\n    }\n})();\n\n// 立即执行函数\n// (function(){\n\n// })();\n```\n\n### 实例属性、静态方法、静态属性\n\n#### 1.实例属性\n\n实例属性一般可以用作默认值，它不能用`var`、`let`、`const`等关键字声明。\n\n```js\n// 1.实例属性\nclass Person{\n    //constructor外 不能用关键字声明属性，也不能用this\n    // 一般用作默认值\n    name=\"zhangsan\"\n    age=18;\n    // 实例方法 方法是值为函数的特殊属性\n    getAge=function(){\n        return this.age;\n    }\n    constructor(name){\n        this.name=name;\n    }\n}\nconst p=new Person('alex');\nconsole.log(p.name,p.age);// alex 18\nconsole.log(p.getAge()); //18\n```\n\n#### 2.静态方法\n\n静态方法是类的方法，不需要实例化类就能够调用。用关键字static来声明静态方法。\n\n```js\nclass Person{\n    constructor(name,sex){\n        this.name=name;\n        this.sex=sex;\n    }\n    static speak(){\n        console.log('haha...');\n        console.log(this); //this指向Person类\n    }\n    speak(){\n        console.log(\"awsl\");\n        console.log(this); //this指向实例对象\n    }\n}\n// 调用类的方法 静态方法\nPerson.speak();  //haha...\nconst xm=new Person(\"xm\",12);\nxm.speak(); //awsl\n\n//也可以把类的方法写在\n\n```\n\n# module\n\n### 定义\n\n模块是一个一个的局部作用域的代码块。模块系统可以解决①模块化的问题②消除全局变量③管理加载顺序。\n\n### 例子一\n\n一个模块即使没有导出，也可以将其导入。要注意在`script`标签中 加上 `type=\"module\"`，导入后代码会执行一遍，多次导入也仅仅会执行一遍。\n\n> exp1.html\n\n```html\n<script type=\"module\">\nimport './module.js'  //18\n</script>\n```\n\n> module.js\n\n```js\nconst age=18;\nconsole.log(age);\n```\n\n没有导出，直接导入就相当于写成:\n\n```html\n<script scr='./module.js' type='module'></script>\n```\n\n### 例子二\n\n一个模块只能有一个export default。\n\n> exp2.html\n\n```html\n<script type=\"module\">\n//可以随便取名\nimport age from 'moudle.js';\nconsole.log(age); //18\n\n</script>\n```\n> module.js\n\n```js\nconst age=18;\n// 一个模块只能有一个export default\nexport default age;\n```\n\n### 例子三\n> exp3.html\n\n```html\n<script type=\"module\">\n    // import age from './module.js'; \n    // 上面的是export default对应的import\n\n    // 法一：普通导入\n    // 不能随意命名，需要和导出的名字一样\n    // 因此无法导出匿名函数、类等\n    import {age,gender} from './module.js';\n    \n    // 法二：导入时起别名\n    import {func,userName as person} from './module.js';\n    \n    // 法三： 整体导入(会同时导入export和export default导出的)，obj为别名\n    import * as obj from './module.js';\n    console.log(age,gender,func,person);\n    console.log(obj);\n\n    // 法四：同时导入export和export default导出的参数\n    // 注意export default导出的要写在前面\n    import weight,{height} from './module.js';\n    console.log(weight,height); //56 168\n</script>\n```\n\n> module.js\n\n```js\n// 法一：export后面接声明或语句\nexport const age =18;\n\n// 法二： export后接 {argument};\nconst gender=\"male\";\nexport {gender}; //√\n// export gender; ×\n\n// 注意不能导出匿名函数或者类等\nfunction fn(){}\nclass Name{}\n\n\n// 法三：导出为别名\nexport {fn as func,Name as userName};\n\n\nexport default 56;\nexport const height=168;\n```\n\n### 注意事项\n\n1.模块顶层的`this`指向\n\n顶层是值不在for块级、function函数作用域中，直接在模块中的作用域。\n\n在模块中，顶层的this是指向undefined的。\n\n```js\nif(typeof this!=='undefined'){\n    // 如果this不为undefined，说明并不是用模块的方式来加载的\n    throw new Error(\"没有以模块的形式导入\");\n}\n```\n\n2.import和import()\n\nimport关键字具有提升效果，会提升到整个模块的头部、率先执行。也即import执行的时候，其他代码还没有开始执行。因此import和export命令只能在模块的顶层，**不能放在在代码块中执行**。\n\n```js\n\n// 会直接报错！！！\nif (PC){\n    import 'pc.js';\n}else if(mobile){\n    import 'mobile.js';\n}\n```\n\n而import()可以按条件导入，且会返回promise对象。\n\n```js\nif (PC){\n    import('pc.js').then().catch();\n}else if(mobile){\n    import('mobile.js').then().catch();\n}\n```\n\n3.先导入再导出的复合写法\n\n```js\n// 把age从别的模块导入，再又导出，相当于一个中转站\n// export {age} from './module.js'; \n// 复合写法导出的，无法在当前模块使用\n// 相当于下面的import和export语句，但是上面的复合写法age无法正常输出\nimport {age} from './module.js';\nconsole.log(age); // 可以正常输出\nexport {age} from './module.js';\nconsole.log(age); // 可以正常输出\n```\n\n### 总结\n\n![image-20210615232937033](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615232944.png)\n\n![image-20210615233123778](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233124.png)\n\n![image-20210615233157075](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233158.png)\n\n![image-20210615233228936](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233229.png)\n\n![image-20210615233313046](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233314.png)\n\n![image-20210615233403786](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233404.png)\n\n![image-20210615233451256](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233452.png)\n\n![image-20210615233557251](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233558.png)\n\n![image-20210615233651225](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233652.png)\n\n# node入门\n\n笔记内容源自：https://youtu.be/TlB_eWDSMt4\n\n在powershell中输入`code .`会用VS Code打开当前文件夹。\n\n![image-20210616170534238](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616170542.png)\n\n 首先进入到要执行js的文件夹，然后输入 node +要运行的程序名，即可运行js。\n\n在node中，没有window和document对象，但在node中有其他的对象可以操作文件、操作系统、网络等。\n\n![image-20210616171058446](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616171059.png)\n\n在浏览器中中运行JavaScript，可以通过window.setTimeout()来调用setTimeout全局函数。在node中，则可以通过global.setTimeout()来调用，变量和函数不会添加到global对象中。\n\n```js\nvar message=''; \n//在浏览器中变量message会被添加到window对象中\n//在node中变量message不会被添加到global对象中\n\nconsole.log(global.message); //undefined\n```\n\n在node中任何文件都被视为模块(module)，在文件中定义的变量或函数的作用域限制在了该文件。如果需要使用这些私有变量或函数，需要明确地export它。\n\n![image-20210616172237280](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616172238.png)\n\n任何node应用程序都至少有一个main 模块(文件)，我们称之为main module。\n\n使用require()来加载模块，require函数的参数时是目标加载模块的路径。当导出不止一个参数时，require会返回一个从目标模块导出的对象。\n\n> app.js\n\n```js\nconst logger = require('./logger')\n//{ log: [Function: log], url: 'http://mylogger.io/log' }\nconsole.log(logger);\n\n//调用另外一个模块的函数\nlogger.log(\"message\")\n```\n\n> logger.js\n\n```js\nvar  url='http://mylogger.io/log';\n\nfunction log(message){\n    // send an http request\n    console.log(message);\n}\n\n//输出的名字可以自定义\nmodule.exports.log=log;\nmodule.exports.url=url;\n```\n\n最后，console.log(logger)会输出一个对象。\n\n![image-20210617112257229](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210617112306.png)\n\n如果只需要导出一个参数，导出时可以不自定义名字，这样require函数返回的不是导出模块的参数对象，而是返回的导出模块导出的变量名或常量名。\n\n> app.js\n\n```js\nconst log = require('./logger')\n\nlog(\"message\");\n```\n\n> logger.js\n\n```js\nvar  url='http://mylogger.io/log';\n\nfunction log(message){\n    // send an http request\n    console.log(message);\n}\n\n\nmodule.exports=log;\n```\n\n# babel\n\nbabel官网： [https://babeljs.io/](https://babeljs.io/)。\n\n主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。\n\nBabel本身可以编译ES6的大部分语法，比如let、 const、箭头函数、类。但是对于ES6新增的API，比如Set、Map、 Promise等全局对象都不能直接编译，需要借助其它的模块。Babel一般需要配合 Webpack来编译模块语法。\n\n![image-20210618115716149](https://img-blog.csdnimg.cn/img_convert/c3b181a491acea93cf6d8ef6a58c848d.png)\n\n## 初始化\n\n要在项目目录文件下，在powershell中安装babel所需要的包。首先要`npm init`，初始化项目，回车后，会提示包名，注意包名不能是中文。\n\n![image-20210618120620517](https://img-blog.csdnimg.cn/img_convert/833503aaf604e173ec462d091e6c9f2a.png)\n![image-20210618120938972](https://img-blog.csdnimg.cn/img_convert/18f61389a04283749f3fe5fec2fd72fc.png)\n\n一系列回车后，项目中会多了一个package.json的文件，执行`npm init`就是为了得到这个json文件。这个json文件会记录安装的其他的包。\n\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210618121541.png\" alt=\"image-20210618121540287\" style=\"zoom:33%;\" />\n\n## 安装babel\n\n安装babel的命令：\n\n```bash\nnpm install --save-dev @babel/core @babel/cli @babel/preset-env\n```\n\n`--save-dev`：`save`表示要把它们的信息写入 package.json, `dev`表示是开发模式下。\n\n` @babel/core @babel/cli @babel/preset-env`表示三个一般都要安装的babel包。\n\n\n> PS：只要有`package.json`，就可以直接在命名行中输入`npm install`安装所有的该json文件中提到的所有包。\n\n## 配置babel\n![image-20210618122619509](https://img-blog.csdnimg.cn/img_convert/f1c3c2ba0abdba32f6fbda1eda7926fe.png)\n需要在根目录`package.json`文件中添加下面的代码。\n```json\n\"scripts\": {\n  \"build\": \"babel src -d dist\"\n}\n```\n![image-20210618123402148](https://img-blog.csdnimg.cn/img_convert/703d2d400cda8e83635ec81522c221bb.png)\n`babel src -d lib`是`babel src --out-dir dist`的缩写，也就是从src目录输出到lib目录。\n\n---\n\n在项目的根目录中创建名为 `babel.config.json`的配置文件。\n\n如果想要转换`let` 、`const`，必须要在`target`中写`ie:10`，因为目前除了ie不支持几乎所有版本的浏览器都支持。不写的话就代表不把ie10作为目标浏览器，就不会转换`const`、`let`、`箭头函数`等这些几年前就出来的语法。\n\n```json\n{\n  \"presets\": [\n    [\n      \"@babel/env\",\n      {\n        \"targets\": {\n            \"ie\":\"10\",\n          \"edge\": \"17\",\n          \"firefox\": \"60\",\n          \"chrome\": \"67\",\n          \"safari\": \"11.1\"\n        },\n        \"useBuiltIns\": \"usage\",\n        \"corejs\": \"3.6.5\"\n      }\n    ]\n  ]\n}\n```\n当然，如果缺省`target`，直接写如下代码，默认会转换为ES5。\n\n```json\n{\n  \"presets\": [\"@babel/env\"]\n}\n```\n\n## 编译\n\n```bash\nnpm run build\n```\n\nbuild就是`package.json`script中自定义的名字，通过npm run build开始执行。可以在项目中看到多了名为lib的文件夹，里面有babel编译后的js文件。\n\n![image-20210618124246687](https://img-blog.csdnimg.cn/img_convert/a52e2d447d3daf8b9d66240b53e3bdad.png)\n\n**最后，我走了很多很多弯路，因为我tm没有看官方文档**。要是我看看文档，我也就知道了`const`、`let`为什么没有转换。因为要定义target，要把ie也作为目标浏览器。\n\n[中文官方文档](https://babel.docschina.org/docs/en/usage/)拜托我自己多看官方文档，再到处提问。\n\n# Webpack\n\n[webpack中文官网](https://www.webpackjs.com/)\n\nwebpack是静态模块打包器，当使用webpack处理应用程序时，会将这些模块打包成一个或多个文件。\n\n它可以处理js/css/图片/字体/图标等文件，用于处理静态(本地)文件。\n\n模块化是一种将系统分离成独立功能部分的方法，严格定义模块接口、模块间具有透明性。\n\n## 概念\n\n### 入口(entry)\n\n**入口起点(entry point)** 指示 webpack 应该使用哪个模块，来作为构建其内部 [依赖图(dependency graph)](https://webpack.docschina.org/concepts/dependency-graph/) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。\n\n默认值是 `./src/index.js`，但你可以通过在 [webpack configuration](https://webpack.docschina.org/configuration) 中配置 `entry` 属性，来指定一个（或多个）不同的入口起点。例如：\n\n> **webpack.config.js**\n\n```js\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n};\n```\n\n#### 多个入口\n\n用法：`entry: { <entryChunkName> string | [string] } | {}`\n\n> **webpack.config.js**\n\n```javascript\nmodule.exports = {\n  entry: {\n    app: './src/app.js',\n    adminApp: './src/adminApp.js',\n  },\n};\n```\n\n#### 描述入口的对象 \n\n用于描述入口的对象。你可以使用如下属性：\n\n- `dependOn`: 当前入口所依赖的入口。它们必须在该入口被加载前被加载。\n- `filename`: 指定要输出的文件名称。\n- `import`: 启动时需加载的模块。\n- `library`: 指定 library 选项，为当前 entry 构建一个 library。\n- `runtime`: 运行时 chunk 的名字。如果设置了，就会创建一个以这个名字命名的运行时 chunk，否则将使用现有的入口作为运行时。\n- `publicPath`: 当该入口的输出文件在浏览器中被引用时，为它们指定一个公共 URL 地址。请查看 [output.publicPath](https://webpack.docschina.org/configuration/output/#outputpublicpath)。\n\n`runtime` 和 `dependOn` 不应在同一个入口上同时使用，所以如下配置无效，并且会抛出错误：\n\n> **webpack.config.js**\n\n```javascript\nmodule.exports = {\n  entry: {\n    a2: './a',\n    b2: {\n      runtime: 'x2',\n      dependOn: 'a2',\n      import: './b',\n    },\n  },\n};\n```\n\n确保 `runtime` 不能指向已存在的入口名称，例如下面配置会抛出一个错误：\n\n```javascript\nmodule.exports = {\n  entry: {\n    a1: './a',\n    b1: {\n      runtime: 'a1',\n      import: './b',\n    },\n  },\n};\n```\n\n另外 `dependOn` 不能是循环引用的，下面的例子也会出现错误：\n\n```javascript\nmodule.exports = {\n  entry: {\n    a3: {\n      import: './a',\n      dependOn: 'b3',\n    },\n    b3: {\n      import: './b',\n      dependOn: 'a3',\n    },\n  },\n};\n```\n\n\n\n### 输出(output)\n\n**output** 属性告诉 webpack 在哪里输出它所创建的 *bundle*，以及如何命名这些文件。主要输出文件的默认值是 `./dist/main.js`，其他生成文件默认放置在 `./dist` 文件夹中。\n\n注意，即使可以存在多个 `entry` 起点，但只能指定一个 `output` 配置。\n\n你可以通过在配置中指定一个 `output` 字段，来配置这些处理过程：\n\n```javascript\nconst path = require('path');\n\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    // path:绝对路径\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-first-webpack.bundle.js',\n  },\n};\n```\n\n在上面的示例中，我们通过 `output.filename` 和 `output.path` 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成(emit)到哪里。在代码最上面导入的 path 模块是什么，它是一个 [Node.js 核心模块](https://nodejs.org/api/modules.html)，用于操作文件路径。\n\n如果有多个入口文件，出口文件需要改名，否则就会覆盖。\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:{\n        \"main\":'./src/index.js',\n        \"app\":'./src/module.js'\n    },\n    output:{\n        // [name]表示入口的名字\n        filename:'[name].bundle.js',\n        path:path.resolve(__dirname,'dist'),  \n        // 清除没有用到的文件\n        clean:true\n        \n    },\n    mode:'development',\n};\n```\n\n### [loader](https://www.webpackjs.com/loaders/babel-loader/)\n\nwebpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。**loader** 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 [模块](https://webpack.docschina.org/concepts/modules)，以供应用程序使用，以及被添加到依赖图中。\n\n> ##### Warning\n>\n> 注意，loader 能够 `import` 导入任何类型的模块（例如 `.css` 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是很有必要的，因为这可以使开发人员创建出更准确的依赖关系图。\n\n在更高层面，在 webpack 的配置中，**loader** 有两个属性：\n\n1. `test` 属性，识别出哪些文件会被转换。\n2. `use` 属性，定义出在进行转换时，应该使用哪个 loader。\n\n> **webpack.config.js**\n\n```javascript\nconst path = require('path');\n\nmodule.exports = {\n  output: {\n    filename: 'my-first-webpack.bundle.js',\n  },\n  module: {\n    rules: [{ test: /\\.txt$/, use: 'raw-loader' }],\n  },\n};\n```\n\n以上配置中，对一个单独的 module 对象定义了 `rules` 属性，里面包含两个必须属性：`test` 和 `use`。这告诉 webpack 编译器(compiler) 如下信息：\n\n> “嘿，webpack 编译器，当你碰到「在 `require()`/`import` 语句中被解析为 '.txt' 的路径」时，在你对它打包之前，先 **use(使用)** `raw-loader` 转换一下。”\n\n> ##### Warning\n>\n> 重要的是要记住，在 webpack 配置中定义 rules 时，要定义在 `module.rules` 而不是 `rules` 中。为了使你便于理解，如果没有按照正确方式去做，webpack 会给出警告。\n\n### [插件(plugin)](https://www.webpackjs.com/plugins/)\n\nloader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。\n\n想要使用一个插件，你只需要 `require()` 它，然后把它添加到 `plugins` 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 `new` 操作符来创建一个插件实例。\n\n> **webpack.config.js**\n\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装\nconst webpack = require('webpack'); // 用于访问内置插件\n\nmodule.exports = {\n  module: {\n    rules: [{ test: /\\.txt$/, use: 'raw-loader' }],\n  },\n  plugins: [new HtmlWebpackPlugin({ template: './src/index.html' })],\n};\n```\n\n在上面的示例中，`html-webpack-plugin` 为应用程序生成一个 HTML 文件，并自动注入所有生成的 bundle。\n\n### 模式(mode)\n\n通过选择 `development`, `production` 或 `none` 之中的一个，来设置 `mode` 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 `production`。\n\n```javascript\nmodule.exports = {\n  mode: 'production',\n};\n```\n\n### 浏览器兼容性(browser compatibility) \n\nwebpack 支持所有符合 [ES5 标准](https://kangax.github.io/compat-table/es5/) 的浏览器（不支持 IE8 及以下版本）。webpack 的 `import()` 和 `require.ensure()` 需要 `Promise`。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 [提前加载 polyfill](https://webpack.docschina.org/guides/shimming/)。\n\n## 入门\n\nhttps://webpack.docschina.org/guides，用这个入门非常棒，讲解非常详细，内容也超级丰富，只练一遍是记不住的。\n\n### 极简教程\n\n1.首先要先在项目中初始化，`npm init -y`，会生成一个package.json文件，-y表示全部默认，省去回车过程。\n\n2.在powershell中输入`npm install --save-dev webpack webpack-cli`来安装webpack。\n\n3.项目根目录下创建一个名为`webpack.config.js`的配置文件，在这个配置文件中用module.exports来导出配置。\n\n下面的代码的意思为入口为'./src/indec.js'，出口为'dist'文件夹，文件名为'bundle.js'。\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index.js',\n    output:{\n        path:path.resolve(__dirname,'dist'),\n        filename:\"bundle.js\"\n    }\n};\n```\n\n4.在`package.json`文件中的scrpits下添加如下代码：\n\n```json\n\"scripts\": {\n  \"build\":\"webpack\"\n}\n```\n\n5.在终端中输入`npm run build`，webpack即会开始编译，可以在dist目录下看到编译结果。\n\n如果在webpack配置文件中(默认为webpack.config.js)中将模式改为**development**(默认为production)，编译后的文件会看起来更加清晰。\n\n```diff\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index.js',\n    output:{\n        path:path.resolve(__dirname,'dist'),\n        filename:\"bundle.js\"\n    },\n +  mode:'development',\n};\n```\n\n## [插件plugins](https://www.webpackjs.com/plugins/)\n\nloader被用于帮助webpack处理各种模块，而插件则可用于执行范围更广的任务。\n\n### [HtmlWebpackPlugin](https://www.webpackjs.com/plugins/html-webpack-plugin/)\n\n如果我们更改了一个入口起点的名称，甚至添加了一个新的入口，会发生什么？会在构建时重新命名生成的 bundle，但是我们的 `index.html` 文件的`script`标签仍然引用旧的名称。让我们用 [`HtmlWebpackPlugin`](https://webpack.docschina.org/plugins/html-webpack-plugin) 来解决这个问题。\n\n有了这个插件，就不用在`npm run build`改变了js的名字后手动去改变html中`script`标签引入的js路径。\n\n#### 单入口配置\n\n首先安装插件，并且调整 `webpack.config.js` 文件：\n\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n\n> **webpack.config.js**\n\n```diff\n const path = require('path');\n+ const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   entry: {\n     index: './src/index.js',\n   },\n+  plugins: [\n+    new HtmlWebpackPlugin({\n+      //指定一个html文件作为模板\n+      template:\"./index.html\"\n+    }),\n+  ],\n   output: {\n     filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n   mode:'development'\n };\n```\n\n虽然在 `dist/` 文件夹我们已经有了 `index.html` 这个文件，然而 `HtmlWebpackPlugin` 还是会默认生成它自己的 `index.html` 文件。也就是说，它会用新生成的 `index.html` 文件，替换我们的原有文件。\n\n#### 多html配置\n\n配置含有2个html和2个js的项目。\n\n```diff\nconst path=require('path');\nconst HtmlWebpackPlugin=require('html-webpack-plugin');\n\nmodule.exports={\n    mode:'development',\n    // 多入口\n+    entry:{\n+        index:'./src/index.js',\n+        search:'./src/search.js'\n+    },\n    output:{\n        filename:'[name].js',\n        path:path.resolve(__dirname,\"dist\"),\n    },\n    // 多入口 有几个入口就实例化几次\n+    plugins:[\n+        new HtmlWebpackPlugin({\n+            //指定一个html文件作为模板\n+           template:\"./index.html\",\n+            //多个html必须要命名，否则默认为index.html\n+            //同名文件，后生成的文件会覆盖前面的\n+            filename:'index.html',\n+            //指定要引入的js文件，否则会引入所有的js文件\n+            chunks:['index'] //写entry中的名字\n+        }),\n+        new HtmlWebpackPlugin({\n+            template:\"./search.html\",\n+            filename:'./search.html',\n+            // 同时引入index和search两个文件\n+            chunks:['index','search'],\n+        })\n+    ]\n}\n```\n\n#### 其他功能\n\n```diff\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   entry: {\n     index: './src/index.js',\n   },\n  plugins: [\n   new HtmlWebpackPlugin({\n     //指定一个html文件作为模板\n     template:\"./index.html\",\n+     minify:{\n+         //删除index.html中的注释\n+         removeComments:true,\n+         // 删除index.html中的空格\n+         collapseWhitespace:true,\n+         //删除html标签属性值的双引号\n+         removeAttributeQuotes:true\n+     }\n    }),\n  ],\n   output: {\n     filename: '[name].js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n   mode:'development'\n };\n```\n\n## [loader](https://www.webpackjs.com/loaders/babel-loader/)\n\nloader可以用webpack能够处理非JS文件(css、图片、字体等)的模块。\n\n### 使用loader\n\n在你的应用程序中，有两种使用 loader 的方式：\n\n- [配置方式](https://webpack.docschina.org/concepts/loaders/#configuration)（推荐）：在 **webpack.config.js** 文件中指定 loader。\n- [内联方式](https://webpack.docschina.org/concepts/loaders/#inline)：在每个 `import` 语句中显式指定 loader。\n\n#### 配置方式\n\n[`module.rules`](https://webpack.docschina.org/configuration/module/#modulerules) 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：\n\nloader **从右到左（或从下到上）**地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 [loader 功能](https://webpack.docschina.org/concepts/loaders/#loader-features) 章节，了解有关 loader 顺序的更多信息。\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          // [style-loader](/loaders/style-loader)\n          { loader: 'style-loader' },\n          // [css-loader](/loaders/css-loader)\n          {\n            loader: 'css-loader',\n            options: {\n              modules: true\n            }\n          },\n          // [sass-loader](/loaders/sass-loader)\n          { loader: 'sass-loader' }\n        ]\n      }\n    ]\n  }\n};\n```\n\n#### 内联方式(不推荐)\n\n可以在 `import` 语句或任何 [与 \"import\" 方法同等的引用方式](https://webpack.docschina.org/api/module-methods) 中指定 loader。使用 `!` 将资源中的 loader 分开。每个部分都会相对于当前目录解析。\n\n```js\nimport Styles from 'style-loader!css-loader?modules!./styles.css';\n```\n\n### 已废用file-loader\n\n**v5 版本已废弃**file-loader: 请向 [`asset modules`](https://webpack.docschina.org/guides/asset-modules/) 迁移。资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。\n\n在 webpack 5 之前，通常使用：\n\n- [`raw-loader`](https://webpack.docschina.org/loaders/raw-loader/) 将文件导入为字符串\n- [`url-loader`](https://webpack.docschina.org/loaders/url-loader/) 将文件作为 data URI 内联到 bundle 中\n- [`file-loader`](https://webpack.docschina.org/loaders/file-loader/) 将文件发送到输出目录\n\n资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：\n\n- `asset/resource` 发送一个单独的文件并导出 URL。之前通过使用 `file-loader` 实现。\n- `asset/inline` 导出一个资源的 data URI。之前通过使用 `url-loader` 实现。\n- `asset/source` 导出资源的源代码。之前通过使用 `raw-loader` 实现。\n- `asset` 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 `url-loader`，并且配置资源体积限制实现。\n\n### babel-loader\n\n先要安装babel，毕竟活是babel干的，webpack只是打包的。\n\n```bash\nnpm install --save-dev @babel/core @babel/cli @babel/preset-env\n```\n\n接着安装babel-loader这个插件。\n\n```bash\nnpm install --save-dev babel-loader\n```\n\n接下来，配置babel，在根目录下创建`babel.config.json`的文件，并写下如下代码。\n\n```json\n\n{\n  \"presets\": [\"@babel/env\"]\n}\n```\n\n下一步，便是在`webpack.config.js`文件中配置loader。\n\n```diff\nconst path = require('path');\nmodule.exports = {\n    entry: {\n        \"index\": './src/module.js'\n    },\n    output: {\n        filename: '[name].bundle.js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n+    module: {\n+       rules: [\n+            {\n+                test: /\\.js$/,\n+                // 排除node_modules里面的js文件\n+                exclude: /node_modules/,\n+                use: \"babel-loader\"\n+            },\n+        ],\n+    },\n    mode: 'development',\n   \n};\n```\n\n如果想要转换promise这些，需要安装babel的[垫片插件](https://babeljs.io/docs/en/babel-polyfill)。\n\n第一步要先安装`core-js`。\n\n![image-20210620124715403](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620124723.png)\n\n```bash\nnpm install --save-dev core-js\n```\n\n接着在源文件夹下(src)的js代码中引入该模块。\n\n```js\nimport \"core-js/stable\";\n```\n\n值得注意的是安装babel-loader和core-js的版本，尝试了很多次发现，他们需要低版本。\n\n```json\n\"devDependencies\": {\n    \"@babel/core\": \"^7.11.0\",\n    \"@babel/preset-env\": \"^7.11.0\",\n    \"babel-loader\": \"^8.1.0\",\n    \"core-js\": \"^3.6.5\",\n    \"webpack\": \"^4.44.1\",\n    \"webpack-cli\": \"^3.3.12\"\n  }\n```\n\n## 综合应用\n\n### 加载css\n\n#### style-loader+css-loader\n\n首先要在src文件夹下的某个js文件中导入css文件。\n\n```js\nimport './src/style.css';\n```\n\n为了在 JavaScript 模块中 `import` 一个 CSS 文件，你需要安装 [style-loader](https://webpack.docschina.org/loaders/style-loader) 和 [css-loader](https://webpack.docschina.org/loaders/css-loader)，并在 [`module` 配置](https://webpack.docschina.org/configuration/module) 中添加这些 loader：\n\n```bash\nnpm install --save-dev style-loader css-loader\n```\n\n> **webpack.config.js**\n\n```diff\n const path = require('path');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n+  module: {\n+    rules: [\n+      {\n+        test: /\\.css$/i,\n+        use: ['style-loader', 'css-loader'],\n+      },\n+    ],\n+  },\n };\n```\n\n模块 loader 可以链式调用。链中的每个 loader 都将对资源进行转换。链会逆序执行。第一个 loader 将其结果（被转换后的资源）传递给下一个 loader，依此类推。最后，webpack 期望链中的最后的 loader 返回 JavaScript。\n\n应保证 loader 的先后顺序：[`'style-loader'`](https://webpack.docschina.org/loaders/style-loader) 在前，而 [`'css-loader'`](https://webpack.docschina.org/loaders/css-loader) 在后。loader数组是从右到左执行，先通过'css-loader'识别css文件，再通过`style-loader`将css代码嵌入到style标签中。（在控制台可以看到）\n\n![image-20210620190450697](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620190458.png)\n\n#### 插件+loader\n\n和上面的`style-loader`在style标签中内联不同，插件`mini-css-extract-plugin`会让html文件通过`link`标签引入css文件\n\n首先要在src文件夹下的某个js文件中导入css文件。\n\n```js\nimport './src/style.css';\n```\n\n接着安装插件`mini-css-extract-plugin`和`css-loader`。\n\n```bash\nnpm install --save-dev css-loader mini-css-extract-plugin\n```\n\n配置`webpack.config.js`\n\n```diff\n const path = require('path');\n+ const MiniCssExtractPlugin=require('mini-css-extract-plugin');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n+  module: {\n+    rules: [\n+      {\n+        test: /\\.css$/i,\n+        //注意导入顺序\n+        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n+      },\n+    ],\n+  },\n+\tplugins: [\n+        new MiniCssExtractPlugin({\n+            //指定生成的css的文件名\n+            filename:'[name].css'\n+        }),\n+    ],\n };\n```\n\n最后，可以在dist文件夹下看到生成的css文件。\n\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620194806.png\" alt=\"image-20210620194803569\" style=\"zoom:33%;\" />\n\n而且在控制台可以看到样式是通过`link`标签引入的。\n\n![image-20210620194914627](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620194915.png)\n\n### 加载图片\n\n如果是远程图片，则可以直接显示。而本地图片通过webpack打包，需要额外处理。\n\n> **webpack.config.js**\n\n```diff\n const path = require('path');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n   module: {\n     rules: [\n       {\n         test: /\\.css$/i,\n         use: ['style-loader', 'css-loader'],\n       },\n+      {\n+        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n+        type: 'asset/resource',\n+      },\n     ],\n   },\n };\n```\n\n现在，在 `import MyImage from './my-image.png'` 时，此图像将被处理并添加到 `output` 目录，*并且* `MyImage` 变量将包含该图像在处理后的最终 url。在使用 [css-loader](https://webpack.docschina.org/loaders/css-loader) 时，如前所示，会使用类似过程处理你的 CSS 中的 `url('./my-image.png')`。loader 会识别这是一个本地文件，并将 `'./my-image.png'` 路径，替换为 `output` 目录中图像的最终路径。而 [html-loader](https://webpack.docschina.org/loaders/html-loader) 以相同的方式处理 `<img src=\"./my-image.png\" />`。\n\n#### js中使用图片\n\n如果需要在js文件中使用图片，也可以用`asset module`这个loader，无需额外安装其他的loader。只需要在js中使用`import`引入图片即可。\n\n```js\n// 把图片当做模块引入\nimport logo from './image/img.png';\n\nconsole.log(logo); // 会输出图片的路径\nconst myLogo = new Image();\nmyLogo.src = logo;\ndocument.body.appendChild(myLogo)\n```\n\n#### 自定义文件名\n\n默认情况下，`asset/resource` 模块以 `[hash][ext][query]` 文件名发送到输出目录。\n\n可以通过在 webpack 配置中设置 [`output.assetModuleFilename`](https://webpack.docschina.org/configuration/output/#outputassetmodulefilename) 来修改此模板字符串：\n\n>  **webpack.config.js**\n\n```diff\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n+   assetModuleFilename: 'images/[hash][ext][query]'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.png/,\n        type: 'asset/resource'\n      }\n    ]\n  },\n};\n```\n\n如可以设置为`assetModuleFilename: 'images/[name][ext]'`，此时的[name]指图片本身的名字，而是entry中的名字，[ext]是指\"filename extension\"，用它表示文件原来的后缀。\n\n另一种自定义输出文件名的方式是，将某些资源发送到指定目录：\n\n```diff\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n+   assetModuleFilename: 'images/[hash][ext][query]'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.png/,\n        type: 'asset/resource'\n-     }\n+     },\n+     {\n+       test: /\\.html/,\n+       type: 'asset/resource',\n+       generator: {\n+         filename: 'static/[hash][ext][query]'\n+       }\n+     }\n    ]\n  },\n};\n```\n\n使用此配置，所有 `html` 文件都将被发送到输出目录中的 `static` 目录中。\n\n`Rule.generator.filename` 与 [`output.assetModuleFilename`](https://webpack.docschina.org/configuration/output/#outputassetmodulefilename) 相同，并且仅适用于 `asset` 和 `asset/resource` 模块类型。\n\n#### 添加公共路径\n\n当使用` MiniCssExtractPlugin`生成的css在dist下一个文件夹时(如`dist/css/style.css`)，此时如果不设置生成的css的公共路径(`publicPath`)，图片不会正常显示。\n\n因为`css-loader`以为生成的`style.css`文件直接在dist目录下，所以图片路径会默认设置为`url(./随机名字.png)`，而事实上图片的正确的路径为`url(../随机名字.png)`。\n\n```diff\n  img-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- index.js\n    |- index.html\n+   |- 随机字符.png\n+   |- /css\n+    \t|- style.css\n  |- /src\n    |- icon.png\n    |- style.css\n    |- index.js\n  |- /node_modules\n```\n\n因此，需要在`options`中设置`publicPath`为`../`，这样该css文件引入的所有url前面都会加上`../`的前缀。\n\n> **webpack.config.js**\n\n```diff\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst MiniCssExtractPlugin=require('mini-css-extract-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module:{\n        rules:[\n            {\n                test:/\\.css$/i,\n                //此时生成的css在dist/css的文件夹下，要设置公共路径\n                //这样该css文件所有的url前面都会加上../的前缀。\n+                use:[{\n+                    loader:MiniCssExtractPlugin.loader,\n+                    options:{\n+                        publicPath:'../'\n+                    }\n+                }, 'css-loader']},\n            {\n                test:/\\.(png|svg|jepg|gif)/,\n                type:'asset/resource'\n            }\n        ]  \n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            //指定一个html文件作为模板\n            template: \"./index.html\"\n        }),\n+        new MiniCssExtractPlugin({\n+            //在dist/css文件夹下创建一个index.css文件\n+            filename:'css/[name].css'\n+        })\n    ],\n    mode: 'development'\n};\n```\n\n#### html中的图片\n\ncss中引入的图片可以用`type:asset/resource;` ，html中的图片则需要额外安装loader`html-withimg-loader`\n\n```bash\nnpm install --save-dev html-withimg-loader\n```\n\n此时，我只写出新增的代码，其他的如图片loader，html-webpack-plugin和mini-css-extract-plugin插件用法参考上面的代码。\n\n**注意**:这个`html-withimg-loader`必须要配合处理图片的loader——`asset  module` 一起使用，因为真正能够加载图片的还是`asset module`，`html-withimg-loader`用来处理路径问题。\n\n```js\nmodule:{\n    rules:[\n        {\n            test:/\\.(html|htm)/i,\n            use:'html-withimg-loader'\n        }\n    ]  \n},\n```\n\n#### asset/inline\n\nasset/inline输出的 data URI，默认是呈现为使用 Base64 算法编码的文件内容。\n\n**webpack.config.js**\n\n> 关于[rules.parser](https://webpack.docschina.org/configuration/module/#ruleparserdataurlcondition)\n\n```diff\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  module: {\n    rules: [\n+      {\n+       test: /\\.svg/,\n+       type: 'asset/inline',\n+\t\tparser:{\n+\t\t\tdataUrlCondition:\n+\t\t\t\tmaxSize:10000\n+      \t\t\t//表示10kb\n+       }\n+     },\n\n    ]\n  }\n};\n```\n\nmaxSize为10000，表示小于10kb将其转换为base64格式，大于则按照asset/resource来处理。一般只对较小的图片进行这种操作，因为转为base64格式后，图片会以base64格式来存在js中。\n\n### 配置开发环境\n\n#### 使用source map 追踪错误\n\n当 webpack 打包源代码时，可能会很难追踪到 error(错误) 和 warning(警告) 在源代码中的原始位置。例如，如果将三个源文件（`a.js`, `b.js` 和 `c.js`）打包到一个 bundle（`bundle.js`）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 `bundle.js`。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。\n\n为了更容易地追踪 error 和 warning，JavaScript 提供了 [source maps](http://blog.teamtreehouse.com/introduction-source-maps) 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于 `b.js`，source map 就会明确的告诉你。\n\nsource map 有许多 [可用选项](https://webpack.docschina.org/configuration/devtool)，请务必仔细阅读它们，以便可以根据需要进行配置。\n\n对于本指南，我们将使用 `inline-source-map` 选项，这有助于解释说明示例意图（此配置仅用于示例，不要用于生产环境）：\n\n**webpack.config.js**\n\n```diff\n const path = require('path');\n const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   mode: 'development',\n   entry: {\n     index: './src/index.js',\n     print: './src/print.js',\n   },\n+  devtool: 'inline-source-map',\n   plugins: [\n     new HtmlWebpackPlugin({\n       title: 'Development',\n     }),\n   ],\n   output: {\n     filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n     clean: true,\n   },\n };\n```\n\n### 使用 webpack-dev-server \n\n`webpack-dev-server` 为你提供了一个基本的 web server，并且具有 live reloading(实时重新加载) 功能。设置如下：\n\n```bash\nnpm install --save-dev webpack-dev-server\n```\n\n修改配置文件，告知 dev server，从什么位置查找文件：\n\n**webpack.config.js**\n\n```diff\n const path = require('path');\n const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   mode: 'development',\n   entry: {\n     index: './src/index.js',\n     print: './src/print.js',\n   },\n   devtool: 'inline-source-map',\n+  devServer: {\n+    contentBase: './dist',\n+  },\n   plugins: [\n     new HtmlWebpackPlugin({\n       title: 'Development',\n     }),\n   ],\n   output: {\n     filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n     clean: true,\n   },\n };\n```\n\n以上配置告知 `webpack-dev-server`，将 `dist` 目录下的文件 serve 到 `localhost:8080` 下。（serve，将资源作为 server 的可访问文件）\n\n**package.json**\n\n```diff\n {\n   \"name\": \"webpack-demo\",\n   \"version\": \"1.0.0\",\n   \"description\": \"\",\n   \"private\": true,\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n     \"watch\": \"webpack --watch\",\n+    \"start\": \"webpack serve --open\",\n     \"build\": \"webpack\"\n   },\n   \"keywords\": [],\n   \"author\": \"\",\n   \"license\": \"ISC\",\n   \"devDependencies\": {\n     \"html-webpack-plugin\": \"^4.5.0\",\n     \"webpack\": \"^5.4.0\",\n     \"webpack-cli\": \"^4.2.0\",\n     \"webpack-dev-server\": \"^3.11.0\"\n   },\n   \"dependencies\": {\n     \"lodash\": \"^4.17.20\"\n   }\n }\n```\n\n现在，在命令行中运行 `npm start`，我们会看到浏览器自动加载页面。如果你更改任何源文件并保存它们，web server 将在编译代码后自动重新加载。试试看！\n\n`webpack-dev-server` 具有许多可配置的选项。关于其他更多配置，请查看 [配置文档](https://webpack.docschina.org/configuration/dev-server)。\n\n> ###### Warning\n>\n> webpack-dev-server 在编译之后不会写入到任何输出文件。而是将 bundle 文件保留在内存中，然后将它们 serve 到 server 中，就好像它们是挂载在 server 根路径上的真实文件一样。如果你的页面希望在其他不同路径中找到 bundle 文件，则可以通过 dev server 配置中的 [`publicPath`](https://webpack.docschina.org/configuration/dev-server/#devserverpublicpath-) 选项进行修改。\n","source":"_posts/JavaScript-ES6学习笔记.md","raw":"---\ntitle: JavaScript ES6 学习笔记\ndate: 2021-06-24 12:19:35\ntags: JavaScript\n---\n\n# ES6简介\n\n![image-20210530104137712](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104138.png)\n\n![image-20210530104351721](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104352.png)\n\n![image-20210530104439339](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104440.png)\n\n# const\n\nconst就是为了那些一旦初始化就不希望重新赋值的情况设计的。使用 const声明常量，一旦声明，就必须立即初始化。\n\nconst声明的常量，允许在**不重新赋值**的情况下修改它的值。\n\n```js\nconst person={gender:\"male\"};\nperson[gender]=\"female\";\n```\n\n# let、const、var的区别\n\n![image-20210530131645190](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530131646.png)\n\n1.重复声明：已经存在的变量，又声明了一次。\n\nvar允许重复声明，let、 const不允许重复声明\n\n2.变量提升\n\nvar 会提升变量的声明到当前作用域顶部，但是赋值不会提升；let和const不会变量提升。\n\n3.暂时性死区\n\n只要作用域内存在 let、const，它们所声明的变量或常量就自动“绑定”这个区域，不再受到外部作用域的影响。\n\nlet、const存在暂时性死区，var不存在。\n\n```js\nlet c=2;\nlet d=2;\nfunction func(){\n    console.log(\"d\",d);//d\n    //console.log(\"c\",c);//  Cannot access 'c' before initialization\n    let c=1;\n}\nfunc(c);\n```\n\n4.window 对象的属性和方法\n\n在全局作用域中，var声明的变量，通过function声明的函数会自动变为window对象的属性和方法；let、const不会。\n\n```js\nvar age=18;\nvar add=function(){}\nconsole.log(window.add) //18\nconsole.log(window.add===add);//true    \nlet height=158;\nconst grow=function(){}\nconsole.log(window.height); //undefined\nconsole.log(window.grow===grow)//false\n```\n\n5.块级作用域\n\nvar没有块级作用域，let和const有块级作用域。\n\n## 非常经典的案例\n\n```html\n<button class=\"btn\">0</button>\n<button class=\"btn\">1</button>\n<button class=\"btn\">2</button>\n<script>\nvar btns=document.querySelectorAll(\".btn\");\n//1.var\nfor(var i=0;i<btns.length;i++){\n    btns[i].addEventListener(\"click\",function(){\n        console.log(i); //都会输出3\n    },false)\n} //执行for循环的时候，会给所有的btn添加监听(瞬间就能完成)，退出for循环的时候，全局变量i的值为3\n//当点击的按钮的时候，自然会输出i=3.\n\n//2.闭包\nfor(var i=0;i<btns.length;i++){\n    (function(index){\n        btns[index].addEventListener(\"click\",function(){\n        console.log(index); \n    },false)\n    })(i)\n} \n\n//3.let\n// //此时的i不再是全局变量\nfor(let i=0;i<btns.length;i++){\n    btns[i].addEventListener(\"click\",function(){\n        console.log(i); \n    },false)\n}\n```\n\n1.使用var\n\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144638.png\" alt=\"2.let 和 const 的应用-var\" style=\"zoom: 67%;\" />\n\n2.使用闭包\n\n![3.let 和 const 的应用-闭包](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144714.png)\n\n3.使用let\n\n![4.let 和 const 的应用-let](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144732.png)\n\n# 模板字符串\n\n```html\n模板字符串使用反引号 (``) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（`${expression}`）的占位符。\n```\n\n```js\n/ 1.认识模板字符串\n// 模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。\nconst user1='alex';\nconst user2=`alex`;\nconsole.log(user1,user2,user1===user2); //alex alex true\n\n// 2.模板字符串和一般字符串的区别\nconst person={\n    name:'alex',\n    age:18,\n    gender:\"male\"\n}\n// 一般字符串\n// const info=\"name:\"+person.name+\", age:\"+person.age+\", gender:\"+person.gender;\n// 模板字符串\nconst info=`name:${person.name}, age:${person.age}, gender:${person.gender}`;\nconsole.log(info);\n```\n\n![image-20210530154645752](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530154647.png)\n\n```js\n//1.输出多行字符串\n// 模板字符串中，所有的空格、换行或缩进都会保留在输出中。\n    const info=`hello\nworld!`;\n    console.log(info);\n//  2. 输出`和\\等特殊字符\nconsole.log(`\\``,`\\\\`); //` \\\n\n// 3. 模板字符串的注入\nconst name=\"alex\";\nconst person={age:18,gender:\"male\"};\nconst getSex=function(gender){\n    return gender===\"male\"?\"男\":\"女\";\n}\nconst alex=`${name},${person.age+2},${getSex(person.gender)}`;\n//alex,20,男\nconsole.log(alex);\n```\n\n# 箭头函数\n\n```js\n// 1.认识箭头函数，箭头函数是匿名函数\n\nconst add=(x,y)=>{return x+y};\n\nconsole.log(add(2,3));\n\n// 2.箭头函数的结构\n\n// 参数=>函数体\n```\n\n注意：\n\n1.单个参数时可以去掉参数的圆括号；无参数或者多个参数时不能省略参数圆括号。\n\n2.如果函数体只有return语句，可以直接同时省略函数体的花括号和return关键字。\n\n3.返回值是单行对象时，可以省略return关键词，然后在对象的花括号外面加上圆括号。\n\n\n\n```js\n// 1.单个参数\nconst add=x=>{return x+1;}\nconsole.log(add(2));\n\n// 2.单行函数体\nconst add2=x=>x+1;\nconsole.log(add2(2));\n\n// 3.单行对象\nconst add3=(x,y)=>({value:x+y});\nconsole.log(add3(2,2));\n```\n\n## this指向\n\n1.非箭头函数中this指向问题\n\n只有在函数调用的时候，this指向才能确定；this的指向和函数在哪调用无关，只和函数被谁调用有关\n\n```js\nfunction add(){\n    console.log(this); \n}\n// 只有在函数调用的时候，this指向才能确定\n// this的指向和函数在哪调用无关，只和函数被谁调用有关\nadd(); // 非严格模式下this指向window，严格模式下是undefined\nwindow.add() // window\n\nconst calc={\n    add:add\n}\ncalc.add(); //calc\n\nconst adder=calc.add;\nadder();// 非严格模式下this指向window，严格模式下是undefined\n\ndocument.onclick=function(){\n    console.log(this); //this指向绑定的dom，此时为document\n}\n\nfunction Person(name){\n    this.name=name;\n    console.log(this);\n}\nvar p=new Person(\"Alex\"); // this指向实例化生产的对象\n```\n\n2.箭头函数中的this指向\n\n 箭头函数没有自己的this，它会沿着作用域链向外查找。\n\n```js\n// 箭头函数没有自己的this\nconst calc={\n    add:()=>{console.log(this)}\n}\ncalc.add(); //window\n// 因为箭头函数没有自己的this，所以它会通过作用域链向外查找至全局作用域，而全局作用中this指向window\n\n\nconst c={\n    add:function(){\n        const adder=()=>{\n            console.log(this);\n        }\n        adder();\n    }\n};\nc.add(); // 指向c对象\n\nconst addFn=c.add;\naddFn(); // 指向window\n```\n\n3.箭头函数不适用的场景\n\n```js\n// 1.作为构造函数\n// 箭头函数没有this\n// const Person=()=>{};\n// new Person();\n\n// 2.需要this 指向调用对象的时候\ndocument.onclick=()=>{\n    console.log(this); //此时会指向window对象\n}\n// 3.需要使用arguments时\nfunction add(){\n    console.log(arguments);\n}\nadd(1,2); //[1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]\nconst addFn=()=>{\n    console.log(arguments);\n}\naddFn(); //会报错\n```\n\n4.箭头函数的应用\n\n如果代码写成下面这样，程序执行会有问题，因为`setInterval`中的回调函数中的`this`会指向`window`对象，导致无法进行加法。\n\n```html\n<button id=\"btn\">开始</button>\n<span id=\"result\">0</span>\n<script>\n    const btn=document.getElementById(\"btn\");\n    const result=document.getElementById(\"result\");\n    const timer={\n        time:0,\n        start:function(){\n            btn.addEventListener(\n                \"click\",function(){\n                    setInterval(function(){\n                        console.log(this);\n                        this.time++;\n                        result.innerHTML=this.time;\n                    },1000);\n                }\n            ,false);\n        }\n    }\n    timer.start();\n</script>\n```\n\n常规的解决是备份`this`。\n\n```js\nconst timer={\n    time:0,\n    start:function(){\n        var self =this;\n        btn.addEventListener(\n            \"click\",function(){\n                setInterval(function(){\n                    console.log(this);\n                    self.time++;\n                    result.innerHTML=self.time;\n                },1000);\n            }\n        ,false);\n    }\n}\n timer.start();\n```\n\n但是可以使用**箭头函数**来解决这个问题，箭头函数本身没有`this`，所以它会向外层的作用域链查找`this`。\n\n注意，此时也要把`addEventListener`中的匿名函数改为箭头函数，不然`setInterval`的箭头函数会向外到`addEventListener`中的匿名函数找`this`，而该函数this为绑定的dom节点，从而`setInterval`的箭头函数会把btn（绑定的dom）当做this。\n\n```js\nconst timer={\n    time:0,\n    start:function(){\n        btn.addEventListener(\n            \"click\",()=>{\n                setInterval(()=>{\n                    console.log(this);\n                    this.time++;\n                    result.innerHTML=this.time;\n                },1000);\n            }\n        ,false);\n    }\n}\n timer.start();\n```\n\n将这两个部分都改为箭头函数后，`setInterval`中的匿名函数最终会在`start()`方法找`this`。\n\n而注意到最后会调用`timer.start()`，所以start()中的this就是指向`timer`, 因此 `this.time++;` 和`result.innerHTML=this.time;` 这两句中的`this` 指向的就是`timer`。 \n\n# 解构赋值\n\n## 数组解构赋值\n\n![image-20210603194723759](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194725.png)\n\n![image-20210603194752249](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194753.png)\n\n![image-20210603194903992](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194905.png)\n\n![image-20210603195036092](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603195037.png)\n\n### 1.解构赋值的定义\n\n解析某一数据的结构，将想要的东西提取出来，赋值给变量或常量。\n\n```javascript\nconst arr = [1, 2, 3];\n// const a=arr[0];\n// const b=arr[1];\n// const c=arr[2];\nconst [a, b, c] = [1, 2, 3];\nconsole.log(a, b, c); //1 2 3\n```\n\n```javascript\n// 模式(结构)匹配,索引值相对应\nlet [a,b,c]=[1,2,3];\n\n// 如果想要取出1,5,3\nconst [d,[,,e],f]=[1,[2,4,5],3];\nconsole.log(d,e,f); //1 5 3\n```\n\n### 2.解构赋值的默认值\n\n只有当一个数组成员严格等于（===） undefined时，它的的默认值才会生生效。如果默认值是表达式时，默认值表达式是惰性求值的。\n\n```javascript\nconst [a, b] = []; //a=undefined,b=undefined\nconst [c = 1, d = 2] = []; //1 2\n\n//只有当一个数组成员严格等于（===） undefined时，对应的默认值才会生生效。\nconst [e = 1, f = 2] = [3, 4] //3,4\nconst [i = 2, j = 6] = [5] //5 6\nconsole.log(a, b, c, d, e, f, i, j); //undefined undefined 1 2 3 4 5 6\n\n// 如果默认值是表达式时，默认值表达式是惰性求值的\nconst func = () => {\n    console.log(\"我被执行了\")\n    return 2;\n};\nconst [x = func()] = [1]; // 此时函数func并没有执行\nconst [y=func()]=[];\nconsole.log(x,y); //1 2 \n```\n\n### 3.解构赋值的应用\n\n#### 类数组可以进行解构赋值\n\n```javascript\n// 1.常见的类数组的解构赋值\n// arguments\nfunction func(){\n    const [a,b]=arguments;\n    console.log(a,b); //1 2\n}\nfunc(1,2); \n\n// NodeList\nconsole.log(document.querySelectorAll('p')); //NodeList(3) [p, p, p]\nconst [p1,p2,p3]=(document.querySelectorAll(\"p\"));\nconsole.log(p1,p2,p3);\n```\n\n#### 函数参数的解构赋值\n\n```javascript\nconst array=[1,2];\n// 不用解构赋值参数的写法如下\n// const add=arr=>arr[0]+arr[1];\n// 使用解构赋值\nconst add=([x,y])=>x+y;\nconsole.log(add(array)); //3 \n\n//还可以给形参添加默认值\nconst add1=([x=1,y=3])=>x+y;\nconsole.log(add1([])); //4\n```\n\n#### 交换变量的值\n\n```javascript\nlet x=1 ,y=2;\n//相当于[x,y] =[2,1]，而不是右边的y赋值给x，x赋值给y\n[x,y]=[y,x];\nconsole.log(x,y); //2 1\n```\n\n## 对象解构赋值\n\n1.模式匹配，属性名相同的完成赋值，不需要按照顺序\n\n```javascript\n// 1.模式匹配，属性名相同的完成赋值，不需要按照顺序\n//简写形式\nconst {age,name}={name:\"alex\",age:18};\nconsole.log(age,name); //18 \"alex\"\n// 完整形式\nconst {age:age1,name:name1}={name:\"alex\",age:18};\nconsole.log(name1,age1); //alex 18\n```\n\n2.对象解构赋值的注意事项\n\n```javascript\n// 1.默认值的生效条件\n// 对象的数值值严格等于undefined时，对应的默认值才会生效\nconst {name } = { name: \"alex\"};\nconsole.log(name); //\"alex\"\n// 注意默认值的赋值是用等号，而不是用冒号\nconst {name1=\"billie\",age=0}={};\nconsole.log(name1);\n// 2.如果默认值是表达式，默认值表达式是惰性求值的\n\n// 3.将一个已经声明的变量用于解构赋值\nlet x=1;\n// {x}={x:3}; 会报错，和解决箭头函数的单行语句的返回值是对象一样，在整个外层加上括号\n({x}={x:3});\nconsole.log(x); //3\n\n// 4.可以取到继承的属性\nconst {toString}={};\nconsole.log(toString);// 并没有输出undefined\n// toString的属性继承自Object\nconsole.log(Object.prototype);\nconst {a}={};\nconsole.log(a); //undefined\n```\n\n3.对象解构赋值的应用\n\n```jsx\n// 函数参数的解构赋值\n//const info=user=>console.log(user.name,user.age);\nconst info=({age,name})=>console.log(age,name);\ninfo({name:\"hh\",age:12});\n```\n\n## 其他数组类型的解构赋值\n\n1.字符串的解构赋值\n\n```jsx\n//数组形式的解构赋值\nconst [a,b,,,c]=\"hello\";\nconsole.log(a,b,c); //h e o\n// 对象形式解构赋值\nconst {0:x,1:y,length}=\"hello\";\nconsole.log(x,y,length); //h e 5\n```\n\n2.数值和布尔值的解构赋值(只能按照对象形式解构赋值), 会自动将右侧的数值或布尔值转换为对象\n\n```jsx\nconst {aa,toString}=123;\nconsole.log(aa,toString); //toString属性是继承而来的\n```\n\n3.undefined和null的解构赋值会报错\n\n```jsx\n// 由于undefined和null，无法转化为对象，所以对它们进行解构赋值都会报错\nconst {ff}=undefined;\nconsole.log(ff); //报错\n```\n\n\n\n# 简介表示\n\n## 属性和方法的简洁表示\n\n### 1.属性的简洁表示\n\n当键名和变量名(常量名)一样的时候，可以只写一个。\n\n```javascript\nconst age=19;\nconst person1={\n    // age:age, 直接写age\n    age,\n}        \nconsole.log(person1.age);\n```\n\n### 2.方法的简洁表示\n\n```javascript\nconst person2={\n    // speak:function(){}\n    speak(){}\n}\n```\n\n## 方括号语法\n\n```js\n// 1.方括号语法\nconst prop=\"age\";\nconst person={};\nperson[prop]=18; // {age:18}\n// ES6新增如下\nconst person1={\n    [prop]:19\n}\n\n// 2.方括号可以放[值或者计算可以得到的值(表达式)]\nconst prop1=\"age\";\nconst func=()=>'gender';\nconst person2={\n    [prop1]:18,\n    [func()]:'female'\n}\n// {age: 18, gender: \"female\"}\n\n// 3.方括号语法和点语法的区别\n// 点语法是方括号语法的特殊形式\nconst person3=[];\n// perosn.age 等价于 person['age']\n```\n\n# 函数默认参数值\n\n**函数默认参数**允许在没有值或`undefined`被传入时使用默认形参。只有在①不传参数 ②明确传递undefined作为参数 这两种情况下,默认值才会生效。\n\n### 1.基本概念\n\n```js\n// 1.函数参数的默认值\nfunction multiply(a,b=1){\n    return a*b;\n}\nconsole.log(multiply(3) ) //3\n\n// 2.默认值的生效\n// ①不传参数 ②明确传递undefined作为参数 只有这两种情况下,默认值才会生效\nconsole.log(multiply(2,undefined)); //2\nconsole.log(multiply(2,\"\")); //2*\"\" 最后结果会被隐形转换为0\n\n// 3.默认值表达式\n// 如果默认值是表达式，默认值表达式是惰性求值的\n\n\n// 4.设置默认值的小技巧\n// 函数参数的默认值最好从参数列表的右边开始设置。\n\nconst multiply2=(x=1,y)=>x*y;\n// 此时如果想要使用第一个默认值，必须明确传递undefined\nconsole.log(multiply(undefined,2))\n```\n\n### 2.函数默认参数的应用\n\n```js\n// 1.接收多参数，如果按照默认写法，传参的时候需要记住参数顺序\nconst user=(name=\"zhangsan\",age=12,gender=\"female\")=>\n    console.log(name,age,gender);\nuser(\"alex\",18,'male');\n\n// 2. 法一：接收一个对象作为参数\nconst user1=option=>console.log(\n    option.name,option.age,option.gender);\nuser1({\n    name:'alex',\n    age:18,\n    gender:\"male\"\n});\n\n// 3.法二：解构赋值的默认值\nconst user2=({name=\"zhangsan\",age=12,gender=\"female\"})=>\nconsole.log(name,age,gender);\n\nuser2({name:\"alex\"});\n// 但是不能什么都不传，如果什么都不传就相当于传了undefined\n// 而无法对undefined进行解构赋值\n// user2();\n\n// 4.法三：函数参数的默认值\n// 把{name=\"zhangsan\",age=12,gender=\"female\"}看为option\n// option的默认参数为{}，当无不传入参数或者传入undefined的时候\n// option={} 会把空对象赋值给option，也就是下面一行的解构赋值\n// {name=\"zhangsan\",age=12,gender=\"female\"}={}\n\nconst user3=({name=\"zhangsan\",age=12,gender=\"female\"}={})=>\nconsole.log(name,age,gender);\nuser3(); //此时不会报错\n```\n\n# 剩余参数与展开语法\n\n## 剩余参数\n\n### 剩余参数定义\n\n**剩余参数**语法允许我们将一个不定数量的参数表示为一个数组。\n\n```js\n// 1.认识剩余参数\n// 当不知道参数有多少个，可以用省略号代替，省略号后面接参数名\nconst add1=(x,y,z,...args)=>{};\n\n// 2.剩余参数的本质，剩余参数是一个数组，如果没有值则是空数组\nconst add2=(x,y,z,...args)=>{\n    console.log(x,y,args);\n};\nadd2(1); //1 undefined []\nadd2(1,2,3,4,5,6);  //1 2 [4, 5, 6]\n\n// 3.箭头函数与剩余参数\n// 箭头函数的参数部分即使只有一个剩余参数，也不能省略括号\nconst add3=(...args)=>{};\n\n// 4.使用剩余参数替代arguments获取实际参数\nconst add4=function(){\n    // 记住箭头函数没有arguments，因为它没有this\n    // arguments是类数组，而剩余参数是个数组\n    console.log(arguments);\n}\nadd4(1,2);\n\nconst add5=(...args)=>{\n    console.log(args);\n}\n// 5.剩余参数的位置\n// 剩余参数只能作为最后一个参数\n```\n\n### 剩余参数应用\n\n```js\n// 1.add函数\nconst add=(...args)=>{\n    let sum=0;\n    for(let i=0 ;i<args.length;i++){\n        sum+=args[i];\n    }\n    return sum;\n};\nconsole.log(add(1,2,3,4));\n// 使用reduce方法\nconst add_reduce=(...args)=>{\n    return args.reduce((total,currentValue)=>{ return total+currentValue});\n};\nconsole.log(add_reduce(1,2,3,4,5,9));\n\n\n// 2.与解构赋值结合使用\n// 当剩余参数不是作为函数的参数时，剩余参数叫做剩余元素(Rest element)\n\n// 剩余元素+数组解构赋值\nconst [num,...args]=[1,2,3,4];\nconsole.log(num,args); //1 [2, 3, 4]\n\n// 剩余参数+数组解构赋值+箭头函数\nconst func=([num,...args])=>{};\nfunc([1,2,3]);\n\n// 剩余元素+对象解构赋值\n// 此时剩余元素为数组\nconst {x,y,...z}={x:1,b:2,y:3,d:4};\nconsole.log(x,y,z); //1 3 {b: 2, d: 4}\n\n// 剩余参数+对象解构赋值+箭头函数\nconst fun=({m,n,...o})=>{\n    console.log(m,n,o);\n};\nfun({m:1,n:3,p:3,z:8});\n```\n\n## 展开语法\n\n**展开语法(Spread syntax),** 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开。\n\n### 基本概念\n\n```js\n// 1.展开语法\nconsole.log(Math.min(...[3,1,2])); // 相当于Math.min(3,1,2);\n\n// 2.展开语法和剩余参数的区别\n// 展开语法[3,1,2]->3,1,2\n// 剩余参数 (3,1,2)->[3,1,2]\n\n// 剩余参数\nconst add=(...args)=>{\n    // 展开语法\n    console.log(...args);\n};\nadd(1,2,3);\n```\n\n### 展开语法的应用\n\n```js\n// 1.复制数组\nconst a = [1, 2, 3];\nconst b = a;\nconsole.log(a === b); //true 引用\n\nconst c = [...a]; //等价于const c=[1,2,3];\nconsole.log(a === c); //false\n\n// 2.合并数组\nconst m=[1,2];\nconst n=[3,4,5];\nconst i=[7,...m,...n]; \nconsole.log(i); //[7,1, 2, 3, 4, 5]\n\n// 3.字符串转数组\nconsole.log(...\"app\"); // console.log(\"a\",\"b\",\"c\");\nconsole.log([...\"apple\"]); // [\"a\", \"p\", \"p\", \"l\", \"e\"]\n\n// 4.常见的类数组转数组\n// arguments\nfunction func(){\n    console.log(...arguments); //console.log(1,2,3);\n    console.log([...arguments]);\n}\nfunc(1,2,3);\n// NodeList\nconsole.log([...document.querySelectorAll(\"p\")]);\n```\n\n### 对象展开\n\n对象的展开就是相当于把对象的所有属性罗列出来。\n\n```js\n// 1.展开对象\n// 对象的展开就是相当于把对象的所有属性罗列出来\n// 对象必须在{}中展开，不能直接展开\nconst apple={\n    color:\"red\",\n    taste:\"sweet\"\n}\nconsole.log({...apple}); //{color:\"red\",taste:\"sweet\"}\n\n// 2.合并对象\n//新对象拥有全部的属性，相同属性，后者会覆盖前者 \nconst banana={\n    color:\"yellow\",\n    category:\"fruit\"\n}\nconsole.log({...apple,...banana});\n// {color: \"yellow\", taste: \"sweet\", category: \"fruit\"}\n```\n\n### 对象展开的注意事项\n\n```js\n// 1.空对象的展开\n// 如果展开空对象，是没有任何效果\n// 对象的展开，相当于把所有对象的属性罗列出来\nconsole.log({...{}}); //{}\n\n// 2.非对象的展开\n// 如果展开的不是对象，则自动会将其转为对象，再将其罗列出来\nconsole.log({...1}); //{} 1转为对象后，并没有属性罗列\nconsole.log({...null}); //{}\nconsole.log({...\"alex\"}); //{0: \"a\", 1: \"l\", 2: \"e\", 3: \"x\"}\nconsole.log({...[1,2]}); //{0: 1, 1: 2}\n\n\n// 3.含对象属性的对象的\n// 对象属性不会继续被展开\nconst apple={\n    feature:{\n        taste:\"甜\"\n    }\n};\nconst pen={\n    feature:{\n        color:\"black\"\n    },\n    use:\"写字\"\n}\nconsole.log({...apple}); //{feature: {…}}\nconsole.log({...apple,...pen}); //{feature: {…}, use: \"写字\"}\n```\n\n### 对象展开的应用\n\n```js\n// 1.复制对象\nconst a={x:1,y:2};\nconst b={...a};\nconsole.log(a===b); //false\n\n// 2.用户参数和默认参数\n// 法一： 解构赋值+函数默认参数\nconst user1=({name=\"zhangsan\",age=0,gender=\"male\"}={})=>{\n    console.log(name,age,gender);\n};\n// 法二: 对象展开 +解构赋值\nconst user2=userParm=>{\n    const defaultParm={name:\"zhangsan\",age:0,gender:\"male\"};\n    // 合并默认参数和用户参数，还可以对结果进行解构\n    const {name,age,gender}={...defaultParm,...userParm};\n    console.log(name,age,gender);\n}\n```\n\n# Set与Map\n\n## Set\n\nSet是一系列**无序、没有重复值**的数据集合。 Set 对象允许你存储任何类型的**唯一值**，无论是原始值或者是对象引用。\n\n```js\n//创建Set\nconst s=new Set();\n```\n\n### Set实例的属性和方法\n\n#### 1.add方法\n\n在`Set`对象尾部添加一个元素，返回该`Set`对象。\n\n```js\n//创建Set\nconst s=new Set();\ns.add(1);\ns.add(3);\ns.add(4).add(5);  //Set(4) {1, 3, 4, 5}\n```\n\n#### 2.has方法\n\n返回一个布尔值，表示该值在`Set`中存在与否。\n\n```js\nconsole.log(s.has(1)); //true\n```\n\n#### 3.delete 方法\n\n移除`Set`中指定的元素。\n\n```js\ns.delete(1); //删除元素1\n```\n\n#### 4.clear方法\n\n移除`Set`对象内的所有元素。\n\n```js\ns.clear();\n```\n\n#### 5.forEach()方法\n\n`forEach` 方法会根据集合中元素的插入顺序，依次执行提供的回调函数。\n\n```js\n// 按照成员添加进集合的顺序遍历的\n// 回调函数后面的参数是用来改变上下文的\ns.forEach(function(value,key,set){\n    // 在set中，value与key是等价的\n    console.log(value,key,set);\n},document);\n\n```\n\n### 6.size属性\n\n判断Set实例中有多少元素。\n\n### Set的构造函数\n\n```js\n// 1.数组\nconst s =new Set([1,2,3,1]);\nconsole.log(s);  //Set(3) {1, 2, 3}\n\n// 2.字符串、arguments、NodeList、Set\n//字符串做参数\nconsole.log(new Set(\"hi\")) //Set(2) {\"h\", \"i\"}\n\n//arguments做参数\nfunction fun(){\n    console.log(new Set(arguments));\n}\nfun(1,2,1);\n//NodeList做参数\nconsole.log(new Set(document.querySelectorAll('p'))); \n//Set(3) {p, p, p}\n\n// Set实例做参数\nconsole.log(new Set(s));\n//Set(3) {1, 2, 3}\n\n// 和原来完全相同，但不等于原来的，相当于复制。\nconsole.log(new Set(s)===s); \n//false\n```\n\n## Set重复判定方式\n\nSet 对重复值的判断基本遵循严格相等(===)， 但是对于NaN的判断与===不同，Set中NaN等于NaN。\n\n```js\n// Set实例会把2个NaN看做相等的元素\nconsole.log(NaN===NaN ); //false\nconsole.log(new Set([NaN,2,NaN]));\n//Set(2) {NaN, 2}\n\n\nconst s=new Set();\ns.add({}).add({});\nconsole.log(s); //此时s中有2个空对象\n```\n\n## Set应用\n\n```js\n// 1.数组或字符串去重时\n//Set(3) {1, 2, 3}\nconst s=new Set([1,2,2,3,2,1]);\nconsole.log(s);\n\n// 再将Set实例转换为数组\n// ①使用forEach\nlet arr=[];\ns.forEach((value)=>arr.push(value));\n// ②使用展开语法\nconsole.log([...s]);\n\n// 2.字符串去重\nconst s1=new Set('abbacd');\n// 将s1转为数组后，再用数组的join方法转为字符串\nconsole.log([...s1].join(\"\"));\n\n// 3.存放dom元素\nconst s2=new Set(document.querySelectorAll(\"p\"));\n// 使用forEach改变p标签文本颜色\ns2.forEach((elem)=>elem.style.color='red');\n```\n\n\n\n## Map\n\n### 定义\n\n**`Map`** 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者[原始值](https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive)) 都可以作为一个键或一个值。\n\n```js\n// 1.Map和对象本质上都是键值对的集合\n// 对象\nconst person={\n    name:\"alex\",\n    age:19\n}\n// Map\nconst m=new Map();\nm.set('name','alex');\nm.set('age',18);\nconsole.log(m);\n\n// 2.Map和对象的区别\n// 对象一般使用字符串当做键\nconst obj={\n    name:'alex'\n}\n\n// Map的键可以为基本数据类型，也可以为引用数据类型。\n// 基本数据类型：数字、字符串、布尔值、undefined、null\n// 引用数据类型：对象、数组、Set、Map、函数等\nconst mm=new Map();\nmm.set(true,'true');\nmm.set({},'object');\nmm.set(new Set([1,2]),'set');\nconsole.log(mm);\n// {true => \"true\", {…} => \"object\", Set(2) => \"set\"}\n```\n\n### 方法和属性\n\n```js\n// 1.set方法\n// 使用set添加的新成员，键如果已经存在，后添加的键值对覆盖已有的\nconst m=new Map();\nm.set(\"age\",18).set(true,\"true\").set(\"age\",20);\nconsole.log(m);\n\n// 2.get方法，用于获取指定成员\nconsole.log(m.get('age')); //20\nconsole.log(m.get(true)); //true\n\n// 3.has方法 用于判断是否有指定的键\nconsole.log(m.has('age'));\n\n// 4.delete方法\n// 删除不存在的成员，什么都不会发生，也不会报错\nm.delete('age');\nconsole.log(m);\n\n// 5.clear方法 删除所有的成员\nm.clear();\n\n// 6.forEach()方法\nconst mm=new Map();\nmm.set(\"age\",12).set(\"gender\",\"male\").set(\"name\",\"xiaoming\");\nmm.forEach((value,index,map)=>console.log(value,index,map==mm));\n// 12 \"age\"  true\n// male gender true\n// xiaoming name true\n\n// 7.size属性\nconsole.log(mm.size); //3\n```\n\n### Map构造函数的参数\n\n```js\n// 1.只能传二维数组，必须体现键和值\nconst m1=new Map([[\"name\",\"alex\"],[\"age\",18]]);\nconsole.log(m1);\n// Map(2) {\"name\" => \"alex\", \"age\" => 18}\n\n// 2.Set, Map等\n// Set中也必须体现键和值\nconst s=new Set([[\"gender\",\"male\"],[\"name\",\"xiaoming\"]]);\nconst m2=new Map(s);\nconsole.log(m2); \n//Map(2) {\"gender\" => \"male\", \"name\" => \"xiaoming\"}\n\nconst m3=new Map(m1);\nconsole.log(m3, m3==m1);\n//Map(2) {\"name\" => \"alex\", \"age\" => 18} false\n```\n\n### Map注意事项\n\n```js\n// 1.Map中判断键名是否相同\n// 基本遵循严格相等(===)\n// 例外就是Map中NaN等于NaN\n\nconst m1=new Map();\nm1.set(NaN,1).set(NaN,2);\nconsole.log(m1); //Map(1) {NaN => 2}\n\n// 2.什么时候使用Map什么使用对象\n// 2.1如果只需要Key->Value结构\n// 2.2或者需要除了字符串以为的值做键，使用Map更合适\n// 只有模拟现实世界的实体的时候才会使用对象\n```\n\n```html\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<script>\nconst [p1, p2, p3] = document.querySelectorAll('p');\n// 二维数组做Map构造函数的参数\nconst m = new Map([\n    [p1, { color: \"red\", backgroundColor: \"yellow\", fontSize: \"20px\" }],\n    [p2, { color: \"pink\", backgroundColor: \"orange\", fontSize: \"20px\" }],\n    [p3, { color: \"green\", backgroundColor: \"blue\", fontSize: \"20px\" }]\n]);\nm.forEach((value, key) => {\n    for(const p in value){\n        // 有点难理解，多想想还是能理解的\n        key.style[p]=value[p];\n    }\n});\n</script>\n```\n\nSeT/Map总结\n\n![image-20210610175416433](https://i.loli.net/2021/06/10/xEzm7YcGRnAQhOs.png)\n\n![image-20210610175506099](https://i.loli.net/2021/06/10/E1XHQBYURp8IgjC.png)\n\n![image-20210610175655315](https://i.loli.net/2021/06/10/JNXSG9yTZjbPFdK.png)\n\n![image-20210610175710050](https://i.loli.net/2021/06/10/aXh4TLvYSuf1qQE.png)\n\n![image-20210610175745097](https://i.loli.net/2021/06/10/FOBbacWuGtU1I23.png)\n\n![image-20210610175848667](https://i.loli.net/2021/06/10/drQIFyD9Gmx2YJ7.png)\n\n# Iterator\n\n![image-20210610180620847](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610180623.png)\n\n### 定义\n\nIterator是如下的过程：Symbol.iterator(可遍历对象的生成方法)->it(可遍历对象)->next()->next()->(知道done为true)\n\n```js\n// 数组的.__proto__原型中有Symbol.iterator这个方法\n// 而这个方法不符合命名规范，因此用方括号来调用。\n\n// Symbol.iterator 可遍历对象的生成方法\n// it：可遍历对象 (可迭代对象)\nconst it = [1, 2][Symbol.iterator]();\nconsole.log(it); //Array Iterator {}\n\n// value表示值，done表示遍历还没有完成\nconsole.log(it.next());//{value: 1, done: false}\nconsole.log(it.next()); //{value: 2, done: false}\nconsole.log(it.next()); //{value: undefined, done: true}\n\n\n```\n\n为什么需要Iterator遍历器\n\n遍历数组： for循环、forEach方法 ，遍历对象：for in循环。Iterator 遍历器是一个统一的遍历方式\n\n### for of 用法\n\nfor of将下面Iterator过程封装起来。\n\n```js\nconst arr=[1,2,3];\nconst it =arr[Symbol.iterator]();\nlet next=it.next();\nwhile(!next.done){\n    console.log(next.value);\n    next=it.next();\n}\n```\n\nfor of循环只会遍历出那些done为false时对应的value值\n\n```js\nfor(let i of arr){\n    console.log(i);\n}\n```\n\nfor of可以和break、continue一起使用\n\n```js\nconst arr2=[4,5,6,7,8];\nfor (let i of arr2){\n    if(i===7){\n        break;\n    }\n    console.log(i);\n}\n```\n\n在for of循环中获取索引值\n\n```js\n// keys()得到的是索引的可遍历对象，可以遍历出索引值\nconst arr3=['a','b','c','d'];\nfor(let keys of arr3.keys()){\n    console.log(keys); //\n}\n// values()得到的是值的可遍历对象，可以遍历出值\nfor(let value of arr3.values()){\n    console.log(value); // a b c d\n}\n// entries()可以得到索引和值组成的数组的可遍历对象\nfor(let entries of arr3.entries()){\n    console.log(entries);\n}\n// 结合解构赋值\nfor(let [index, value] of arr3.entries()){\n    console.log(index,value);\n}\n```\n\n### 可遍历\n\n只要有Symbol.iterator方法，并且这个方法可以生成可遍历对象，就是可遍历的。\n\n只要可遍历，就可以使用for...of循环来统一遍历。\n\n#### 原生可遍历\n\n数组、字符串、Set、Map、arguments、NodeList这些原生可遍历。\n\n```js\nfor(const i of [1,2,3]){\n    console.log(i);\n} // 1 2 3\n\nfor(const i of new Set([4,5,6])){\n    console.log(i);\n} // 4 5 6\n\nfor(const i of document.querySelectorAll('p')){\n    console.log(i);\n    i.style.color='red';\n}\n```\n\n#### 非原生可遍历\n\n没有Symbol.iterator属性的，可以为它手动添加该属性就可以使用for...of循环了。\n\n1.一般的对象\n\n```js\nconst person ={age:18,sex:'male'};\n// 给一般的对象手动添加Symbol.iterator属性\nperson[Symbol.iterator]=()=>{\n    let index=0;\n    return {\n        next(){\n            index++;\n            if(index===1){\n                return{\n                    value:person.age,\n                    done:false\n                }\n            }else if(index===2){\n                return{\n                    value:person.sex,\n                    done:false\n                }\n            }else{\n                return{\n                    value:undefined,\n                    done:true\n                }\n            }\n        }\n    }\n};\nfor(let item of person){\n    console.log(item);\n}\n```\n\n2.有length和索引值的对象\n\n```js\nconst obj={\n    0:'alex',\n    1:'male',\n    length:2\n}\nobj[Symbol.iterator]=()=>{\n    let index=0;\n    return {\n        next(){\n            let value,done;\n            if(index<obj.length){\n                value=obj[index];\n                done=false\n            }else{\n                done=true;\n            }\n            index++;\n            return{\n                value,\n                done\n            }\n        }\n    }\n}\n\n// 或者直接使用数组原型链的Symbol.iterator属性\nobj[Symbol.iterator]=Array.prototype[Symbol.iterator];\n\nfor(let i of obj){\n    console.log(i);\n}\n```\n\n### 使用Iterator的场合\n\n 1.数组的展开运算符\n\n只要是原生可遍历的，就可以使用数组的展开运算。数组、字符串、Set、Map、arguments、NodeList这些原生可遍历。\n\n```js\nconsole.log(...[1,2,3]); //1 2 3\nconsole.log(...\"str\"); // s t r\nconsole.log(...new Set([1,2,3]));\n```\n\n2.数组的解构赋值\n\n只要是原生可遍历的，就可以使用数组的进行解构赋值。因为可以在解构赋值前，进行展开运算让其变为数组。\n\n```js\n\nconst [a,b]=[1,2];\n// 在解构赋值前，\"hi\"进行了展开运算 [...\"hi\"]\nconst [c,d]=\"hi\";\nconst [e,f]=new Set([7,8]);\nconsole.log(a,b,c,d,e,f);\n\n```\n\n### Iterator总结\n\n![image-20210610222129343](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222130.png)\n\n![image-20210610222156497](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222157.png)\n\n![image-20210610222304196](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222305.png)\n\n![image-20210610220808524](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222325.png)\n\n\n\n# ES6新增方法\n\n## 字符串的新增方法\n\n### includes()\n\n**`includes()`** 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。\n\n```js\n// 1.基本用法\nconsole.log('abc'.includes('a')); //true\nconsole.log('abc'.includes('ab')); //true\nconsole.log('abc'.includes('ac')); //false\n\n// 2.第二个参数\n// 表示开始搜索的位置，默认是0\nconsole.log('abc'.includes('a',1));//false\n```\n\n### padStart()和padEnd()\n\n**`padStart()`** 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。\n\n> ```js\n> str.padStart(targetLength [, padString])\n> ```\n\n`targetLength`\n\n当前字符串需要填充到的目标长度。**如果这个数值小于当前字符串的长度，则返回当前字符串本身。**\n\n`padString` 可选\n\n填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 \" \"（空格）。\n\n```js\n'abc'.padStart(10);         // \"       abc\"\n'abc'.padStart(10, \"foo\");  // \"foofoofabc\"\n'abc'.padStart(6,\"123465\"); // \"123abc\"\n'abc'.padStart(8, \"0\");     // \"00000abc\"\n'abc'.padStart(1);          // \"abc\"\n```\n\n**`padEnd()`** 方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。\n\n### trimStart()和trimEnd()\n\n**`trimStart()`** 方法从字符串的开头删除空格。`trimEnd() `方法从一个字符串的末端移除空白字符。**`trim()`** 方法会从一个字符串的两端删除空白字符。\n\n`trimLeft()` 是`trimStart()`的别名。`trimRight()` 是`trimEnd() `的别名。\n\n```js\nconst s=\"   abc  \";\nconsole.log(s.trimStart()); //\"abc  \"\nconsole.log(s.trimEnd()); //\"   abc\"\nconsole.log(s.trim()); //\"abc\"\nconsole.log(s); //\"   abc  \"\n```\n\n## 数组新增方法\n\n### includes()\n\n`includes()` 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。\n\n> ```js\n> arr.includes(valueToFind[, fromIndex])\n> ```\n\n`valueToFind`\n\n需要查找的元素值。**Note:** 使用 `includes()`比较字符串和字符时是区分大小写。\n\n`fromIndex` 可选\n\n从`fromIndex` 索引处开始查找 `valueToFind`。如果为负值，则按升序从 `array.length + fromIndex` 的索引开始搜 。如果计算出的索引小于 0，则整个数组都会被搜索。默认为 0。\n\n```js\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n```\n\n### Array.from()\n\n`Array.from()` 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n\n> ```js\n> Array.from(arrayLike[, mapFn[, thisArg]])\n> ```\n\n`arrayLike`\n\n想要转换成数组的伪数组对象或可迭代对象。\n\n`mapFn` 可选\n\n如果指定了该参数，新数组中的每个元素会执行该回调函数。\n\n`thisArg` 可选\n\n可选参数，执行回调函数 `mapFn` 时 `this` 对象。\n\n```js\n//从 String 生成数组\nArray.from('foo');\n// [ \"f\", \"o\", \"o\" ]\n\n//从Set生成数组\nconst set = new Set(['foo', 'bar', 'baz', 'foo']);\nArray.from(set);\n// [ \"foo\", \"bar\", \"baz\" ]\n[...new Set([1,2,3])]; //使用展开语法会更方便\n\n//从 Map 生成数组\nconst map = new Map([[1, 2], [2, 4], [4, 8]]);\nArray.from(map);\n// [[1, 2], [2, 4], [4, 8]]\n\nconst mapper = new Map([['1', 'a'], ['2', 'b']]);\nArray.from(mapper.values());\n// ['a', 'b'];\n\nArray.from(mapper.keys());\n// ['1', '2'];\n```\n\n拥有length的任意对象都可以通过Array.from()转换为数组。\n\n```js\nconst obj={length:2};\nconsole.log(Array.from(obj)); \n// [undefined, undefined]\n\nconst obj1={length:2,0:\"liu\",1:\"jiaqi\",3:\"haha\"};\nconsole.log(Array.from(obj1)); //[\"liu\", \"jiaqi\"]\n```\n\n在Array.from()中使用箭头函数\n\n作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组中。\n\n```js\n// 在Array.from()中使用箭头函数\n// 作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组中。\nconsole.log([1,2,3].map((value)=>value*2)); //2 4 6\n\nconsole.log(Array.from({length:4},(value,index)=>value=index*2));\n// 0 2 4 6\n```\n\n### find()和findIndex()\n\n `find()` 方法返回数组中满足提供的测试函数的**第一个元素**的值，否则返回undefined。\n\n`findIndex()`方法返回数组中满足提供的测试函数的第一个元素的**索引**。若没有找到对应元素则返回-1。\n\n> ```js\n> arr.find(callback[, thisArg])\n> ```\n\n`callback`在数组每一项上执行的函数，接收 3 个参数：\n\n- `element`当前遍历到的元素。\n- `index`可选 当前遍历到的索引。\n- `array`可选 数组本身。\n\n`thisArg`可选,执行回调时用作`this` 的对象。\n\n```js\n//返回找到的第一个质数\nfunction isPrime(element, index, array) {\n  var start = 2;\n  while (start <= Math.sqrt(element)) {\n    if (element % start++ < 1) {\n      return false;\n    }\n  }\n  return element > 1;\n}\n\nconsole.log([4, 6, 8, 12].find(isPrime)); // undefined, not found\nconsole.log([4, 5, 8, 12].find(isPrime)); // 5\n\n```\n\n```js\n//用对象的属性查找数组里的对象\nvar inventory = [\n    {name: 'apples', quantity: 2},\n    {name: 'bananas', quantity: 0},\n    {name: 'cherries', quantity: 5}\n];\n\nfunction findCherries(fruit) {\n    return fruit.name === 'cherries';\n}\n\nconsole.log(inventory.find(findCherries)); // { name: 'cherries', quantity: 5 }\n```\n\n\n\n## 对象的新增方法\n\n### Object.assign()\n\n#### 定义\n\n`Object.assign()` 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。\n\n如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。\n\n> ```js\n> Object.assign(target, ...sources)\n> ```\n\n```js\nconst apple = {\n    color: \"red\",\n    taste: \"sweet\"\n}\n\nconst banana = {\n    color: \"yellow\",\n    category: \"fruit\"\n}\n// Object.assign直接合并到了第一个对象中，返回的就是合并后的对象\nconsole.log(Object.assign(apple,banana));\nconsole.log(Object.assign(apple,banana)===apple); \n//因为此时的apple 已经被改变了 true\n\n// 对象是引用类型的，Object.assign会直接修改第一个对象。\n// 如果想要原来的对象不被修改，可以第一个参数放空对象\nconsole.log(Object.assign({},apple,banana));\n```\n\n#### 注意事项\n\n```js\n// Object.assign(目标对象，源对象);\n// 1.基本数据类型作为源对象\n// 与对象的展开类似，先转换为对象，再合并\nconsole.log(Object.assign({},undefined)); //{}\nconsole.log(Object.assign({},null)); //{}\nconsole.log(Object.assign({},22)); //{}\nconsole.log(Object.assign({},22)); //{}\nconsole.log(Object.assign({},\"str\")); //{0: \"s\", 1: \"t\", 2: \"r\"}\n\n// 2.同名属性的替换\n// 后面的属性直接覆盖前面的属性\nconst apple = {\n    color: [\"蓝色\",\"紫色\"],\n    taste: \"sweet\"\n}\nconst banana = {\n    color: [\"红色\",\"黄色\"],\n    category: \"fruit\"\n}\nconsole.log(Object.assign(apple,banana)); //{color:[\"红色\", \"黄色\"], taste: \"sweet\", category: \"fruit\"}\n```\n\n#### 应用\n\n```js\nconst user=useroptions=>{\n    const defaults={\n        name:\"alex\",\n        age:0,\n        gender:\"male\"\n    }\n    const options=Object.assign({},defaults,useroptions);\n    console.log(options);\n};\nuser();\n```\n\n### Object.keys()、Object.values()、Object.entries()\n\n#### 用法\n\n```js\nconst person={\n    name:\"Alex\",\n    age:18\n}\nconsole.log(Object.keys(person)); // [\"name\", \"age\"]\nconsole.log(Object.values(person)); // [\"Alex\", 18]\nconsole.log(Object.entries(person)); // [ [\"name\", \"Alex\"],[\"age\", 18]]\n```\n\n#### 与数组的类似方法的区别\n\n数组的keys(), values(), entries()等方法都是实例方法，返回的都是可遍历对象。对象的Object.keys(), Object.values(),Object.values()等方法返回的都是数组。\n\n```js\n// 2.与数组类似的方法的区别\nconsole.log([1,2].keys()); // 返回可遍历对象\nconsole.log([1,2].values()); // 返回可遍历对象\nconsole.log([1,2].entries()); // 返回可遍历对象\n```\n\n#### for...of\n\n```js\nconst person={\nname:\"Alex\",\nage:18\n}\n\nfor (const [key,value] of Object.entries(person)){\n    console.log(key,value)\n}\n\n// Object.keys(), Object.values(), Object.entires()\n// 这三个方法并不能保证顺序，和for...in 一样无法保证顺序\n```\n\n## 新增方法总结\n\n![image-20210611160231073](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160239.png)\n\n![image-20210611160310273](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160311.png)\n\n![image-20210611160444694](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160445.png)\n\n![image-20210611160655803](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160657.png)\n\n![image-20210611160733628](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160735.png)\n\n![image-20210611160904401](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160905.png)\n\n\n\n# Promise\n\n### 定义\n\nPromise 一般用来解决层层嵌套的回调函数(回调地狱callback hell)的问题。\n\n### 基本用法\n\n![image-20210611181350553](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611181352.png)\n\n```js\n// 1.实例化构造函数生成实例对象\n// Promise 解决的不是回调函数，而是用于解决回调地域的问题。\nconst p = new Promise((resolve, reject) => {\n    resolve({ name: 'alex' });\n    // reject(new Error(\"reason\"));\n});\nconsole.log(p);\n// 2.Promise的状态\n// Promise的状态一旦完成变化，就不会再改变了 \n// Promise有3种状态，一开始是pending(未完成),执行resolve,变成fulfilled(resolved)已成功, 执行reject，变成rejected，已失败\n// 执行resolve();\n// pending->fulfilled\n// 执行reject();\n// pending->rejected\n\n// 3.then()方法\n// 当Promise的状态变为fulfilled时，执行第一个then()方法\n// 当Promise的状态变为rejected时，执行第二个then()方法\np.then((data) => {\n    console.log(\"success\", data);\n}, (err) => {\n    console.log(\"error\",err);\n});\n\n// 4.resolve和reject函数的参数\n// 执行resole或者reject函数所传的参数，可以被then中的回调函数接收\n```\n\n### then()\n\n![image-20210611183459134](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611183500.png)\n\n![image-20210611183554286](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611183555.png)\n\n```js\n// 1.then()什么时候执行\n// pending->fulfilled时，执行then的第一个回调函数\n// pending->rejected时，执行then的第二个回调函数\n\n// 2.执行后的返回值\n// then()执行后返回一个新的Promise对象，返回的新的Promise对象又可以继续调用then();\nconst p =new Promise((resolve,reject)=>{\n    reject();\n});\n// 在then()的回调函数中，return后面的东西，会用Promise包装一下\n// return undefined 等价于 return new Promise((resolve)=>{resolve(undefined);});\n// then()执行后返回新的Promise对象，新的Promise对象调用then，默认会返回成功状态的Promise对象\n// 如果想要返回失败状态的Promise对象，return的时候写完整。return new Promise((resolve,reject)=>{reject();})\n\np.then(\n    ()=>{\n        console.log('success1');\n    },\n    ()=>{\n        console.log('error1');\n        return 123;\n    }\n).then(\n    (data)=>{\n        console.log('success2',data);\n    },\n    ()=>{\n        \n        console.log('error2');\n    }\n);\n\n// 3.then()方法返回的Promise对象的状态是如何改变的\n```\n\n### 使用Promise解决回调地狱\n\n```js\n// Promise 一般用来解决层层嵌套的回调函数(回调地狱callback hell)的问题\nconst move = (el, { x = 0, y = 0 } = {}, end = () => { }) => {\n    el.style.transform = `translate3d(${x}px,${y}px,0)`;\n    el.addEventListener(\n        'transitionend', () => {\n            end();\n        }, false\n    );\n};\nconst box = document.getElementById(\"box\");\n// document.addEventListener('click',()=>{\n//     move(box,{x:150},()=>{\n//         move(box,{x:150,y:150},()=>{\n//             move(box,{y:150},()=>{\n//                 move(box,{x:0,y:0});\n//             })\n//         })\n//     })\n// },false);\nconst movePromise = (el, point) => {\n    return new Promise((resolve) => {\n        move(el, point, () => {\n            resolve();\n        })\n    })\n}\n\ndocument.addEventListener('click', () => {\n    movePromise(box, { x: 150 }).then(() => {\n        return movePromise(box, { x: 150, y: 150 })\n    }).then(() => {\n        return movePromise(box, { x: 0, y: 150 })\n    }).then(() => {\n        return movePromise(box, { x: 0, y: 0 })\n    });\n}, false);\n```\n\n### catch()\n\n```js\n// 1.尽管then()方法的第一个回调函数可以传成功后执行的回调函数，第二个传失败后执行的回调函数\n// 2.但为了更好地语义化，一般只在then()中传成功后执行的，catch()传reject()后执行的回调函数\n// catch专门用来处理rejected的状态，catch的本质是then的特例\nnew Promise((resolve,reject)=>{\n    // resolve(123);\n    reject('reason');\n}).then((data)=>{\n    console.log(data);\n}).catch((err)=>{\n    console.log(err);\n    // 同样会默认返回一个成功的Promise对象。\n    // 如果想要返回一个错误的Promise对象\n    // 可以throw一个错误\n    throw new Error('errrrr');\n});\n// 3.catch()可以捕获前面的错误\n// 一般总是Promise对象后面要跟着catch方法，这样可以处理Promise内部发生的错误\n```\n\n### Promise.resolve()和Promise.reject()\n\n```js\n// 1.Promise.resolve()\n// 是成功状态Promise的一种简写形式\nnew Promise((resolve) => { resolve(\"foo\"); });\n// 简写\nPromise.resolve(\"foo\");\n\n//① 参数：一般参数\nPromise.resolve(\"foo\").then(data => console.log(data));\n//②当Promise.resolve()接收的是Promise对象时，直接返回的是这个Promise对象，什么也不做\nconst p1 = new Promise(resolve => {\n    setTimeout(resolve, 1000, \"我执行了\");\n});\nPromise.resolve(p1).then(data => {\n    console.log(data);\n})\nconsole.log(Promise.resolve(p1) === p1); //true\n// 当resolve函数接收的是Promise对象时，后面的then会根据传递的Promise对象的状态变化决定执行哪一个回调\nnew Promise(resolve => resolve(p1)).then(data => { console.log(data) });\n\n// ③具有then方法的对象，对象中的then()方法和new Promise()差不多\nconst thenable={\n    // 和new Promise()里的参数差不多\n    then(resolve, reject){\n        console.log(\"thenable\");\n        resolve(\"123\");\n    }\n}\nPromise.resolve(thenable).then(data=>console.log(data),err=>console.log(err));\n\n// 2.Promise.reject();\n// 是失败状态的一种简写形式\nnew Promise((resolve,reject)=>{\n    reject('reason');\n});\nPromise.reject('reason');\n// 不管什么参数都会原封不动的向后传递，作为后续方法的参数\nPromise.reject(p1).catch((err)=>{\n    console.log(err);\n});\n```\n\n### Promise.all()\n\n```js\n// Promise.all()用来关注多个Promise对象的状态变化\n// 可以传入多个Promise实例，包装成一个新的Promise对象返回\nconst delay=ms=>{\n    return new Promise(resolve=>{\n        setTimeout(resolve,ms);\n    })\n};\nconst p1=delay(1000).then(()=>{\n    console.log('p1 finished');\n    // return Promise.reject(\"uifsf\");\n    return '我是p1';\n});\nconst p2=delay(2000).then(()=>{\n    console.log('p2 finished');\n    return '我是p2';\n});\n// Promise.all()的状态变化与所有传入的Promise实例对象状态变化有关\n// 所有状态都变成了resolved，最终的状态才会变为resolved\n// 只要有一个变成了rejected，最终的状态才会变为rejected\n\n// 要给Promise.all()中传入数组，或者任何可遍历的参数\nconst p=Promise.all([p1,p2]);\np.then(data=>{\n    console.log(data);\n},(err)=>{\n    console.log(err);\n});\n```\n\n### Promise.race()和Promise.allSettled()\n\n```js\n// 1.Promise.race()\nconst delay=ms=>{\n    return new Promise(resolve=>{\n        setTimeout(resolve,ms);\n    });\n};\nconst p1=delay(1000).then(()=>{\n    console.log('p1 finished');\n    return \"我是p1\";\n});\nconst p2=delay(2000).then(()=>{\n    console.log('p2 finised');\n    return \"我是p2\";\n});\n// Promise.race()的状态取决于第一个完成的Promise实例对象\n// 如果第一个完成的成功了，就是最终的成功\n// 如果第一个完成的失败了，就是最终的失败\nconst racePromise=Promise.race([p1,p2]);\nracePromise.then(data=>{\n    console.log(data);\n},(err)=>{\n    console.log(err);\n});\n```\n\n```js\n// 2.Promise.allSetted()\nconst delay=ms=>{\n    return new Promise(resolve=>{\n        setTimeout(resolve,ms);\n    });\n};\nconst p1=delay(1000).then(()=>{\n    console.log(\"p1 finished\");\n    return Promise.reject(\"fjsf\");\n    // return \"我是p1\";\n});\n\nconst p2=delay(200).then(()=>{\n    console.log(\"p2 finished\");\n    return \"我是p2\";\n});\n\nconst allSettedPromise=Promise.allSettled([p1,p2]);\n// Promise.allSetted()的状态与传入的Promise的状态无关\n// 永远都是成功的，它只会忠实的记录各个Promise的表现\n\nallSettedPromise.then((data)=>{\n    console.log(\"succeed\",data);\n},(err)=>{\n    console.log(\"fail\",err);\n});\n```\n\n### 注意事项\n\n![image-20210612210200175](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210612210208.png)\n\n```js\n// 1.resolve和reject函数执行后的代码\n// 推荐在调用resolve或reject函数的时候加上return，不再执行它们后面的代码\nnew Promise((resolve, reject) => {\n    resolve(123);\n    // reject(\"reason\");\n    console.log(\"hi\"); //还可以执行\n});\n\n// 2.Promise.all/race/allSettled的参数\n// 参数如果不是Promise数组，会将不是Promise的数组元素转变成Promise对象\n// Promise.all([1,2,3]).then(datas=>{\n//     console.log(datas);\n// });\n// 等价于\nPromise.all([\n    Promise.resolve(1),\n    Promise.resolve(2),\n    Promise.resolve(3)\n]).then(data => {\n    console.log(data);\n}) //[1,2,3]\n\n// 除了数组，任何可遍历的都可以作为数组\n// 数组、字符串、Set、Map、NodeList、arguments\nPromise.all(new Set([1, 2, 3])).then(data => {\n    console.log(data);\n}) //[1,2,3]\n\n// 3.Promise.all/race/allsettled错误处理\n// 错误既可以单独处理，也可以统一处理\n// 一旦被处理，就不会再处理一遍\nconst delay = ms => {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n};\nconst p1 = delay(1000).then(data => {\n    console.log(\"p1 finished\");\n    return \"我是P1\";\n});\nconst p2 = delay(2000).then(data => {\n    console.log(\"p2 finished\");\n    return Promise.reject('rej');\n\n});\n\nconst allPromise = Promise.all([p1, p2]);\nallPromise.then((datas) => {\n    console.log(datas);\n}).catch(err => {\n    console.log(err);\n});\n```\n\nPromise应用异步加载图片\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        #img{\n            width: 80%;\n            padding: 10%;\n        }\n    </style>\n</head>\n<body>\n    <img id=\"img\" src=\"https://img.mukewang.com/szimg/5feb016d097497d905400304.jpg\" alt=\"\">\n    <script>\n        // 1.异步加载图片\n        const loadImgAsync=url=>{\n            return new Promise((resolve,reject)=>{\n                // Image()函数将会创建一个新的HTMLImageElement实例。\n                // 它的功能等价于 document.createElement('img')\n                const img=new Image();\n                // Promise函数中不用写具体过程，只需要决定用resolve还是reject即可\n                // onload 属性是一个事件处理程序用于处理Window, XMLHttpRequest, <img> 等元素的加载事件，当资源已加载时被触发。     \n                img.onload=()=>{\n                    console.log(\"sb\");\n                    resolve(img);\n                };\n                // 当一项资源（如<img>或<script>）加载失败，加载资源的元素会触发一个Event接口的error事件，并执行该元素上的onerror()处理函数。\n                img.onerror=()=>{\n                    reject(new Error(`couldn't load image at ${url}`));\n                }\n                img.src=url;\n            });\n        }\n        let url1='https://img4.mukewang.com/szimg/60b9864a09995aa605400304.png';\n        const imgDom=document.getElementById('img');\n        loadImgAsync(url1).then(img=>{\n            console.log(img.src);\n            setTimeout(()=>{\n                imgDom.src=img.src;\n            },1000);\n        }).catch(err=>{\n            console.log(err);\n        });\n    </script>\n</body>\n</html>\n```\n\n### 总结\n\n![image-20210613141548090](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141556.png)\n\n![image-20210613141645235](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141646.png)\n\n![image-20210613141717621](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141718.png)\n\n![image-20210613141849863](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141850.png)\n\n![image-20210613142007368](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142008.png)\n\n![image-20210613142050967](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142051.png)\n\n![image-20210613142135558](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142136.png)\n\n![image-20210613142150152](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142151.png)\n\n![image-20210613142216303](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142217.png)\n\n![image-20210613163042772](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163043.png)\n\n![image-20210613163153293](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163154.png)\n\n![image-20210613163219353](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163220.png)\n\n![image-20210613163245239](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163246.png)\n\n![image-20210613163303168](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163304.png)\n\n# class\n\n### 定义\n\n**class 声明**创建一个基于原型继承的具有给定名称的新类。\n\n要注意类的写法，并没有圆括号直接跟上了花括号，方法和方法之间不需要用逗号分隔。\n\n```js\n// 类可以看做是对象的模板，用一个类可以创建出许多不同的对象\n// 类名一般来说，首字母是大写的\nclass Person{\n    // 实例化时必须执行构造方法，所以必须有构造方法，但是可以不写出来\n    constructor(name,age){\n        this.name=name;\n        this.age=age;\n        // 一般只在构造方法中定义属性，方法不在构造方法中定义\n    }\n    // 各个实例共用的方法\n    speak(){\n        console.log('speak');\n    }\n}\n// 实例对象\nconst zs=new Person('张三',18);\nconst ls=new Person('ls',58);\nconsole.log(zs.speak===ls.speak); //true\n```\n\n声明的Person类本质上是一个函数，和构造函数差不多。\n\n```js\nconsole.log(typeof Person); //function\nconsole.log(Person.prototype.speak);\n```\n\n对比一下Person构造函数。\n\n```js\n// 构造函数\nfunction Person1(name,age){\n    this.name=name;\n    this.age=age;\n}\nPerson1.prototype.speak=function(){\n    console.log('speak');\n}\n```\n\n### 2种定义形式\n\n```js\n// 1.声明形式\nclass Person{\n    constructor(){\n\n    }\n    speak(){}\n}\n\n// 2.表达式形式\nconst Person1=class{\n    constructor(){\n\n    }\n};\n```\n\n### 立即执行的类\n\n类也可以像立即执行的匿名函数一样立即执行，但要记得在类前面加上关键字`new`，否则会报错。\n\n```js\n// 立即执行的类\nnew (class{\n    constructor(){\n        console.log(\"hahah\");\n    }\n})();\n\n// 立即执行函数\n// (function(){\n\n// })();\n```\n\n### 实例属性、静态方法、静态属性\n\n#### 1.实例属性\n\n实例属性一般可以用作默认值，它不能用`var`、`let`、`const`等关键字声明。\n\n```js\n// 1.实例属性\nclass Person{\n    //constructor外 不能用关键字声明属性，也不能用this\n    // 一般用作默认值\n    name=\"zhangsan\"\n    age=18;\n    // 实例方法 方法是值为函数的特殊属性\n    getAge=function(){\n        return this.age;\n    }\n    constructor(name){\n        this.name=name;\n    }\n}\nconst p=new Person('alex');\nconsole.log(p.name,p.age);// alex 18\nconsole.log(p.getAge()); //18\n```\n\n#### 2.静态方法\n\n静态方法是类的方法，不需要实例化类就能够调用。用关键字static来声明静态方法。\n\n```js\nclass Person{\n    constructor(name,sex){\n        this.name=name;\n        this.sex=sex;\n    }\n    static speak(){\n        console.log('haha...');\n        console.log(this); //this指向Person类\n    }\n    speak(){\n        console.log(\"awsl\");\n        console.log(this); //this指向实例对象\n    }\n}\n// 调用类的方法 静态方法\nPerson.speak();  //haha...\nconst xm=new Person(\"xm\",12);\nxm.speak(); //awsl\n\n//也可以把类的方法写在\n\n```\n\n# module\n\n### 定义\n\n模块是一个一个的局部作用域的代码块。模块系统可以解决①模块化的问题②消除全局变量③管理加载顺序。\n\n### 例子一\n\n一个模块即使没有导出，也可以将其导入。要注意在`script`标签中 加上 `type=\"module\"`，导入后代码会执行一遍，多次导入也仅仅会执行一遍。\n\n> exp1.html\n\n```html\n<script type=\"module\">\nimport './module.js'  //18\n</script>\n```\n\n> module.js\n\n```js\nconst age=18;\nconsole.log(age);\n```\n\n没有导出，直接导入就相当于写成:\n\n```html\n<script scr='./module.js' type='module'></script>\n```\n\n### 例子二\n\n一个模块只能有一个export default。\n\n> exp2.html\n\n```html\n<script type=\"module\">\n//可以随便取名\nimport age from 'moudle.js';\nconsole.log(age); //18\n\n</script>\n```\n> module.js\n\n```js\nconst age=18;\n// 一个模块只能有一个export default\nexport default age;\n```\n\n### 例子三\n> exp3.html\n\n```html\n<script type=\"module\">\n    // import age from './module.js'; \n    // 上面的是export default对应的import\n\n    // 法一：普通导入\n    // 不能随意命名，需要和导出的名字一样\n    // 因此无法导出匿名函数、类等\n    import {age,gender} from './module.js';\n    \n    // 法二：导入时起别名\n    import {func,userName as person} from './module.js';\n    \n    // 法三： 整体导入(会同时导入export和export default导出的)，obj为别名\n    import * as obj from './module.js';\n    console.log(age,gender,func,person);\n    console.log(obj);\n\n    // 法四：同时导入export和export default导出的参数\n    // 注意export default导出的要写在前面\n    import weight,{height} from './module.js';\n    console.log(weight,height); //56 168\n</script>\n```\n\n> module.js\n\n```js\n// 法一：export后面接声明或语句\nexport const age =18;\n\n// 法二： export后接 {argument};\nconst gender=\"male\";\nexport {gender}; //√\n// export gender; ×\n\n// 注意不能导出匿名函数或者类等\nfunction fn(){}\nclass Name{}\n\n\n// 法三：导出为别名\nexport {fn as func,Name as userName};\n\n\nexport default 56;\nexport const height=168;\n```\n\n### 注意事项\n\n1.模块顶层的`this`指向\n\n顶层是值不在for块级、function函数作用域中，直接在模块中的作用域。\n\n在模块中，顶层的this是指向undefined的。\n\n```js\nif(typeof this!=='undefined'){\n    // 如果this不为undefined，说明并不是用模块的方式来加载的\n    throw new Error(\"没有以模块的形式导入\");\n}\n```\n\n2.import和import()\n\nimport关键字具有提升效果，会提升到整个模块的头部、率先执行。也即import执行的时候，其他代码还没有开始执行。因此import和export命令只能在模块的顶层，**不能放在在代码块中执行**。\n\n```js\n\n// 会直接报错！！！\nif (PC){\n    import 'pc.js';\n}else if(mobile){\n    import 'mobile.js';\n}\n```\n\n而import()可以按条件导入，且会返回promise对象。\n\n```js\nif (PC){\n    import('pc.js').then().catch();\n}else if(mobile){\n    import('mobile.js').then().catch();\n}\n```\n\n3.先导入再导出的复合写法\n\n```js\n// 把age从别的模块导入，再又导出，相当于一个中转站\n// export {age} from './module.js'; \n// 复合写法导出的，无法在当前模块使用\n// 相当于下面的import和export语句，但是上面的复合写法age无法正常输出\nimport {age} from './module.js';\nconsole.log(age); // 可以正常输出\nexport {age} from './module.js';\nconsole.log(age); // 可以正常输出\n```\n\n### 总结\n\n![image-20210615232937033](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615232944.png)\n\n![image-20210615233123778](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233124.png)\n\n![image-20210615233157075](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233158.png)\n\n![image-20210615233228936](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233229.png)\n\n![image-20210615233313046](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233314.png)\n\n![image-20210615233403786](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233404.png)\n\n![image-20210615233451256](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233452.png)\n\n![image-20210615233557251](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233558.png)\n\n![image-20210615233651225](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233652.png)\n\n# node入门\n\n笔记内容源自：https://youtu.be/TlB_eWDSMt4\n\n在powershell中输入`code .`会用VS Code打开当前文件夹。\n\n![image-20210616170534238](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616170542.png)\n\n 首先进入到要执行js的文件夹，然后输入 node +要运行的程序名，即可运行js。\n\n在node中，没有window和document对象，但在node中有其他的对象可以操作文件、操作系统、网络等。\n\n![image-20210616171058446](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616171059.png)\n\n在浏览器中中运行JavaScript，可以通过window.setTimeout()来调用setTimeout全局函数。在node中，则可以通过global.setTimeout()来调用，变量和函数不会添加到global对象中。\n\n```js\nvar message=''; \n//在浏览器中变量message会被添加到window对象中\n//在node中变量message不会被添加到global对象中\n\nconsole.log(global.message); //undefined\n```\n\n在node中任何文件都被视为模块(module)，在文件中定义的变量或函数的作用域限制在了该文件。如果需要使用这些私有变量或函数，需要明确地export它。\n\n![image-20210616172237280](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616172238.png)\n\n任何node应用程序都至少有一个main 模块(文件)，我们称之为main module。\n\n使用require()来加载模块，require函数的参数时是目标加载模块的路径。当导出不止一个参数时，require会返回一个从目标模块导出的对象。\n\n> app.js\n\n```js\nconst logger = require('./logger')\n//{ log: [Function: log], url: 'http://mylogger.io/log' }\nconsole.log(logger);\n\n//调用另外一个模块的函数\nlogger.log(\"message\")\n```\n\n> logger.js\n\n```js\nvar  url='http://mylogger.io/log';\n\nfunction log(message){\n    // send an http request\n    console.log(message);\n}\n\n//输出的名字可以自定义\nmodule.exports.log=log;\nmodule.exports.url=url;\n```\n\n最后，console.log(logger)会输出一个对象。\n\n![image-20210617112257229](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210617112306.png)\n\n如果只需要导出一个参数，导出时可以不自定义名字，这样require函数返回的不是导出模块的参数对象，而是返回的导出模块导出的变量名或常量名。\n\n> app.js\n\n```js\nconst log = require('./logger')\n\nlog(\"message\");\n```\n\n> logger.js\n\n```js\nvar  url='http://mylogger.io/log';\n\nfunction log(message){\n    // send an http request\n    console.log(message);\n}\n\n\nmodule.exports=log;\n```\n\n# babel\n\nbabel官网： [https://babeljs.io/](https://babeljs.io/)。\n\n主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。\n\nBabel本身可以编译ES6的大部分语法，比如let、 const、箭头函数、类。但是对于ES6新增的API，比如Set、Map、 Promise等全局对象都不能直接编译，需要借助其它的模块。Babel一般需要配合 Webpack来编译模块语法。\n\n![image-20210618115716149](https://img-blog.csdnimg.cn/img_convert/c3b181a491acea93cf6d8ef6a58c848d.png)\n\n## 初始化\n\n要在项目目录文件下，在powershell中安装babel所需要的包。首先要`npm init`，初始化项目，回车后，会提示包名，注意包名不能是中文。\n\n![image-20210618120620517](https://img-blog.csdnimg.cn/img_convert/833503aaf604e173ec462d091e6c9f2a.png)\n![image-20210618120938972](https://img-blog.csdnimg.cn/img_convert/18f61389a04283749f3fe5fec2fd72fc.png)\n\n一系列回车后，项目中会多了一个package.json的文件，执行`npm init`就是为了得到这个json文件。这个json文件会记录安装的其他的包。\n\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210618121541.png\" alt=\"image-20210618121540287\" style=\"zoom:33%;\" />\n\n## 安装babel\n\n安装babel的命令：\n\n```bash\nnpm install --save-dev @babel/core @babel/cli @babel/preset-env\n```\n\n`--save-dev`：`save`表示要把它们的信息写入 package.json, `dev`表示是开发模式下。\n\n` @babel/core @babel/cli @babel/preset-env`表示三个一般都要安装的babel包。\n\n\n> PS：只要有`package.json`，就可以直接在命名行中输入`npm install`安装所有的该json文件中提到的所有包。\n\n## 配置babel\n![image-20210618122619509](https://img-blog.csdnimg.cn/img_convert/f1c3c2ba0abdba32f6fbda1eda7926fe.png)\n需要在根目录`package.json`文件中添加下面的代码。\n```json\n\"scripts\": {\n  \"build\": \"babel src -d dist\"\n}\n```\n![image-20210618123402148](https://img-blog.csdnimg.cn/img_convert/703d2d400cda8e83635ec81522c221bb.png)\n`babel src -d lib`是`babel src --out-dir dist`的缩写，也就是从src目录输出到lib目录。\n\n---\n\n在项目的根目录中创建名为 `babel.config.json`的配置文件。\n\n如果想要转换`let` 、`const`，必须要在`target`中写`ie:10`，因为目前除了ie不支持几乎所有版本的浏览器都支持。不写的话就代表不把ie10作为目标浏览器，就不会转换`const`、`let`、`箭头函数`等这些几年前就出来的语法。\n\n```json\n{\n  \"presets\": [\n    [\n      \"@babel/env\",\n      {\n        \"targets\": {\n            \"ie\":\"10\",\n          \"edge\": \"17\",\n          \"firefox\": \"60\",\n          \"chrome\": \"67\",\n          \"safari\": \"11.1\"\n        },\n        \"useBuiltIns\": \"usage\",\n        \"corejs\": \"3.6.5\"\n      }\n    ]\n  ]\n}\n```\n当然，如果缺省`target`，直接写如下代码，默认会转换为ES5。\n\n```json\n{\n  \"presets\": [\"@babel/env\"]\n}\n```\n\n## 编译\n\n```bash\nnpm run build\n```\n\nbuild就是`package.json`script中自定义的名字，通过npm run build开始执行。可以在项目中看到多了名为lib的文件夹，里面有babel编译后的js文件。\n\n![image-20210618124246687](https://img-blog.csdnimg.cn/img_convert/a52e2d447d3daf8b9d66240b53e3bdad.png)\n\n**最后，我走了很多很多弯路，因为我tm没有看官方文档**。要是我看看文档，我也就知道了`const`、`let`为什么没有转换。因为要定义target，要把ie也作为目标浏览器。\n\n[中文官方文档](https://babel.docschina.org/docs/en/usage/)拜托我自己多看官方文档，再到处提问。\n\n# Webpack\n\n[webpack中文官网](https://www.webpackjs.com/)\n\nwebpack是静态模块打包器，当使用webpack处理应用程序时，会将这些模块打包成一个或多个文件。\n\n它可以处理js/css/图片/字体/图标等文件，用于处理静态(本地)文件。\n\n模块化是一种将系统分离成独立功能部分的方法，严格定义模块接口、模块间具有透明性。\n\n## 概念\n\n### 入口(entry)\n\n**入口起点(entry point)** 指示 webpack 应该使用哪个模块，来作为构建其内部 [依赖图(dependency graph)](https://webpack.docschina.org/concepts/dependency-graph/) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。\n\n默认值是 `./src/index.js`，但你可以通过在 [webpack configuration](https://webpack.docschina.org/configuration) 中配置 `entry` 属性，来指定一个（或多个）不同的入口起点。例如：\n\n> **webpack.config.js**\n\n```js\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n};\n```\n\n#### 多个入口\n\n用法：`entry: { <entryChunkName> string | [string] } | {}`\n\n> **webpack.config.js**\n\n```javascript\nmodule.exports = {\n  entry: {\n    app: './src/app.js',\n    adminApp: './src/adminApp.js',\n  },\n};\n```\n\n#### 描述入口的对象 \n\n用于描述入口的对象。你可以使用如下属性：\n\n- `dependOn`: 当前入口所依赖的入口。它们必须在该入口被加载前被加载。\n- `filename`: 指定要输出的文件名称。\n- `import`: 启动时需加载的模块。\n- `library`: 指定 library 选项，为当前 entry 构建一个 library。\n- `runtime`: 运行时 chunk 的名字。如果设置了，就会创建一个以这个名字命名的运行时 chunk，否则将使用现有的入口作为运行时。\n- `publicPath`: 当该入口的输出文件在浏览器中被引用时，为它们指定一个公共 URL 地址。请查看 [output.publicPath](https://webpack.docschina.org/configuration/output/#outputpublicpath)。\n\n`runtime` 和 `dependOn` 不应在同一个入口上同时使用，所以如下配置无效，并且会抛出错误：\n\n> **webpack.config.js**\n\n```javascript\nmodule.exports = {\n  entry: {\n    a2: './a',\n    b2: {\n      runtime: 'x2',\n      dependOn: 'a2',\n      import: './b',\n    },\n  },\n};\n```\n\n确保 `runtime` 不能指向已存在的入口名称，例如下面配置会抛出一个错误：\n\n```javascript\nmodule.exports = {\n  entry: {\n    a1: './a',\n    b1: {\n      runtime: 'a1',\n      import: './b',\n    },\n  },\n};\n```\n\n另外 `dependOn` 不能是循环引用的，下面的例子也会出现错误：\n\n```javascript\nmodule.exports = {\n  entry: {\n    a3: {\n      import: './a',\n      dependOn: 'b3',\n    },\n    b3: {\n      import: './b',\n      dependOn: 'a3',\n    },\n  },\n};\n```\n\n\n\n### 输出(output)\n\n**output** 属性告诉 webpack 在哪里输出它所创建的 *bundle*，以及如何命名这些文件。主要输出文件的默认值是 `./dist/main.js`，其他生成文件默认放置在 `./dist` 文件夹中。\n\n注意，即使可以存在多个 `entry` 起点，但只能指定一个 `output` 配置。\n\n你可以通过在配置中指定一个 `output` 字段，来配置这些处理过程：\n\n```javascript\nconst path = require('path');\n\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    // path:绝对路径\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-first-webpack.bundle.js',\n  },\n};\n```\n\n在上面的示例中，我们通过 `output.filename` 和 `output.path` 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成(emit)到哪里。在代码最上面导入的 path 模块是什么，它是一个 [Node.js 核心模块](https://nodejs.org/api/modules.html)，用于操作文件路径。\n\n如果有多个入口文件，出口文件需要改名，否则就会覆盖。\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:{\n        \"main\":'./src/index.js',\n        \"app\":'./src/module.js'\n    },\n    output:{\n        // [name]表示入口的名字\n        filename:'[name].bundle.js',\n        path:path.resolve(__dirname,'dist'),  \n        // 清除没有用到的文件\n        clean:true\n        \n    },\n    mode:'development',\n};\n```\n\n### [loader](https://www.webpackjs.com/loaders/babel-loader/)\n\nwebpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。**loader** 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 [模块](https://webpack.docschina.org/concepts/modules)，以供应用程序使用，以及被添加到依赖图中。\n\n> ##### Warning\n>\n> 注意，loader 能够 `import` 导入任何类型的模块（例如 `.css` 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是很有必要的，因为这可以使开发人员创建出更准确的依赖关系图。\n\n在更高层面，在 webpack 的配置中，**loader** 有两个属性：\n\n1. `test` 属性，识别出哪些文件会被转换。\n2. `use` 属性，定义出在进行转换时，应该使用哪个 loader。\n\n> **webpack.config.js**\n\n```javascript\nconst path = require('path');\n\nmodule.exports = {\n  output: {\n    filename: 'my-first-webpack.bundle.js',\n  },\n  module: {\n    rules: [{ test: /\\.txt$/, use: 'raw-loader' }],\n  },\n};\n```\n\n以上配置中，对一个单独的 module 对象定义了 `rules` 属性，里面包含两个必须属性：`test` 和 `use`。这告诉 webpack 编译器(compiler) 如下信息：\n\n> “嘿，webpack 编译器，当你碰到「在 `require()`/`import` 语句中被解析为 '.txt' 的路径」时，在你对它打包之前，先 **use(使用)** `raw-loader` 转换一下。”\n\n> ##### Warning\n>\n> 重要的是要记住，在 webpack 配置中定义 rules 时，要定义在 `module.rules` 而不是 `rules` 中。为了使你便于理解，如果没有按照正确方式去做，webpack 会给出警告。\n\n### [插件(plugin)](https://www.webpackjs.com/plugins/)\n\nloader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。\n\n想要使用一个插件，你只需要 `require()` 它，然后把它添加到 `plugins` 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 `new` 操作符来创建一个插件实例。\n\n> **webpack.config.js**\n\n```javascript\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装\nconst webpack = require('webpack'); // 用于访问内置插件\n\nmodule.exports = {\n  module: {\n    rules: [{ test: /\\.txt$/, use: 'raw-loader' }],\n  },\n  plugins: [new HtmlWebpackPlugin({ template: './src/index.html' })],\n};\n```\n\n在上面的示例中，`html-webpack-plugin` 为应用程序生成一个 HTML 文件，并自动注入所有生成的 bundle。\n\n### 模式(mode)\n\n通过选择 `development`, `production` 或 `none` 之中的一个，来设置 `mode` 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 `production`。\n\n```javascript\nmodule.exports = {\n  mode: 'production',\n};\n```\n\n### 浏览器兼容性(browser compatibility) \n\nwebpack 支持所有符合 [ES5 标准](https://kangax.github.io/compat-table/es5/) 的浏览器（不支持 IE8 及以下版本）。webpack 的 `import()` 和 `require.ensure()` 需要 `Promise`。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 [提前加载 polyfill](https://webpack.docschina.org/guides/shimming/)。\n\n## 入门\n\nhttps://webpack.docschina.org/guides，用这个入门非常棒，讲解非常详细，内容也超级丰富，只练一遍是记不住的。\n\n### 极简教程\n\n1.首先要先在项目中初始化，`npm init -y`，会生成一个package.json文件，-y表示全部默认，省去回车过程。\n\n2.在powershell中输入`npm install --save-dev webpack webpack-cli`来安装webpack。\n\n3.项目根目录下创建一个名为`webpack.config.js`的配置文件，在这个配置文件中用module.exports来导出配置。\n\n下面的代码的意思为入口为'./src/indec.js'，出口为'dist'文件夹，文件名为'bundle.js'。\n\n```js\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index.js',\n    output:{\n        path:path.resolve(__dirname,'dist'),\n        filename:\"bundle.js\"\n    }\n};\n```\n\n4.在`package.json`文件中的scrpits下添加如下代码：\n\n```json\n\"scripts\": {\n  \"build\":\"webpack\"\n}\n```\n\n5.在终端中输入`npm run build`，webpack即会开始编译，可以在dist目录下看到编译结果。\n\n如果在webpack配置文件中(默认为webpack.config.js)中将模式改为**development**(默认为production)，编译后的文件会看起来更加清晰。\n\n```diff\nconst path=require('path');\n\nmodule.exports={\n    entry:'./src/index.js',\n    output:{\n        path:path.resolve(__dirname,'dist'),\n        filename:\"bundle.js\"\n    },\n +  mode:'development',\n};\n```\n\n## [插件plugins](https://www.webpackjs.com/plugins/)\n\nloader被用于帮助webpack处理各种模块，而插件则可用于执行范围更广的任务。\n\n### [HtmlWebpackPlugin](https://www.webpackjs.com/plugins/html-webpack-plugin/)\n\n如果我们更改了一个入口起点的名称，甚至添加了一个新的入口，会发生什么？会在构建时重新命名生成的 bundle，但是我们的 `index.html` 文件的`script`标签仍然引用旧的名称。让我们用 [`HtmlWebpackPlugin`](https://webpack.docschina.org/plugins/html-webpack-plugin) 来解决这个问题。\n\n有了这个插件，就不用在`npm run build`改变了js的名字后手动去改变html中`script`标签引入的js路径。\n\n#### 单入口配置\n\n首先安装插件，并且调整 `webpack.config.js` 文件：\n\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n\n> **webpack.config.js**\n\n```diff\n const path = require('path');\n+ const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   entry: {\n     index: './src/index.js',\n   },\n+  plugins: [\n+    new HtmlWebpackPlugin({\n+      //指定一个html文件作为模板\n+      template:\"./index.html\"\n+    }),\n+  ],\n   output: {\n     filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n   mode:'development'\n };\n```\n\n虽然在 `dist/` 文件夹我们已经有了 `index.html` 这个文件，然而 `HtmlWebpackPlugin` 还是会默认生成它自己的 `index.html` 文件。也就是说，它会用新生成的 `index.html` 文件，替换我们的原有文件。\n\n#### 多html配置\n\n配置含有2个html和2个js的项目。\n\n```diff\nconst path=require('path');\nconst HtmlWebpackPlugin=require('html-webpack-plugin');\n\nmodule.exports={\n    mode:'development',\n    // 多入口\n+    entry:{\n+        index:'./src/index.js',\n+        search:'./src/search.js'\n+    },\n    output:{\n        filename:'[name].js',\n        path:path.resolve(__dirname,\"dist\"),\n    },\n    // 多入口 有几个入口就实例化几次\n+    plugins:[\n+        new HtmlWebpackPlugin({\n+            //指定一个html文件作为模板\n+           template:\"./index.html\",\n+            //多个html必须要命名，否则默认为index.html\n+            //同名文件，后生成的文件会覆盖前面的\n+            filename:'index.html',\n+            //指定要引入的js文件，否则会引入所有的js文件\n+            chunks:['index'] //写entry中的名字\n+        }),\n+        new HtmlWebpackPlugin({\n+            template:\"./search.html\",\n+            filename:'./search.html',\n+            // 同时引入index和search两个文件\n+            chunks:['index','search'],\n+        })\n+    ]\n}\n```\n\n#### 其他功能\n\n```diff\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   entry: {\n     index: './src/index.js',\n   },\n  plugins: [\n   new HtmlWebpackPlugin({\n     //指定一个html文件作为模板\n     template:\"./index.html\",\n+     minify:{\n+         //删除index.html中的注释\n+         removeComments:true,\n+         // 删除index.html中的空格\n+         collapseWhitespace:true,\n+         //删除html标签属性值的双引号\n+         removeAttributeQuotes:true\n+     }\n    }),\n  ],\n   output: {\n     filename: '[name].js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n   mode:'development'\n };\n```\n\n## [loader](https://www.webpackjs.com/loaders/babel-loader/)\n\nloader可以用webpack能够处理非JS文件(css、图片、字体等)的模块。\n\n### 使用loader\n\n在你的应用程序中，有两种使用 loader 的方式：\n\n- [配置方式](https://webpack.docschina.org/concepts/loaders/#configuration)（推荐）：在 **webpack.config.js** 文件中指定 loader。\n- [内联方式](https://webpack.docschina.org/concepts/loaders/#inline)：在每个 `import` 语句中显式指定 loader。\n\n#### 配置方式\n\n[`module.rules`](https://webpack.docschina.org/configuration/module/#modulerules) 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：\n\nloader **从右到左（或从下到上）**地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 [loader 功能](https://webpack.docschina.org/concepts/loaders/#loader-features) 章节，了解有关 loader 顺序的更多信息。\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          // [style-loader](/loaders/style-loader)\n          { loader: 'style-loader' },\n          // [css-loader](/loaders/css-loader)\n          {\n            loader: 'css-loader',\n            options: {\n              modules: true\n            }\n          },\n          // [sass-loader](/loaders/sass-loader)\n          { loader: 'sass-loader' }\n        ]\n      }\n    ]\n  }\n};\n```\n\n#### 内联方式(不推荐)\n\n可以在 `import` 语句或任何 [与 \"import\" 方法同等的引用方式](https://webpack.docschina.org/api/module-methods) 中指定 loader。使用 `!` 将资源中的 loader 分开。每个部分都会相对于当前目录解析。\n\n```js\nimport Styles from 'style-loader!css-loader?modules!./styles.css';\n```\n\n### 已废用file-loader\n\n**v5 版本已废弃**file-loader: 请向 [`asset modules`](https://webpack.docschina.org/guides/asset-modules/) 迁移。资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。\n\n在 webpack 5 之前，通常使用：\n\n- [`raw-loader`](https://webpack.docschina.org/loaders/raw-loader/) 将文件导入为字符串\n- [`url-loader`](https://webpack.docschina.org/loaders/url-loader/) 将文件作为 data URI 内联到 bundle 中\n- [`file-loader`](https://webpack.docschina.org/loaders/file-loader/) 将文件发送到输出目录\n\n资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：\n\n- `asset/resource` 发送一个单独的文件并导出 URL。之前通过使用 `file-loader` 实现。\n- `asset/inline` 导出一个资源的 data URI。之前通过使用 `url-loader` 实现。\n- `asset/source` 导出资源的源代码。之前通过使用 `raw-loader` 实现。\n- `asset` 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 `url-loader`，并且配置资源体积限制实现。\n\n### babel-loader\n\n先要安装babel，毕竟活是babel干的，webpack只是打包的。\n\n```bash\nnpm install --save-dev @babel/core @babel/cli @babel/preset-env\n```\n\n接着安装babel-loader这个插件。\n\n```bash\nnpm install --save-dev babel-loader\n```\n\n接下来，配置babel，在根目录下创建`babel.config.json`的文件，并写下如下代码。\n\n```json\n\n{\n  \"presets\": [\"@babel/env\"]\n}\n```\n\n下一步，便是在`webpack.config.js`文件中配置loader。\n\n```diff\nconst path = require('path');\nmodule.exports = {\n    entry: {\n        \"index\": './src/module.js'\n    },\n    output: {\n        filename: '[name].bundle.js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n+    module: {\n+       rules: [\n+            {\n+                test: /\\.js$/,\n+                // 排除node_modules里面的js文件\n+                exclude: /node_modules/,\n+                use: \"babel-loader\"\n+            },\n+        ],\n+    },\n    mode: 'development',\n   \n};\n```\n\n如果想要转换promise这些，需要安装babel的[垫片插件](https://babeljs.io/docs/en/babel-polyfill)。\n\n第一步要先安装`core-js`。\n\n![image-20210620124715403](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620124723.png)\n\n```bash\nnpm install --save-dev core-js\n```\n\n接着在源文件夹下(src)的js代码中引入该模块。\n\n```js\nimport \"core-js/stable\";\n```\n\n值得注意的是安装babel-loader和core-js的版本，尝试了很多次发现，他们需要低版本。\n\n```json\n\"devDependencies\": {\n    \"@babel/core\": \"^7.11.0\",\n    \"@babel/preset-env\": \"^7.11.0\",\n    \"babel-loader\": \"^8.1.0\",\n    \"core-js\": \"^3.6.5\",\n    \"webpack\": \"^4.44.1\",\n    \"webpack-cli\": \"^3.3.12\"\n  }\n```\n\n## 综合应用\n\n### 加载css\n\n#### style-loader+css-loader\n\n首先要在src文件夹下的某个js文件中导入css文件。\n\n```js\nimport './src/style.css';\n```\n\n为了在 JavaScript 模块中 `import` 一个 CSS 文件，你需要安装 [style-loader](https://webpack.docschina.org/loaders/style-loader) 和 [css-loader](https://webpack.docschina.org/loaders/css-loader)，并在 [`module` 配置](https://webpack.docschina.org/configuration/module) 中添加这些 loader：\n\n```bash\nnpm install --save-dev style-loader css-loader\n```\n\n> **webpack.config.js**\n\n```diff\n const path = require('path');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n+  module: {\n+    rules: [\n+      {\n+        test: /\\.css$/i,\n+        use: ['style-loader', 'css-loader'],\n+      },\n+    ],\n+  },\n };\n```\n\n模块 loader 可以链式调用。链中的每个 loader 都将对资源进行转换。链会逆序执行。第一个 loader 将其结果（被转换后的资源）传递给下一个 loader，依此类推。最后，webpack 期望链中的最后的 loader 返回 JavaScript。\n\n应保证 loader 的先后顺序：[`'style-loader'`](https://webpack.docschina.org/loaders/style-loader) 在前，而 [`'css-loader'`](https://webpack.docschina.org/loaders/css-loader) 在后。loader数组是从右到左执行，先通过'css-loader'识别css文件，再通过`style-loader`将css代码嵌入到style标签中。（在控制台可以看到）\n\n![image-20210620190450697](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620190458.png)\n\n#### 插件+loader\n\n和上面的`style-loader`在style标签中内联不同，插件`mini-css-extract-plugin`会让html文件通过`link`标签引入css文件\n\n首先要在src文件夹下的某个js文件中导入css文件。\n\n```js\nimport './src/style.css';\n```\n\n接着安装插件`mini-css-extract-plugin`和`css-loader`。\n\n```bash\nnpm install --save-dev css-loader mini-css-extract-plugin\n```\n\n配置`webpack.config.js`\n\n```diff\n const path = require('path');\n+ const MiniCssExtractPlugin=require('mini-css-extract-plugin');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n+  module: {\n+    rules: [\n+      {\n+        test: /\\.css$/i,\n+        //注意导入顺序\n+        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n+      },\n+    ],\n+  },\n+\tplugins: [\n+        new MiniCssExtractPlugin({\n+            //指定生成的css的文件名\n+            filename:'[name].css'\n+        }),\n+    ],\n };\n```\n\n最后，可以在dist文件夹下看到生成的css文件。\n\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620194806.png\" alt=\"image-20210620194803569\" style=\"zoom:33%;\" />\n\n而且在控制台可以看到样式是通过`link`标签引入的。\n\n![image-20210620194914627](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620194915.png)\n\n### 加载图片\n\n如果是远程图片，则可以直接显示。而本地图片通过webpack打包，需要额外处理。\n\n> **webpack.config.js**\n\n```diff\n const path = require('path');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n   module: {\n     rules: [\n       {\n         test: /\\.css$/i,\n         use: ['style-loader', 'css-loader'],\n       },\n+      {\n+        test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n+        type: 'asset/resource',\n+      },\n     ],\n   },\n };\n```\n\n现在，在 `import MyImage from './my-image.png'` 时，此图像将被处理并添加到 `output` 目录，*并且* `MyImage` 变量将包含该图像在处理后的最终 url。在使用 [css-loader](https://webpack.docschina.org/loaders/css-loader) 时，如前所示，会使用类似过程处理你的 CSS 中的 `url('./my-image.png')`。loader 会识别这是一个本地文件，并将 `'./my-image.png'` 路径，替换为 `output` 目录中图像的最终路径。而 [html-loader](https://webpack.docschina.org/loaders/html-loader) 以相同的方式处理 `<img src=\"./my-image.png\" />`。\n\n#### js中使用图片\n\n如果需要在js文件中使用图片，也可以用`asset module`这个loader，无需额外安装其他的loader。只需要在js中使用`import`引入图片即可。\n\n```js\n// 把图片当做模块引入\nimport logo from './image/img.png';\n\nconsole.log(logo); // 会输出图片的路径\nconst myLogo = new Image();\nmyLogo.src = logo;\ndocument.body.appendChild(myLogo)\n```\n\n#### 自定义文件名\n\n默认情况下，`asset/resource` 模块以 `[hash][ext][query]` 文件名发送到输出目录。\n\n可以通过在 webpack 配置中设置 [`output.assetModuleFilename`](https://webpack.docschina.org/configuration/output/#outputassetmodulefilename) 来修改此模板字符串：\n\n>  **webpack.config.js**\n\n```diff\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n+   assetModuleFilename: 'images/[hash][ext][query]'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.png/,\n        type: 'asset/resource'\n      }\n    ]\n  },\n};\n```\n\n如可以设置为`assetModuleFilename: 'images/[name][ext]'`，此时的[name]指图片本身的名字，而是entry中的名字，[ext]是指\"filename extension\"，用它表示文件原来的后缀。\n\n另一种自定义输出文件名的方式是，将某些资源发送到指定目录：\n\n```diff\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n+   assetModuleFilename: 'images/[hash][ext][query]'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.png/,\n        type: 'asset/resource'\n-     }\n+     },\n+     {\n+       test: /\\.html/,\n+       type: 'asset/resource',\n+       generator: {\n+         filename: 'static/[hash][ext][query]'\n+       }\n+     }\n    ]\n  },\n};\n```\n\n使用此配置，所有 `html` 文件都将被发送到输出目录中的 `static` 目录中。\n\n`Rule.generator.filename` 与 [`output.assetModuleFilename`](https://webpack.docschina.org/configuration/output/#outputassetmodulefilename) 相同，并且仅适用于 `asset` 和 `asset/resource` 模块类型。\n\n#### 添加公共路径\n\n当使用` MiniCssExtractPlugin`生成的css在dist下一个文件夹时(如`dist/css/style.css`)，此时如果不设置生成的css的公共路径(`publicPath`)，图片不会正常显示。\n\n因为`css-loader`以为生成的`style.css`文件直接在dist目录下，所以图片路径会默认设置为`url(./随机名字.png)`，而事实上图片的正确的路径为`url(../随机名字.png)`。\n\n```diff\n  img-demo\n  |- package.json\n  |- webpack.config.js\n  |- /dist\n    |- index.js\n    |- index.html\n+   |- 随机字符.png\n+   |- /css\n+    \t|- style.css\n  |- /src\n    |- icon.png\n    |- style.css\n    |- index.js\n  |- /node_modules\n```\n\n因此，需要在`options`中设置`publicPath`为`../`，这样该css文件引入的所有url前面都会加上`../`的前缀。\n\n> **webpack.config.js**\n\n```diff\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst MiniCssExtractPlugin=require('mini-css-extract-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist'),\n    },\n    module:{\n        rules:[\n            {\n                test:/\\.css$/i,\n                //此时生成的css在dist/css的文件夹下，要设置公共路径\n                //这样该css文件所有的url前面都会加上../的前缀。\n+                use:[{\n+                    loader:MiniCssExtractPlugin.loader,\n+                    options:{\n+                        publicPath:'../'\n+                    }\n+                }, 'css-loader']},\n            {\n                test:/\\.(png|svg|jepg|gif)/,\n                type:'asset/resource'\n            }\n        ]  \n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            //指定一个html文件作为模板\n            template: \"./index.html\"\n        }),\n+        new MiniCssExtractPlugin({\n+            //在dist/css文件夹下创建一个index.css文件\n+            filename:'css/[name].css'\n+        })\n    ],\n    mode: 'development'\n};\n```\n\n#### html中的图片\n\ncss中引入的图片可以用`type:asset/resource;` ，html中的图片则需要额外安装loader`html-withimg-loader`\n\n```bash\nnpm install --save-dev html-withimg-loader\n```\n\n此时，我只写出新增的代码，其他的如图片loader，html-webpack-plugin和mini-css-extract-plugin插件用法参考上面的代码。\n\n**注意**:这个`html-withimg-loader`必须要配合处理图片的loader——`asset  module` 一起使用，因为真正能够加载图片的还是`asset module`，`html-withimg-loader`用来处理路径问题。\n\n```js\nmodule:{\n    rules:[\n        {\n            test:/\\.(html|htm)/i,\n            use:'html-withimg-loader'\n        }\n    ]  \n},\n```\n\n#### asset/inline\n\nasset/inline输出的 data URI，默认是呈现为使用 Base64 算法编码的文件内容。\n\n**webpack.config.js**\n\n> 关于[rules.parser](https://webpack.docschina.org/configuration/module/#ruleparserdataurlcondition)\n\n```diff\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  module: {\n    rules: [\n+      {\n+       test: /\\.svg/,\n+       type: 'asset/inline',\n+\t\tparser:{\n+\t\t\tdataUrlCondition:\n+\t\t\t\tmaxSize:10000\n+      \t\t\t//表示10kb\n+       }\n+     },\n\n    ]\n  }\n};\n```\n\nmaxSize为10000，表示小于10kb将其转换为base64格式，大于则按照asset/resource来处理。一般只对较小的图片进行这种操作，因为转为base64格式后，图片会以base64格式来存在js中。\n\n### 配置开发环境\n\n#### 使用source map 追踪错误\n\n当 webpack 打包源代码时，可能会很难追踪到 error(错误) 和 warning(警告) 在源代码中的原始位置。例如，如果将三个源文件（`a.js`, `b.js` 和 `c.js`）打包到一个 bundle（`bundle.js`）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 `bundle.js`。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。\n\n为了更容易地追踪 error 和 warning，JavaScript 提供了 [source maps](http://blog.teamtreehouse.com/introduction-source-maps) 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于 `b.js`，source map 就会明确的告诉你。\n\nsource map 有许多 [可用选项](https://webpack.docschina.org/configuration/devtool)，请务必仔细阅读它们，以便可以根据需要进行配置。\n\n对于本指南，我们将使用 `inline-source-map` 选项，这有助于解释说明示例意图（此配置仅用于示例，不要用于生产环境）：\n\n**webpack.config.js**\n\n```diff\n const path = require('path');\n const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   mode: 'development',\n   entry: {\n     index: './src/index.js',\n     print: './src/print.js',\n   },\n+  devtool: 'inline-source-map',\n   plugins: [\n     new HtmlWebpackPlugin({\n       title: 'Development',\n     }),\n   ],\n   output: {\n     filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n     clean: true,\n   },\n };\n```\n\n### 使用 webpack-dev-server \n\n`webpack-dev-server` 为你提供了一个基本的 web server，并且具有 live reloading(实时重新加载) 功能。设置如下：\n\n```bash\nnpm install --save-dev webpack-dev-server\n```\n\n修改配置文件，告知 dev server，从什么位置查找文件：\n\n**webpack.config.js**\n\n```diff\n const path = require('path');\n const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   mode: 'development',\n   entry: {\n     index: './src/index.js',\n     print: './src/print.js',\n   },\n   devtool: 'inline-source-map',\n+  devServer: {\n+    contentBase: './dist',\n+  },\n   plugins: [\n     new HtmlWebpackPlugin({\n       title: 'Development',\n     }),\n   ],\n   output: {\n     filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n     clean: true,\n   },\n };\n```\n\n以上配置告知 `webpack-dev-server`，将 `dist` 目录下的文件 serve 到 `localhost:8080` 下。（serve，将资源作为 server 的可访问文件）\n\n**package.json**\n\n```diff\n {\n   \"name\": \"webpack-demo\",\n   \"version\": \"1.0.0\",\n   \"description\": \"\",\n   \"private\": true,\n   \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n     \"watch\": \"webpack --watch\",\n+    \"start\": \"webpack serve --open\",\n     \"build\": \"webpack\"\n   },\n   \"keywords\": [],\n   \"author\": \"\",\n   \"license\": \"ISC\",\n   \"devDependencies\": {\n     \"html-webpack-plugin\": \"^4.5.0\",\n     \"webpack\": \"^5.4.0\",\n     \"webpack-cli\": \"^4.2.0\",\n     \"webpack-dev-server\": \"^3.11.0\"\n   },\n   \"dependencies\": {\n     \"lodash\": \"^4.17.20\"\n   }\n }\n```\n\n现在，在命令行中运行 `npm start`，我们会看到浏览器自动加载页面。如果你更改任何源文件并保存它们，web server 将在编译代码后自动重新加载。试试看！\n\n`webpack-dev-server` 具有许多可配置的选项。关于其他更多配置，请查看 [配置文档](https://webpack.docschina.org/configuration/dev-server)。\n\n> ###### Warning\n>\n> webpack-dev-server 在编译之后不会写入到任何输出文件。而是将 bundle 文件保留在内存中，然后将它们 serve 到 server 中，就好像它们是挂载在 server 根路径上的真实文件一样。如果你的页面希望在其他不同路径中找到 bundle 文件，则可以通过 dev server 配置中的 [`publicPath`](https://webpack.docschina.org/configuration/dev-server/#devserverpublicpath-) 选项进行修改。\n","slug":"JavaScript-ES6学习笔记","published":1,"updated":"2021-07-27T10:18:32.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr8ldbc0000moun1g5c0u49","content":"<h1 id=\"ES6简介\"><a href=\"#ES6简介\" class=\"headerlink\" title=\"ES6简介\"></a>ES6简介</h1><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104138.png\" alt=\"image-20210530104137712\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104352.png\" alt=\"image-20210530104351721\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104440.png\" alt=\"image-20210530104439339\"></p>\n<h1 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h1><p>const就是为了那些一旦初始化就不希望重新赋值的情况设计的。使用 const声明常量，一旦声明，就必须立即初始化。</p>\n<p>const声明的常量，允许在<strong>不重新赋值</strong>的情况下修改它的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person=&#123;<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span>&#125;;<br>person[gender]=<span class=\"hljs-string\">&quot;female&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"let、const、var的区别\"><a href=\"#let、const、var的区别\" class=\"headerlink\" title=\"let、const、var的区别\"></a>let、const、var的区别</h1><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530131646.png\" alt=\"image-20210530131645190\"></p>\n<p>1.重复声明：已经存在的变量，又声明了一次。</p>\n<p>var允许重复声明，let、 const不允许重复声明</p>\n<p>2.变量提升</p>\n<p>var 会提升变量的声明到当前作用域顶部，但是赋值不会提升；let和const不会变量提升。</p>\n<p>3.暂时性死区</p>\n<p>只要作用域内存在 let、const，它们所声明的变量或常量就自动“绑定”这个区域，不再受到外部作用域的影响。</p>\n<p>let、const存在暂时性死区，var不存在。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> c=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">let</span> d=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;d&quot;</span>,d);<span class=\"hljs-comment\">//d</span><br>    <span class=\"hljs-comment\">//console.log(&quot;c&quot;,c);//  Cannot access &#x27;c&#x27; before initialization</span><br>    <span class=\"hljs-keyword\">let</span> c=<span class=\"hljs-number\">1</span>;<br>&#125;<br>func(c);<br></code></pre></td></tr></table></figure>\n\n<p>4.window 对象的属性和方法</p>\n<p>在全局作用域中，var声明的变量，通过function声明的函数会自动变为window对象的属性和方法；let、const不会。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> age=<span class=\"hljs-number\">18</span>;<br><span class=\"hljs-keyword\">var</span> add=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>.add) <span class=\"hljs-comment\">//18</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>.add===add);<span class=\"hljs-comment\">//true    </span><br><span class=\"hljs-keyword\">let</span> height=<span class=\"hljs-number\">158</span>;<br><span class=\"hljs-keyword\">const</span> grow=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>.height); <span class=\"hljs-comment\">//undefined</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>.grow===grow)<span class=\"hljs-comment\">//false</span><br></code></pre></td></tr></table></figure>\n\n<p>5.块级作用域</p>\n<p>var没有块级作用域，let和const有块级作用域。</p>\n<h2 id=\"非常经典的案例\"><a href=\"#非常经典的案例\" class=\"headerlink\" title=\"非常经典的案例\"></a>非常经典的案例</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> btns=<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&quot;.btn&quot;</span>);</span><br><span class=\"javascript\"><span class=\"hljs-comment\">//1.var</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class=\"javascript\">    btns[i].addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(i); <span class=\"hljs-comment\">//都会输出3</span></span><br><span class=\"javascript\">    &#125;,<span class=\"hljs-literal\">false</span>)</span><br><span class=\"javascript\">&#125; <span class=\"hljs-comment\">//执行for循环的时候，会给所有的btn添加监听(瞬间就能完成)，退出for循环的时候，全局变量i的值为3</span></span><br><span class=\"javascript\"><span class=\"hljs-comment\">//当点击的按钮的时候，自然会输出i=3.</span></span><br><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">//2.闭包</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class=\"javascript\">    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;</span><br><span class=\"javascript\">        btns[index].addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(index); </span><br><span class=\"javascript\">    &#125;,<span class=\"hljs-literal\">false</span>)</span><br><span class=\"javascript\">    &#125;)(i)</span><br><span class=\"javascript\">&#125; </span><br><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">//3.let</span></span><br><span class=\"javascript\"><span class=\"hljs-comment\">// //此时的i不再是全局变量</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class=\"javascript\">    btns[i].addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(i); </span><br><span class=\"javascript\">    &#125;,<span class=\"hljs-literal\">false</span>)</span><br><span class=\"javascript\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>1.使用var</p>\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144638.png\" alt=\"2.let 和 const 的应用-var\" style=\"zoom: 67%;\" />\n\n<p>2.使用闭包</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144714.png\" alt=\"3.let 和 const 的应用-闭包\"></p>\n<p>3.使用let</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144732.png\" alt=\"4.let 和 const 的应用-let\"></p>\n<h1 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">模板字符串使用反引号 (``) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（`$&#123;expression&#125;`）的占位符。<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">/ <span class=\"hljs-number\">1.</span>认识模板字符串<br><span class=\"hljs-comment\">// 模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。</span><br><span class=\"hljs-keyword\">const</span> user1=<span class=\"hljs-string\">&#x27;alex&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> user2=<span class=\"hljs-string\">`alex`</span>;<br><span class=\"hljs-built_in\">console</span>.log(user1,user2,user1===user2); <span class=\"hljs-comment\">//alex alex true</span><br><br><span class=\"hljs-comment\">// 2.模板字符串和一般字符串的区别</span><br><span class=\"hljs-keyword\">const</span> person=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;alex&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>,<br>    <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span><br>&#125;<br><span class=\"hljs-comment\">// 一般字符串</span><br><span class=\"hljs-comment\">// const info=&quot;name:&quot;+person.name+&quot;, age:&quot;+person.age+&quot;, gender:&quot;+person.gender;</span><br><span class=\"hljs-comment\">// 模板字符串</span><br><span class=\"hljs-keyword\">const</span> info=<span class=\"hljs-string\">`name:<span class=\"hljs-subst\">$&#123;person.name&#125;</span>, age:<span class=\"hljs-subst\">$&#123;person.age&#125;</span>, gender:<span class=\"hljs-subst\">$&#123;person.gender&#125;</span>`</span>;<br><span class=\"hljs-built_in\">console</span>.log(info);<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530154647.png\" alt=\"image-20210530154645752\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//1.输出多行字符串</span><br><span class=\"hljs-comment\">// 模板字符串中，所有的空格、换行或缩进都会保留在输出中。</span><br>    <span class=\"hljs-keyword\">const</span> info=<span class=\"hljs-string\">`hello</span><br><span class=\"hljs-string\">world!`</span>;<br>    <span class=\"hljs-built_in\">console</span>.log(info);<br><span class=\"hljs-comment\">//  2. 输出`和\\等特殊字符</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`\\``</span>,<span class=\"hljs-string\">`\\\\`</span>); <span class=\"hljs-comment\">//` \\</span><br><br><span class=\"hljs-comment\">// 3. 模板字符串的注入</span><br><span class=\"hljs-keyword\">const</span> name=<span class=\"hljs-string\">&quot;alex&quot;</span>;<br><span class=\"hljs-keyword\">const</span> person=&#123;<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>,<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span>&#125;;<br><span class=\"hljs-keyword\">const</span> getSex=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">gender</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> gender===<span class=\"hljs-string\">&quot;male&quot;</span>?<span class=\"hljs-string\">&quot;男&quot;</span>:<span class=\"hljs-string\">&quot;女&quot;</span>;<br>&#125;<br><span class=\"hljs-keyword\">const</span> alex=<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;name&#125;</span>,<span class=\"hljs-subst\">$&#123;person.age+<span class=\"hljs-number\">2</span>&#125;</span>,<span class=\"hljs-subst\">$&#123;getSex(person.gender)&#125;</span>`</span>;<br><span class=\"hljs-comment\">//alex,20,男</span><br><span class=\"hljs-built_in\">console</span>.log(alex);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.认识箭头函数，箭头函数是匿名函数</span><br><br><span class=\"hljs-keyword\">const</span> add=<span class=\"hljs-function\">(<span class=\"hljs-params\">x,y</span>)=&gt;</span>&#123;<span class=\"hljs-keyword\">return</span> x+y&#125;;<br><br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>));<br><br><span class=\"hljs-comment\">// 2.箭头函数的结构</span><br><br><span class=\"hljs-comment\">// 参数=&gt;函数体</span><br></code></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<p>1.单个参数时可以去掉参数的圆括号；无参数或者多个参数时不能省略参数圆括号。</p>\n<p>2.如果函数体只有return语句，可以直接同时省略函数体的花括号和return关键字。</p>\n<p>3.返回值是单行对象时，可以省略return关键词，然后在对象的花括号外面加上圆括号。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.单个参数</span><br><span class=\"hljs-keyword\">const</span> add=<span class=\"hljs-function\"><span class=\"hljs-params\">x</span>=&gt;</span>&#123;<span class=\"hljs-keyword\">return</span> x+<span class=\"hljs-number\">1</span>;&#125;<br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">2</span>));<br><br><span class=\"hljs-comment\">// 2.单行函数体</span><br><span class=\"hljs-keyword\">const</span> add2=<span class=\"hljs-function\"><span class=\"hljs-params\">x</span>=&gt;</span>x+<span class=\"hljs-number\">1</span>;<br><span class=\"hljs-built_in\">console</span>.log(add2(<span class=\"hljs-number\">2</span>));<br><br><span class=\"hljs-comment\">// 3.单行对象</span><br><span class=\"hljs-keyword\">const</span> add3=<span class=\"hljs-function\">(<span class=\"hljs-params\">x,y</span>)=&gt;</span>(&#123;<span class=\"hljs-attr\">value</span>:x+y&#125;);<br><span class=\"hljs-built_in\">console</span>.log(add3(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>));<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"this指向\"><a href=\"#this指向\" class=\"headerlink\" title=\"this指向\"></a>this指向</h2><p>1.非箭头函数中this指向问题</p>\n<p>只有在函数调用的时候，this指向才能确定；this的指向和函数在哪调用无关，只和函数被谁调用有关</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <br>&#125;<br><span class=\"hljs-comment\">// 只有在函数调用的时候，this指向才能确定</span><br><span class=\"hljs-comment\">// this的指向和函数在哪调用无关，只和函数被谁调用有关</span><br>add(); <span class=\"hljs-comment\">// 非严格模式下this指向window，严格模式下是undefined</span><br><span class=\"hljs-built_in\">window</span>.add() <span class=\"hljs-comment\">// window</span><br><br><span class=\"hljs-keyword\">const</span> calc=&#123;<br>    <span class=\"hljs-attr\">add</span>:add<br>&#125;<br>calc.add(); <span class=\"hljs-comment\">//calc</span><br><br><span class=\"hljs-keyword\">const</span> adder=calc.add;<br>adder();<span class=\"hljs-comment\">// 非严格模式下this指向window，严格模式下是undefined</span><br><br><span class=\"hljs-built_in\">document</span>.onclick=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <span class=\"hljs-comment\">//this指向绑定的dom，此时为document</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name=name;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);<br>&#125;<br><span class=\"hljs-keyword\">var</span> p=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;Alex&quot;</span>); <span class=\"hljs-comment\">// this指向实例化生产的对象</span><br></code></pre></td></tr></table></figure>\n\n<p>2.箭头函数中的this指向</p>\n<p> 箭头函数没有自己的this，它会沿着作用域链向外查找。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 箭头函数没有自己的this</span><br><span class=\"hljs-keyword\">const</span> calc=&#123;<br>    <span class=\"hljs-attr\">add</span>:<span class=\"hljs-function\">()=&gt;</span>&#123;<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)&#125;<br>&#125;<br>calc.add(); <span class=\"hljs-comment\">//window</span><br><span class=\"hljs-comment\">// 因为箭头函数没有自己的this，所以它会通过作用域链向外查找至全局作用域，而全局作用中this指向window</span><br><br><br><span class=\"hljs-keyword\">const</span> c=&#123;<br>    <span class=\"hljs-attr\">add</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-keyword\">const</span> adder=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);<br>        &#125;<br>        adder();<br>    &#125;<br>&#125;;<br>c.add(); <span class=\"hljs-comment\">// 指向c对象</span><br><br><span class=\"hljs-keyword\">const</span> addFn=c.add;<br>addFn(); <span class=\"hljs-comment\">// 指向window</span><br></code></pre></td></tr></table></figure>\n\n<p>3.箭头函数不适用的场景</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.作为构造函数</span><br><span class=\"hljs-comment\">// 箭头函数没有this</span><br><span class=\"hljs-comment\">// const Person=()=&gt;&#123;&#125;;</span><br><span class=\"hljs-comment\">// new Person();</span><br><br><span class=\"hljs-comment\">// 2.需要this 指向调用对象的时候</span><br><span class=\"hljs-built_in\">document</span>.onclick=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <span class=\"hljs-comment\">//此时会指向window对象</span><br>&#125;<br><span class=\"hljs-comment\">// 3.需要使用arguments时</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>);<br>&#125;<br>add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">//[1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><span class=\"hljs-keyword\">const</span> addFn=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>);<br>&#125;<br>addFn(); <span class=\"hljs-comment\">//会报错</span><br></code></pre></td></tr></table></figure>\n\n<p>4.箭头函数的应用</p>\n<p>如果代码写成下面这样，程序执行会有问题，因为<code>setInterval</code>中的回调函数中的<code>this</code>会指向<code>window</code>对象，导致无法进行加法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>开始<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;result&quot;</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> btn=<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;btn&quot;</span>);</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> result=<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;result&quot;</span>);</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> timer=&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">time</span>:<span class=\"hljs-number\">0</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">start</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">            btn.addEventListener(</span><br><span class=\"javascript\">                <span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">                        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">                        <span class=\"hljs-built_in\">this</span>.time++;</span><br><span class=\"javascript\">                        result.innerHTML=<span class=\"hljs-built_in\">this</span>.time;</span><br><span class=\"javascript\">                    &#125;,<span class=\"hljs-number\">1000</span>);</span><br><span class=\"javascript\">                &#125;</span><br><span class=\"javascript\">            ,<span class=\"hljs-literal\">false</span>);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">    timer.start();</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>常规的解决是备份<code>this</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> timer=&#123;<br>    <span class=\"hljs-attr\">time</span>:<span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-attr\">start</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-keyword\">var</span> self =<span class=\"hljs-built_in\">this</span>;<br>        btn.addEventListener(<br>            <span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>                <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);<br>                    self.time++;<br>                    result.innerHTML=self.time;<br>                &#125;,<span class=\"hljs-number\">1000</span>);<br>            &#125;<br>        ,<span class=\"hljs-literal\">false</span>);<br>    &#125;<br>&#125;<br> timer.start();<br></code></pre></td></tr></table></figure>\n\n<p>但是可以使用<strong>箭头函数</strong>来解决这个问题，箭头函数本身没有<code>this</code>，所以它会向外层的作用域链查找<code>this</code>。</p>\n<p>注意，此时也要把<code>addEventListener</code>中的匿名函数改为箭头函数，不然<code>setInterval</code>的箭头函数会向外到<code>addEventListener</code>中的匿名函数找<code>this</code>，而该函数this为绑定的dom节点，从而<code>setInterval</code>的箭头函数会把btn（绑定的dom）当做this。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> timer=&#123;<br>    <span class=\"hljs-attr\">time</span>:<span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-attr\">start</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        btn.addEventListener(<br>            <span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>                <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);<br>                    <span class=\"hljs-built_in\">this</span>.time++;<br>                    result.innerHTML=<span class=\"hljs-built_in\">this</span>.time;<br>                &#125;,<span class=\"hljs-number\">1000</span>);<br>            &#125;<br>        ,<span class=\"hljs-literal\">false</span>);<br>    &#125;<br>&#125;<br> timer.start();<br></code></pre></td></tr></table></figure>\n\n<p>将这两个部分都改为箭头函数后，<code>setInterval</code>中的匿名函数最终会在<code>start()</code>方法找<code>this</code>。</p>\n<p>而注意到最后会调用<code>timer.start()</code>，所以start()中的this就是指向<code>timer</code>, 因此 <code>this.time++;</code> 和<code>result.innerHTML=this.time;</code> 这两句中的<code>this</code> 指向的就是<code>timer</code>。 </p>\n<h1 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h1><h2 id=\"数组解构赋值\"><a href=\"#数组解构赋值\" class=\"headerlink\" title=\"数组解构赋值\"></a>数组解构赋值</h2><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194725.png\" alt=\"image-20210603194723759\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194753.png\" alt=\"image-20210603194752249\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194905.png\" alt=\"image-20210603194903992\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603195037.png\" alt=\"image-20210603195036092\"></p>\n<h3 id=\"1-解构赋值的定义\"><a href=\"#1-解构赋值的定义\" class=\"headerlink\" title=\"1.解构赋值的定义\"></a>1.解构赋值的定义</h3><p>解析某一数据的结构，将想要的东西提取出来，赋值给变量或常量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-comment\">// const a=arr[0];</span><br><span class=\"hljs-comment\">// const b=arr[1];</span><br><span class=\"hljs-comment\">// const c=arr[2];</span><br><span class=\"hljs-keyword\">const</span> [a, b, c] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-built_in\">console</span>.log(a, b, c); <span class=\"hljs-comment\">//1 2 3</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 模式(结构)匹配,索引值相对应</span><br><span class=\"hljs-keyword\">let</span> [a,b,c]=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><br><span class=\"hljs-comment\">// 如果想要取出1,5,3</span><br><span class=\"hljs-keyword\">const</span> [d,[,,e],f]=[<span class=\"hljs-number\">1</span>,[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>],<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-built_in\">console</span>.log(d,e,f); <span class=\"hljs-comment\">//1 5 3</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-解构赋值的默认值\"><a href=\"#2-解构赋值的默认值\" class=\"headerlink\" title=\"2.解构赋值的默认值\"></a>2.解构赋值的默认值</h3><p>只有当一个数组成员严格等于（===） undefined时，它的的默认值才会生生效。如果默认值是表达式时，默认值表达式是惰性求值的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> [a, b] = []; <span class=\"hljs-comment\">//a=undefined,b=undefined</span><br><span class=\"hljs-keyword\">const</span> [c = <span class=\"hljs-number\">1</span>, d = <span class=\"hljs-number\">2</span>] = []; <span class=\"hljs-comment\">//1 2</span><br><br><span class=\"hljs-comment\">//只有当一个数组成员严格等于（===） undefined时，对应的默认值才会生生效。</span><br><span class=\"hljs-keyword\">const</span> [e = <span class=\"hljs-number\">1</span>, f = <span class=\"hljs-number\">2</span>] = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>] <span class=\"hljs-comment\">//3,4</span><br><span class=\"hljs-keyword\">const</span> [i = <span class=\"hljs-number\">2</span>, j = <span class=\"hljs-number\">6</span>] = [<span class=\"hljs-number\">5</span>] <span class=\"hljs-comment\">//5 6</span><br><span class=\"hljs-built_in\">console</span>.log(a, b, c, d, e, f, i, j); <span class=\"hljs-comment\">//undefined undefined 1 2 3 4 5 6</span><br><br><span class=\"hljs-comment\">// 如果默认值是表达式时，默认值表达式是惰性求值的</span><br><span class=\"hljs-keyword\">const</span> func = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;我被执行了&quot;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>&#125;;<br><span class=\"hljs-keyword\">const</span> [x = func()] = [<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 此时函数func并没有执行</span><br><span class=\"hljs-keyword\">const</span> [y=func()]=[];<br><span class=\"hljs-built_in\">console</span>.log(x,y); <span class=\"hljs-comment\">//1 2 </span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-解构赋值的应用\"><a href=\"#3-解构赋值的应用\" class=\"headerlink\" title=\"3.解构赋值的应用\"></a>3.解构赋值的应用</h3><h4 id=\"类数组可以进行解构赋值\"><a href=\"#类数组可以进行解构赋值\" class=\"headerlink\" title=\"类数组可以进行解构赋值\"></a>类数组可以进行解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 1.常见的类数组的解构赋值</span><br><span class=\"hljs-comment\">// arguments</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> [a,b]=<span class=\"hljs-built_in\">arguments</span>;<br>    <span class=\"hljs-built_in\">console</span>.log(a,b); <span class=\"hljs-comment\">//1 2</span><br>&#125;<br>func(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>); <br><br><span class=\"hljs-comment\">// NodeList</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;p&#x27;</span>)); <span class=\"hljs-comment\">//NodeList(3) [p, p, p]</span><br><span class=\"hljs-keyword\">const</span> [p1,p2,p3]=(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&quot;p&quot;</span>));<br><span class=\"hljs-built_in\">console</span>.log(p1,p2,p3);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> array=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-comment\">// 不用解构赋值参数的写法如下</span><br><span class=\"hljs-comment\">// const add=arr=&gt;arr[0]+arr[1];</span><br><span class=\"hljs-comment\">// 使用解构赋值</span><br><span class=\"hljs-keyword\">const</span> add=<span class=\"hljs-function\">(<span class=\"hljs-params\">[x,y]</span>)=&gt;</span>x+y;<br><span class=\"hljs-built_in\">console</span>.log(add(array)); <span class=\"hljs-comment\">//3 </span><br><br><span class=\"hljs-comment\">//还可以给形参添加默认值</span><br><span class=\"hljs-keyword\">const</span> add1=<span class=\"hljs-function\">(<span class=\"hljs-params\">[x=<span class=\"hljs-number\">1</span>,y=<span class=\"hljs-number\">3</span>]</span>)=&gt;</span>x+y;<br><span class=\"hljs-built_in\">console</span>.log(add1([])); <span class=\"hljs-comment\">//4</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"交换变量的值\"><a href=\"#交换变量的值\" class=\"headerlink\" title=\"交换变量的值\"></a>交换变量的值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> x=<span class=\"hljs-number\">1</span> ,y=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-comment\">//相当于[x,y] =[2,1]，而不是右边的y赋值给x，x赋值给y</span><br>[x,y]=[y,x];<br><span class=\"hljs-built_in\">console</span>.log(x,y); <span class=\"hljs-comment\">//2 1</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"对象解构赋值\"><a href=\"#对象解构赋值\" class=\"headerlink\" title=\"对象解构赋值\"></a>对象解构赋值</h2><p>1.模式匹配，属性名相同的完成赋值，不需要按照顺序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 1.模式匹配，属性名相同的完成赋值，不需要按照顺序</span><br><span class=\"hljs-comment\">//简写形式</span><br><span class=\"hljs-keyword\">const</span> &#123;age,name&#125;=&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;alex&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(age,name); <span class=\"hljs-comment\">//18 &quot;alex&quot;</span><br><span class=\"hljs-comment\">// 完整形式</span><br><span class=\"hljs-keyword\">const</span> &#123;<span class=\"hljs-attr\">age</span>:age1,<span class=\"hljs-attr\">name</span>:name1&#125;=&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;alex&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(name1,age1); <span class=\"hljs-comment\">//alex 18</span><br></code></pre></td></tr></table></figure>\n\n<p>2.对象解构赋值的注意事项</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 1.默认值的生效条件</span><br><span class=\"hljs-comment\">// 对象的数值值严格等于undefined时，对应的默认值才会生效</span><br><span class=\"hljs-keyword\">const</span> &#123;name &#125; = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;alex&quot;</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(name); <span class=\"hljs-comment\">//&quot;alex&quot;</span><br><span class=\"hljs-comment\">// 注意默认值的赋值是用等号，而不是用冒号</span><br><span class=\"hljs-keyword\">const</span> &#123;name1=<span class=\"hljs-string\">&quot;billie&quot;</span>,age=<span class=\"hljs-number\">0</span>&#125;=&#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(name1);<br><span class=\"hljs-comment\">// 2.如果默认值是表达式，默认值表达式是惰性求值的</span><br><br><span class=\"hljs-comment\">// 3.将一个已经声明的变量用于解构赋值</span><br><span class=\"hljs-keyword\">let</span> x=<span class=\"hljs-number\">1</span>;<br><span class=\"hljs-comment\">// &#123;x&#125;=&#123;x:3&#125;; 会报错，和解决箭头函数的单行语句的返回值是对象一样，在整个外层加上括号</span><br>(&#123;x&#125;=&#123;<span class=\"hljs-attr\">x</span>:<span class=\"hljs-number\">3</span>&#125;);<br><span class=\"hljs-built_in\">console</span>.log(x); <span class=\"hljs-comment\">//3</span><br><br><span class=\"hljs-comment\">// 4.可以取到继承的属性</span><br><span class=\"hljs-keyword\">const</span> &#123;toString&#125;=&#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(toString);<span class=\"hljs-comment\">// 并没有输出undefined</span><br><span class=\"hljs-comment\">// toString的属性继承自Object</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.prototype);<br><span class=\"hljs-keyword\">const</span> &#123;a&#125;=&#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//undefined</span><br></code></pre></td></tr></table></figure>\n\n<p>3.对象解构赋值的应用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 函数参数的解构赋值</span><br><span class=\"hljs-comment\">//const info=user=&gt;console.log(user.name,user.age);</span><br><span class=\"hljs-keyword\">const</span> info=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;age,name&#125;</span>)=&gt;</span><span class=\"hljs-built_in\">console</span>.log(age,name);<br>info(&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;hh&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">12</span>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"其他数组类型的解构赋值\"><a href=\"#其他数组类型的解构赋值\" class=\"headerlink\" title=\"其他数组类型的解构赋值\"></a>其他数组类型的解构赋值</h2><p>1.字符串的解构赋值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//数组形式的解构赋值</span><br><span class=\"hljs-keyword\">const</span> [a,b,,,c]=<span class=\"hljs-string\">&quot;hello&quot;</span>;<br><span class=\"hljs-built_in\">console</span>.log(a,b,c); <span class=\"hljs-comment\">//h e o</span><br><span class=\"hljs-comment\">// 对象形式解构赋值</span><br><span class=\"hljs-keyword\">const</span> &#123;<span class=\"hljs-number\">0</span>:x,<span class=\"hljs-number\">1</span>:y,length&#125;=<span class=\"hljs-string\">&quot;hello&quot;</span>;<br><span class=\"hljs-built_in\">console</span>.log(x,y,length); <span class=\"hljs-comment\">//h e 5</span><br></code></pre></td></tr></table></figure>\n\n<p>2.数值和布尔值的解构赋值(只能按照对象形式解构赋值), 会自动将右侧的数值或布尔值转换为对象</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> &#123;aa,toString&#125;=<span class=\"hljs-number\">123</span>;<br><span class=\"hljs-built_in\">console</span>.log(aa,toString); <span class=\"hljs-comment\">//toString属性是继承而来的</span><br></code></pre></td></tr></table></figure>\n\n<p>3.undefined和null的解构赋值会报错</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 由于undefined和null，无法转化为对象，所以对它们进行解构赋值都会报错</span><br><span class=\"hljs-keyword\">const</span> &#123;ff&#125;=<span class=\"hljs-literal\">undefined</span>;<br><span class=\"hljs-built_in\">console</span>.log(ff); <span class=\"hljs-comment\">//报错</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"简介表示\"><a href=\"#简介表示\" class=\"headerlink\" title=\"简介表示\"></a>简介表示</h1><h2 id=\"属性和方法的简洁表示\"><a href=\"#属性和方法的简洁表示\" class=\"headerlink\" title=\"属性和方法的简洁表示\"></a>属性和方法的简洁表示</h2><h3 id=\"1-属性的简洁表示\"><a href=\"#1-属性的简洁表示\" class=\"headerlink\" title=\"1.属性的简洁表示\"></a>1.属性的简洁表示</h3><p>当键名和变量名(常量名)一样的时候，可以只写一个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> age=<span class=\"hljs-number\">19</span>;<br><span class=\"hljs-keyword\">const</span> person1=&#123;<br>    <span class=\"hljs-comment\">// age:age, 直接写age</span><br>    age,<br>&#125;        <br><span class=\"hljs-built_in\">console</span>.log(person1.age);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-方法的简洁表示\"><a href=\"#2-方法的简洁表示\" class=\"headerlink\" title=\"2.方法的简洁表示\"></a>2.方法的简洁表示</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> person2=&#123;<br>    <span class=\"hljs-comment\">// speak:function()&#123;&#125;</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"方括号语法\"><a href=\"#方括号语法\" class=\"headerlink\" title=\"方括号语法\"></a>方括号语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.方括号语法</span><br><span class=\"hljs-keyword\">const</span> prop=<span class=\"hljs-string\">&quot;age&quot;</span>;<br><span class=\"hljs-keyword\">const</span> person=&#123;&#125;;<br>person[prop]=<span class=\"hljs-number\">18</span>; <span class=\"hljs-comment\">// &#123;age:18&#125;</span><br><span class=\"hljs-comment\">// ES6新增如下</span><br><span class=\"hljs-keyword\">const</span> person1=&#123;<br>    [prop]:<span class=\"hljs-number\">19</span><br>&#125;<br><br><span class=\"hljs-comment\">// 2.方括号可以放[值或者计算可以得到的值(表达式)]</span><br><span class=\"hljs-keyword\">const</span> prop1=<span class=\"hljs-string\">&quot;age&quot;</span>;<br><span class=\"hljs-keyword\">const</span> func=<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-string\">&#x27;gender&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> person2=&#123;<br>    [prop1]:<span class=\"hljs-number\">18</span>,<br>    [func()]:<span class=\"hljs-string\">&#x27;female&#x27;</span><br>&#125;<br><span class=\"hljs-comment\">// &#123;age: 18, gender: &quot;female&quot;&#125;</span><br><br><span class=\"hljs-comment\">// 3.方括号语法和点语法的区别</span><br><span class=\"hljs-comment\">// 点语法是方括号语法的特殊形式</span><br><span class=\"hljs-keyword\">const</span> person3=[];<br><span class=\"hljs-comment\">// perosn.age 等价于 person[&#x27;age&#x27;]</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"函数默认参数值\"><a href=\"#函数默认参数值\" class=\"headerlink\" title=\"函数默认参数值\"></a>函数默认参数值</h1><p><strong>函数默认参数</strong>允许在没有值或<code>undefined</code>被传入时使用默认形参。只有在①不传参数 ②明确传递undefined作为参数 这两种情况下,默认值才会生效。</p>\n<h3 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.函数参数的默认值</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">multiply</span>(<span class=\"hljs-params\">a,b=<span class=\"hljs-number\">1</span></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a*b;<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(multiply(<span class=\"hljs-number\">3</span>) ) <span class=\"hljs-comment\">//3</span><br><br><span class=\"hljs-comment\">// 2.默认值的生效</span><br><span class=\"hljs-comment\">// ①不传参数 ②明确传递undefined作为参数 只有这两种情况下,默认值才会生效</span><br><span class=\"hljs-built_in\">console</span>.log(multiply(<span class=\"hljs-number\">2</span>,<span class=\"hljs-literal\">undefined</span>)); <span class=\"hljs-comment\">//2</span><br><span class=\"hljs-built_in\">console</span>.log(multiply(<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">&quot;&quot;</span>)); <span class=\"hljs-comment\">//2*&quot;&quot; 最后结果会被隐形转换为0</span><br><br><span class=\"hljs-comment\">// 3.默认值表达式</span><br><span class=\"hljs-comment\">// 如果默认值是表达式，默认值表达式是惰性求值的</span><br><br><br><span class=\"hljs-comment\">// 4.设置默认值的小技巧</span><br><span class=\"hljs-comment\">// 函数参数的默认值最好从参数列表的右边开始设置。</span><br><br><span class=\"hljs-keyword\">const</span> multiply2=<span class=\"hljs-function\">(<span class=\"hljs-params\">x=<span class=\"hljs-number\">1</span>,y</span>)=&gt;</span>x*y;<br><span class=\"hljs-comment\">// 此时如果想要使用第一个默认值，必须明确传递undefined</span><br><span class=\"hljs-built_in\">console</span>.log(multiply(<span class=\"hljs-literal\">undefined</span>,<span class=\"hljs-number\">2</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-函数默认参数的应用\"><a href=\"#2-函数默认参数的应用\" class=\"headerlink\" title=\"2.函数默认参数的应用\"></a>2.函数默认参数的应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.接收多参数，如果按照默认写法，传参的时候需要记住参数顺序</span><br><span class=\"hljs-keyword\">const</span> user=<span class=\"hljs-function\">(<span class=\"hljs-params\">name=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>,age=<span class=\"hljs-number\">12</span>,gender=<span class=\"hljs-string\">&quot;female&quot;</span></span>)=&gt;</span><br>    <span class=\"hljs-built_in\">console</span>.log(name,age,gender);<br>user(<span class=\"hljs-string\">&quot;alex&quot;</span>,<span class=\"hljs-number\">18</span>,<span class=\"hljs-string\">&#x27;male&#x27;</span>);<br><br><span class=\"hljs-comment\">// 2. 法一：接收一个对象作为参数</span><br><span class=\"hljs-keyword\">const</span> user1=<span class=\"hljs-function\"><span class=\"hljs-params\">option</span>=&gt;</span><span class=\"hljs-built_in\">console</span>.log(<br>    option.name,option.age,option.gender);<br>user1(&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;alex&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>,<br>    <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 3.法二：解构赋值的默认值</span><br><span class=\"hljs-keyword\">const</span> user2=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;name=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>,age=<span class=\"hljs-number\">12</span>,gender=<span class=\"hljs-string\">&quot;female&quot;</span>&#125;</span>)=&gt;</span><br><span class=\"hljs-built_in\">console</span>.log(name,age,gender);<br><br>user2(&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;alex&quot;</span>&#125;);<br><span class=\"hljs-comment\">// 但是不能什么都不传，如果什么都不传就相当于传了undefined</span><br><span class=\"hljs-comment\">// 而无法对undefined进行解构赋值</span><br><span class=\"hljs-comment\">// user2();</span><br><br><span class=\"hljs-comment\">// 4.法三：函数参数的默认值</span><br><span class=\"hljs-comment\">// 把&#123;name=&quot;zhangsan&quot;,age=12,gender=&quot;female&quot;&#125;看为option</span><br><span class=\"hljs-comment\">// option的默认参数为&#123;&#125;，当无不传入参数或者传入undefined的时候</span><br><span class=\"hljs-comment\">// option=&#123;&#125; 会把空对象赋值给option，也就是下面一行的解构赋值</span><br><span class=\"hljs-comment\">// &#123;name=&quot;zhangsan&quot;,age=12,gender=&quot;female&quot;&#125;=&#123;&#125;</span><br><br><span class=\"hljs-keyword\">const</span> user3=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;name=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>,age=<span class=\"hljs-number\">12</span>,gender=<span class=\"hljs-string\">&quot;female&quot;</span>&#125;=&#123;&#125;</span>)=&gt;</span><br><span class=\"hljs-built_in\">console</span>.log(name,age,gender);<br>user3(); <span class=\"hljs-comment\">//此时不会报错</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"剩余参数与展开语法\"><a href=\"#剩余参数与展开语法\" class=\"headerlink\" title=\"剩余参数与展开语法\"></a>剩余参数与展开语法</h1><h2 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h2><h3 id=\"剩余参数定义\"><a href=\"#剩余参数定义\" class=\"headerlink\" title=\"剩余参数定义\"></a>剩余参数定义</h3><p><strong>剩余参数</strong>语法允许我们将一个不定数量的参数表示为一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.认识剩余参数</span><br><span class=\"hljs-comment\">// 当不知道参数有多少个，可以用省略号代替，省略号后面接参数名</span><br><span class=\"hljs-keyword\">const</span> add1=<span class=\"hljs-function\">(<span class=\"hljs-params\">x,y,z,...args</span>)=&gt;</span>&#123;&#125;;<br><br><span class=\"hljs-comment\">// 2.剩余参数的本质，剩余参数是一个数组，如果没有值则是空数组</span><br><span class=\"hljs-keyword\">const</span> add2=<span class=\"hljs-function\">(<span class=\"hljs-params\">x,y,z,...args</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(x,y,args);<br>&#125;;<br>add2(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//1 undefined []</span><br>add2(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>);  <span class=\"hljs-comment\">//1 2 [4, 5, 6]</span><br><br><span class=\"hljs-comment\">// 3.箭头函数与剩余参数</span><br><span class=\"hljs-comment\">// 箭头函数的参数部分即使只有一个剩余参数，也不能省略括号</span><br><span class=\"hljs-keyword\">const</span> add3=<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;&#125;;<br><br><span class=\"hljs-comment\">// 4.使用剩余参数替代arguments获取实际参数</span><br><span class=\"hljs-keyword\">const</span> add4=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 记住箭头函数没有arguments，因为它没有this</span><br>    <span class=\"hljs-comment\">// arguments是类数组，而剩余参数是个数组</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>);<br>&#125;<br>add4(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br><br><span class=\"hljs-keyword\">const</span> add5=<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(args);<br>&#125;<br><span class=\"hljs-comment\">// 5.剩余参数的位置</span><br><span class=\"hljs-comment\">// 剩余参数只能作为最后一个参数</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"剩余参数应用\"><a href=\"#剩余参数应用\" class=\"headerlink\" title=\"剩余参数应用\"></a>剩余参数应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.add函数</span><br><span class=\"hljs-keyword\">const</span> add=<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span> ;i&lt;args.length;i++)&#123;<br>        sum+=args[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> sum;<br>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>));<br><span class=\"hljs-comment\">// 使用reduce方法</span><br><span class=\"hljs-keyword\">const</span> add_reduce=<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> args.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">total,currentValue</span>)=&gt;</span>&#123; <span class=\"hljs-keyword\">return</span> total+currentValue&#125;);<br>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(add_reduce(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>));<br><br><br><span class=\"hljs-comment\">// 2.与解构赋值结合使用</span><br><span class=\"hljs-comment\">// 当剩余参数不是作为函数的参数时，剩余参数叫做剩余元素(Rest element)</span><br><br><span class=\"hljs-comment\">// 剩余元素+数组解构赋值</span><br><span class=\"hljs-keyword\">const</span> [num,...args]=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>];<br><span class=\"hljs-built_in\">console</span>.log(num,args); <span class=\"hljs-comment\">//1 [2, 3, 4]</span><br><br><span class=\"hljs-comment\">// 剩余参数+数组解构赋值+箭头函数</span><br><span class=\"hljs-keyword\">const</span> func=<span class=\"hljs-function\">(<span class=\"hljs-params\">[num,...args]</span>)=&gt;</span>&#123;&#125;;<br>func([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]);<br><br><span class=\"hljs-comment\">// 剩余元素+对象解构赋值</span><br><span class=\"hljs-comment\">// 此时剩余元素为数组</span><br><span class=\"hljs-keyword\">const</span> &#123;x,y,...z&#125;=&#123;<span class=\"hljs-attr\">x</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-attr\">y</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">d</span>:<span class=\"hljs-number\">4</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(x,y,z); <span class=\"hljs-comment\">//1 3 &#123;b: 2, d: 4&#125;</span><br><br><span class=\"hljs-comment\">// 剩余参数+对象解构赋值+箭头函数</span><br><span class=\"hljs-keyword\">const</span> fun=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;m,n,...o&#125;</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(m,n,o);<br>&#125;;<br>fun(&#123;<span class=\"hljs-attr\">m</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">n</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">p</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">z</span>:<span class=\"hljs-number\">8</span>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"展开语法\"><a href=\"#展开语法\" class=\"headerlink\" title=\"展开语法\"></a>展开语法</h2><p><strong>展开语法(Spread syntax),</strong> 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开。</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.展开语法</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.min(...[<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>])); <span class=\"hljs-comment\">// 相当于Math.min(3,1,2);</span><br><br><span class=\"hljs-comment\">// 2.展开语法和剩余参数的区别</span><br><span class=\"hljs-comment\">// 展开语法[3,1,2]-&gt;3,1,2</span><br><span class=\"hljs-comment\">// 剩余参数 (3,1,2)-&gt;[3,1,2]</span><br><br><span class=\"hljs-comment\">// 剩余参数</span><br><span class=\"hljs-keyword\">const</span> add=<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// 展开语法</span><br>    <span class=\"hljs-built_in\">console</span>.log(...args);<br>&#125;;<br>add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"展开语法的应用\"><a href=\"#展开语法的应用\" class=\"headerlink\" title=\"展开语法的应用\"></a>展开语法的应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.复制数组</span><br><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">const</span> b = a;<br><span class=\"hljs-built_in\">console</span>.log(a === b); <span class=\"hljs-comment\">//true 引用</span><br><br><span class=\"hljs-keyword\">const</span> c = [...a]; <span class=\"hljs-comment\">//等价于const c=[1,2,3];</span><br><span class=\"hljs-built_in\">console</span>.log(a === c); <span class=\"hljs-comment\">//false</span><br><br><span class=\"hljs-comment\">// 2.合并数组</span><br><span class=\"hljs-keyword\">const</span> m=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-keyword\">const</span> n=[<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];<br><span class=\"hljs-keyword\">const</span> i=[<span class=\"hljs-number\">7</span>,...m,...n]; <br><span class=\"hljs-built_in\">console</span>.log(i); <span class=\"hljs-comment\">//[7,1, 2, 3, 4, 5]</span><br><br><span class=\"hljs-comment\">// 3.字符串转数组</span><br><span class=\"hljs-built_in\">console</span>.log(...<span class=\"hljs-string\">&quot;app&quot;</span>); <span class=\"hljs-comment\">// console.log(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class=\"hljs-built_in\">console</span>.log([...<span class=\"hljs-string\">&quot;apple&quot;</span>]); <span class=\"hljs-comment\">// [&quot;a&quot;, &quot;p&quot;, &quot;p&quot;, &quot;l&quot;, &quot;e&quot;]</span><br><br><span class=\"hljs-comment\">// 4.常见的类数组转数组</span><br><span class=\"hljs-comment\">// arguments</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(...arguments); <span class=\"hljs-comment\">//console.log(1,2,3);</span><br>    <span class=\"hljs-built_in\">console</span>.log([...arguments]);<br>&#125;<br>func(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<br><span class=\"hljs-comment\">// NodeList</span><br><span class=\"hljs-built_in\">console</span>.log([...document.querySelectorAll(<span class=\"hljs-string\">&quot;p&quot;</span>)]);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对象展开\"><a href=\"#对象展开\" class=\"headerlink\" title=\"对象展开\"></a>对象展开</h3><p>对象的展开就是相当于把对象的所有属性罗列出来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.展开对象</span><br><span class=\"hljs-comment\">// 对象的展开就是相当于把对象的所有属性罗列出来</span><br><span class=\"hljs-comment\">// 对象必须在&#123;&#125;中展开，不能直接展开</span><br><span class=\"hljs-keyword\">const</span> apple=&#123;<br>    <span class=\"hljs-attr\">color</span>:<span class=\"hljs-string\">&quot;red&quot;</span>,<br>    <span class=\"hljs-attr\">taste</span>:<span class=\"hljs-string\">&quot;sweet&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(&#123;...apple&#125;); <span class=\"hljs-comment\">//&#123;color:&quot;red&quot;,taste:&quot;sweet&quot;&#125;</span><br><br><span class=\"hljs-comment\">// 2.合并对象</span><br><span class=\"hljs-comment\">//新对象拥有全部的属性，相同属性，后者会覆盖前者 </span><br><span class=\"hljs-keyword\">const</span> banana=&#123;<br>    <span class=\"hljs-attr\">color</span>:<span class=\"hljs-string\">&quot;yellow&quot;</span>,<br>    <span class=\"hljs-attr\">category</span>:<span class=\"hljs-string\">&quot;fruit&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(&#123;...apple,...banana&#125;);<br><span class=\"hljs-comment\">// &#123;color: &quot;yellow&quot;, taste: &quot;sweet&quot;, category: &quot;fruit&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对象展开的注意事项\"><a href=\"#对象展开的注意事项\" class=\"headerlink\" title=\"对象展开的注意事项\"></a>对象展开的注意事项</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.空对象的展开</span><br><span class=\"hljs-comment\">// 如果展开空对象，是没有任何效果</span><br><span class=\"hljs-comment\">// 对象的展开，相当于把所有对象的属性罗列出来</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;...&#123;&#125;&#125;); <span class=\"hljs-comment\">//&#123;&#125;</span><br><br><span class=\"hljs-comment\">// 2.非对象的展开</span><br><span class=\"hljs-comment\">// 如果展开的不是对象，则自动会将其转为对象，再将其罗列出来</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;..<span class=\"hljs-number\">.1</span>&#125;); <span class=\"hljs-comment\">//&#123;&#125; 1转为对象后，并没有属性罗列</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;...null&#125;); <span class=\"hljs-comment\">//&#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;...<span class=\"hljs-string\">&quot;alex&quot;</span>&#125;); <span class=\"hljs-comment\">//&#123;0: &quot;a&quot;, 1: &quot;l&quot;, 2: &quot;e&quot;, 3: &quot;x&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;...[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]&#125;); <span class=\"hljs-comment\">//&#123;0: 1, 1: 2&#125;</span><br><br><br><span class=\"hljs-comment\">// 3.含对象属性的对象的</span><br><span class=\"hljs-comment\">// 对象属性不会继续被展开</span><br><span class=\"hljs-keyword\">const</span> apple=&#123;<br>    <span class=\"hljs-attr\">feature</span>:&#123;<br>        <span class=\"hljs-attr\">taste</span>:<span class=\"hljs-string\">&quot;甜&quot;</span><br>    &#125;<br>&#125;;<br><span class=\"hljs-keyword\">const</span> pen=&#123;<br>    <span class=\"hljs-attr\">feature</span>:&#123;<br>        <span class=\"hljs-attr\">color</span>:<span class=\"hljs-string\">&quot;black&quot;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">use</span>:<span class=\"hljs-string\">&quot;写字&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(&#123;...apple&#125;); <span class=\"hljs-comment\">//&#123;feature: &#123;…&#125;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;...apple,...pen&#125;); <span class=\"hljs-comment\">//&#123;feature: &#123;…&#125;, use: &quot;写字&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对象展开的应用\"><a href=\"#对象展开的应用\" class=\"headerlink\" title=\"对象展开的应用\"></a>对象展开的应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.复制对象</span><br><span class=\"hljs-keyword\">const</span> a=&#123;<span class=\"hljs-attr\">x</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">y</span>:<span class=\"hljs-number\">2</span>&#125;;<br><span class=\"hljs-keyword\">const</span> b=&#123;...a&#125;;<br><span class=\"hljs-built_in\">console</span>.log(a===b); <span class=\"hljs-comment\">//false</span><br><br><span class=\"hljs-comment\">// 2.用户参数和默认参数</span><br><span class=\"hljs-comment\">// 法一： 解构赋值+函数默认参数</span><br><span class=\"hljs-keyword\">const</span> user1=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;name=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>,age=<span class=\"hljs-number\">0</span>,gender=<span class=\"hljs-string\">&quot;male&quot;</span>&#125;=&#123;&#125;</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(name,age,gender);<br>&#125;;<br><span class=\"hljs-comment\">// 法二: 对象展开 +解构赋值</span><br><span class=\"hljs-keyword\">const</span> user2=<span class=\"hljs-function\"><span class=\"hljs-params\">userParm</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> defaultParm=&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;zhangsan&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span>&#125;;<br>    <span class=\"hljs-comment\">// 合并默认参数和用户参数，还可以对结果进行解构</span><br>    <span class=\"hljs-keyword\">const</span> &#123;name,age,gender&#125;=&#123;...defaultParm,...userParm&#125;;<br>    <span class=\"hljs-built_in\">console</span>.log(name,age,gender);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Set与Map\"><a href=\"#Set与Map\" class=\"headerlink\" title=\"Set与Map\"></a>Set与Map</h1><h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><p>Set是一系列<strong>无序、没有重复值</strong>的数据集合。 Set 对象允许你存储任何类型的<strong>唯一值</strong>，无论是原始值或者是对象引用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建Set</span><br><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Set实例的属性和方法\"><a href=\"#Set实例的属性和方法\" class=\"headerlink\" title=\"Set实例的属性和方法\"></a>Set实例的属性和方法</h3><h4 id=\"1-add方法\"><a href=\"#1-add方法\" class=\"headerlink\" title=\"1.add方法\"></a>1.add方法</h4><p>在<code>Set</code>对象尾部添加一个元素，返回该<code>Set</code>对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建Set</span><br><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();<br>s.add(<span class=\"hljs-number\">1</span>);<br>s.add(<span class=\"hljs-number\">3</span>);<br>s.add(<span class=\"hljs-number\">4</span>).add(<span class=\"hljs-number\">5</span>);  <span class=\"hljs-comment\">//Set(4) &#123;1, 3, 4, 5&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-has方法\"><a href=\"#2-has方法\" class=\"headerlink\" title=\"2.has方法\"></a>2.has方法</h4><p>返回一个布尔值，表示该值在<code>Set</code>中存在与否。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(s.has(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-delete-方法\"><a href=\"#3-delete-方法\" class=\"headerlink\" title=\"3.delete 方法\"></a>3.delete 方法</h4><p>移除<code>Set</code>中指定的元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">s.delete(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//删除元素1</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-clear方法\"><a href=\"#4-clear方法\" class=\"headerlink\" title=\"4.clear方法\"></a>4.clear方法</h4><p>移除<code>Set</code>对象内的所有元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">s.clear();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-forEach-方法\"><a href=\"#5-forEach-方法\" class=\"headerlink\" title=\"5.forEach()方法\"></a>5.forEach()方法</h4><p><code>forEach</code> 方法会根据集合中元素的插入顺序，依次执行提供的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 按照成员添加进集合的顺序遍历的</span><br><span class=\"hljs-comment\">// 回调函数后面的参数是用来改变上下文的</span><br>s.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value,key,set</span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 在set中，value与key是等价的</span><br>    <span class=\"hljs-built_in\">console</span>.log(value,key,set);<br>&#125;,<span class=\"hljs-built_in\">document</span>);<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-size属性\"><a href=\"#6-size属性\" class=\"headerlink\" title=\"6.size属性\"></a>6.size属性</h3><p>判断Set实例中有多少元素。</p>\n<h3 id=\"Set的构造函数\"><a href=\"#Set的构造函数\" class=\"headerlink\" title=\"Set的构造函数\"></a>Set的构造函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.数组</span><br><span class=\"hljs-keyword\">const</span> s =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>]);<br><span class=\"hljs-built_in\">console</span>.log(s);  <span class=\"hljs-comment\">//Set(3) &#123;1, 2, 3&#125;</span><br><br><span class=\"hljs-comment\">// 2.字符串、arguments、NodeList、Set</span><br><span class=\"hljs-comment\">//字符串做参数</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(<span class=\"hljs-string\">&quot;hi&quot;</span>)) <span class=\"hljs-comment\">//Set(2) &#123;&quot;h&quot;, &quot;i&quot;&#125;</span><br><br><span class=\"hljs-comment\">//arguments做参数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(<span class=\"hljs-built_in\">arguments</span>));<br>&#125;<br>fun(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<br><span class=\"hljs-comment\">//NodeList做参数</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;p&#x27;</span>))); <br><span class=\"hljs-comment\">//Set(3) &#123;p, p, p&#125;</span><br><br><span class=\"hljs-comment\">// Set实例做参数</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(s));<br><span class=\"hljs-comment\">//Set(3) &#123;1, 2, 3&#125;</span><br><br><span class=\"hljs-comment\">// 和原来完全相同，但不等于原来的，相当于复制。</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(s)===s); <br><span class=\"hljs-comment\">//false</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Set重复判定方式\"><a href=\"#Set重复判定方式\" class=\"headerlink\" title=\"Set重复判定方式\"></a>Set重复判定方式</h2><p>Set 对重复值的判断基本遵循严格相等(===)， 但是对于NaN的判断与===不同，Set中NaN等于NaN。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Set实例会把2个NaN看做相等的元素</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">NaN</span>===<span class=\"hljs-literal\">NaN</span> ); <span class=\"hljs-comment\">//false</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-literal\">NaN</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-literal\">NaN</span>]));<br><span class=\"hljs-comment\">//Set(2) &#123;NaN, 2&#125;</span><br><br><br><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();<br>s.add(&#123;&#125;).add(&#123;&#125;);<br><span class=\"hljs-built_in\">console</span>.log(s); <span class=\"hljs-comment\">//此时s中有2个空对象</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Set应用\"><a href=\"#Set应用\" class=\"headerlink\" title=\"Set应用\"></a>Set应用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.数组或字符串去重时</span><br><span class=\"hljs-comment\">//Set(3) &#123;1, 2, 3&#125;</span><br><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>]);<br><span class=\"hljs-built_in\">console</span>.log(s);<br><br><span class=\"hljs-comment\">// 再将Set实例转换为数组</span><br><span class=\"hljs-comment\">// ①使用forEach</span><br><span class=\"hljs-keyword\">let</span> arr=[];<br>s.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>)=&gt;</span>arr.push(value));<br><span class=\"hljs-comment\">// ②使用展开语法</span><br><span class=\"hljs-built_in\">console</span>.log([...s]);<br><br><span class=\"hljs-comment\">// 2.字符串去重</span><br><span class=\"hljs-keyword\">const</span> s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(<span class=\"hljs-string\">&#x27;abbacd&#x27;</span>);<br><span class=\"hljs-comment\">// 将s1转为数组后，再用数组的join方法转为字符串</span><br><span class=\"hljs-built_in\">console</span>.log([...s1].join(<span class=\"hljs-string\">&quot;&quot;</span>));<br><br><span class=\"hljs-comment\">// 3.存放dom元素</span><br><span class=\"hljs-keyword\">const</span> s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&quot;p&quot;</span>));<br><span class=\"hljs-comment\">// 使用forEach改变p标签文本颜色</span><br>s2.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">elem</span>)=&gt;</span>elem.style.color=<span class=\"hljs-string\">&#x27;red&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><strong><code>Map</code></strong> 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive\">原始值</a>) 都可以作为一个键或一个值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.Map和对象本质上都是键值对的集合</span><br><span class=\"hljs-comment\">// 对象</span><br><span class=\"hljs-keyword\">const</span> person=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;alex&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">19</span><br>&#125;<br><span class=\"hljs-comment\">// Map</span><br><span class=\"hljs-keyword\">const</span> m=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br>m.set(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;alex&#x27;</span>);<br>m.set(<span class=\"hljs-string\">&#x27;age&#x27;</span>,<span class=\"hljs-number\">18</span>);<br><span class=\"hljs-built_in\">console</span>.log(m);<br><br><span class=\"hljs-comment\">// 2.Map和对象的区别</span><br><span class=\"hljs-comment\">// 对象一般使用字符串当做键</span><br><span class=\"hljs-keyword\">const</span> obj=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;alex&#x27;</span><br>&#125;<br><br><span class=\"hljs-comment\">// Map的键可以为基本数据类型，也可以为引用数据类型。</span><br><span class=\"hljs-comment\">// 基本数据类型：数字、字符串、布尔值、undefined、null</span><br><span class=\"hljs-comment\">// 引用数据类型：对象、数组、Set、Map、函数等</span><br><span class=\"hljs-keyword\">const</span> mm=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br>mm.set(<span class=\"hljs-literal\">true</span>,<span class=\"hljs-string\">&#x27;true&#x27;</span>);<br>mm.set(&#123;&#125;,<span class=\"hljs-string\">&#x27;object&#x27;</span>);<br>mm.set(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]),<span class=\"hljs-string\">&#x27;set&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(mm);<br><span class=\"hljs-comment\">// &#123;true =&gt; &quot;true&quot;, &#123;…&#125; =&gt; &quot;object&quot;, Set(2) =&gt; &quot;set&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方法和属性\"><a href=\"#方法和属性\" class=\"headerlink\" title=\"方法和属性\"></a>方法和属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.set方法</span><br><span class=\"hljs-comment\">// 使用set添加的新成员，键如果已经存在，后添加的键值对覆盖已有的</span><br><span class=\"hljs-keyword\">const</span> m=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br>m.set(<span class=\"hljs-string\">&quot;age&quot;</span>,<span class=\"hljs-number\">18</span>).set(<span class=\"hljs-literal\">true</span>,<span class=\"hljs-string\">&quot;true&quot;</span>).set(<span class=\"hljs-string\">&quot;age&quot;</span>,<span class=\"hljs-number\">20</span>);<br><span class=\"hljs-built_in\">console</span>.log(m);<br><br><span class=\"hljs-comment\">// 2.get方法，用于获取指定成员</span><br><span class=\"hljs-built_in\">console</span>.log(m.get(<span class=\"hljs-string\">&#x27;age&#x27;</span>)); <span class=\"hljs-comment\">//20</span><br><span class=\"hljs-built_in\">console</span>.log(m.get(<span class=\"hljs-literal\">true</span>)); <span class=\"hljs-comment\">//true</span><br><br><span class=\"hljs-comment\">// 3.has方法 用于判断是否有指定的键</span><br><span class=\"hljs-built_in\">console</span>.log(m.has(<span class=\"hljs-string\">&#x27;age&#x27;</span>));<br><br><span class=\"hljs-comment\">// 4.delete方法</span><br><span class=\"hljs-comment\">// 删除不存在的成员，什么都不会发生，也不会报错</span><br>m.delete(<span class=\"hljs-string\">&#x27;age&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(m);<br><br><span class=\"hljs-comment\">// 5.clear方法 删除所有的成员</span><br>m.clear();<br><br><span class=\"hljs-comment\">// 6.forEach()方法</span><br><span class=\"hljs-keyword\">const</span> mm=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br>mm.set(<span class=\"hljs-string\">&quot;age&quot;</span>,<span class=\"hljs-number\">12</span>).set(<span class=\"hljs-string\">&quot;gender&quot;</span>,<span class=\"hljs-string\">&quot;male&quot;</span>).set(<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;xiaoming&quot;</span>);<br>mm.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index,map</span>)=&gt;</span><span class=\"hljs-built_in\">console</span>.log(value,index,map==mm));<br><span class=\"hljs-comment\">// 12 &quot;age&quot;  true</span><br><span class=\"hljs-comment\">// male gender true</span><br><span class=\"hljs-comment\">// xiaoming name true</span><br><br><span class=\"hljs-comment\">// 7.size属性</span><br><span class=\"hljs-built_in\">console</span>.log(mm.size); <span class=\"hljs-comment\">//3</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Map构造函数的参数\"><a href=\"#Map构造函数的参数\" class=\"headerlink\" title=\"Map构造函数的参数\"></a>Map构造函数的参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.只能传二维数组，必须体现键和值</span><br><span class=\"hljs-keyword\">const</span> m1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;alex&quot;</span>],[<span class=\"hljs-string\">&quot;age&quot;</span>,<span class=\"hljs-number\">18</span>]]);<br><span class=\"hljs-built_in\">console</span>.log(m1);<br><span class=\"hljs-comment\">// Map(2) &#123;&quot;name&quot; =&gt; &quot;alex&quot;, &quot;age&quot; =&gt; 18&#125;</span><br><br><span class=\"hljs-comment\">// 2.Set, Map等</span><br><span class=\"hljs-comment\">// Set中也必须体现键和值</span><br><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([[<span class=\"hljs-string\">&quot;gender&quot;</span>,<span class=\"hljs-string\">&quot;male&quot;</span>],[<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;xiaoming&quot;</span>]]);<br><span class=\"hljs-keyword\">const</span> m2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(s);<br><span class=\"hljs-built_in\">console</span>.log(m2); <br><span class=\"hljs-comment\">//Map(2) &#123;&quot;gender&quot; =&gt; &quot;male&quot;, &quot;name&quot; =&gt; &quot;xiaoming&quot;&#125;</span><br><br><span class=\"hljs-keyword\">const</span> m3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(m1);<br><span class=\"hljs-built_in\">console</span>.log(m3, m3==m1);<br><span class=\"hljs-comment\">//Map(2) &#123;&quot;name&quot; =&gt; &quot;alex&quot;, &quot;age&quot; =&gt; 18&#125; false</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Map注意事项\"><a href=\"#Map注意事项\" class=\"headerlink\" title=\"Map注意事项\"></a>Map注意事项</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.Map中判断键名是否相同</span><br><span class=\"hljs-comment\">// 基本遵循严格相等(===)</span><br><span class=\"hljs-comment\">// 例外就是Map中NaN等于NaN</span><br><br><span class=\"hljs-keyword\">const</span> m1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br>m1.set(<span class=\"hljs-literal\">NaN</span>,<span class=\"hljs-number\">1</span>).set(<span class=\"hljs-literal\">NaN</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-built_in\">console</span>.log(m1); <span class=\"hljs-comment\">//Map(1) &#123;NaN =&gt; 2&#125;</span><br><br><span class=\"hljs-comment\">// 2.什么时候使用Map什么使用对象</span><br><span class=\"hljs-comment\">// 2.1如果只需要Key-&gt;Value结构</span><br><span class=\"hljs-comment\">// 2.2或者需要除了字符串以为的值做键，使用Map更合适</span><br><span class=\"hljs-comment\">// 只有模拟现实世界的实体的时候才会使用对象</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">const</span> [p1, p2, p3] = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;p&#x27;</span>);</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 二维数组做Map构造函数的参数</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([</span><br><span class=\"javascript\">    [p1, &#123; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;red&quot;</span>, <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">&quot;yellow&quot;</span>, <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">&quot;20px&quot;</span> &#125;],</span><br><span class=\"javascript\">    [p2, &#123; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;pink&quot;</span>, <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">&quot;orange&quot;</span>, <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">&quot;20px&quot;</span> &#125;],</span><br><span class=\"javascript\">    [p3, &#123; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;green&quot;</span>, <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">&quot;blue&quot;</span>, <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">&quot;20px&quot;</span> &#125;]</span><br><span class=\"javascript\">]);</span><br><span class=\"javascript\">m.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, key</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> p <span class=\"hljs-keyword\">in</span> value)&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 有点难理解，多想想还是能理解的</span></span><br><span class=\"javascript\">        key.style[p]=value[p];</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">&#125;);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>SeT/Map总结</p>\n<p><img src=\"https://i.loli.net/2021/06/10/xEzm7YcGRnAQhOs.png\" alt=\"image-20210610175416433\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/E1XHQBYURp8IgjC.png\" alt=\"image-20210610175506099\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/JNXSG9yTZjbPFdK.png\" alt=\"image-20210610175655315\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/aXh4TLvYSuf1qQE.png\" alt=\"image-20210610175710050\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/FOBbacWuGtU1I23.png\" alt=\"image-20210610175745097\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/drQIFyD9Gmx2YJ7.png\" alt=\"image-20210610175848667\"></p>\n<h1 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h1><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610180623.png\" alt=\"image-20210610180620847\"></p>\n<h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>Iterator是如下的过程：Symbol.iterator(可遍历对象的生成方法)-&gt;it(可遍历对象)-&gt;next()-&gt;next()-&gt;(知道done为true)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 数组的.__proto__原型中有Symbol.iterator这个方法</span><br><span class=\"hljs-comment\">// 而这个方法不符合命名规范，因此用方括号来调用。</span><br><br><span class=\"hljs-comment\">// Symbol.iterator 可遍历对象的生成方法</span><br><span class=\"hljs-comment\">// it：可遍历对象 (可迭代对象)</span><br><span class=\"hljs-keyword\">const</span> it = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>][<span class=\"hljs-built_in\">Symbol</span>.iterator]();<br><span class=\"hljs-built_in\">console</span>.log(it); <span class=\"hljs-comment\">//Array Iterator &#123;&#125;</span><br><br><span class=\"hljs-comment\">// value表示值，done表示遍历还没有完成</span><br><span class=\"hljs-built_in\">console</span>.log(it.next());<span class=\"hljs-comment\">//&#123;value: 1, done: false&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(it.next()); <span class=\"hljs-comment\">//&#123;value: 2, done: false&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(it.next()); <span class=\"hljs-comment\">//&#123;value: undefined, done: true&#125;</span><br><br><br></code></pre></td></tr></table></figure>\n\n<p>为什么需要Iterator遍历器</p>\n<p>遍历数组： for循环、forEach方法 ，遍历对象：for in循环。Iterator 遍历器是一个统一的遍历方式</p>\n<h3 id=\"for-of-用法\"><a href=\"#for-of-用法\" class=\"headerlink\" title=\"for of 用法\"></a>for of 用法</h3><p>for of将下面Iterator过程封装起来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arr=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">const</span> it =arr[<span class=\"hljs-built_in\">Symbol</span>.iterator]();<br><span class=\"hljs-keyword\">let</span> next=it.next();<br><span class=\"hljs-keyword\">while</span>(!next.done)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(next.value);<br>    next=it.next();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>for of循环只会遍历出那些done为false时对应的value值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">of</span> arr)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>for of可以和break、continue一起使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arr2=[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">of</span> arr2)&#123;<br>    <span class=\"hljs-keyword\">if</span>(i===<span class=\"hljs-number\">7</span>)&#123;<br>        <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在for of循环中获取索引值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// keys()得到的是索引的可遍历对象，可以遍历出索引值</span><br><span class=\"hljs-keyword\">const</span> arr3=[<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;c&#x27;</span>,<span class=\"hljs-string\">&#x27;d&#x27;</span>];<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> keys <span class=\"hljs-keyword\">of</span> arr3.keys())&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(keys); <span class=\"hljs-comment\">//</span><br>&#125;<br><span class=\"hljs-comment\">// values()得到的是值的可遍历对象，可以遍历出值</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> value <span class=\"hljs-keyword\">of</span> arr3.values())&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(value); <span class=\"hljs-comment\">// a b c d</span><br>&#125;<br><span class=\"hljs-comment\">// entries()可以得到索引和值组成的数组的可遍历对象</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> entries <span class=\"hljs-keyword\">of</span> arr3.entries())&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(entries);<br>&#125;<br><span class=\"hljs-comment\">// 结合解构赋值</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [index, value] <span class=\"hljs-keyword\">of</span> arr3.entries())&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(index,value);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"可遍历\"><a href=\"#可遍历\" class=\"headerlink\" title=\"可遍历\"></a>可遍历</h3><p>只要有Symbol.iterator方法，并且这个方法可以生成可遍历对象，就是可遍历的。</p>\n<p>只要可遍历，就可以使用for…of循环来统一遍历。</p>\n<h4 id=\"原生可遍历\"><a href=\"#原生可遍历\" class=\"headerlink\" title=\"原生可遍历\"></a>原生可遍历</h4><p>数组、字符串、Set、Map、arguments、NodeList这些原生可遍历。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">of</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>])&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125; <span class=\"hljs-comment\">// 1 2 3</span><br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]))&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125; <span class=\"hljs-comment\">// 4 5 6</span><br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;p&#x27;</span>))&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>    i.style.color=<span class=\"hljs-string\">&#x27;red&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"非原生可遍历\"><a href=\"#非原生可遍历\" class=\"headerlink\" title=\"非原生可遍历\"></a>非原生可遍历</h4><p>没有Symbol.iterator属性的，可以为它手动添加该属性就可以使用for…of循环了。</p>\n<p>1.一般的对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person =&#123;<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>,<span class=\"hljs-attr\">sex</span>:<span class=\"hljs-string\">&#x27;male&#x27;</span>&#125;;<br><span class=\"hljs-comment\">// 给一般的对象手动添加Symbol.iterator属性</span><br>person[<span class=\"hljs-built_in\">Symbol</span>.iterator]=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> index=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">next</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>            index++;<br>            <span class=\"hljs-keyword\">if</span>(index===<span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-keyword\">return</span>&#123;<br>                    <span class=\"hljs-attr\">value</span>:person.age,<br>                    <span class=\"hljs-attr\">done</span>:<span class=\"hljs-literal\">false</span><br>                &#125;<br>            &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(index===<span class=\"hljs-number\">2</span>)&#123;<br>                <span class=\"hljs-keyword\">return</span>&#123;<br>                    <span class=\"hljs-attr\">value</span>:person.sex,<br>                    <span class=\"hljs-attr\">done</span>:<span class=\"hljs-literal\">false</span><br>                &#125;<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                <span class=\"hljs-keyword\">return</span>&#123;<br>                    <span class=\"hljs-attr\">value</span>:<span class=\"hljs-literal\">undefined</span>,<br>                    <span class=\"hljs-attr\">done</span>:<span class=\"hljs-literal\">true</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> person)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(item);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2.有length和索引值的对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj=&#123;<br>    <span class=\"hljs-number\">0</span>:<span class=\"hljs-string\">&#x27;alex&#x27;</span>,<br>    <span class=\"hljs-number\">1</span>:<span class=\"hljs-string\">&#x27;male&#x27;</span>,<br>    <span class=\"hljs-attr\">length</span>:<span class=\"hljs-number\">2</span><br>&#125;<br>obj[<span class=\"hljs-built_in\">Symbol</span>.iterator]=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> index=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">next</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>            <span class=\"hljs-keyword\">let</span> value,done;<br>            <span class=\"hljs-keyword\">if</span>(index&lt;obj.length)&#123;<br>                value=obj[index];<br>                done=<span class=\"hljs-literal\">false</span><br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                done=<span class=\"hljs-literal\">true</span>;<br>            &#125;<br>            index++;<br>            <span class=\"hljs-keyword\">return</span>&#123;<br>                value,<br>                done<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 或者直接使用数组原型链的Symbol.iterator属性</span><br>obj[<span class=\"hljs-built_in\">Symbol</span>.iterator]=<span class=\"hljs-built_in\">Array</span>.prototype[<span class=\"hljs-built_in\">Symbol</span>.iterator];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">of</span> obj)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用Iterator的场合\"><a href=\"#使用Iterator的场合\" class=\"headerlink\" title=\"使用Iterator的场合\"></a>使用Iterator的场合</h3><p> 1.数组的展开运算符</p>\n<p>只要是原生可遍历的，就可以使用数组的展开运算。数组、字符串、Set、Map、arguments、NodeList这些原生可遍历。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(...[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">//1 2 3</span><br><span class=\"hljs-built_in\">console</span>.log(...<span class=\"hljs-string\">&quot;str&quot;</span>); <span class=\"hljs-comment\">// s t r</span><br><span class=\"hljs-built_in\">console</span>.log(...new <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]));<br></code></pre></td></tr></table></figure>\n\n<p>2.数组的解构赋值</p>\n<p>只要是原生可遍历的，就可以使用数组的进行解构赋值。因为可以在解构赋值前，进行展开运算让其变为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-keyword\">const</span> [a,b]=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-comment\">// 在解构赋值前，&quot;hi&quot;进行了展开运算 [...&quot;hi&quot;]</span><br><span class=\"hljs-keyword\">const</span> [c,d]=<span class=\"hljs-string\">&quot;hi&quot;</span>;<br><span class=\"hljs-keyword\">const</span> [e,f]=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>]);<br><span class=\"hljs-built_in\">console</span>.log(a,b,c,d,e,f);<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Iterator总结\"><a href=\"#Iterator总结\" class=\"headerlink\" title=\"Iterator总结\"></a>Iterator总结</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222130.png\" alt=\"image-20210610222129343\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222157.png\" alt=\"image-20210610222156497\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222305.png\" alt=\"image-20210610222304196\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222325.png\" alt=\"image-20210610220808524\"></p>\n<h1 id=\"ES6新增方法\"><a href=\"#ES6新增方法\" class=\"headerlink\" title=\"ES6新增方法\"></a>ES6新增方法</h1><h2 id=\"字符串的新增方法\"><a href=\"#字符串的新增方法\" class=\"headerlink\" title=\"字符串的新增方法\"></a>字符串的新增方法</h2><h3 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h3><p><strong><code>includes()</code></strong> 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.基本用法</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;abc&#x27;</span>.includes(<span class=\"hljs-string\">&#x27;a&#x27;</span>)); <span class=\"hljs-comment\">//true</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;abc&#x27;</span>.includes(<span class=\"hljs-string\">&#x27;ab&#x27;</span>)); <span class=\"hljs-comment\">//true</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;abc&#x27;</span>.includes(<span class=\"hljs-string\">&#x27;ac&#x27;</span>)); <span class=\"hljs-comment\">//false</span><br><br><span class=\"hljs-comment\">// 2.第二个参数</span><br><span class=\"hljs-comment\">// 表示开始搜索的位置，默认是0</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;abc&#x27;</span>.includes(<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-number\">1</span>));<span class=\"hljs-comment\">//false</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"padStart-和padEnd\"><a href=\"#padStart-和padEnd\" class=\"headerlink\" title=\"padStart()和padEnd()\"></a>padStart()和padEnd()</h3><p><strong><code>padStart()</code></strong> 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">str.padStart(targetLength [, padString])<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><code>targetLength</code></p>\n<p>当前字符串需要填充到的目标长度。<strong>如果这个数值小于当前字符串的长度，则返回当前字符串本身。</strong></p>\n<p><code>padString</code> 可选</p>\n<p>填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 “ “（空格）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-string\">&#x27;abc&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>);         <span class=\"hljs-comment\">// &quot;       abc&quot;</span><br><span class=\"hljs-string\">&#x27;abc&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>);  <span class=\"hljs-comment\">// &quot;foofoofabc&quot;</span><br><span class=\"hljs-string\">&#x27;abc&#x27;</span>.padStart(<span class=\"hljs-number\">6</span>,<span class=\"hljs-string\">&quot;123465&quot;</span>); <span class=\"hljs-comment\">// &quot;123abc&quot;</span><br><span class=\"hljs-string\">&#x27;abc&#x27;</span>.padStart(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;0&quot;</span>);     <span class=\"hljs-comment\">// &quot;00000abc&quot;</span><br><span class=\"hljs-string\">&#x27;abc&#x27;</span>.padStart(<span class=\"hljs-number\">1</span>);          <span class=\"hljs-comment\">// &quot;abc&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong><code>padEnd()</code></strong> 方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</p>\n<h3 id=\"trimStart-和trimEnd\"><a href=\"#trimStart-和trimEnd\" class=\"headerlink\" title=\"trimStart()和trimEnd()\"></a>trimStart()和trimEnd()</h3><p><strong><code>trimStart()</code></strong> 方法从字符串的开头删除空格。<code>trimEnd() </code>方法从一个字符串的末端移除空白字符。**<code>trim()</code>** 方法会从一个字符串的两端删除空白字符。</p>\n<p><code>trimLeft()</code> 是<code>trimStart()</code>的别名。<code>trimRight()</code> 是<code>trimEnd() </code>的别名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-string\">&quot;   abc  &quot;</span>;<br><span class=\"hljs-built_in\">console</span>.log(s.trimStart()); <span class=\"hljs-comment\">//&quot;abc  &quot;</span><br><span class=\"hljs-built_in\">console</span>.log(s.trimEnd()); <span class=\"hljs-comment\">//&quot;   abc&quot;</span><br><span class=\"hljs-built_in\">console</span>.log(s.trim()); <span class=\"hljs-comment\">//&quot;abc&quot;</span><br><span class=\"hljs-built_in\">console</span>.log(s); <span class=\"hljs-comment\">//&quot;   abc  &quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数组新增方法\"><a href=\"#数组新增方法\" class=\"headerlink\" title=\"数组新增方法\"></a>数组新增方法</h2><h3 id=\"includes-1\"><a href=\"#includes-1\" class=\"headerlink\" title=\"includes()\"></a>includes()</h3><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">arr.includes(valueToFind[, fromIndex])<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><code>valueToFind</code></p>\n<p>需要查找的元素值。<strong>Note:</strong> 使用 <code>includes()</code>比较字符串和字符时是区分大小写。</p>\n<p><code>fromIndex</code> 可选</p>\n<p>从<code>fromIndex</code> 索引处开始查找 <code>valueToFind</code>。如果为负值，则按升序从 <code>array.length + fromIndex</code> 的索引开始搜 。如果计算出的索引小于 0，则整个数组都会被搜索。默认为 0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].includes(<span class=\"hljs-number\">2</span>);     <span class=\"hljs-comment\">// true</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].includes(<span class=\"hljs-number\">4</span>);     <span class=\"hljs-comment\">// false</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].includes(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">// false</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].includes(<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// true</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">NaN</span>].includes(<span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h3><p><code>Array.from()</code> 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Array</span>.from(arrayLike[, mapFn[, thisArg]])<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><code>arrayLike</code></p>\n<p>想要转换成数组的伪数组对象或可迭代对象。</p>\n<p><code>mapFn</code> 可选</p>\n<p>如果指定了该参数，新数组中的每个元素会执行该回调函数。</p>\n<p><code>thisArg</code> 可选</p>\n<p>可选参数，执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//从 String 生成数组</span><br><span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-string\">&#x27;foo&#x27;</span>);<br><span class=\"hljs-comment\">// [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]</span><br><br><span class=\"hljs-comment\">//从Set生成数组</span><br><span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-string\">&#x27;foo&#x27;</span>, <span class=\"hljs-string\">&#x27;bar&#x27;</span>, <span class=\"hljs-string\">&#x27;baz&#x27;</span>, <span class=\"hljs-string\">&#x27;foo&#x27;</span>]);<br><span class=\"hljs-built_in\">Array</span>.from(set);<br><span class=\"hljs-comment\">// [ &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot; ]</span><br>[...new <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>])]; <span class=\"hljs-comment\">//使用展开语法会更方便</span><br><br><span class=\"hljs-comment\">//从 Map 生成数组</span><br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>]]);<br><span class=\"hljs-built_in\">Array</span>.from(map);<br><span class=\"hljs-comment\">// [[1, 2], [2, 4], [4, 8]]</span><br><br><span class=\"hljs-keyword\">const</span> mapper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>], [<span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>]]);<br><span class=\"hljs-built_in\">Array</span>.from(mapper.values());<br><span class=\"hljs-comment\">// [&#x27;a&#x27;, &#x27;b&#x27;];</span><br><br><span class=\"hljs-built_in\">Array</span>.from(mapper.keys());<br><span class=\"hljs-comment\">// [&#x27;1&#x27;, &#x27;2&#x27;];</span><br></code></pre></td></tr></table></figure>\n\n<p>拥有length的任意对象都可以通过Array.from()转换为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj=&#123;<span class=\"hljs-attr\">length</span>:<span class=\"hljs-number\">2</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(obj)); <br><span class=\"hljs-comment\">// [undefined, undefined]</span><br><br><span class=\"hljs-keyword\">const</span> obj1=&#123;<span class=\"hljs-attr\">length</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>:<span class=\"hljs-string\">&quot;liu&quot;</span>,<span class=\"hljs-number\">1</span>:<span class=\"hljs-string\">&quot;jiaqi&quot;</span>,<span class=\"hljs-number\">3</span>:<span class=\"hljs-string\">&quot;haha&quot;</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(obj1)); <span class=\"hljs-comment\">//[&quot;liu&quot;, &quot;jiaqi&quot;]</span><br></code></pre></td></tr></table></figure>\n\n<p>在Array.from()中使用箭头函数</p>\n<p>作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在Array.from()中使用箭头函数</span><br><span class=\"hljs-comment\">// 作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组中。</span><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>].map(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>)=&gt;</span>value*<span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">//2 4 6</span><br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(&#123;<span class=\"hljs-attr\">length</span>:<span class=\"hljs-number\">4</span>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index</span>)=&gt;</span>value=index*<span class=\"hljs-number\">2</span>));<br><span class=\"hljs-comment\">// 0 2 4 6</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"find-和findIndex\"><a href=\"#find-和findIndex\" class=\"headerlink\" title=\"find()和findIndex()\"></a>find()和findIndex()</h3><p> <code>find()</code> 方法返回数组中满足提供的测试函数的<strong>第一个元素</strong>的值，否则返回undefined。</p>\n<p><code>findIndex()</code>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。若没有找到对应元素则返回-1。</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">arr.find(callback[, thisArg])<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><code>callback</code>在数组每一项上执行的函数，接收 3 个参数：</p>\n<ul>\n<li><code>element</code>当前遍历到的元素。</li>\n<li><code>index</code>可选 当前遍历到的索引。</li>\n<li><code>array</code>可选 数组本身。</li>\n</ul>\n<p><code>thisArg</code>可选,执行回调时用作<code>this</code> 的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//返回找到的第一个质数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isPrime</span>(<span class=\"hljs-params\">element, index, array</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> start = <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-keyword\">while</span> (start &lt;= <span class=\"hljs-built_in\">Math</span>.sqrt(element)) &#123;<br>    <span class=\"hljs-keyword\">if</span> (element % start++ &lt; <span class=\"hljs-number\">1</span>) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> element &gt; <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">12</span>].find(isPrime)); <span class=\"hljs-comment\">// undefined, not found</span><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">12</span>].find(isPrime)); <span class=\"hljs-comment\">// 5</span><br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//用对象的属性查找数组里的对象</span><br><span class=\"hljs-keyword\">var</span> inventory = [<br>    &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;apples&#x27;</span>, <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">2</span>&#125;,<br>    &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;bananas&#x27;</span>, <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">0</span>&#125;,<br>    &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;cherries&#x27;</span>, <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">5</span>&#125;<br>];<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findCherries</span>(<span class=\"hljs-params\">fruit</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> fruit.name === <span class=\"hljs-string\">&#x27;cherries&#x27;</span>;<br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.log(inventory.find(findCherries)); <span class=\"hljs-comment\">// &#123; name: &#x27;cherries&#x27;, quantity: 5 &#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"对象的新增方法\"><a href=\"#对象的新增方法\" class=\"headerlink\" title=\"对象的新增方法\"></a>对象的新增方法</h2><h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p>\n<p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.assign(target, ...sources)<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> apple = &#123;<br>    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;red&quot;</span>,<br>    <span class=\"hljs-attr\">taste</span>: <span class=\"hljs-string\">&quot;sweet&quot;</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> banana = &#123;<br>    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;yellow&quot;</span>,<br>    <span class=\"hljs-attr\">category</span>: <span class=\"hljs-string\">&quot;fruit&quot;</span><br>&#125;<br><span class=\"hljs-comment\">// Object.assign直接合并到了第一个对象中，返回的就是合并后的对象</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(apple,banana));<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(apple,banana)===apple); <br><span class=\"hljs-comment\">//因为此时的apple 已经被改变了 true</span><br><br><span class=\"hljs-comment\">// 对象是引用类型的，Object.assign会直接修改第一个对象。</span><br><span class=\"hljs-comment\">// 如果想要原来的对象不被修改，可以第一个参数放空对象</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,apple,banana));<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Object.assign(目标对象，源对象);</span><br><span class=\"hljs-comment\">// 1.基本数据类型作为源对象</span><br><span class=\"hljs-comment\">// 与对象的展开类似，先转换为对象，再合并</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,<span class=\"hljs-literal\">undefined</span>)); <span class=\"hljs-comment\">//&#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,<span class=\"hljs-literal\">null</span>)); <span class=\"hljs-comment\">//&#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,<span class=\"hljs-number\">22</span>)); <span class=\"hljs-comment\">//&#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,<span class=\"hljs-number\">22</span>)); <span class=\"hljs-comment\">//&#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,<span class=\"hljs-string\">&quot;str&quot;</span>)); <span class=\"hljs-comment\">//&#123;0: &quot;s&quot;, 1: &quot;t&quot;, 2: &quot;r&quot;&#125;</span><br><br><span class=\"hljs-comment\">// 2.同名属性的替换</span><br><span class=\"hljs-comment\">// 后面的属性直接覆盖前面的属性</span><br><span class=\"hljs-keyword\">const</span> apple = &#123;<br>    <span class=\"hljs-attr\">color</span>: [<span class=\"hljs-string\">&quot;蓝色&quot;</span>,<span class=\"hljs-string\">&quot;紫色&quot;</span>],<br>    <span class=\"hljs-attr\">taste</span>: <span class=\"hljs-string\">&quot;sweet&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> banana = &#123;<br>    <span class=\"hljs-attr\">color</span>: [<span class=\"hljs-string\">&quot;红色&quot;</span>,<span class=\"hljs-string\">&quot;黄色&quot;</span>],<br>    <span class=\"hljs-attr\">category</span>: <span class=\"hljs-string\">&quot;fruit&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(apple,banana)); <span class=\"hljs-comment\">//&#123;color:[&quot;红色&quot;, &quot;黄色&quot;], taste: &quot;sweet&quot;, category: &quot;fruit&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> user=<span class=\"hljs-function\"><span class=\"hljs-params\">useroptions</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> defaults=&#123;<br>        <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;alex&quot;</span>,<br>        <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">0</span>,<br>        <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span><br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> options=<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,defaults,useroptions);<br>    <span class=\"hljs-built_in\">console</span>.log(options);<br>&#125;;<br>user();<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Object-keys-、Object-values-、Object-entries\"><a href=\"#Object-keys-、Object-values-、Object-entries\" class=\"headerlink\" title=\"Object.keys()、Object.values()、Object.entries()\"></a>Object.keys()、Object.values()、Object.entries()</h3><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Alex&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.keys(person)); <span class=\"hljs-comment\">// [&quot;name&quot;, &quot;age&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.values(person)); <span class=\"hljs-comment\">// [&quot;Alex&quot;, 18]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.entries(person)); <span class=\"hljs-comment\">// [ [&quot;name&quot;, &quot;Alex&quot;],[&quot;age&quot;, 18]]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"与数组的类似方法的区别\"><a href=\"#与数组的类似方法的区别\" class=\"headerlink\" title=\"与数组的类似方法的区别\"></a>与数组的类似方法的区别</h4><p>数组的keys(), values(), entries()等方法都是实例方法，返回的都是可遍历对象。对象的Object.keys(), Object.values(),Object.values()等方法返回的都是数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 2.与数组类似的方法的区别</span><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>].keys()); <span class=\"hljs-comment\">// 返回可遍历对象</span><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>].values()); <span class=\"hljs-comment\">// 返回可遍历对象</span><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>].entries()); <span class=\"hljs-comment\">// 返回可遍历对象</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person=&#123;<br><span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Alex&quot;</span>,<br><span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span><br>&#125;<br><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> [key,value] <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">Object</span>.entries(person))&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(key,value)<br>&#125;<br><br><span class=\"hljs-comment\">// Object.keys(), Object.values(), Object.entires()</span><br><span class=\"hljs-comment\">// 这三个方法并不能保证顺序，和for...in 一样无法保证顺序</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"新增方法总结\"><a href=\"#新增方法总结\" class=\"headerlink\" title=\"新增方法总结\"></a>新增方法总结</h2><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160239.png\" alt=\"image-20210611160231073\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160311.png\" alt=\"image-20210611160310273\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160445.png\" alt=\"image-20210611160444694\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160657.png\" alt=\"image-20210611160655803\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160735.png\" alt=\"image-20210611160733628\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160905.png\" alt=\"image-20210611160904401\"></p>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><h3 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>Promise 一般用来解决层层嵌套的回调函数(回调地狱callback hell)的问题。</p>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611181352.png\" alt=\"image-20210611181350553\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.实例化构造函数生成实例对象</span><br><span class=\"hljs-comment\">// Promise 解决的不是回调函数，而是用于解决回调地域的问题。</span><br><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(&#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;alex&#x27;</span> &#125;);<br>    <span class=\"hljs-comment\">// reject(new Error(&quot;reason&quot;));</span><br>&#125;);<br><span class=\"hljs-built_in\">console</span>.log(p);<br><span class=\"hljs-comment\">// 2.Promise的状态</span><br><span class=\"hljs-comment\">// Promise的状态一旦完成变化，就不会再改变了 </span><br><span class=\"hljs-comment\">// Promise有3种状态，一开始是pending(未完成),执行resolve,变成fulfilled(resolved)已成功, 执行reject，变成rejected，已失败</span><br><span class=\"hljs-comment\">// 执行resolve();</span><br><span class=\"hljs-comment\">// pending-&gt;fulfilled</span><br><span class=\"hljs-comment\">// 执行reject();</span><br><span class=\"hljs-comment\">// pending-&gt;rejected</span><br><br><span class=\"hljs-comment\">// 3.then()方法</span><br><span class=\"hljs-comment\">// 当Promise的状态变为fulfilled时，执行第一个then()方法</span><br><span class=\"hljs-comment\">// 当Promise的状态变为rejected时，执行第二个then()方法</span><br>p.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;success&quot;</span>, data);<br>&#125;, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;error&quot;</span>,err);<br>&#125;);<br><br><span class=\"hljs-comment\">// 4.resolve和reject函数的参数</span><br><span class=\"hljs-comment\">// 执行resole或者reject函数所传的参数，可以被then中的回调函数接收</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then()\"></a>then()</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611183500.png\" alt=\"image-20210611183459134\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611183555.png\" alt=\"image-20210611183554286\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.then()什么时候执行</span><br><span class=\"hljs-comment\">// pending-&gt;fulfilled时，执行then的第一个回调函数</span><br><span class=\"hljs-comment\">// pending-&gt;rejected时，执行then的第二个回调函数</span><br><br><span class=\"hljs-comment\">// 2.执行后的返回值</span><br><span class=\"hljs-comment\">// then()执行后返回一个新的Promise对象，返回的新的Promise对象又可以继续调用then();</span><br><span class=\"hljs-keyword\">const</span> p =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>    reject();<br>&#125;);<br><span class=\"hljs-comment\">// 在then()的回调函数中，return后面的东西，会用Promise包装一下</span><br><span class=\"hljs-comment\">// return undefined 等价于 return new Promise((resolve)=&gt;&#123;resolve(undefined);&#125;);</span><br><span class=\"hljs-comment\">// then()执行后返回新的Promise对象，新的Promise对象调用then，默认会返回成功状态的Promise对象</span><br><span class=\"hljs-comment\">// 如果想要返回失败状态的Promise对象，return的时候写完整。return new Promise((resolve,reject)=&gt;&#123;reject();&#125;)</span><br><br>p.then(<br>    <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;success1&#x27;</span>);<br>    &#125;,<br>    <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;error1&#x27;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">123</span>;<br>    &#125;<br>).then(<br>    <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;success2&#x27;</span>,data);<br>    &#125;,<br>    <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;error2&#x27;</span>);<br>    &#125;<br>);<br><br><span class=\"hljs-comment\">// 3.then()方法返回的Promise对象的状态是如何改变的</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用Promise解决回调地狱\"><a href=\"#使用Promise解决回调地狱\" class=\"headerlink\" title=\"使用Promise解决回调地狱\"></a>使用Promise解决回调地狱</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Promise 一般用来解决层层嵌套的回调函数(回调地狱callback hell)的问题</span><br><span class=\"hljs-keyword\">const</span> move = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, &#123; x = <span class=\"hljs-number\">0</span>, y = <span class=\"hljs-number\">0</span> &#125; = &#123;&#125;, end = () =&gt; &#123; &#125;</span>) =&gt;</span> &#123;<br>    el.style.transform = <span class=\"hljs-string\">`translate3d(<span class=\"hljs-subst\">$&#123;x&#125;</span>px,<span class=\"hljs-subst\">$&#123;y&#125;</span>px,0)`</span>;<br>    el.addEventListener(<br>        <span class=\"hljs-string\">&#x27;transitionend&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>            end();<br>        &#125;, <span class=\"hljs-literal\">false</span><br>    );<br>&#125;;<br><span class=\"hljs-keyword\">const</span> box = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;box&quot;</span>);<br><span class=\"hljs-comment\">// document.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class=\"hljs-comment\">//     move(box,&#123;x:150&#125;,()=&gt;&#123;</span><br><span class=\"hljs-comment\">//         move(box,&#123;x:150,y:150&#125;,()=&gt;&#123;</span><br><span class=\"hljs-comment\">//             move(box,&#123;y:150&#125;,()=&gt;&#123;</span><br><span class=\"hljs-comment\">//                 move(box,&#123;x:0,y:0&#125;);</span><br><span class=\"hljs-comment\">//             &#125;)</span><br><span class=\"hljs-comment\">//         &#125;)</span><br><span class=\"hljs-comment\">//     &#125;)</span><br><span class=\"hljs-comment\">// &#125;,false);</span><br><span class=\"hljs-keyword\">const</span> movePromise = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, point</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>        move(el, point, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>            resolve();<br>        &#125;)<br>    &#125;)<br>&#125;<br><br><span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    movePromise(box, &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">150</span> &#125;).then(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> movePromise(box, &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">150</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">150</span> &#125;)<br>    &#125;).then(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> movePromise(box, &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">150</span> &#125;)<br>    &#125;).then(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> movePromise(box, &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span> &#125;)<br>    &#125;);<br>&#125;, <span class=\"hljs-literal\">false</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"catch\"><a href=\"#catch\" class=\"headerlink\" title=\"catch()\"></a>catch()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.尽管then()方法的第一个回调函数可以传成功后执行的回调函数，第二个传失败后执行的回调函数</span><br><span class=\"hljs-comment\">// 2.但为了更好地语义化，一般只在then()中传成功后执行的，catch()传reject()后执行的回调函数</span><br><span class=\"hljs-comment\">// catch专门用来处理rejected的状态，catch的本质是then的特例</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// resolve(123);</span><br>    reject(<span class=\"hljs-string\">&#x27;reason&#x27;</span>);<br>&#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>    <span class=\"hljs-comment\">// 同样会默认返回一个成功的Promise对象。</span><br>    <span class=\"hljs-comment\">// 如果想要返回一个错误的Promise对象</span><br>    <span class=\"hljs-comment\">// 可以throw一个错误</span><br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;errrrr&#x27;</span>);<br>&#125;);<br><span class=\"hljs-comment\">// 3.catch()可以捕获前面的错误</span><br><span class=\"hljs-comment\">// 一般总是Promise对象后面要跟着catch方法，这样可以处理Promise内部发生的错误</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-resolve-和Promise-reject\"><a href=\"#Promise-resolve-和Promise-reject\" class=\"headerlink\" title=\"Promise.resolve()和Promise.reject()\"></a>Promise.resolve()和Promise.reject()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.Promise.resolve()</span><br><span class=\"hljs-comment\">// 是成功状态Promise的一种简写形式</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123; resolve(<span class=\"hljs-string\">&quot;foo&quot;</span>); &#125;);<br><span class=\"hljs-comment\">// 简写</span><br><span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-string\">&quot;foo&quot;</span>);<br><br><span class=\"hljs-comment\">//① 参数：一般参数</span><br><span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-string\">&quot;foo&quot;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(data));<br><span class=\"hljs-comment\">//②当Promise.resolve()接收的是Promise对象时，直接返回的是这个Promise对象，什么也不做</span><br><span class=\"hljs-keyword\">const</span> p1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(resolve, <span class=\"hljs-number\">1000</span>, <span class=\"hljs-string\">&quot;我执行了&quot;</span>);<br>&#125;);<br><span class=\"hljs-built_in\">Promise</span>.resolve(p1).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Promise</span>.resolve(p1) === p1); <span class=\"hljs-comment\">//true</span><br><span class=\"hljs-comment\">// 当resolve函数接收的是Promise对象时，后面的then会根据传递的Promise对象的状态变化决定执行哪一个回调</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> resolve(p1)).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123; <span class=\"hljs-built_in\">console</span>.log(data) &#125;);<br><br><span class=\"hljs-comment\">// ③具有then方法的对象，对象中的then()方法和new Promise()差不多</span><br><span class=\"hljs-keyword\">const</span> thenable=&#123;<br>    <span class=\"hljs-comment\">// 和new Promise()里的参数差不多</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">then</span>(<span class=\"hljs-params\">resolve, reject</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;thenable&quot;</span>);<br>        resolve(<span class=\"hljs-string\">&quot;123&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-built_in\">Promise</span>.resolve(thenable).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span><span class=\"hljs-built_in\">console</span>.log(data),<span class=\"hljs-function\"><span class=\"hljs-params\">err</span>=&gt;</span><span class=\"hljs-built_in\">console</span>.log(err));<br><br><span class=\"hljs-comment\">// 2.Promise.reject();</span><br><span class=\"hljs-comment\">// 是失败状态的一种简写形式</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>    reject(<span class=\"hljs-string\">&#x27;reason&#x27;</span>);<br>&#125;);<br><span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-string\">&#x27;reason&#x27;</span>);<br><span class=\"hljs-comment\">// 不管什么参数都会原封不动的向后传递，作为后续方法的参数</span><br><span class=\"hljs-built_in\">Promise</span>.reject(p1).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Promise.all()用来关注多个Promise对象的状态变化</span><br><span class=\"hljs-comment\">// 可以传入多个Promise实例，包装成一个新的Promise对象返回</span><br><span class=\"hljs-keyword\">const</span> delay=<span class=\"hljs-function\"><span class=\"hljs-params\">ms</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(resolve,ms);<br>    &#125;)<br>&#125;;<br><span class=\"hljs-keyword\">const</span> p1=delay(<span class=\"hljs-number\">1000</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;p1 finished&#x27;</span>);<br>    <span class=\"hljs-comment\">// return Promise.reject(&quot;uifsf&quot;);</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;我是p1&#x27;</span>;<br>&#125;);<br><span class=\"hljs-keyword\">const</span> p2=delay(<span class=\"hljs-number\">2000</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;p2 finished&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;我是p2&#x27;</span>;<br>&#125;);<br><span class=\"hljs-comment\">// Promise.all()的状态变化与所有传入的Promise实例对象状态变化有关</span><br><span class=\"hljs-comment\">// 所有状态都变成了resolved，最终的状态才会变为resolved</span><br><span class=\"hljs-comment\">// 只要有一个变成了rejected，最终的状态才会变为rejected</span><br><br><span class=\"hljs-comment\">// 要给Promise.all()中传入数组，或者任何可遍历的参数</span><br><span class=\"hljs-keyword\">const</span> p=<span class=\"hljs-built_in\">Promise</span>.all([p1,p2]);<br>p.then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race-和Promise-allSettled\"><a href=\"#Promise-race-和Promise-allSettled\" class=\"headerlink\" title=\"Promise.race()和Promise.allSettled()\"></a>Promise.race()和Promise.allSettled()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.Promise.race()</span><br><span class=\"hljs-keyword\">const</span> delay=<span class=\"hljs-function\"><span class=\"hljs-params\">ms</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(resolve,ms);<br>    &#125;);<br>&#125;;<br><span class=\"hljs-keyword\">const</span> p1=delay(<span class=\"hljs-number\">1000</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;p1 finished&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;我是p1&quot;</span>;<br>&#125;);<br><span class=\"hljs-keyword\">const</span> p2=delay(<span class=\"hljs-number\">2000</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;p2 finised&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;我是p2&quot;</span>;<br>&#125;);<br><span class=\"hljs-comment\">// Promise.race()的状态取决于第一个完成的Promise实例对象</span><br><span class=\"hljs-comment\">// 如果第一个完成的成功了，就是最终的成功</span><br><span class=\"hljs-comment\">// 如果第一个完成的失败了，就是最终的失败</span><br><span class=\"hljs-keyword\">const</span> racePromise=<span class=\"hljs-built_in\">Promise</span>.race([p1,p2]);<br>racePromise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 2.Promise.allSetted()</span><br><span class=\"hljs-keyword\">const</span> delay=<span class=\"hljs-function\"><span class=\"hljs-params\">ms</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(resolve,ms);<br>    &#125;);<br>&#125;;<br><span class=\"hljs-keyword\">const</span> p1=delay(<span class=\"hljs-number\">1000</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;p1 finished&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-string\">&quot;fjsf&quot;</span>);<br>    <span class=\"hljs-comment\">// return &quot;我是p1&quot;;</span><br>&#125;);<br><br><span class=\"hljs-keyword\">const</span> p2=delay(<span class=\"hljs-number\">200</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;p2 finished&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;我是p2&quot;</span>;<br>&#125;);<br><br><span class=\"hljs-keyword\">const</span> allSettedPromise=<span class=\"hljs-built_in\">Promise</span>.allSettled([p1,p2]);<br><span class=\"hljs-comment\">// Promise.allSetted()的状态与传入的Promise的状态无关</span><br><span class=\"hljs-comment\">// 永远都是成功的，它只会忠实的记录各个Promise的表现</span><br><br>allSettedPromise.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;succeed&quot;</span>,data);<br>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;fail&quot;</span>,err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210612210208.png\" alt=\"image-20210612210200175\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.resolve和reject函数执行后的代码</span><br><span class=\"hljs-comment\">// 推荐在调用resolve或reject函数的时候加上return，不再执行它们后面的代码</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class=\"hljs-number\">123</span>);<br>    <span class=\"hljs-comment\">// reject(&quot;reason&quot;);</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hi&quot;</span>); <span class=\"hljs-comment\">//还可以执行</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 2.Promise.all/race/allSettled的参数</span><br><span class=\"hljs-comment\">// 参数如果不是Promise数组，会将不是Promise的数组元素转变成Promise对象</span><br><span class=\"hljs-comment\">// Promise.all([1,2,3]).then(datas=&gt;&#123;</span><br><span class=\"hljs-comment\">//     console.log(datas);</span><br><span class=\"hljs-comment\">// &#125;);</span><br><span class=\"hljs-comment\">// 等价于</span><br><span class=\"hljs-built_in\">Promise</span>.all([<br>    <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">1</span>),<br>    <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">2</span>),<br>    <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">3</span>)<br>]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;) <span class=\"hljs-comment\">//[1,2,3]</span><br><br><span class=\"hljs-comment\">// 除了数组，任何可遍历的都可以作为数组</span><br><span class=\"hljs-comment\">// 数组、字符串、Set、Map、NodeList、arguments</span><br><span class=\"hljs-built_in\">Promise</span>.all(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;) <span class=\"hljs-comment\">//[1,2,3]</span><br><br><span class=\"hljs-comment\">// 3.Promise.all/race/allsettled错误处理</span><br><span class=\"hljs-comment\">// 错误既可以单独处理，也可以统一处理</span><br><span class=\"hljs-comment\">// 一旦被处理，就不会再处理一遍</span><br><span class=\"hljs-keyword\">const</span> delay = <span class=\"hljs-function\"><span class=\"hljs-params\">ms</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(resolve, ms);<br>    &#125;);<br>&#125;;<br><span class=\"hljs-keyword\">const</span> p1 = delay(<span class=\"hljs-number\">1000</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;p1 finished&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;我是P1&quot;</span>;<br>&#125;);<br><span class=\"hljs-keyword\">const</span> p2 = delay(<span class=\"hljs-number\">2000</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;p2 finished&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-string\">&#x27;rej&#x27;</span>);<br><br>&#125;);<br><br><span class=\"hljs-keyword\">const</span> allPromise = <span class=\"hljs-built_in\">Promise</span>.all([p1, p2]);<br>allPromise.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">datas</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(datas);<br>&#125;).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>Promise应用异步加载图片</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\"></span><br><span class=\"css\">        <span class=\"hljs-selector-id\">#img</span>&#123;</span><br><span class=\"css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">80%</span>;</span><br><span class=\"css\">            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10%</span>;</span><br><span class=\"css\">        &#125;</span><br><span class=\"css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;img&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://img.mukewang.com/szimg/5feb016d097497d905400304.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 1.异步加载图片</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> loadImgAsync=<span class=\"hljs-function\"><span class=\"hljs-params\">url</span>=&gt;</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// Image()函数将会创建一个新的HTMLImageElement实例。</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 它的功能等价于 document.createElement(&#x27;img&#x27;)</span></span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">const</span> img=<span class=\"hljs-keyword\">new</span> Image();</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// Promise函数中不用写具体过程，只需要决定用resolve还是reject即可</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// onload 属性是一个事件处理程序用于处理Window, XMLHttpRequest, &lt;img&gt; 等元素的加载事件，当资源已加载时被触发。     </span></span><br><span class=\"javascript\">                img.onload=<span class=\"hljs-function\">()=&gt;</span>&#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;sb&quot;</span>);</span><br><span class=\"javascript\">                    resolve(img);</span><br><span class=\"javascript\">                &#125;;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 当一项资源（如&lt;img&gt;或&lt;script&gt;）加载失败，加载资源的元素会触发一个Event接口的error事件，并执行该元素上的onerror()处理函数。</span></span><br><span class=\"javascript\">                img.onerror=<span class=\"hljs-function\">()=&gt;</span>&#123;</span><br><span class=\"javascript\">                    reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`couldn&#x27;t load image at <span class=\"hljs-subst\">$&#123;url&#125;</span>`</span>));</span><br><span class=\"javascript\">                &#125;</span><br><span class=\"javascript\">                img.src=url;</span><br><span class=\"javascript\">            &#125;);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> url1=<span class=\"hljs-string\">&#x27;https://img4.mukewang.com/szimg/60b9864a09995aa605400304.png&#x27;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> imgDom=<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;img&#x27;</span>);</span><br><span class=\"javascript\">        loadImgAsync(url1).then(<span class=\"hljs-function\"><span class=\"hljs-params\">img</span>=&gt;</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(img.src);</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;</span><br><span class=\"javascript\">                imgDom.src=img.src;</span><br><span class=\"javascript\">            &#125;,<span class=\"hljs-number\">1000</span>);</span><br><span class=\"javascript\">        &#125;).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span>=&gt;</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(err);</span><br><span class=\"javascript\">        &#125;);</span><br><span class=\"javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141556.png\" alt=\"image-20210613141548090\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141646.png\" alt=\"image-20210613141645235\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141718.png\" alt=\"image-20210613141717621\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141850.png\" alt=\"image-20210613141849863\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142008.png\" alt=\"image-20210613142007368\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142051.png\" alt=\"image-20210613142050967\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142136.png\" alt=\"image-20210613142135558\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142151.png\" alt=\"image-20210613142150152\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142217.png\" alt=\"image-20210613142216303\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163043.png\" alt=\"image-20210613163042772\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163154.png\" alt=\"image-20210613163153293\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163220.png\" alt=\"image-20210613163219353\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163246.png\" alt=\"image-20210613163245239\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163304.png\" alt=\"image-20210613163303168\"></p>\n<h1 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h1><h3 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><strong>class 声明</strong>创建一个基于原型继承的具有给定名称的新类。</p>\n<p>要注意类的写法，并没有圆括号直接跟上了花括号，方法和方法之间不需要用逗号分隔。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 类可以看做是对象的模板，用一个类可以创建出许多不同的对象</span><br><span class=\"hljs-comment\">// 类名一般来说，首字母是大写的</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-comment\">// 实例化时必须执行构造方法，所以必须有构造方法，但是可以不写出来</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name,age</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name=name;<br>        <span class=\"hljs-built_in\">this</span>.age=age;<br>        <span class=\"hljs-comment\">// 一般只在构造方法中定义属性，方法不在构造方法中定义</span><br>    &#125;<br>    <span class=\"hljs-comment\">// 各个实例共用的方法</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;speak&#x27;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 实例对象</span><br><span class=\"hljs-keyword\">const</span> zs=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;张三&#x27;</span>,<span class=\"hljs-number\">18</span>);<br><span class=\"hljs-keyword\">const</span> ls=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;ls&#x27;</span>,<span class=\"hljs-number\">58</span>);<br><span class=\"hljs-built_in\">console</span>.log(zs.speak===ls.speak); <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<p>声明的Person类本质上是一个函数，和构造函数差不多。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> Person); <span class=\"hljs-comment\">//function</span><br><span class=\"hljs-built_in\">console</span>.log(Person.prototype.speak);<br></code></pre></td></tr></table></figure>\n\n<p>对比一下Person构造函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 构造函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person1</span>(<span class=\"hljs-params\">name,age</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name=name;<br>    <span class=\"hljs-built_in\">this</span>.age=age;<br>&#125;<br>Person1.prototype.speak=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;speak&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2种定义形式\"><a href=\"#2种定义形式\" class=\"headerlink\" title=\"2种定义形式\"></a>2种定义形式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.声明形式</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br><br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 2.表达式形式</span><br><span class=\"hljs-keyword\">const</span> Person1=<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"立即执行的类\"><a href=\"#立即执行的类\" class=\"headerlink\" title=\"立即执行的类\"></a>立即执行的类</h3><p>类也可以像立即执行的匿名函数一样立即执行，但要记得在类前面加上关键字<code>new</code>，否则会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 立即执行的类</span><br><span class=\"hljs-keyword\">new</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hahah&quot;</span>);<br>    &#125;<br>&#125;)();<br><br><span class=\"hljs-comment\">// 立即执行函数</span><br><span class=\"hljs-comment\">// (function()&#123;</span><br><br><span class=\"hljs-comment\">// &#125;)();</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实例属性、静态方法、静态属性\"><a href=\"#实例属性、静态方法、静态属性\" class=\"headerlink\" title=\"实例属性、静态方法、静态属性\"></a>实例属性、静态方法、静态属性</h3><h4 id=\"1-实例属性\"><a href=\"#1-实例属性\" class=\"headerlink\" title=\"1.实例属性\"></a>1.实例属性</h4><p>实例属性一般可以用作默认值，它不能用<code>var</code>、<code>let</code>、<code>const</code>等关键字声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.实例属性</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-comment\">//constructor外 不能用关键字声明属性，也不能用this</span><br>    <span class=\"hljs-comment\">// 一般用作默认值</span><br>    name=<span class=\"hljs-string\">&quot;zhangsan&quot;</span><br>    age=<span class=\"hljs-number\">18</span>;<br>    <span class=\"hljs-comment\">// 实例方法 方法是值为函数的特殊属性</span><br>    getAge=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.age;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name=name;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> p=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;alex&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(p.name,p.age);<span class=\"hljs-comment\">// alex 18</span><br><span class=\"hljs-built_in\">console</span>.log(p.getAge()); <span class=\"hljs-comment\">//18</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-静态方法\"><a href=\"#2-静态方法\" class=\"headerlink\" title=\"2.静态方法\"></a>2.静态方法</h4><p>静态方法是类的方法，不需要实例化类就能够调用。用关键字static来声明静态方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name,sex</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name=name;<br>        <span class=\"hljs-built_in\">this</span>.sex=sex;<br>    &#125;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;haha...&#x27;</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <span class=\"hljs-comment\">//this指向Person类</span><br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;awsl&quot;</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <span class=\"hljs-comment\">//this指向实例对象</span><br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 调用类的方法 静态方法</span><br>Person.speak();  <span class=\"hljs-comment\">//haha...</span><br><span class=\"hljs-keyword\">const</span> xm=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;xm&quot;</span>,<span class=\"hljs-number\">12</span>);<br>xm.speak(); <span class=\"hljs-comment\">//awsl</span><br><br><span class=\"hljs-comment\">//也可以把类的方法写在</span><br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h1><h3 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>模块是一个一个的局部作用域的代码块。模块系统可以解决①模块化的问题②消除全局变量③管理加载顺序。</p>\n<h3 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h3><p>一个模块即使没有导出，也可以将其导入。要注意在<code>script</code>标签中 加上 <code>type=&quot;module&quot;</code>，导入后代码会执行一遍，多次导入也仅仅会执行一遍。</p>\n<blockquote>\n<p>exp1.html</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>  <span class=\"hljs-comment\">//18</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>module.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> age=<span class=\"hljs-number\">18</span>;<br><span class=\"hljs-built_in\">console</span>.log(age);<br></code></pre></td></tr></table></figure>\n\n<p>没有导出，直接导入就相当于写成:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">scr</span>=<span class=\"hljs-string\">&#x27;./module.js&#x27;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;module&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h3><p>一个模块只能有一个export default。</p>\n<blockquote>\n<p>exp2.html</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">//可以随便取名</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">import</span> age <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;moudle.js&#x27;</span>;</span><br><span class=\"javascript\"><span class=\"hljs-built_in\">console</span>.log(age); <span class=\"hljs-comment\">//18</span></span><br><span class=\"javascript\"></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>module.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> age=<span class=\"hljs-number\">18</span>;<br><span class=\"hljs-comment\">// 一个模块只能有一个export default</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> age;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h3><blockquote>\n<p>exp3.html</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// import age from &#x27;./module.js&#x27;; </span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 上面的是export default对应的import</span></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 法一：普通导入</span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 不能随意命名，需要和导出的名字一样</span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 因此无法导出匿名函数、类等</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">import</span> &#123;age,gender&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;</span><br><span class=\"javascript\">    </span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 法二：导入时起别名</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">import</span> &#123;func,userName <span class=\"hljs-keyword\">as</span> person&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;</span><br><span class=\"javascript\">    </span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 法三： 整体导入(会同时导入export和export default导出的)，obj为别名</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> obj <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;</span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">console</span>.log(age,gender,func,person);</span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">console</span>.log(obj);</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 法四：同时导入export和export default导出的参数</span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 注意export default导出的要写在前面</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">import</span> weight,&#123;height&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;</span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">console</span>.log(weight,height); <span class=\"hljs-comment\">//56 168</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>module.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 法一：export后面接声明或语句</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> age =<span class=\"hljs-number\">18</span>;<br><br><span class=\"hljs-comment\">// 法二： export后接 &#123;argument&#125;;</span><br><span class=\"hljs-keyword\">const</span> gender=<span class=\"hljs-string\">&quot;male&quot;</span>;<br><span class=\"hljs-keyword\">export</span> &#123;gender&#125;; <span class=\"hljs-comment\">//√</span><br><span class=\"hljs-comment\">// export gender; ×</span><br><br><span class=\"hljs-comment\">// 注意不能导出匿名函数或者类等</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Name</span></span>&#123;&#125;<br><br><br><span class=\"hljs-comment\">// 法三：导出为别名</span><br><span class=\"hljs-keyword\">export</span> &#123;fn <span class=\"hljs-keyword\">as</span> func,Name <span class=\"hljs-keyword\">as</span> userName&#125;;<br><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">56</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> height=<span class=\"hljs-number\">168</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>1.模块顶层的<code>this</code>指向</p>\n<p>顶层是值不在for块级、function函数作用域中，直接在模块中的作用域。</p>\n<p>在模块中，顶层的this是指向undefined的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span>!==<span class=\"hljs-string\">&#x27;undefined&#x27;</span>)&#123;<br>    <span class=\"hljs-comment\">// 如果this不为undefined，说明并不是用模块的方式来加载的</span><br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;没有以模块的形式导入&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2.import和import()</p>\n<p>import关键字具有提升效果，会提升到整个模块的头部、率先执行。也即import执行的时候，其他代码还没有开始执行。因此import和export命令只能在模块的顶层，<strong>不能放在在代码块中执行</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">// 会直接报错！！！</span><br><span class=\"hljs-keyword\">if</span> (PC)&#123;<br>    <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;pc.js&#x27;</span>;<br>&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(mobile)&#123;<br>    <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;mobile.js&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而import()可以按条件导入，且会返回promise对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span> (PC)&#123;<br>    <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;pc.js&#x27;</span>).then().catch();<br>&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(mobile)&#123;<br>    <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;mobile.js&#x27;</span>).then().catch();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3.先导入再导出的复合写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 把age从别的模块导入，再又导出，相当于一个中转站</span><br><span class=\"hljs-comment\">// export &#123;age&#125; from &#x27;./module.js&#x27;; </span><br><span class=\"hljs-comment\">// 复合写法导出的，无法在当前模块使用</span><br><span class=\"hljs-comment\">// 相当于下面的import和export语句，但是上面的复合写法age无法正常输出</span><br><span class=\"hljs-keyword\">import</span> &#123;age&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;<br><span class=\"hljs-built_in\">console</span>.log(age); <span class=\"hljs-comment\">// 可以正常输出</span><br><span class=\"hljs-keyword\">export</span> &#123;age&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;<br><span class=\"hljs-built_in\">console</span>.log(age); <span class=\"hljs-comment\">// 可以正常输出</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615232944.png\" alt=\"image-20210615232937033\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233124.png\" alt=\"image-20210615233123778\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233158.png\" alt=\"image-20210615233157075\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233229.png\" alt=\"image-20210615233228936\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233314.png\" alt=\"image-20210615233313046\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233404.png\" alt=\"image-20210615233403786\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233452.png\" alt=\"image-20210615233451256\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233558.png\" alt=\"image-20210615233557251\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233652.png\" alt=\"image-20210615233651225\"></p>\n<h1 id=\"node入门\"><a href=\"#node入门\" class=\"headerlink\" title=\"node入门\"></a>node入门</h1><p>笔记内容源自：<a href=\"https://youtu.be/TlB_eWDSMt4\">https://youtu.be/TlB_eWDSMt4</a></p>\n<p>在powershell中输入<code>code .</code>会用VS Code打开当前文件夹。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616170542.png\" alt=\"image-20210616170534238\"></p>\n<p> 首先进入到要执行js的文件夹，然后输入 node +要运行的程序名，即可运行js。</p>\n<p>在node中，没有window和document对象，但在node中有其他的对象可以操作文件、操作系统、网络等。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616171059.png\" alt=\"image-20210616171058446\"></p>\n<p>在浏览器中中运行JavaScript，可以通过window.setTimeout()来调用setTimeout全局函数。在node中，则可以通过global.setTimeout()来调用，变量和函数不会添加到global对象中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> message=<span class=\"hljs-string\">&#x27;&#x27;</span>; <br><span class=\"hljs-comment\">//在浏览器中变量message会被添加到window对象中</span><br><span class=\"hljs-comment\">//在node中变量message不会被添加到global对象中</span><br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">global</span>.message); <span class=\"hljs-comment\">//undefined</span><br></code></pre></td></tr></table></figure>\n\n<p>在node中任何文件都被视为模块(module)，在文件中定义的变量或函数的作用域限制在了该文件。如果需要使用这些私有变量或函数，需要明确地export它。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616172238.png\" alt=\"image-20210616172237280\"></p>\n<p>任何node应用程序都至少有一个main 模块(文件)，我们称之为main module。</p>\n<p>使用require()来加载模块，require函数的参数时是目标加载模块的路径。当导出不止一个参数时，require会返回一个从目标模块导出的对象。</p>\n<blockquote>\n<p>app.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./logger&#x27;</span>)<br><span class=\"hljs-comment\">//&#123; log: [Function: log], url: &#x27;http://mylogger.io/log&#x27; &#125;</span><br><span class=\"hljs-built_in\">console</span>.log(logger);<br><br><span class=\"hljs-comment\">//调用另外一个模块的函数</span><br>logger.log(<span class=\"hljs-string\">&quot;message&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>logger.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span>  url=<span class=\"hljs-string\">&#x27;http://mylogger.io/log&#x27;</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">message</span>)</span>&#123;<br>    <span class=\"hljs-comment\">// send an http request</span><br>    <span class=\"hljs-built_in\">console</span>.log(message);<br>&#125;<br><br><span class=\"hljs-comment\">//输出的名字可以自定义</span><br><span class=\"hljs-built_in\">module</span>.exports.log=log;<br><span class=\"hljs-built_in\">module</span>.exports.url=url;<br></code></pre></td></tr></table></figure>\n\n<p>最后，console.log(logger)会输出一个对象。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210617112306.png\" alt=\"image-20210617112257229\"></p>\n<p>如果只需要导出一个参数，导出时可以不自定义名字，这样require函数返回的不是导出模块的参数对象，而是返回的导出模块导出的变量名或常量名。</p>\n<blockquote>\n<p>app.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> log = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./logger&#x27;</span>)<br><br>log(<span class=\"hljs-string\">&quot;message&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>logger.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span>  url=<span class=\"hljs-string\">&#x27;http://mylogger.io/log&#x27;</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">message</span>)</span>&#123;<br>    <span class=\"hljs-comment\">// send an http request</span><br>    <span class=\"hljs-built_in\">console</span>.log(message);<br>&#125;<br><br><br><span class=\"hljs-built_in\">module</span>.exports=log;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h1><p>babel官网： <a href=\"https://babeljs.io/\">https://babeljs.io/</a>。</p>\n<p>主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p>\n<p>Babel本身可以编译ES6的大部分语法，比如let、 const、箭头函数、类。但是对于ES6新增的API，比如Set、Map、 Promise等全局对象都不能直接编译，需要借助其它的模块。Babel一般需要配合 Webpack来编译模块语法。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c3b181a491acea93cf6d8ef6a58c848d.png\" alt=\"image-20210618115716149\"></p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>要在项目目录文件下，在powershell中安装babel所需要的包。首先要<code>npm init</code>，初始化项目，回车后，会提示包名，注意包名不能是中文。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/833503aaf604e173ec462d091e6c9f2a.png\" alt=\"image-20210618120620517\"><br><img src=\"https://img-blog.csdnimg.cn/img_convert/18f61389a04283749f3fe5fec2fd72fc.png\" alt=\"image-20210618120938972\"></p>\n<p>一系列回车后，项目中会多了一个package.json的文件，执行<code>npm init</code>就是为了得到这个json文件。这个json文件会记录安装的其他的包。</p>\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210618121541.png\" alt=\"image-20210618121540287\" style=\"zoom:33%;\" />\n\n<h2 id=\"安装babel\"><a href=\"#安装babel\" class=\"headerlink\" title=\"安装babel\"></a>安装babel</h2><p>安装babel的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev @babel/core @babel/cli @babel/preset-env<br></code></pre></td></tr></table></figure>\n\n<p><code>--save-dev</code>：<code>save</code>表示要把它们的信息写入 package.json, <code>dev</code>表示是开发模式下。</p>\n<p><code> @babel/core @babel/cli @babel/preset-env</code>表示三个一般都要安装的babel包。</p>\n<blockquote>\n<p>PS：只要有<code>package.json</code>，就可以直接在命名行中输入<code>npm install</code>安装所有的该json文件中提到的所有包。</p>\n</blockquote>\n<h2 id=\"配置babel\"><a href=\"#配置babel\" class=\"headerlink\" title=\"配置babel\"></a>配置babel</h2><p><img src=\"https://img-blog.csdnimg.cn/img_convert/f1c3c2ba0abdba32f6fbda1eda7926fe.png\" alt=\"image-20210618122619509\"><br>需要在根目录<code>package.json</code>文件中添加下面的代码。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-string\">&quot;scripts&quot;</span>: &#123;<br>  <span class=\"hljs-attr\">&quot;build&quot;</span>: <span class=\"hljs-string\">&quot;babel src -d dist&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/703d2d400cda8e83635ec81522c221bb.png\" alt=\"image-20210618123402148\"><br><code>babel src -d lib</code>是<code>babel src --out-dir dist</code>的缩写，也就是从src目录输出到lib目录。</p>\n<hr>\n<p>在项目的根目录中创建名为 <code>babel.config.json</code>的配置文件。</p>\n<p>如果想要转换<code>let</code> 、<code>const</code>，必须要在<code>target</code>中写<code>ie:10</code>，因为目前除了ie不支持几乎所有版本的浏览器都支持。不写的话就代表不把ie10作为目标浏览器，就不会转换<code>const</code>、<code>let</code>、<code>箭头函数</code>等这些几年前就出来的语法。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;presets&quot;</span>: [<br>    [<br>      <span class=\"hljs-string\">&quot;@babel/env&quot;</span>,<br>      &#123;<br>        <span class=\"hljs-attr\">&quot;targets&quot;</span>: &#123;<br>            <span class=\"hljs-attr\">&quot;ie&quot;</span>:<span class=\"hljs-string\">&quot;10&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;edge&quot;</span>: <span class=\"hljs-string\">&quot;17&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;firefox&quot;</span>: <span class=\"hljs-string\">&quot;60&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;chrome&quot;</span>: <span class=\"hljs-string\">&quot;67&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;safari&quot;</span>: <span class=\"hljs-string\">&quot;11.1&quot;</span><br>        &#125;,<br>        <span class=\"hljs-attr\">&quot;useBuiltIns&quot;</span>: <span class=\"hljs-string\">&quot;usage&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;corejs&quot;</span>: <span class=\"hljs-string\">&quot;3.6.5&quot;</span><br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当然，如果缺省<code>target</code>，直接写如下代码，默认会转换为ES5。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;presets&quot;</span>: [<span class=\"hljs-string\">&quot;@babel/env&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm run build<br></code></pre></td></tr></table></figure>\n\n<p>build就是<code>package.json</code>script中自定义的名字，通过npm run build开始执行。可以在项目中看到多了名为lib的文件夹，里面有babel编译后的js文件。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a52e2d447d3daf8b9d66240b53e3bdad.png\" alt=\"image-20210618124246687\"></p>\n<p><strong>最后，我走了很多很多弯路，因为我tm没有看官方文档</strong>。要是我看看文档，我也就知道了<code>const</code>、<code>let</code>为什么没有转换。因为要定义target，要把ie也作为目标浏览器。</p>\n<p><a href=\"https://babel.docschina.org/docs/en/usage/\">中文官方文档</a>拜托我自己多看官方文档，再到处提问。</p>\n<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><p><a href=\"https://www.webpackjs.com/\">webpack中文官网</a></p>\n<p>webpack是静态模块打包器，当使用webpack处理应用程序时，会将这些模块打包成一个或多个文件。</p>\n<p>它可以处理js/css/图片/字体/图标等文件，用于处理静态(本地)文件。</p>\n<p>模块化是一种将系统分离成独立功能部分的方法，严格定义模块接口、模块间具有透明性。</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"入口-entry\"><a href=\"#入口-entry\" class=\"headerlink\" title=\"入口(entry)\"></a>入口(entry)</h3><p><strong>入口起点(entry point)</strong> 指示 webpack 应该使用哪个模块，来作为构建其内部 <a href=\"https://webpack.docschina.org/concepts/dependency-graph/\">依赖图(dependency graph)</a> 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p>\n<p>默认值是 <code>./src/index.js</code>，但你可以通过在 <a href=\"https://webpack.docschina.org/configuration\">webpack configuration</a> 中配置 <code>entry</code> 属性，来指定一个（或多个）不同的入口起点。例如：</p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;./path/to/my/entry/file.js&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"多个入口\"><a href=\"#多个入口\" class=\"headerlink\" title=\"多个入口\"></a>多个入口</h4><p>用法：<code>entry: &#123; &lt;entryChunkName&gt; string | [string] &#125; | &#123;&#125;</code></p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: &#123;<br>    <span class=\"hljs-attr\">app</span>: <span class=\"hljs-string\">&#x27;./src/app.js&#x27;</span>,<br>    <span class=\"hljs-attr\">adminApp</span>: <span class=\"hljs-string\">&#x27;./src/adminApp.js&#x27;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"描述入口的对象\"><a href=\"#描述入口的对象\" class=\"headerlink\" title=\"描述入口的对象\"></a>描述入口的对象</h4><p>用于描述入口的对象。你可以使用如下属性：</p>\n<ul>\n<li><code>dependOn</code>: 当前入口所依赖的入口。它们必须在该入口被加载前被加载。</li>\n<li><code>filename</code>: 指定要输出的文件名称。</li>\n<li><code>import</code>: 启动时需加载的模块。</li>\n<li><code>library</code>: 指定 library 选项，为当前 entry 构建一个 library。</li>\n<li><code>runtime</code>: 运行时 chunk 的名字。如果设置了，就会创建一个以这个名字命名的运行时 chunk，否则将使用现有的入口作为运行时。</li>\n<li><code>publicPath</code>: 当该入口的输出文件在浏览器中被引用时，为它们指定一个公共 URL 地址。请查看 <a href=\"https://webpack.docschina.org/configuration/output/#outputpublicpath\">output.publicPath</a>。</li>\n</ul>\n<p><code>runtime</code> 和 <code>dependOn</code> 不应在同一个入口上同时使用，所以如下配置无效，并且会抛出错误：</p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: &#123;<br>    <span class=\"hljs-attr\">a2</span>: <span class=\"hljs-string\">&#x27;./a&#x27;</span>,<br>    <span class=\"hljs-attr\">b2</span>: &#123;<br>      <span class=\"hljs-attr\">runtime</span>: <span class=\"hljs-string\">&#x27;x2&#x27;</span>,<br>      <span class=\"hljs-attr\">dependOn</span>: <span class=\"hljs-string\">&#x27;a2&#x27;</span>,<br>      <span class=\"hljs-attr\">import</span>: <span class=\"hljs-string\">&#x27;./b&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>确保 <code>runtime</code> 不能指向已存在的入口名称，例如下面配置会抛出一个错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: &#123;<br>    <span class=\"hljs-attr\">a1</span>: <span class=\"hljs-string\">&#x27;./a&#x27;</span>,<br>    <span class=\"hljs-attr\">b1</span>: &#123;<br>      <span class=\"hljs-attr\">runtime</span>: <span class=\"hljs-string\">&#x27;a1&#x27;</span>,<br>      <span class=\"hljs-attr\">import</span>: <span class=\"hljs-string\">&#x27;./b&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>另外 <code>dependOn</code> 不能是循环引用的，下面的例子也会出现错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: &#123;<br>    <span class=\"hljs-attr\">a3</span>: &#123;<br>      <span class=\"hljs-attr\">import</span>: <span class=\"hljs-string\">&#x27;./a&#x27;</span>,<br>      <span class=\"hljs-attr\">dependOn</span>: <span class=\"hljs-string\">&#x27;b3&#x27;</span>,<br>    &#125;,<br>    <span class=\"hljs-attr\">b3</span>: &#123;<br>      <span class=\"hljs-attr\">import</span>: <span class=\"hljs-string\">&#x27;./b&#x27;</span>,<br>      <span class=\"hljs-attr\">dependOn</span>: <span class=\"hljs-string\">&#x27;a3&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"输出-output\"><a href=\"#输出-output\" class=\"headerlink\" title=\"输出(output)\"></a>输出(output)</h3><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 <em>bundle</em>，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在 <code>./dist</code> 文件夹中。</p>\n<p>注意，即使可以存在多个 <code>entry</code> 起点，但只能指定一个 <code>output</code> 配置。</p>\n<p>你可以通过在配置中指定一个 <code>output</code> 字段，来配置这些处理过程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;./path/to/my/entry/file.js&#x27;</span>,<br>  <span class=\"hljs-attr\">output</span>: &#123;<br>    <span class=\"hljs-comment\">// path:绝对路径</span><br>    <span class=\"hljs-attr\">path</span>: path.resolve(__dirname, <span class=\"hljs-string\">&#x27;dist&#x27;</span>),<br>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;my-first-webpack.bundle.js&#x27;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>在上面的示例中，我们通过 <code>output.filename</code> 和 <code>output.path</code> 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成(emit)到哪里。在代码最上面导入的 path 模块是什么，它是一个 <a href=\"https://nodejs.org/api/modules.html\">Node.js 核心模块</a>，用于操作文件路径。</p>\n<p>如果有多个入口文件，出口文件需要改名，否则就会覆盖。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-built_in\">module</span>.exports=&#123;<br>    <span class=\"hljs-attr\">entry</span>:&#123;<br>        <span class=\"hljs-string\">&quot;main&quot;</span>:<span class=\"hljs-string\">&#x27;./src/index.js&#x27;</span>,<br>        <span class=\"hljs-string\">&quot;app&quot;</span>:<span class=\"hljs-string\">&#x27;./src/module.js&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-comment\">// [name]表示入口的名字</span><br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].bundle.js&#x27;</span>,<br>        <span class=\"hljs-attr\">path</span>:path.resolve(__dirname,<span class=\"hljs-string\">&#x27;dist&#x27;</span>),  <br>        <span class=\"hljs-comment\">// 清除没有用到的文件</span><br>        <span class=\"hljs-attr\">clean</span>:<span class=\"hljs-literal\">true</span><br>        <br>    &#125;,<br>    <span class=\"hljs-attr\">mode</span>:<span class=\"hljs-string\">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a><a href=\"https://www.webpackjs.com/loaders/babel-loader/\">loader</a></h3><p>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。<strong>loader</strong> 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 <a href=\"https://webpack.docschina.org/concepts/modules\">模块</a>，以供应用程序使用，以及被添加到依赖图中。</p>\n<blockquote>\n<h5 id=\"Warning\"><a href=\"#Warning\" class=\"headerlink\" title=\"Warning\"></a>Warning</h5><p>注意，loader 能够 <code>import</code> 导入任何类型的模块（例如 <code>.css</code> 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是很有必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p>\n</blockquote>\n<p>在更高层面，在 webpack 的配置中，<strong>loader</strong> 有两个属性：</p>\n<ol>\n<li><code>test</code> 属性，识别出哪些文件会被转换。</li>\n<li><code>use</code> 属性，定义出在进行转换时，应该使用哪个 loader。</li>\n</ol>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">output</span>: &#123;<br>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;my-first-webpack.bundle.js&#x27;</span>,<br>  &#125;,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [&#123; <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.txt$/</span>, use: <span class=\"hljs-string\">&#x27;raw-loader&#x27;</span> &#125;],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>以上配置中，对一个单独的 module 对象定义了 <code>rules</code> 属性，里面包含两个必须属性：<code>test</code> 和 <code>use</code>。这告诉 webpack 编译器(compiler) 如下信息：</p>\n<blockquote>\n<p>“嘿，webpack 编译器，当你碰到「在 <code>require()</code>/<code>import</code> 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先 <strong>use(使用)</strong> <code>raw-loader</code> 转换一下。”</p>\n</blockquote>\n<blockquote>\n<h5 id=\"Warning-1\"><a href=\"#Warning-1\" class=\"headerlink\" title=\"Warning\"></a>Warning</h5><p>重要的是要记住，在 webpack 配置中定义 rules 时，要定义在 <code>module.rules</code> 而不是 <code>rules</code> 中。为了使你便于理解，如果没有按照正确方式去做，webpack 会给出警告。</p>\n</blockquote>\n<h3 id=\"插件-plugin\"><a href=\"#插件-plugin\" class=\"headerlink\" title=\"插件(plugin)\"></a><a href=\"https://www.webpackjs.com/plugins/\">插件(plugin)</a></h3><p>loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p>\n<p>想要使用一个插件，你只需要 <code>require()</code> 它，然后把它添加到 <code>plugins</code> 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 <code>new</code> 操作符来创建一个插件实例。</p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;html-webpack-plugin&#x27;</span>); <span class=\"hljs-comment\">// 通过 npm 安装</span><br><span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;webpack&#x27;</span>); <span class=\"hljs-comment\">// 用于访问内置插件</span><br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [&#123; <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.txt$/</span>, use: <span class=\"hljs-string\">&#x27;raw-loader&#x27;</span> &#125;],<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;./src/index.html&#x27;</span> &#125;)],<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>在上面的示例中，<code>html-webpack-plugin</code> 为应用程序生成一个 HTML 文件，并自动注入所有生成的 bundle。</p>\n<h3 id=\"模式-mode\"><a href=\"#模式-mode\" class=\"headerlink\" title=\"模式(mode)\"></a>模式(mode)</h3><p>通过选择 <code>development</code>, <code>production</code> 或 <code>none</code> 之中的一个，来设置 <code>mode</code> 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 <code>production</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;production&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"浏览器兼容性-browser-compatibility\"><a href=\"#浏览器兼容性-browser-compatibility\" class=\"headerlink\" title=\"浏览器兼容性(browser compatibility)\"></a>浏览器兼容性(browser compatibility)</h3><p>webpack 支持所有符合 <a href=\"https://kangax.github.io/compat-table/es5/\">ES5 标准</a> 的浏览器（不支持 IE8 及以下版本）。webpack 的 <code>import()</code> 和 <code>require.ensure()</code> 需要 <code>Promise</code>。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 <a href=\"https://webpack.docschina.org/guides/shimming/\">提前加载 polyfill</a>。</p>\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p><a href=\"https://webpack.docschina.org/guides%EF%BC%8C%E7%94%A8%E8%BF%99%E4%B8%AA%E5%85%A5%E9%97%A8%E9%9D%9E%E5%B8%B8%E6%A3%92%EF%BC%8C%E8%AE%B2%E8%A7%A3%E9%9D%9E%E5%B8%B8%E8%AF%A6%E7%BB%86%EF%BC%8C%E5%86%85%E5%AE%B9%E4%B9%9F%E8%B6%85%E7%BA%A7%E4%B8%B0%E5%AF%8C%EF%BC%8C%E5%8F%AA%E7%BB%83%E4%B8%80%E9%81%8D%E6%98%AF%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E3%80%82\">https://webpack.docschina.org/guides，用这个入门非常棒，讲解非常详细，内容也超级丰富，只练一遍是记不住的。</a></p>\n<h3 id=\"极简教程\"><a href=\"#极简教程\" class=\"headerlink\" title=\"极简教程\"></a>极简教程</h3><p>1.首先要先在项目中初始化，<code>npm init -y</code>，会生成一个package.json文件，-y表示全部默认，省去回车过程。</p>\n<p>2.在powershell中输入<code>npm install --save-dev webpack webpack-cli</code>来安装webpack。</p>\n<p>3.项目根目录下创建一个名为<code>webpack.config.js</code>的配置文件，在这个配置文件中用module.exports来导出配置。</p>\n<p>下面的代码的意思为入口为’./src/indec.js’，出口为’dist’文件夹，文件名为’bundle.js’。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-built_in\">module</span>.exports=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index.js&#x27;</span>,<br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">path</span>:path.resolve(__dirname,<span class=\"hljs-string\">&#x27;dist&#x27;</span>),<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&quot;bundle.js&quot;</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>4.在<code>package.json</code>文件中的scrpits下添加如下代码：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-string\">&quot;scripts&quot;</span>: &#123;<br>  <span class=\"hljs-attr\">&quot;build&quot;</span>:<span class=\"hljs-string\">&quot;webpack&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>5.在终端中输入<code>npm run build</code>，webpack即会开始编译，可以在dist目录下看到编译结果。</p>\n<p>如果在webpack配置文件中(默认为webpack.config.js)中将模式改为<strong>development</strong>(默认为production)，编译后的文件会看起来更加清晰。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path=require(&#x27;path&#x27;);<br><br>module.exports=&#123;<br>    entry:&#x27;./src/index.js&#x27;,<br>    output:&#123;<br>        path:path.resolve(__dirname,&#x27;dist&#x27;),<br>        filename:&quot;bundle.js&quot;<br>    &#125;,<br> +  mode:&#x27;development&#x27;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"插件plugins\"><a href=\"#插件plugins\" class=\"headerlink\" title=\"插件plugins\"></a><a href=\"https://www.webpackjs.com/plugins/\">插件plugins</a></h2><p>loader被用于帮助webpack处理各种模块，而插件则可用于执行范围更广的任务。</p>\n<h3 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a><a href=\"https://www.webpackjs.com/plugins/html-webpack-plugin/\">HtmlWebpackPlugin</a></h3><p>如果我们更改了一个入口起点的名称，甚至添加了一个新的入口，会发生什么？会在构建时重新命名生成的 bundle，但是我们的 <code>index.html</code> 文件的<code>script</code>标签仍然引用旧的名称。让我们用 <a href=\"https://webpack.docschina.org/plugins/html-webpack-plugin\"><code>HtmlWebpackPlugin</code></a> 来解决这个问题。</p>\n<p>有了这个插件，就不用在<code>npm run build</code>改变了js的名字后手动去改变html中<code>script</code>标签引入的js路径。</p>\n<h4 id=\"单入口配置\"><a href=\"#单入口配置\" class=\"headerlink\" title=\"单入口配置\"></a>单入口配置</h4><p>首先安装插件，并且调整 <code>webpack.config.js</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev html-webpack-plugin<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br><span class=\"hljs-addition\">+ const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><br> module.exports = &#123;<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>   &#125;,<br><span class=\"hljs-addition\">+  plugins: [</span><br><span class=\"hljs-addition\">+    new HtmlWebpackPlugin(&#123;</span><br><span class=\"hljs-addition\">+      //指定一个html文件作为模板</span><br><span class=\"hljs-addition\">+      template:&quot;./index.html&quot;</span><br><span class=\"hljs-addition\">+    &#125;),</span><br><span class=\"hljs-addition\">+  ],</span><br>   output: &#123;<br>     filename: &#x27;[name].bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br>   mode:&#x27;development&#x27;<br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<p>虽然在 <code>dist/</code> 文件夹我们已经有了 <code>index.html</code> 这个文件，然而 <code>HtmlWebpackPlugin</code> 还是会默认生成它自己的 <code>index.html</code> 文件。也就是说，它会用新生成的 <code>index.html</code> 文件，替换我们的原有文件。</p>\n<h4 id=\"多html配置\"><a href=\"#多html配置\" class=\"headerlink\" title=\"多html配置\"></a>多html配置</h4><p>配置含有2个html和2个js的项目。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path=require(&#x27;path&#x27;);<br>const HtmlWebpackPlugin=require(&#x27;html-webpack-plugin&#x27;);<br><br>module.exports=&#123;<br>    mode:&#x27;development&#x27;,<br>    // 多入口<br><span class=\"hljs-addition\">+    entry:&#123;</span><br><span class=\"hljs-addition\">+        index:&#x27;./src/index.js&#x27;,</span><br><span class=\"hljs-addition\">+        search:&#x27;./src/search.js&#x27;</span><br><span class=\"hljs-addition\">+    &#125;,</span><br>    output:&#123;<br>        filename:&#x27;[name].js&#x27;,<br>        path:path.resolve(__dirname,&quot;dist&quot;),<br>    &#125;,<br>    // 多入口 有几个入口就实例化几次<br><span class=\"hljs-addition\">+    plugins:[</span><br><span class=\"hljs-addition\">+        new HtmlWebpackPlugin(&#123;</span><br><span class=\"hljs-addition\">+            //指定一个html文件作为模板</span><br><span class=\"hljs-addition\">+           template:&quot;./index.html&quot;,</span><br><span class=\"hljs-addition\">+            //多个html必须要命名，否则默认为index.html</span><br><span class=\"hljs-addition\">+            //同名文件，后生成的文件会覆盖前面的</span><br><span class=\"hljs-addition\">+            filename:&#x27;index.html&#x27;,</span><br><span class=\"hljs-addition\">+            //指定要引入的js文件，否则会引入所有的js文件</span><br><span class=\"hljs-addition\">+            chunks:[&#x27;index&#x27;] //写entry中的名字</span><br><span class=\"hljs-addition\">+        &#125;),</span><br><span class=\"hljs-addition\">+        new HtmlWebpackPlugin(&#123;</span><br><span class=\"hljs-addition\">+            template:&quot;./search.html&quot;,</span><br><span class=\"hljs-addition\">+            filename:&#x27;./search.html&#x27;,</span><br><span class=\"hljs-addition\">+            // 同时引入index和search两个文件</span><br><span class=\"hljs-addition\">+            chunks:[&#x27;index&#x27;,&#x27;search&#x27;],</span><br><span class=\"hljs-addition\">+        &#125;)</span><br><span class=\"hljs-addition\">+    ]</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"其他功能\"><a href=\"#其他功能\" class=\"headerlink\" title=\"其他功能\"></a>其他功能</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br>const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br><br> module.exports = &#123;<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>   &#125;,<br>  plugins: [<br>   new HtmlWebpackPlugin(&#123;<br>     //指定一个html文件作为模板<br>     template:&quot;./index.html&quot;,<br><span class=\"hljs-addition\">+     minify:&#123;</span><br><span class=\"hljs-addition\">+         //删除index.html中的注释</span><br><span class=\"hljs-addition\">+         removeComments:true,</span><br><span class=\"hljs-addition\">+         // 删除index.html中的空格</span><br><span class=\"hljs-addition\">+         collapseWhitespace:true,</span><br><span class=\"hljs-addition\">+         //删除html标签属性值的双引号</span><br><span class=\"hljs-addition\">+         removeAttributeQuotes:true</span><br><span class=\"hljs-addition\">+     &#125;</span><br>    &#125;),<br>  ],<br>   output: &#123;<br>     filename: &#x27;[name].js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br>   mode:&#x27;development&#x27;<br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"loader-1\"><a href=\"#loader-1\" class=\"headerlink\" title=\"loader\"></a><a href=\"https://www.webpackjs.com/loaders/babel-loader/\">loader</a></h2><p>loader可以用webpack能够处理非JS文件(css、图片、字体等)的模块。</p>\n<h3 id=\"使用loader\"><a href=\"#使用loader\" class=\"headerlink\" title=\"使用loader\"></a>使用loader</h3><p>在你的应用程序中，有两种使用 loader 的方式：</p>\n<ul>\n<li><a href=\"https://webpack.docschina.org/concepts/loaders/#configuration\">配置方式</a>（推荐）：在 <strong>webpack.config.js</strong> 文件中指定 loader。</li>\n<li><a href=\"https://webpack.docschina.org/concepts/loaders/#inline\">内联方式</a>：在每个 <code>import</code> 语句中显式指定 loader。</li>\n</ul>\n<h4 id=\"配置方式\"><a href=\"#配置方式\" class=\"headerlink\" title=\"配置方式\"></a>配置方式</h4><p><a href=\"https://webpack.docschina.org/configuration/module/#modulerules\"><code>module.rules</code></a> 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：</p>\n<p>loader <strong>从右到左（或从下到上）</strong>地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 <a href=\"https://webpack.docschina.org/concepts/loaders/#loader-features\">loader 功能</a> 章节，了解有关 loader 顺序的更多信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>        use: [<br>          <span class=\"hljs-comment\">// [style-loader](/loaders/style-loader)</span><br>          &#123; <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;style-loader&#x27;</span> &#125;,<br>          <span class=\"hljs-comment\">// [css-loader](/loaders/css-loader)</span><br>          &#123;<br>            <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>,<br>            <span class=\"hljs-attr\">options</span>: &#123;<br>              <span class=\"hljs-attr\">modules</span>: <span class=\"hljs-literal\">true</span><br>            &#125;<br>          &#125;,<br>          <span class=\"hljs-comment\">// [sass-loader](/loaders/sass-loader)</span><br>          &#123; <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;sass-loader&#x27;</span> &#125;<br>        ]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"内联方式-不推荐\"><a href=\"#内联方式-不推荐\" class=\"headerlink\" title=\"内联方式(不推荐)\"></a>内联方式(不推荐)</h4><p>可以在 <code>import</code> 语句或任何 <a href=\"https://webpack.docschina.org/api/module-methods\">与 “import” 方法同等的引用方式</a> 中指定 loader。使用 <code>!</code> 将资源中的 loader 分开。每个部分都会相对于当前目录解析。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;style-loader!css-loader?modules!./styles.css&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"已废用file-loader\"><a href=\"#已废用file-loader\" class=\"headerlink\" title=\"已废用file-loader\"></a>已废用file-loader</h3><p><strong>v5 版本已废弃</strong>file-loader: 请向 <a href=\"https://webpack.docschina.org/guides/asset-modules/\"><code>asset modules</code></a> 迁移。资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。</p>\n<p>在 webpack 5 之前，通常使用：</p>\n<ul>\n<li><a href=\"https://webpack.docschina.org/loaders/raw-loader/\"><code>raw-loader</code></a> 将文件导入为字符串</li>\n<li><a href=\"https://webpack.docschina.org/loaders/url-loader/\"><code>url-loader</code></a> 将文件作为 data URI 内联到 bundle 中</li>\n<li><a href=\"https://webpack.docschina.org/loaders/file-loader/\"><code>file-loader</code></a> 将文件发送到输出目录</li>\n</ul>\n<p>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p>\n<ul>\n<li><code>asset/resource</code> 发送一个单独的文件并导出 URL。之前通过使用 <code>file-loader</code> 实现。</li>\n<li><code>asset/inline</code> 导出一个资源的 data URI。之前通过使用 <code>url-loader</code> 实现。</li>\n<li><code>asset/source</code> 导出资源的源代码。之前通过使用 <code>raw-loader</code> 实现。</li>\n<li><code>asset</code> 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li>\n</ul>\n<h3 id=\"babel-loader\"><a href=\"#babel-loader\" class=\"headerlink\" title=\"babel-loader\"></a>babel-loader</h3><p>先要安装babel，毕竟活是babel干的，webpack只是打包的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev @babel/core @babel/cli @babel/preset-env<br></code></pre></td></tr></table></figure>\n\n<p>接着安装babel-loader这个插件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev babel-loader<br></code></pre></td></tr></table></figure>\n\n<p>接下来，配置babel，在根目录下创建<code>babel.config.json</code>的文件，并写下如下代码。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><br>&#123;<br>  <span class=\"hljs-attr\">&quot;presets&quot;</span>: [<span class=\"hljs-string\">&quot;@babel/env&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>下一步，便是在<code>webpack.config.js</code>文件中配置loader。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br>module.exports = &#123;<br>    entry: &#123;<br>        &quot;index&quot;: &#x27;./src/module.js&#x27;<br>    &#125;,<br>    output: &#123;<br>        filename: &#x27;[name].bundle.js&#x27;,<br>        path: path.resolve(__dirname, &#x27;dist&#x27;),<br>    &#125;,<br><span class=\"hljs-addition\">+    module: &#123;</span><br><span class=\"hljs-addition\">+       rules: [</span><br><span class=\"hljs-addition\">+            &#123;</span><br><span class=\"hljs-addition\">+                test: /\\.js$/,</span><br><span class=\"hljs-addition\">+                // 排除node_modules里面的js文件</span><br><span class=\"hljs-addition\">+                exclude: /node_modules/,</span><br><span class=\"hljs-addition\">+                use: &quot;babel-loader&quot;</span><br><span class=\"hljs-addition\">+            &#125;,</span><br><span class=\"hljs-addition\">+        ],</span><br><span class=\"hljs-addition\">+    &#125;,</span><br>    mode: &#x27;development&#x27;,<br>   <br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>如果想要转换promise这些，需要安装babel的<a href=\"https://babeljs.io/docs/en/babel-polyfill\">垫片插件</a>。</p>\n<p>第一步要先安装<code>core-js</code>。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620124723.png\" alt=\"image-20210620124715403\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev core-js<br></code></pre></td></tr></table></figure>\n\n<p>接着在源文件夹下(src)的js代码中引入该模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;core-js/stable&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>值得注意的是安装babel-loader和core-js的版本，尝试了很多次发现，他们需要低版本。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-string\">&quot;devDependencies&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;@babel/core&quot;</span>: <span class=\"hljs-string\">&quot;^7.11.0&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;@babel/preset-env&quot;</span>: <span class=\"hljs-string\">&quot;^7.11.0&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;babel-loader&quot;</span>: <span class=\"hljs-string\">&quot;^8.1.0&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;core-js&quot;</span>: <span class=\"hljs-string\">&quot;^3.6.5&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;webpack&quot;</span>: <span class=\"hljs-string\">&quot;^4.44.1&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;webpack-cli&quot;</span>: <span class=\"hljs-string\">&quot;^3.3.12&quot;</span><br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"综合应用\"><a href=\"#综合应用\" class=\"headerlink\" title=\"综合应用\"></a>综合应用</h2><h3 id=\"加载css\"><a href=\"#加载css\" class=\"headerlink\" title=\"加载css\"></a>加载css</h3><h4 id=\"style-loader-css-loader\"><a href=\"#style-loader-css-loader\" class=\"headerlink\" title=\"style-loader+css-loader\"></a>style-loader+css-loader</h4><p>首先要在src文件夹下的某个js文件中导入css文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./src/style.css&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>为了在 JavaScript 模块中 <code>import</code> 一个 CSS 文件，你需要安装 <a href=\"https://webpack.docschina.org/loaders/style-loader\">style-loader</a> 和 <a href=\"https://webpack.docschina.org/loaders/css-loader\">css-loader</a>，并在 <a href=\"https://webpack.docschina.org/configuration/module\"><code>module</code> 配置</a> 中添加这些 loader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev style-loader css-loader<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br><br> module.exports = &#123;<br>   entry: &#x27;./src/index.js&#x27;,<br>   output: &#123;<br>     filename: &#x27;bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br><span class=\"hljs-addition\">+  module: &#123;</span><br><span class=\"hljs-addition\">+    rules: [</span><br><span class=\"hljs-addition\">+      &#123;</span><br><span class=\"hljs-addition\">+        test: /\\.css$/i,</span><br><span class=\"hljs-addition\">+        use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;],</span><br><span class=\"hljs-addition\">+      &#125;,</span><br><span class=\"hljs-addition\">+    ],</span><br><span class=\"hljs-addition\">+  &#125;,</span><br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<p>模块 loader 可以链式调用。链中的每个 loader 都将对资源进行转换。链会逆序执行。第一个 loader 将其结果（被转换后的资源）传递给下一个 loader，依此类推。最后，webpack 期望链中的最后的 loader 返回 JavaScript。</p>\n<p>应保证 loader 的先后顺序：<a href=\"https://webpack.docschina.org/loaders/style-loader\"><code>&#39;style-loader&#39;</code></a> 在前，而 <a href=\"https://webpack.docschina.org/loaders/css-loader\"><code>&#39;css-loader&#39;</code></a> 在后。loader数组是从右到左执行，先通过’css-loader’识别css文件，再通过<code>style-loader</code>将css代码嵌入到style标签中。（在控制台可以看到）</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620190458.png\" alt=\"image-20210620190450697\"></p>\n<h4 id=\"插件-loader\"><a href=\"#插件-loader\" class=\"headerlink\" title=\"插件+loader\"></a>插件+loader</h4><p>和上面的<code>style-loader</code>在style标签中内联不同，插件<code>mini-css-extract-plugin</code>会让html文件通过<code>link</code>标签引入css文件</p>\n<p>首先要在src文件夹下的某个js文件中导入css文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./src/style.css&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>接着安装插件<code>mini-css-extract-plugin</code>和<code>css-loader</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev css-loader mini-css-extract-plugin<br></code></pre></td></tr></table></figure>\n\n<p>配置<code>webpack.config.js</code></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br><span class=\"hljs-addition\">+ const MiniCssExtractPlugin=require(&#x27;mini-css-extract-plugin&#x27;);</span><br><br> module.exports = &#123;<br>   entry: &#x27;./src/index.js&#x27;,<br>   output: &#123;<br>     filename: &#x27;bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br><span class=\"hljs-addition\">+  module: &#123;</span><br><span class=\"hljs-addition\">+    rules: [</span><br><span class=\"hljs-addition\">+      &#123;</span><br><span class=\"hljs-addition\">+        test: /\\.css$/i,</span><br><span class=\"hljs-addition\">+        //注意导入顺序</span><br><span class=\"hljs-addition\">+        use: [MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;],</span><br><span class=\"hljs-addition\">+      &#125;,</span><br><span class=\"hljs-addition\">+    ],</span><br><span class=\"hljs-addition\">+  &#125;,</span><br><span class=\"hljs-addition\">+\tplugins: [</span><br><span class=\"hljs-addition\">+        new MiniCssExtractPlugin(&#123;</span><br><span class=\"hljs-addition\">+            //指定生成的css的文件名</span><br><span class=\"hljs-addition\">+            filename:&#x27;[name].css&#x27;</span><br><span class=\"hljs-addition\">+        &#125;),</span><br><span class=\"hljs-addition\">+    ],</span><br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<p>最后，可以在dist文件夹下看到生成的css文件。</p>\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620194806.png\" alt=\"image-20210620194803569\" style=\"zoom:33%;\" />\n\n<p>而且在控制台可以看到样式是通过<code>link</code>标签引入的。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620194915.png\" alt=\"image-20210620194914627\"></p>\n<h3 id=\"加载图片\"><a href=\"#加载图片\" class=\"headerlink\" title=\"加载图片\"></a>加载图片</h3><p>如果是远程图片，则可以直接显示。而本地图片通过webpack打包，需要额外处理。</p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br><br> module.exports = &#123;<br>   entry: &#x27;./src/index.js&#x27;,<br>   output: &#123;<br>     filename: &#x27;bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br>   module: &#123;<br>     rules: [<br>       &#123;<br>         test: /\\.css$/i,<br>         use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;],<br>       &#125;,<br><span class=\"hljs-addition\">+      &#123;</span><br><span class=\"hljs-addition\">+        test: /\\.(png|svg|jpg|jpeg|gif)$/i,</span><br><span class=\"hljs-addition\">+        type: &#x27;asset/resource&#x27;,</span><br><span class=\"hljs-addition\">+      &#125;,</span><br>     ],<br>   &#125;,<br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<p>现在，在 <code>import MyImage from &#39;./my-image.png&#39;</code> 时，此图像将被处理并添加到 <code>output</code> 目录，<em>并且</em> <code>MyImage</code> 变量将包含该图像在处理后的最终 url。在使用 <a href=\"https://webpack.docschina.org/loaders/css-loader\">css-loader</a> 时，如前所示，会使用类似过程处理你的 CSS 中的 <code>url(&#39;./my-image.png&#39;)</code>。loader 会识别这是一个本地文件，并将 <code>&#39;./my-image.png&#39;</code> 路径，替换为 <code>output</code> 目录中图像的最终路径。而 <a href=\"https://webpack.docschina.org/loaders/html-loader\">html-loader</a> 以相同的方式处理 <code>&lt;img src=&quot;./my-image.png&quot; /&gt;</code>。</p>\n<h4 id=\"js中使用图片\"><a href=\"#js中使用图片\" class=\"headerlink\" title=\"js中使用图片\"></a>js中使用图片</h4><p>如果需要在js文件中使用图片，也可以用<code>asset module</code>这个loader，无需额外安装其他的loader。只需要在js中使用<code>import</code>引入图片即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 把图片当做模块引入</span><br><span class=\"hljs-keyword\">import</span> logo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./image/img.png&#x27;</span>;<br><br><span class=\"hljs-built_in\">console</span>.log(logo); <span class=\"hljs-comment\">// 会输出图片的路径</span><br><span class=\"hljs-keyword\">const</span> myLogo = <span class=\"hljs-keyword\">new</span> Image();<br>myLogo.src = logo;<br><span class=\"hljs-built_in\">document</span>.body.appendChild(myLogo)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"自定义文件名\"><a href=\"#自定义文件名\" class=\"headerlink\" title=\"自定义文件名\"></a>自定义文件名</h4><p>默认情况下，<code>asset/resource</code> 模块以 <code>[hash][ext][query]</code> 文件名发送到输出目录。</p>\n<p>可以通过在 webpack 配置中设置 <a href=\"https://webpack.docschina.org/configuration/output/#outputassetmodulefilename\"><code>output.assetModuleFilename</code></a> 来修改此模板字符串：</p>\n<blockquote>\n<p> <strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br><br>module.exports = &#123;<br>  entry: &#x27;./src/index.js&#x27;,<br>  output: &#123;<br>    filename: &#x27;main.js&#x27;,<br>    path: path.resolve(__dirname, &#x27;dist&#x27;),<br><span class=\"hljs-addition\">+   assetModuleFilename: &#x27;images/[hash][ext][query]&#x27;</span><br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        test: /\\.png/,<br>        type: &#x27;asset/resource&#x27;<br>      &#125;<br>    ]<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>如可以设置为<code>assetModuleFilename: &#39;images/[name][ext]&#39;</code>，此时的[name]指图片本身的名字，而是entry中的名字，[ext]是指”filename extension”，用它表示文件原来的后缀。</p>\n<p>另一种自定义输出文件名的方式是，将某些资源发送到指定目录：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br><br>module.exports = &#123;<br>  entry: &#x27;./src/index.js&#x27;,<br>  output: &#123;<br>    filename: &#x27;main.js&#x27;,<br>    path: path.resolve(__dirname, &#x27;dist&#x27;),<br><span class=\"hljs-addition\">+   assetModuleFilename: &#x27;images/[hash][ext][query]&#x27;</span><br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        test: /\\.png/,<br>        type: &#x27;asset/resource&#x27;<br><span class=\"hljs-deletion\">-     &#125;</span><br><span class=\"hljs-addition\">+     &#125;,</span><br><span class=\"hljs-addition\">+     &#123;</span><br><span class=\"hljs-addition\">+       test: /\\.html/,</span><br><span class=\"hljs-addition\">+       type: &#x27;asset/resource&#x27;,</span><br><span class=\"hljs-addition\">+       generator: &#123;</span><br><span class=\"hljs-addition\">+         filename: &#x27;static/[hash][ext][query]&#x27;</span><br><span class=\"hljs-addition\">+       &#125;</span><br><span class=\"hljs-addition\">+     &#125;</span><br>    ]<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>使用此配置，所有 <code>html</code> 文件都将被发送到输出目录中的 <code>static</code> 目录中。</p>\n<p><code>Rule.generator.filename</code> 与 <a href=\"https://webpack.docschina.org/configuration/output/#outputassetmodulefilename\"><code>output.assetModuleFilename</code></a> 相同，并且仅适用于 <code>asset</code> 和 <code>asset/resource</code> 模块类型。</p>\n<h4 id=\"添加公共路径\"><a href=\"#添加公共路径\" class=\"headerlink\" title=\"添加公共路径\"></a>添加公共路径</h4><p>当使用<code> MiniCssExtractPlugin</code>生成的css在dist下一个文件夹时(如<code>dist/css/style.css</code>)，此时如果不设置生成的css的公共路径(<code>publicPath</code>)，图片不会正常显示。</p>\n<p>因为<code>css-loader</code>以为生成的<code>style.css</code>文件直接在dist目录下，所以图片路径会默认设置为<code>url(./随机名字.png)</code>，而事实上图片的正确的路径为<code>url(../随机名字.png)</code>。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">  img-demo<br>  |- package.json<br>  |- webpack.config.js<br>  |- /dist<br>    |- index.js<br>    |- index.html<br><span class=\"hljs-addition\">+   |- 随机字符.png</span><br><span class=\"hljs-addition\">+   |- /css</span><br><span class=\"hljs-addition\">+    \t|- style.css</span><br>  |- /src<br>    |- icon.png<br>    |- style.css<br>    |- index.js<br>  |- /node_modules<br></code></pre></td></tr></table></figure>\n\n<p>因此，需要在<code>options</code>中设置<code>publicPath</code>为<code>../</code>，这样该css文件引入的所有url前面都会加上<code>../</code>的前缀。</p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br>const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br>const MiniCssExtractPlugin=require(&#x27;mini-css-extract-plugin&#x27;);<br><br>module.exports = &#123;<br>    entry: &#123;<br>        index: &#x27;./src/index.js&#x27;,<br>    &#125;,<br>    output: &#123;<br>        filename: &#x27;[name].js&#x27;,<br>        path: path.resolve(__dirname, &#x27;dist&#x27;),<br>    &#125;,<br>    module:&#123;<br>        rules:[<br>            &#123;<br>                test:/\\.css$/i,<br>                //此时生成的css在dist/css的文件夹下，要设置公共路径<br>                //这样该css文件所有的url前面都会加上../的前缀。<br><span class=\"hljs-addition\">+                use:[&#123;</span><br><span class=\"hljs-addition\">+                    loader:MiniCssExtractPlugin.loader,</span><br><span class=\"hljs-addition\">+                    options:&#123;</span><br><span class=\"hljs-addition\">+                        publicPath:&#x27;../&#x27;</span><br><span class=\"hljs-addition\">+                    &#125;</span><br><span class=\"hljs-addition\">+                &#125;, &#x27;css-loader&#x27;]&#125;,</span><br>            &#123;<br>                test:/\\.(png|svg|jepg|gif)/,<br>                type:&#x27;asset/resource&#x27;<br>            &#125;<br>        ]  <br>    &#125;,<br>    plugins: [<br>        new HtmlWebpackPlugin(&#123;<br>            //指定一个html文件作为模板<br>            template: &quot;./index.html&quot;<br>        &#125;),<br><span class=\"hljs-addition\">+        new MiniCssExtractPlugin(&#123;</span><br><span class=\"hljs-addition\">+            //在dist/css文件夹下创建一个index.css文件</span><br><span class=\"hljs-addition\">+            filename:&#x27;css/[name].css&#x27;</span><br><span class=\"hljs-addition\">+        &#125;)</span><br>    ],<br>    mode: &#x27;development&#x27;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"html中的图片\"><a href=\"#html中的图片\" class=\"headerlink\" title=\"html中的图片\"></a>html中的图片</h4><p>css中引入的图片可以用<code>type:asset/resource;</code> ，html中的图片则需要额外安装loader<code>html-withimg-loader</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev html-withimg-loader<br></code></pre></td></tr></table></figure>\n\n<p>此时，我只写出新增的代码，其他的如图片loader，html-webpack-plugin和mini-css-extract-plugin插件用法参考上面的代码。</p>\n<p><strong>注意</strong>:这个<code>html-withimg-loader</code>必须要配合处理图片的loader——<code>asset  module</code> 一起使用，因为真正能够加载图片的还是<code>asset module</code>，<code>html-withimg-loader</code>用来处理路径问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>:&#123;<br>    <span class=\"hljs-attr\">rules</span>:[<br>        &#123;<br>            <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.(html|htm)/i</span>,<br>            use:<span class=\"hljs-string\">&#x27;html-withimg-loader&#x27;</span><br>        &#125;<br>    ]  <br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"asset-inline\"><a href=\"#asset-inline\" class=\"headerlink\" title=\"asset/inline\"></a>asset/inline</h4><p>asset/inline输出的 data URI，默认是呈现为使用 Base64 算法编码的文件内容。</p>\n<p><strong>webpack.config.js</strong></p>\n<blockquote>\n<p>关于<a href=\"https://webpack.docschina.org/configuration/module/#ruleparserdataurlcondition\">rules.parser</a></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br><br>module.exports = &#123;<br>  entry: &#x27;./src/index.js&#x27;,<br>  output: &#123;<br>    filename: &#x27;main.js&#x27;,<br>    path: path.resolve(__dirname, &#x27;dist&#x27;),<br>  &#125;,<br>  module: &#123;<br>    rules: [<br><span class=\"hljs-addition\">+      &#123;</span><br><span class=\"hljs-addition\">+       test: /\\.svg/,</span><br><span class=\"hljs-addition\">+       type: &#x27;asset/inline&#x27;,</span><br><span class=\"hljs-addition\">+\t\tparser:&#123;</span><br><span class=\"hljs-addition\">+\t\t\tdataUrlCondition:</span><br><span class=\"hljs-addition\">+\t\t\t\tmaxSize:10000</span><br><span class=\"hljs-addition\">+      \t\t\t//表示10kb</span><br><span class=\"hljs-addition\">+       &#125;</span><br><span class=\"hljs-addition\">+     &#125;,</span><br><br>    ]<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>maxSize为10000，表示小于10kb将其转换为base64格式，大于则按照asset/resource来处理。一般只对较小的图片进行这种操作，因为转为base64格式后，图片会以base64格式来存在js中。</p>\n<h3 id=\"配置开发环境\"><a href=\"#配置开发环境\" class=\"headerlink\" title=\"配置开发环境\"></a>配置开发环境</h3><h4 id=\"使用source-map-追踪错误\"><a href=\"#使用source-map-追踪错误\" class=\"headerlink\" title=\"使用source map 追踪错误\"></a>使用source map 追踪错误</h4><p>当 webpack 打包源代码时，可能会很难追踪到 error(错误) 和 warning(警告) 在源代码中的原始位置。例如，如果将三个源文件（<code>a.js</code>, <code>b.js</code> 和 <code>c.js</code>）打包到一个 bundle（<code>bundle.js</code>）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 <code>bundle.js</code>。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。</p>\n<p>为了更容易地追踪 error 和 warning，JavaScript 提供了 <a href=\"http://blog.teamtreehouse.com/introduction-source-maps\">source maps</a> 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于 <code>b.js</code>，source map 就会明确的告诉你。</p>\n<p>source map 有许多 <a href=\"https://webpack.docschina.org/configuration/devtool\">可用选项</a>，请务必仔细阅读它们，以便可以根据需要进行配置。</p>\n<p>对于本指南，我们将使用 <code>inline-source-map</code> 选项，这有助于解释说明示例意图（此配置仅用于示例，不要用于生产环境）：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br> const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br><br> module.exports = &#123;<br>   mode: &#x27;development&#x27;,<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>     print: &#x27;./src/print.js&#x27;,<br>   &#125;,<br><span class=\"hljs-addition\">+  devtool: &#x27;inline-source-map&#x27;,</span><br>   plugins: [<br>     new HtmlWebpackPlugin(&#123;<br>       title: &#x27;Development&#x27;,<br>     &#125;),<br>   ],<br>   output: &#123;<br>     filename: &#x27;[name].bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>     clean: true,<br>   &#125;,<br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用-webpack-dev-server\"><a href=\"#使用-webpack-dev-server\" class=\"headerlink\" title=\"使用 webpack-dev-server\"></a>使用 webpack-dev-server</h3><p><code>webpack-dev-server</code> 为你提供了一个基本的 web server，并且具有 live reloading(实时重新加载) 功能。设置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev webpack-dev-server<br></code></pre></td></tr></table></figure>\n\n<p>修改配置文件，告知 dev server，从什么位置查找文件：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br> const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br><br> module.exports = &#123;<br>   mode: &#x27;development&#x27;,<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>     print: &#x27;./src/print.js&#x27;,<br>   &#125;,<br>   devtool: &#x27;inline-source-map&#x27;,<br><span class=\"hljs-addition\">+  devServer: &#123;</span><br><span class=\"hljs-addition\">+    contentBase: &#x27;./dist&#x27;,</span><br><span class=\"hljs-addition\">+  &#125;,</span><br>   plugins: [<br>     new HtmlWebpackPlugin(&#123;<br>       title: &#x27;Development&#x27;,<br>     &#125;),<br>   ],<br>   output: &#123;<br>     filename: &#x27;[name].bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>     clean: true,<br>   &#125;,<br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<p>以上配置告知 <code>webpack-dev-server</code>，将 <code>dist</code> 目录下的文件 serve 到 <code>localhost:8080</code> 下。（serve，将资源作为 server 的可访问文件）</p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> &#123;<br>   &quot;name&quot;: &quot;webpack-demo&quot;,<br>   &quot;version&quot;: &quot;1.0.0&quot;,<br>   &quot;description&quot;: &quot;&quot;,<br>   &quot;private&quot;: true,<br>   &quot;scripts&quot;: &#123;<br>     &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,<br>     &quot;watch&quot;: &quot;webpack --watch&quot;,<br><span class=\"hljs-addition\">+    &quot;start&quot;: &quot;webpack serve --open&quot;,</span><br>     &quot;build&quot;: &quot;webpack&quot;<br>   &#125;,<br>   &quot;keywords&quot;: [],<br>   &quot;author&quot;: &quot;&quot;,<br>   &quot;license&quot;: &quot;ISC&quot;,<br>   &quot;devDependencies&quot;: &#123;<br>     &quot;html-webpack-plugin&quot;: &quot;^4.5.0&quot;,<br>     &quot;webpack&quot;: &quot;^5.4.0&quot;,<br>     &quot;webpack-cli&quot;: &quot;^4.2.0&quot;,<br>     &quot;webpack-dev-server&quot;: &quot;^3.11.0&quot;<br>   &#125;,<br>   &quot;dependencies&quot;: &#123;<br>     &quot;lodash&quot;: &quot;^4.17.20&quot;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>现在，在命令行中运行 <code>npm start</code>，我们会看到浏览器自动加载页面。如果你更改任何源文件并保存它们，web server 将在编译代码后自动重新加载。试试看！</p>\n<p><code>webpack-dev-server</code> 具有许多可配置的选项。关于其他更多配置，请查看 <a href=\"https://webpack.docschina.org/configuration/dev-server\">配置文档</a>。</p>\n<blockquote>\n<h6 id=\"Warning-2\"><a href=\"#Warning-2\" class=\"headerlink\" title=\"Warning\"></a>Warning</h6><p>webpack-dev-server 在编译之后不会写入到任何输出文件。而是将 bundle 文件保留在内存中，然后将它们 serve 到 server 中，就好像它们是挂载在 server 根路径上的真实文件一样。如果你的页面希望在其他不同路径中找到 bundle 文件，则可以通过 dev server 配置中的 <a href=\"https://webpack.docschina.org/configuration/dev-server/#devserverpublicpath-\"><code>publicPath</code></a> 选项进行修改。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ES6简介\"><a href=\"#ES6简介\" class=\"headerlink\" title=\"ES6简介\"></a>ES6简介</h1><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104138.png\" alt=\"image-20210530104137712\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104352.png\" alt=\"image-20210530104351721\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530104440.png\" alt=\"image-20210530104439339\"></p>\n<h1 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h1><p>const就是为了那些一旦初始化就不希望重新赋值的情况设计的。使用 const声明常量，一旦声明，就必须立即初始化。</p>\n<p>const声明的常量，允许在<strong>不重新赋值</strong>的情况下修改它的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person=&#123;<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span>&#125;;<br>person[gender]=<span class=\"hljs-string\">&quot;female&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"let、const、var的区别\"><a href=\"#let、const、var的区别\" class=\"headerlink\" title=\"let、const、var的区别\"></a>let、const、var的区别</h1><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530131646.png\" alt=\"image-20210530131645190\"></p>\n<p>1.重复声明：已经存在的变量，又声明了一次。</p>\n<p>var允许重复声明，let、 const不允许重复声明</p>\n<p>2.变量提升</p>\n<p>var 会提升变量的声明到当前作用域顶部，但是赋值不会提升；let和const不会变量提升。</p>\n<p>3.暂时性死区</p>\n<p>只要作用域内存在 let、const，它们所声明的变量或常量就自动“绑定”这个区域，不再受到外部作用域的影响。</p>\n<p>let、const存在暂时性死区，var不存在。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> c=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">let</span> d=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;d&quot;</span>,d);<span class=\"hljs-comment\">//d</span><br>    <span class=\"hljs-comment\">//console.log(&quot;c&quot;,c);//  Cannot access &#x27;c&#x27; before initialization</span><br>    <span class=\"hljs-keyword\">let</span> c=<span class=\"hljs-number\">1</span>;<br>&#125;<br>func(c);<br></code></pre></td></tr></table></figure>\n\n<p>4.window 对象的属性和方法</p>\n<p>在全局作用域中，var声明的变量，通过function声明的函数会自动变为window对象的属性和方法；let、const不会。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> age=<span class=\"hljs-number\">18</span>;<br><span class=\"hljs-keyword\">var</span> add=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>.add) <span class=\"hljs-comment\">//18</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>.add===add);<span class=\"hljs-comment\">//true    </span><br><span class=\"hljs-keyword\">let</span> height=<span class=\"hljs-number\">158</span>;<br><span class=\"hljs-keyword\">const</span> grow=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>.height); <span class=\"hljs-comment\">//undefined</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>.grow===grow)<span class=\"hljs-comment\">//false</span><br></code></pre></td></tr></table></figure>\n\n<p>5.块级作用域</p>\n<p>var没有块级作用域，let和const有块级作用域。</p>\n<h2 id=\"非常经典的案例\"><a href=\"#非常经典的案例\" class=\"headerlink\" title=\"非常经典的案例\"></a>非常经典的案例</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> btns=<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&quot;.btn&quot;</span>);</span><br><span class=\"javascript\"><span class=\"hljs-comment\">//1.var</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class=\"javascript\">    btns[i].addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(i); <span class=\"hljs-comment\">//都会输出3</span></span><br><span class=\"javascript\">    &#125;,<span class=\"hljs-literal\">false</span>)</span><br><span class=\"javascript\">&#125; <span class=\"hljs-comment\">//执行for循环的时候，会给所有的btn添加监听(瞬间就能完成)，退出for循环的时候，全局变量i的值为3</span></span><br><span class=\"javascript\"><span class=\"hljs-comment\">//当点击的按钮的时候，自然会输出i=3.</span></span><br><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">//2.闭包</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class=\"javascript\">    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">index</span>)</span>&#123;</span><br><span class=\"javascript\">        btns[index].addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(index); </span><br><span class=\"javascript\">    &#125;,<span class=\"hljs-literal\">false</span>)</span><br><span class=\"javascript\">    &#125;)(i)</span><br><span class=\"javascript\">&#125; </span><br><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">//3.let</span></span><br><span class=\"javascript\"><span class=\"hljs-comment\">// //此时的i不再是全局变量</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;btns.length;i++)&#123;</span><br><span class=\"javascript\">    btns[i].addEventListener(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(i); </span><br><span class=\"javascript\">    &#125;,<span class=\"hljs-literal\">false</span>)</span><br><span class=\"javascript\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>1.使用var</p>\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144638.png\" alt=\"2.let 和 const 的应用-var\" style=\"zoom: 67%;\" />\n\n<p>2.使用闭包</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144714.png\" alt=\"3.let 和 const 的应用-闭包\"></p>\n<p>3.使用let</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530144732.png\" alt=\"4.let 和 const 的应用-let\"></p>\n<h1 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">模板字符串使用反引号 (``) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（`$&#123;expression&#125;`）的占位符。<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">/ <span class=\"hljs-number\">1.</span>认识模板字符串<br><span class=\"hljs-comment\">// 模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。</span><br><span class=\"hljs-keyword\">const</span> user1=<span class=\"hljs-string\">&#x27;alex&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> user2=<span class=\"hljs-string\">`alex`</span>;<br><span class=\"hljs-built_in\">console</span>.log(user1,user2,user1===user2); <span class=\"hljs-comment\">//alex alex true</span><br><br><span class=\"hljs-comment\">// 2.模板字符串和一般字符串的区别</span><br><span class=\"hljs-keyword\">const</span> person=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;alex&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>,<br>    <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span><br>&#125;<br><span class=\"hljs-comment\">// 一般字符串</span><br><span class=\"hljs-comment\">// const info=&quot;name:&quot;+person.name+&quot;, age:&quot;+person.age+&quot;, gender:&quot;+person.gender;</span><br><span class=\"hljs-comment\">// 模板字符串</span><br><span class=\"hljs-keyword\">const</span> info=<span class=\"hljs-string\">`name:<span class=\"hljs-subst\">$&#123;person.name&#125;</span>, age:<span class=\"hljs-subst\">$&#123;person.age&#125;</span>, gender:<span class=\"hljs-subst\">$&#123;person.gender&#125;</span>`</span>;<br><span class=\"hljs-built_in\">console</span>.log(info);<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210530154647.png\" alt=\"image-20210530154645752\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//1.输出多行字符串</span><br><span class=\"hljs-comment\">// 模板字符串中，所有的空格、换行或缩进都会保留在输出中。</span><br>    <span class=\"hljs-keyword\">const</span> info=<span class=\"hljs-string\">`hello</span><br><span class=\"hljs-string\">world!`</span>;<br>    <span class=\"hljs-built_in\">console</span>.log(info);<br><span class=\"hljs-comment\">//  2. 输出`和\\等特殊字符</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`\\``</span>,<span class=\"hljs-string\">`\\\\`</span>); <span class=\"hljs-comment\">//` \\</span><br><br><span class=\"hljs-comment\">// 3. 模板字符串的注入</span><br><span class=\"hljs-keyword\">const</span> name=<span class=\"hljs-string\">&quot;alex&quot;</span>;<br><span class=\"hljs-keyword\">const</span> person=&#123;<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>,<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span>&#125;;<br><span class=\"hljs-keyword\">const</span> getSex=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">gender</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> gender===<span class=\"hljs-string\">&quot;male&quot;</span>?<span class=\"hljs-string\">&quot;男&quot;</span>:<span class=\"hljs-string\">&quot;女&quot;</span>;<br>&#125;<br><span class=\"hljs-keyword\">const</span> alex=<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;name&#125;</span>,<span class=\"hljs-subst\">$&#123;person.age+<span class=\"hljs-number\">2</span>&#125;</span>,<span class=\"hljs-subst\">$&#123;getSex(person.gender)&#125;</span>`</span>;<br><span class=\"hljs-comment\">//alex,20,男</span><br><span class=\"hljs-built_in\">console</span>.log(alex);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.认识箭头函数，箭头函数是匿名函数</span><br><br><span class=\"hljs-keyword\">const</span> add=<span class=\"hljs-function\">(<span class=\"hljs-params\">x,y</span>)=&gt;</span>&#123;<span class=\"hljs-keyword\">return</span> x+y&#125;;<br><br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>));<br><br><span class=\"hljs-comment\">// 2.箭头函数的结构</span><br><br><span class=\"hljs-comment\">// 参数=&gt;函数体</span><br></code></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<p>1.单个参数时可以去掉参数的圆括号；无参数或者多个参数时不能省略参数圆括号。</p>\n<p>2.如果函数体只有return语句，可以直接同时省略函数体的花括号和return关键字。</p>\n<p>3.返回值是单行对象时，可以省略return关键词，然后在对象的花括号外面加上圆括号。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.单个参数</span><br><span class=\"hljs-keyword\">const</span> add=<span class=\"hljs-function\"><span class=\"hljs-params\">x</span>=&gt;</span>&#123;<span class=\"hljs-keyword\">return</span> x+<span class=\"hljs-number\">1</span>;&#125;<br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">2</span>));<br><br><span class=\"hljs-comment\">// 2.单行函数体</span><br><span class=\"hljs-keyword\">const</span> add2=<span class=\"hljs-function\"><span class=\"hljs-params\">x</span>=&gt;</span>x+<span class=\"hljs-number\">1</span>;<br><span class=\"hljs-built_in\">console</span>.log(add2(<span class=\"hljs-number\">2</span>));<br><br><span class=\"hljs-comment\">// 3.单行对象</span><br><span class=\"hljs-keyword\">const</span> add3=<span class=\"hljs-function\">(<span class=\"hljs-params\">x,y</span>)=&gt;</span>(&#123;<span class=\"hljs-attr\">value</span>:x+y&#125;);<br><span class=\"hljs-built_in\">console</span>.log(add3(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>));<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"this指向\"><a href=\"#this指向\" class=\"headerlink\" title=\"this指向\"></a>this指向</h2><p>1.非箭头函数中this指向问题</p>\n<p>只有在函数调用的时候，this指向才能确定；this的指向和函数在哪调用无关，只和函数被谁调用有关</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <br>&#125;<br><span class=\"hljs-comment\">// 只有在函数调用的时候，this指向才能确定</span><br><span class=\"hljs-comment\">// this的指向和函数在哪调用无关，只和函数被谁调用有关</span><br>add(); <span class=\"hljs-comment\">// 非严格模式下this指向window，严格模式下是undefined</span><br><span class=\"hljs-built_in\">window</span>.add() <span class=\"hljs-comment\">// window</span><br><br><span class=\"hljs-keyword\">const</span> calc=&#123;<br>    <span class=\"hljs-attr\">add</span>:add<br>&#125;<br>calc.add(); <span class=\"hljs-comment\">//calc</span><br><br><span class=\"hljs-keyword\">const</span> adder=calc.add;<br>adder();<span class=\"hljs-comment\">// 非严格模式下this指向window，严格模式下是undefined</span><br><br><span class=\"hljs-built_in\">document</span>.onclick=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <span class=\"hljs-comment\">//this指向绑定的dom，此时为document</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name=name;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);<br>&#125;<br><span class=\"hljs-keyword\">var</span> p=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;Alex&quot;</span>); <span class=\"hljs-comment\">// this指向实例化生产的对象</span><br></code></pre></td></tr></table></figure>\n\n<p>2.箭头函数中的this指向</p>\n<p> 箭头函数没有自己的this，它会沿着作用域链向外查找。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 箭头函数没有自己的this</span><br><span class=\"hljs-keyword\">const</span> calc=&#123;<br>    <span class=\"hljs-attr\">add</span>:<span class=\"hljs-function\">()=&gt;</span>&#123;<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)&#125;<br>&#125;<br>calc.add(); <span class=\"hljs-comment\">//window</span><br><span class=\"hljs-comment\">// 因为箭头函数没有自己的this，所以它会通过作用域链向外查找至全局作用域，而全局作用中this指向window</span><br><br><br><span class=\"hljs-keyword\">const</span> c=&#123;<br>    <span class=\"hljs-attr\">add</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-keyword\">const</span> adder=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);<br>        &#125;<br>        adder();<br>    &#125;<br>&#125;;<br>c.add(); <span class=\"hljs-comment\">// 指向c对象</span><br><br><span class=\"hljs-keyword\">const</span> addFn=c.add;<br>addFn(); <span class=\"hljs-comment\">// 指向window</span><br></code></pre></td></tr></table></figure>\n\n<p>3.箭头函数不适用的场景</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.作为构造函数</span><br><span class=\"hljs-comment\">// 箭头函数没有this</span><br><span class=\"hljs-comment\">// const Person=()=&gt;&#123;&#125;;</span><br><span class=\"hljs-comment\">// new Person();</span><br><br><span class=\"hljs-comment\">// 2.需要this 指向调用对象的时候</span><br><span class=\"hljs-built_in\">document</span>.onclick=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <span class=\"hljs-comment\">//此时会指向window对象</span><br>&#125;<br><span class=\"hljs-comment\">// 3.需要使用arguments时</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>);<br>&#125;<br>add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">//[1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><span class=\"hljs-keyword\">const</span> addFn=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>);<br>&#125;<br>addFn(); <span class=\"hljs-comment\">//会报错</span><br></code></pre></td></tr></table></figure>\n\n<p>4.箭头函数的应用</p>\n<p>如果代码写成下面这样，程序执行会有问题，因为<code>setInterval</code>中的回调函数中的<code>this</code>会指向<code>window</code>对象，导致无法进行加法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>开始<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;result&quot;</span>&gt;</span>0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> btn=<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;btn&quot;</span>);</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> result=<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;result&quot;</span>);</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> timer=&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">time</span>:<span class=\"hljs-number\">0</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">start</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">            btn.addEventListener(</span><br><span class=\"javascript\">                <span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">                        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);</span><br><span class=\"javascript\">                        <span class=\"hljs-built_in\">this</span>.time++;</span><br><span class=\"javascript\">                        result.innerHTML=<span class=\"hljs-built_in\">this</span>.time;</span><br><span class=\"javascript\">                    &#125;,<span class=\"hljs-number\">1000</span>);</span><br><span class=\"javascript\">                &#125;</span><br><span class=\"javascript\">            ,<span class=\"hljs-literal\">false</span>);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">    timer.start();</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>常规的解决是备份<code>this</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> timer=&#123;<br>    <span class=\"hljs-attr\">time</span>:<span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-attr\">start</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-keyword\">var</span> self =<span class=\"hljs-built_in\">this</span>;<br>        btn.addEventListener(<br>            <span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>                <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);<br>                    self.time++;<br>                    result.innerHTML=self.time;<br>                &#125;,<span class=\"hljs-number\">1000</span>);<br>            &#125;<br>        ,<span class=\"hljs-literal\">false</span>);<br>    &#125;<br>&#125;<br> timer.start();<br></code></pre></td></tr></table></figure>\n\n<p>但是可以使用<strong>箭头函数</strong>来解决这个问题，箭头函数本身没有<code>this</code>，所以它会向外层的作用域链查找<code>this</code>。</p>\n<p>注意，此时也要把<code>addEventListener</code>中的匿名函数改为箭头函数，不然<code>setInterval</code>的箭头函数会向外到<code>addEventListener</code>中的匿名函数找<code>this</code>，而该函数this为绑定的dom节点，从而<code>setInterval</code>的箭头函数会把btn（绑定的dom）当做this。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> timer=&#123;<br>    <span class=\"hljs-attr\">time</span>:<span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-attr\">start</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        btn.addEventListener(<br>            <span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-function\">()=&gt;</span>&#123;<br>                <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>);<br>                    <span class=\"hljs-built_in\">this</span>.time++;<br>                    result.innerHTML=<span class=\"hljs-built_in\">this</span>.time;<br>                &#125;,<span class=\"hljs-number\">1000</span>);<br>            &#125;<br>        ,<span class=\"hljs-literal\">false</span>);<br>    &#125;<br>&#125;<br> timer.start();<br></code></pre></td></tr></table></figure>\n\n<p>将这两个部分都改为箭头函数后，<code>setInterval</code>中的匿名函数最终会在<code>start()</code>方法找<code>this</code>。</p>\n<p>而注意到最后会调用<code>timer.start()</code>，所以start()中的this就是指向<code>timer</code>, 因此 <code>this.time++;</code> 和<code>result.innerHTML=this.time;</code> 这两句中的<code>this</code> 指向的就是<code>timer</code>。 </p>\n<h1 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h1><h2 id=\"数组解构赋值\"><a href=\"#数组解构赋值\" class=\"headerlink\" title=\"数组解构赋值\"></a>数组解构赋值</h2><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194725.png\" alt=\"image-20210603194723759\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194753.png\" alt=\"image-20210603194752249\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603194905.png\" alt=\"image-20210603194903992\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210603195037.png\" alt=\"image-20210603195036092\"></p>\n<h3 id=\"1-解构赋值的定义\"><a href=\"#1-解构赋值的定义\" class=\"headerlink\" title=\"1.解构赋值的定义\"></a>1.解构赋值的定义</h3><p>解析某一数据的结构，将想要的东西提取出来，赋值给变量或常量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-comment\">// const a=arr[0];</span><br><span class=\"hljs-comment\">// const b=arr[1];</span><br><span class=\"hljs-comment\">// const c=arr[2];</span><br><span class=\"hljs-keyword\">const</span> [a, b, c] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-built_in\">console</span>.log(a, b, c); <span class=\"hljs-comment\">//1 2 3</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 模式(结构)匹配,索引值相对应</span><br><span class=\"hljs-keyword\">let</span> [a,b,c]=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><br><span class=\"hljs-comment\">// 如果想要取出1,5,3</span><br><span class=\"hljs-keyword\">const</span> [d,[,,e],f]=[<span class=\"hljs-number\">1</span>,[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>],<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-built_in\">console</span>.log(d,e,f); <span class=\"hljs-comment\">//1 5 3</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-解构赋值的默认值\"><a href=\"#2-解构赋值的默认值\" class=\"headerlink\" title=\"2.解构赋值的默认值\"></a>2.解构赋值的默认值</h3><p>只有当一个数组成员严格等于（===） undefined时，它的的默认值才会生生效。如果默认值是表达式时，默认值表达式是惰性求值的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> [a, b] = []; <span class=\"hljs-comment\">//a=undefined,b=undefined</span><br><span class=\"hljs-keyword\">const</span> [c = <span class=\"hljs-number\">1</span>, d = <span class=\"hljs-number\">2</span>] = []; <span class=\"hljs-comment\">//1 2</span><br><br><span class=\"hljs-comment\">//只有当一个数组成员严格等于（===） undefined时，对应的默认值才会生生效。</span><br><span class=\"hljs-keyword\">const</span> [e = <span class=\"hljs-number\">1</span>, f = <span class=\"hljs-number\">2</span>] = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>] <span class=\"hljs-comment\">//3,4</span><br><span class=\"hljs-keyword\">const</span> [i = <span class=\"hljs-number\">2</span>, j = <span class=\"hljs-number\">6</span>] = [<span class=\"hljs-number\">5</span>] <span class=\"hljs-comment\">//5 6</span><br><span class=\"hljs-built_in\">console</span>.log(a, b, c, d, e, f, i, j); <span class=\"hljs-comment\">//undefined undefined 1 2 3 4 5 6</span><br><br><span class=\"hljs-comment\">// 如果默认值是表达式时，默认值表达式是惰性求值的</span><br><span class=\"hljs-keyword\">const</span> func = <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;我被执行了&quot;</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>&#125;;<br><span class=\"hljs-keyword\">const</span> [x = func()] = [<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 此时函数func并没有执行</span><br><span class=\"hljs-keyword\">const</span> [y=func()]=[];<br><span class=\"hljs-built_in\">console</span>.log(x,y); <span class=\"hljs-comment\">//1 2 </span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-解构赋值的应用\"><a href=\"#3-解构赋值的应用\" class=\"headerlink\" title=\"3.解构赋值的应用\"></a>3.解构赋值的应用</h3><h4 id=\"类数组可以进行解构赋值\"><a href=\"#类数组可以进行解构赋值\" class=\"headerlink\" title=\"类数组可以进行解构赋值\"></a>类数组可以进行解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 1.常见的类数组的解构赋值</span><br><span class=\"hljs-comment\">// arguments</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> [a,b]=<span class=\"hljs-built_in\">arguments</span>;<br>    <span class=\"hljs-built_in\">console</span>.log(a,b); <span class=\"hljs-comment\">//1 2</span><br>&#125;<br>func(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>); <br><br><span class=\"hljs-comment\">// NodeList</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;p&#x27;</span>)); <span class=\"hljs-comment\">//NodeList(3) [p, p, p]</span><br><span class=\"hljs-keyword\">const</span> [p1,p2,p3]=(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&quot;p&quot;</span>));<br><span class=\"hljs-built_in\">console</span>.log(p1,p2,p3);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> array=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-comment\">// 不用解构赋值参数的写法如下</span><br><span class=\"hljs-comment\">// const add=arr=&gt;arr[0]+arr[1];</span><br><span class=\"hljs-comment\">// 使用解构赋值</span><br><span class=\"hljs-keyword\">const</span> add=<span class=\"hljs-function\">(<span class=\"hljs-params\">[x,y]</span>)=&gt;</span>x+y;<br><span class=\"hljs-built_in\">console</span>.log(add(array)); <span class=\"hljs-comment\">//3 </span><br><br><span class=\"hljs-comment\">//还可以给形参添加默认值</span><br><span class=\"hljs-keyword\">const</span> add1=<span class=\"hljs-function\">(<span class=\"hljs-params\">[x=<span class=\"hljs-number\">1</span>,y=<span class=\"hljs-number\">3</span>]</span>)=&gt;</span>x+y;<br><span class=\"hljs-built_in\">console</span>.log(add1([])); <span class=\"hljs-comment\">//4</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"交换变量的值\"><a href=\"#交换变量的值\" class=\"headerlink\" title=\"交换变量的值\"></a>交换变量的值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> x=<span class=\"hljs-number\">1</span> ,y=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-comment\">//相当于[x,y] =[2,1]，而不是右边的y赋值给x，x赋值给y</span><br>[x,y]=[y,x];<br><span class=\"hljs-built_in\">console</span>.log(x,y); <span class=\"hljs-comment\">//2 1</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"对象解构赋值\"><a href=\"#对象解构赋值\" class=\"headerlink\" title=\"对象解构赋值\"></a>对象解构赋值</h2><p>1.模式匹配，属性名相同的完成赋值，不需要按照顺序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 1.模式匹配，属性名相同的完成赋值，不需要按照顺序</span><br><span class=\"hljs-comment\">//简写形式</span><br><span class=\"hljs-keyword\">const</span> &#123;age,name&#125;=&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;alex&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(age,name); <span class=\"hljs-comment\">//18 &quot;alex&quot;</span><br><span class=\"hljs-comment\">// 完整形式</span><br><span class=\"hljs-keyword\">const</span> &#123;<span class=\"hljs-attr\">age</span>:age1,<span class=\"hljs-attr\">name</span>:name1&#125;=&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;alex&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(name1,age1); <span class=\"hljs-comment\">//alex 18</span><br></code></pre></td></tr></table></figure>\n\n<p>2.对象解构赋值的注意事项</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 1.默认值的生效条件</span><br><span class=\"hljs-comment\">// 对象的数值值严格等于undefined时，对应的默认值才会生效</span><br><span class=\"hljs-keyword\">const</span> &#123;name &#125; = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;alex&quot;</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(name); <span class=\"hljs-comment\">//&quot;alex&quot;</span><br><span class=\"hljs-comment\">// 注意默认值的赋值是用等号，而不是用冒号</span><br><span class=\"hljs-keyword\">const</span> &#123;name1=<span class=\"hljs-string\">&quot;billie&quot;</span>,age=<span class=\"hljs-number\">0</span>&#125;=&#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(name1);<br><span class=\"hljs-comment\">// 2.如果默认值是表达式，默认值表达式是惰性求值的</span><br><br><span class=\"hljs-comment\">// 3.将一个已经声明的变量用于解构赋值</span><br><span class=\"hljs-keyword\">let</span> x=<span class=\"hljs-number\">1</span>;<br><span class=\"hljs-comment\">// &#123;x&#125;=&#123;x:3&#125;; 会报错，和解决箭头函数的单行语句的返回值是对象一样，在整个外层加上括号</span><br>(&#123;x&#125;=&#123;<span class=\"hljs-attr\">x</span>:<span class=\"hljs-number\">3</span>&#125;);<br><span class=\"hljs-built_in\">console</span>.log(x); <span class=\"hljs-comment\">//3</span><br><br><span class=\"hljs-comment\">// 4.可以取到继承的属性</span><br><span class=\"hljs-keyword\">const</span> &#123;toString&#125;=&#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(toString);<span class=\"hljs-comment\">// 并没有输出undefined</span><br><span class=\"hljs-comment\">// toString的属性继承自Object</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.prototype);<br><span class=\"hljs-keyword\">const</span> &#123;a&#125;=&#123;&#125;;<br><span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//undefined</span><br></code></pre></td></tr></table></figure>\n\n<p>3.对象解构赋值的应用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 函数参数的解构赋值</span><br><span class=\"hljs-comment\">//const info=user=&gt;console.log(user.name,user.age);</span><br><span class=\"hljs-keyword\">const</span> info=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;age,name&#125;</span>)=&gt;</span><span class=\"hljs-built_in\">console</span>.log(age,name);<br>info(&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;hh&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">12</span>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"其他数组类型的解构赋值\"><a href=\"#其他数组类型的解构赋值\" class=\"headerlink\" title=\"其他数组类型的解构赋值\"></a>其他数组类型的解构赋值</h2><p>1.字符串的解构赋值</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//数组形式的解构赋值</span><br><span class=\"hljs-keyword\">const</span> [a,b,,,c]=<span class=\"hljs-string\">&quot;hello&quot;</span>;<br><span class=\"hljs-built_in\">console</span>.log(a,b,c); <span class=\"hljs-comment\">//h e o</span><br><span class=\"hljs-comment\">// 对象形式解构赋值</span><br><span class=\"hljs-keyword\">const</span> &#123;<span class=\"hljs-number\">0</span>:x,<span class=\"hljs-number\">1</span>:y,length&#125;=<span class=\"hljs-string\">&quot;hello&quot;</span>;<br><span class=\"hljs-built_in\">console</span>.log(x,y,length); <span class=\"hljs-comment\">//h e 5</span><br></code></pre></td></tr></table></figure>\n\n<p>2.数值和布尔值的解构赋值(只能按照对象形式解构赋值), 会自动将右侧的数值或布尔值转换为对象</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> &#123;aa,toString&#125;=<span class=\"hljs-number\">123</span>;<br><span class=\"hljs-built_in\">console</span>.log(aa,toString); <span class=\"hljs-comment\">//toString属性是继承而来的</span><br></code></pre></td></tr></table></figure>\n\n<p>3.undefined和null的解构赋值会报错</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 由于undefined和null，无法转化为对象，所以对它们进行解构赋值都会报错</span><br><span class=\"hljs-keyword\">const</span> &#123;ff&#125;=<span class=\"hljs-literal\">undefined</span>;<br><span class=\"hljs-built_in\">console</span>.log(ff); <span class=\"hljs-comment\">//报错</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"简介表示\"><a href=\"#简介表示\" class=\"headerlink\" title=\"简介表示\"></a>简介表示</h1><h2 id=\"属性和方法的简洁表示\"><a href=\"#属性和方法的简洁表示\" class=\"headerlink\" title=\"属性和方法的简洁表示\"></a>属性和方法的简洁表示</h2><h3 id=\"1-属性的简洁表示\"><a href=\"#1-属性的简洁表示\" class=\"headerlink\" title=\"1.属性的简洁表示\"></a>1.属性的简洁表示</h3><p>当键名和变量名(常量名)一样的时候，可以只写一个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> age=<span class=\"hljs-number\">19</span>;<br><span class=\"hljs-keyword\">const</span> person1=&#123;<br>    <span class=\"hljs-comment\">// age:age, 直接写age</span><br>    age,<br>&#125;        <br><span class=\"hljs-built_in\">console</span>.log(person1.age);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-方法的简洁表示\"><a href=\"#2-方法的简洁表示\" class=\"headerlink\" title=\"2.方法的简洁表示\"></a>2.方法的简洁表示</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> person2=&#123;<br>    <span class=\"hljs-comment\">// speak:function()&#123;&#125;</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"方括号语法\"><a href=\"#方括号语法\" class=\"headerlink\" title=\"方括号语法\"></a>方括号语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.方括号语法</span><br><span class=\"hljs-keyword\">const</span> prop=<span class=\"hljs-string\">&quot;age&quot;</span>;<br><span class=\"hljs-keyword\">const</span> person=&#123;&#125;;<br>person[prop]=<span class=\"hljs-number\">18</span>; <span class=\"hljs-comment\">// &#123;age:18&#125;</span><br><span class=\"hljs-comment\">// ES6新增如下</span><br><span class=\"hljs-keyword\">const</span> person1=&#123;<br>    [prop]:<span class=\"hljs-number\">19</span><br>&#125;<br><br><span class=\"hljs-comment\">// 2.方括号可以放[值或者计算可以得到的值(表达式)]</span><br><span class=\"hljs-keyword\">const</span> prop1=<span class=\"hljs-string\">&quot;age&quot;</span>;<br><span class=\"hljs-keyword\">const</span> func=<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-string\">&#x27;gender&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> person2=&#123;<br>    [prop1]:<span class=\"hljs-number\">18</span>,<br>    [func()]:<span class=\"hljs-string\">&#x27;female&#x27;</span><br>&#125;<br><span class=\"hljs-comment\">// &#123;age: 18, gender: &quot;female&quot;&#125;</span><br><br><span class=\"hljs-comment\">// 3.方括号语法和点语法的区别</span><br><span class=\"hljs-comment\">// 点语法是方括号语法的特殊形式</span><br><span class=\"hljs-keyword\">const</span> person3=[];<br><span class=\"hljs-comment\">// perosn.age 等价于 person[&#x27;age&#x27;]</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"函数默认参数值\"><a href=\"#函数默认参数值\" class=\"headerlink\" title=\"函数默认参数值\"></a>函数默认参数值</h1><p><strong>函数默认参数</strong>允许在没有值或<code>undefined</code>被传入时使用默认形参。只有在①不传参数 ②明确传递undefined作为参数 这两种情况下,默认值才会生效。</p>\n<h3 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.函数参数的默认值</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">multiply</span>(<span class=\"hljs-params\">a,b=<span class=\"hljs-number\">1</span></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a*b;<br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(multiply(<span class=\"hljs-number\">3</span>) ) <span class=\"hljs-comment\">//3</span><br><br><span class=\"hljs-comment\">// 2.默认值的生效</span><br><span class=\"hljs-comment\">// ①不传参数 ②明确传递undefined作为参数 只有这两种情况下,默认值才会生效</span><br><span class=\"hljs-built_in\">console</span>.log(multiply(<span class=\"hljs-number\">2</span>,<span class=\"hljs-literal\">undefined</span>)); <span class=\"hljs-comment\">//2</span><br><span class=\"hljs-built_in\">console</span>.log(multiply(<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">&quot;&quot;</span>)); <span class=\"hljs-comment\">//2*&quot;&quot; 最后结果会被隐形转换为0</span><br><br><span class=\"hljs-comment\">// 3.默认值表达式</span><br><span class=\"hljs-comment\">// 如果默认值是表达式，默认值表达式是惰性求值的</span><br><br><br><span class=\"hljs-comment\">// 4.设置默认值的小技巧</span><br><span class=\"hljs-comment\">// 函数参数的默认值最好从参数列表的右边开始设置。</span><br><br><span class=\"hljs-keyword\">const</span> multiply2=<span class=\"hljs-function\">(<span class=\"hljs-params\">x=<span class=\"hljs-number\">1</span>,y</span>)=&gt;</span>x*y;<br><span class=\"hljs-comment\">// 此时如果想要使用第一个默认值，必须明确传递undefined</span><br><span class=\"hljs-built_in\">console</span>.log(multiply(<span class=\"hljs-literal\">undefined</span>,<span class=\"hljs-number\">2</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-函数默认参数的应用\"><a href=\"#2-函数默认参数的应用\" class=\"headerlink\" title=\"2.函数默认参数的应用\"></a>2.函数默认参数的应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.接收多参数，如果按照默认写法，传参的时候需要记住参数顺序</span><br><span class=\"hljs-keyword\">const</span> user=<span class=\"hljs-function\">(<span class=\"hljs-params\">name=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>,age=<span class=\"hljs-number\">12</span>,gender=<span class=\"hljs-string\">&quot;female&quot;</span></span>)=&gt;</span><br>    <span class=\"hljs-built_in\">console</span>.log(name,age,gender);<br>user(<span class=\"hljs-string\">&quot;alex&quot;</span>,<span class=\"hljs-number\">18</span>,<span class=\"hljs-string\">&#x27;male&#x27;</span>);<br><br><span class=\"hljs-comment\">// 2. 法一：接收一个对象作为参数</span><br><span class=\"hljs-keyword\">const</span> user1=<span class=\"hljs-function\"><span class=\"hljs-params\">option</span>=&gt;</span><span class=\"hljs-built_in\">console</span>.log(<br>    option.name,option.age,option.gender);<br>user1(&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;alex&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>,<br>    <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 3.法二：解构赋值的默认值</span><br><span class=\"hljs-keyword\">const</span> user2=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;name=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>,age=<span class=\"hljs-number\">12</span>,gender=<span class=\"hljs-string\">&quot;female&quot;</span>&#125;</span>)=&gt;</span><br><span class=\"hljs-built_in\">console</span>.log(name,age,gender);<br><br>user2(&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;alex&quot;</span>&#125;);<br><span class=\"hljs-comment\">// 但是不能什么都不传，如果什么都不传就相当于传了undefined</span><br><span class=\"hljs-comment\">// 而无法对undefined进行解构赋值</span><br><span class=\"hljs-comment\">// user2();</span><br><br><span class=\"hljs-comment\">// 4.法三：函数参数的默认值</span><br><span class=\"hljs-comment\">// 把&#123;name=&quot;zhangsan&quot;,age=12,gender=&quot;female&quot;&#125;看为option</span><br><span class=\"hljs-comment\">// option的默认参数为&#123;&#125;，当无不传入参数或者传入undefined的时候</span><br><span class=\"hljs-comment\">// option=&#123;&#125; 会把空对象赋值给option，也就是下面一行的解构赋值</span><br><span class=\"hljs-comment\">// &#123;name=&quot;zhangsan&quot;,age=12,gender=&quot;female&quot;&#125;=&#123;&#125;</span><br><br><span class=\"hljs-keyword\">const</span> user3=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;name=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>,age=<span class=\"hljs-number\">12</span>,gender=<span class=\"hljs-string\">&quot;female&quot;</span>&#125;=&#123;&#125;</span>)=&gt;</span><br><span class=\"hljs-built_in\">console</span>.log(name,age,gender);<br>user3(); <span class=\"hljs-comment\">//此时不会报错</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"剩余参数与展开语法\"><a href=\"#剩余参数与展开语法\" class=\"headerlink\" title=\"剩余参数与展开语法\"></a>剩余参数与展开语法</h1><h2 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h2><h3 id=\"剩余参数定义\"><a href=\"#剩余参数定义\" class=\"headerlink\" title=\"剩余参数定义\"></a>剩余参数定义</h3><p><strong>剩余参数</strong>语法允许我们将一个不定数量的参数表示为一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.认识剩余参数</span><br><span class=\"hljs-comment\">// 当不知道参数有多少个，可以用省略号代替，省略号后面接参数名</span><br><span class=\"hljs-keyword\">const</span> add1=<span class=\"hljs-function\">(<span class=\"hljs-params\">x,y,z,...args</span>)=&gt;</span>&#123;&#125;;<br><br><span class=\"hljs-comment\">// 2.剩余参数的本质，剩余参数是一个数组，如果没有值则是空数组</span><br><span class=\"hljs-keyword\">const</span> add2=<span class=\"hljs-function\">(<span class=\"hljs-params\">x,y,z,...args</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(x,y,args);<br>&#125;;<br>add2(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//1 undefined []</span><br>add2(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>);  <span class=\"hljs-comment\">//1 2 [4, 5, 6]</span><br><br><span class=\"hljs-comment\">// 3.箭头函数与剩余参数</span><br><span class=\"hljs-comment\">// 箭头函数的参数部分即使只有一个剩余参数，也不能省略括号</span><br><span class=\"hljs-keyword\">const</span> add3=<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;&#125;;<br><br><span class=\"hljs-comment\">// 4.使用剩余参数替代arguments获取实际参数</span><br><span class=\"hljs-keyword\">const</span> add4=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 记住箭头函数没有arguments，因为它没有this</span><br>    <span class=\"hljs-comment\">// arguments是类数组，而剩余参数是个数组</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>);<br>&#125;<br>add4(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br><br><span class=\"hljs-keyword\">const</span> add5=<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(args);<br>&#125;<br><span class=\"hljs-comment\">// 5.剩余参数的位置</span><br><span class=\"hljs-comment\">// 剩余参数只能作为最后一个参数</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"剩余参数应用\"><a href=\"#剩余参数应用\" class=\"headerlink\" title=\"剩余参数应用\"></a>剩余参数应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.add函数</span><br><span class=\"hljs-keyword\">const</span> add=<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> sum=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span> ;i&lt;args.length;i++)&#123;<br>        sum+=args[i];<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> sum;<br>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>));<br><span class=\"hljs-comment\">// 使用reduce方法</span><br><span class=\"hljs-keyword\">const</span> add_reduce=<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> args.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">total,currentValue</span>)=&gt;</span>&#123; <span class=\"hljs-keyword\">return</span> total+currentValue&#125;);<br>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(add_reduce(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>));<br><br><br><span class=\"hljs-comment\">// 2.与解构赋值结合使用</span><br><span class=\"hljs-comment\">// 当剩余参数不是作为函数的参数时，剩余参数叫做剩余元素(Rest element)</span><br><br><span class=\"hljs-comment\">// 剩余元素+数组解构赋值</span><br><span class=\"hljs-keyword\">const</span> [num,...args]=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>];<br><span class=\"hljs-built_in\">console</span>.log(num,args); <span class=\"hljs-comment\">//1 [2, 3, 4]</span><br><br><span class=\"hljs-comment\">// 剩余参数+数组解构赋值+箭头函数</span><br><span class=\"hljs-keyword\">const</span> func=<span class=\"hljs-function\">(<span class=\"hljs-params\">[num,...args]</span>)=&gt;</span>&#123;&#125;;<br>func([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]);<br><br><span class=\"hljs-comment\">// 剩余元素+对象解构赋值</span><br><span class=\"hljs-comment\">// 此时剩余元素为数组</span><br><span class=\"hljs-keyword\">const</span> &#123;x,y,...z&#125;=&#123;<span class=\"hljs-attr\">x</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-attr\">y</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">d</span>:<span class=\"hljs-number\">4</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(x,y,z); <span class=\"hljs-comment\">//1 3 &#123;b: 2, d: 4&#125;</span><br><br><span class=\"hljs-comment\">// 剩余参数+对象解构赋值+箭头函数</span><br><span class=\"hljs-keyword\">const</span> fun=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;m,n,...o&#125;</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(m,n,o);<br>&#125;;<br>fun(&#123;<span class=\"hljs-attr\">m</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">n</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">p</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">z</span>:<span class=\"hljs-number\">8</span>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"展开语法\"><a href=\"#展开语法\" class=\"headerlink\" title=\"展开语法\"></a>展开语法</h2><p><strong>展开语法(Spread syntax),</strong> 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开。</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.展开语法</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.min(...[<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>])); <span class=\"hljs-comment\">// 相当于Math.min(3,1,2);</span><br><br><span class=\"hljs-comment\">// 2.展开语法和剩余参数的区别</span><br><span class=\"hljs-comment\">// 展开语法[3,1,2]-&gt;3,1,2</span><br><span class=\"hljs-comment\">// 剩余参数 (3,1,2)-&gt;[3,1,2]</span><br><br><span class=\"hljs-comment\">// 剩余参数</span><br><span class=\"hljs-keyword\">const</span> add=<span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// 展开语法</span><br>    <span class=\"hljs-built_in\">console</span>.log(...args);<br>&#125;;<br>add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"展开语法的应用\"><a href=\"#展开语法的应用\" class=\"headerlink\" title=\"展开语法的应用\"></a>展开语法的应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.复制数组</span><br><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">const</span> b = a;<br><span class=\"hljs-built_in\">console</span>.log(a === b); <span class=\"hljs-comment\">//true 引用</span><br><br><span class=\"hljs-keyword\">const</span> c = [...a]; <span class=\"hljs-comment\">//等价于const c=[1,2,3];</span><br><span class=\"hljs-built_in\">console</span>.log(a === c); <span class=\"hljs-comment\">//false</span><br><br><span class=\"hljs-comment\">// 2.合并数组</span><br><span class=\"hljs-keyword\">const</span> m=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-keyword\">const</span> n=[<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];<br><span class=\"hljs-keyword\">const</span> i=[<span class=\"hljs-number\">7</span>,...m,...n]; <br><span class=\"hljs-built_in\">console</span>.log(i); <span class=\"hljs-comment\">//[7,1, 2, 3, 4, 5]</span><br><br><span class=\"hljs-comment\">// 3.字符串转数组</span><br><span class=\"hljs-built_in\">console</span>.log(...<span class=\"hljs-string\">&quot;app&quot;</span>); <span class=\"hljs-comment\">// console.log(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class=\"hljs-built_in\">console</span>.log([...<span class=\"hljs-string\">&quot;apple&quot;</span>]); <span class=\"hljs-comment\">// [&quot;a&quot;, &quot;p&quot;, &quot;p&quot;, &quot;l&quot;, &quot;e&quot;]</span><br><br><span class=\"hljs-comment\">// 4.常见的类数组转数组</span><br><span class=\"hljs-comment\">// arguments</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(...arguments); <span class=\"hljs-comment\">//console.log(1,2,3);</span><br>    <span class=\"hljs-built_in\">console</span>.log([...arguments]);<br>&#125;<br>func(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<br><span class=\"hljs-comment\">// NodeList</span><br><span class=\"hljs-built_in\">console</span>.log([...document.querySelectorAll(<span class=\"hljs-string\">&quot;p&quot;</span>)]);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对象展开\"><a href=\"#对象展开\" class=\"headerlink\" title=\"对象展开\"></a>对象展开</h3><p>对象的展开就是相当于把对象的所有属性罗列出来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.展开对象</span><br><span class=\"hljs-comment\">// 对象的展开就是相当于把对象的所有属性罗列出来</span><br><span class=\"hljs-comment\">// 对象必须在&#123;&#125;中展开，不能直接展开</span><br><span class=\"hljs-keyword\">const</span> apple=&#123;<br>    <span class=\"hljs-attr\">color</span>:<span class=\"hljs-string\">&quot;red&quot;</span>,<br>    <span class=\"hljs-attr\">taste</span>:<span class=\"hljs-string\">&quot;sweet&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(&#123;...apple&#125;); <span class=\"hljs-comment\">//&#123;color:&quot;red&quot;,taste:&quot;sweet&quot;&#125;</span><br><br><span class=\"hljs-comment\">// 2.合并对象</span><br><span class=\"hljs-comment\">//新对象拥有全部的属性，相同属性，后者会覆盖前者 </span><br><span class=\"hljs-keyword\">const</span> banana=&#123;<br>    <span class=\"hljs-attr\">color</span>:<span class=\"hljs-string\">&quot;yellow&quot;</span>,<br>    <span class=\"hljs-attr\">category</span>:<span class=\"hljs-string\">&quot;fruit&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(&#123;...apple,...banana&#125;);<br><span class=\"hljs-comment\">// &#123;color: &quot;yellow&quot;, taste: &quot;sweet&quot;, category: &quot;fruit&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对象展开的注意事项\"><a href=\"#对象展开的注意事项\" class=\"headerlink\" title=\"对象展开的注意事项\"></a>对象展开的注意事项</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.空对象的展开</span><br><span class=\"hljs-comment\">// 如果展开空对象，是没有任何效果</span><br><span class=\"hljs-comment\">// 对象的展开，相当于把所有对象的属性罗列出来</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;...&#123;&#125;&#125;); <span class=\"hljs-comment\">//&#123;&#125;</span><br><br><span class=\"hljs-comment\">// 2.非对象的展开</span><br><span class=\"hljs-comment\">// 如果展开的不是对象，则自动会将其转为对象，再将其罗列出来</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;..<span class=\"hljs-number\">.1</span>&#125;); <span class=\"hljs-comment\">//&#123;&#125; 1转为对象后，并没有属性罗列</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;...null&#125;); <span class=\"hljs-comment\">//&#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;...<span class=\"hljs-string\">&quot;alex&quot;</span>&#125;); <span class=\"hljs-comment\">//&#123;0: &quot;a&quot;, 1: &quot;l&quot;, 2: &quot;e&quot;, 3: &quot;x&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;...[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]&#125;); <span class=\"hljs-comment\">//&#123;0: 1, 1: 2&#125;</span><br><br><br><span class=\"hljs-comment\">// 3.含对象属性的对象的</span><br><span class=\"hljs-comment\">// 对象属性不会继续被展开</span><br><span class=\"hljs-keyword\">const</span> apple=&#123;<br>    <span class=\"hljs-attr\">feature</span>:&#123;<br>        <span class=\"hljs-attr\">taste</span>:<span class=\"hljs-string\">&quot;甜&quot;</span><br>    &#125;<br>&#125;;<br><span class=\"hljs-keyword\">const</span> pen=&#123;<br>    <span class=\"hljs-attr\">feature</span>:&#123;<br>        <span class=\"hljs-attr\">color</span>:<span class=\"hljs-string\">&quot;black&quot;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">use</span>:<span class=\"hljs-string\">&quot;写字&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(&#123;...apple&#125;); <span class=\"hljs-comment\">//&#123;feature: &#123;…&#125;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(&#123;...apple,...pen&#125;); <span class=\"hljs-comment\">//&#123;feature: &#123;…&#125;, use: &quot;写字&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对象展开的应用\"><a href=\"#对象展开的应用\" class=\"headerlink\" title=\"对象展开的应用\"></a>对象展开的应用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.复制对象</span><br><span class=\"hljs-keyword\">const</span> a=&#123;<span class=\"hljs-attr\">x</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">y</span>:<span class=\"hljs-number\">2</span>&#125;;<br><span class=\"hljs-keyword\">const</span> b=&#123;...a&#125;;<br><span class=\"hljs-built_in\">console</span>.log(a===b); <span class=\"hljs-comment\">//false</span><br><br><span class=\"hljs-comment\">// 2.用户参数和默认参数</span><br><span class=\"hljs-comment\">// 法一： 解构赋值+函数默认参数</span><br><span class=\"hljs-keyword\">const</span> user1=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;name=<span class=\"hljs-string\">&quot;zhangsan&quot;</span>,age=<span class=\"hljs-number\">0</span>,gender=<span class=\"hljs-string\">&quot;male&quot;</span>&#125;=&#123;&#125;</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(name,age,gender);<br>&#125;;<br><span class=\"hljs-comment\">// 法二: 对象展开 +解构赋值</span><br><span class=\"hljs-keyword\">const</span> user2=<span class=\"hljs-function\"><span class=\"hljs-params\">userParm</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> defaultParm=&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;zhangsan&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span>&#125;;<br>    <span class=\"hljs-comment\">// 合并默认参数和用户参数，还可以对结果进行解构</span><br>    <span class=\"hljs-keyword\">const</span> &#123;name,age,gender&#125;=&#123;...defaultParm,...userParm&#125;;<br>    <span class=\"hljs-built_in\">console</span>.log(name,age,gender);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Set与Map\"><a href=\"#Set与Map\" class=\"headerlink\" title=\"Set与Map\"></a>Set与Map</h1><h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><p>Set是一系列<strong>无序、没有重复值</strong>的数据集合。 Set 对象允许你存储任何类型的<strong>唯一值</strong>，无论是原始值或者是对象引用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建Set</span><br><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Set实例的属性和方法\"><a href=\"#Set实例的属性和方法\" class=\"headerlink\" title=\"Set实例的属性和方法\"></a>Set实例的属性和方法</h3><h4 id=\"1-add方法\"><a href=\"#1-add方法\" class=\"headerlink\" title=\"1.add方法\"></a>1.add方法</h4><p>在<code>Set</code>对象尾部添加一个元素，返回该<code>Set</code>对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建Set</span><br><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();<br>s.add(<span class=\"hljs-number\">1</span>);<br>s.add(<span class=\"hljs-number\">3</span>);<br>s.add(<span class=\"hljs-number\">4</span>).add(<span class=\"hljs-number\">5</span>);  <span class=\"hljs-comment\">//Set(4) &#123;1, 3, 4, 5&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-has方法\"><a href=\"#2-has方法\" class=\"headerlink\" title=\"2.has方法\"></a>2.has方法</h4><p>返回一个布尔值，表示该值在<code>Set</code>中存在与否。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(s.has(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-delete-方法\"><a href=\"#3-delete-方法\" class=\"headerlink\" title=\"3.delete 方法\"></a>3.delete 方法</h4><p>移除<code>Set</code>中指定的元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">s.delete(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//删除元素1</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-clear方法\"><a href=\"#4-clear方法\" class=\"headerlink\" title=\"4.clear方法\"></a>4.clear方法</h4><p>移除<code>Set</code>对象内的所有元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">s.clear();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"5-forEach-方法\"><a href=\"#5-forEach-方法\" class=\"headerlink\" title=\"5.forEach()方法\"></a>5.forEach()方法</h4><p><code>forEach</code> 方法会根据集合中元素的插入顺序，依次执行提供的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 按照成员添加进集合的顺序遍历的</span><br><span class=\"hljs-comment\">// 回调函数后面的参数是用来改变上下文的</span><br>s.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value,key,set</span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 在set中，value与key是等价的</span><br>    <span class=\"hljs-built_in\">console</span>.log(value,key,set);<br>&#125;,<span class=\"hljs-built_in\">document</span>);<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-size属性\"><a href=\"#6-size属性\" class=\"headerlink\" title=\"6.size属性\"></a>6.size属性</h3><p>判断Set实例中有多少元素。</p>\n<h3 id=\"Set的构造函数\"><a href=\"#Set的构造函数\" class=\"headerlink\" title=\"Set的构造函数\"></a>Set的构造函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.数组</span><br><span class=\"hljs-keyword\">const</span> s =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>]);<br><span class=\"hljs-built_in\">console</span>.log(s);  <span class=\"hljs-comment\">//Set(3) &#123;1, 2, 3&#125;</span><br><br><span class=\"hljs-comment\">// 2.字符串、arguments、NodeList、Set</span><br><span class=\"hljs-comment\">//字符串做参数</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(<span class=\"hljs-string\">&quot;hi&quot;</span>)) <span class=\"hljs-comment\">//Set(2) &#123;&quot;h&quot;, &quot;i&quot;&#125;</span><br><br><span class=\"hljs-comment\">//arguments做参数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(<span class=\"hljs-built_in\">arguments</span>));<br>&#125;<br>fun(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<br><span class=\"hljs-comment\">//NodeList做参数</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;p&#x27;</span>))); <br><span class=\"hljs-comment\">//Set(3) &#123;p, p, p&#125;</span><br><br><span class=\"hljs-comment\">// Set实例做参数</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(s));<br><span class=\"hljs-comment\">//Set(3) &#123;1, 2, 3&#125;</span><br><br><span class=\"hljs-comment\">// 和原来完全相同，但不等于原来的，相当于复制。</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(s)===s); <br><span class=\"hljs-comment\">//false</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Set重复判定方式\"><a href=\"#Set重复判定方式\" class=\"headerlink\" title=\"Set重复判定方式\"></a>Set重复判定方式</h2><p>Set 对重复值的判断基本遵循严格相等(===)， 但是对于NaN的判断与===不同，Set中NaN等于NaN。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Set实例会把2个NaN看做相等的元素</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">NaN</span>===<span class=\"hljs-literal\">NaN</span> ); <span class=\"hljs-comment\">//false</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-literal\">NaN</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-literal\">NaN</span>]));<br><span class=\"hljs-comment\">//Set(2) &#123;NaN, 2&#125;</span><br><br><br><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();<br>s.add(&#123;&#125;).add(&#123;&#125;);<br><span class=\"hljs-built_in\">console</span>.log(s); <span class=\"hljs-comment\">//此时s中有2个空对象</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Set应用\"><a href=\"#Set应用\" class=\"headerlink\" title=\"Set应用\"></a>Set应用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.数组或字符串去重时</span><br><span class=\"hljs-comment\">//Set(3) &#123;1, 2, 3&#125;</span><br><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>]);<br><span class=\"hljs-built_in\">console</span>.log(s);<br><br><span class=\"hljs-comment\">// 再将Set实例转换为数组</span><br><span class=\"hljs-comment\">// ①使用forEach</span><br><span class=\"hljs-keyword\">let</span> arr=[];<br>s.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>)=&gt;</span>arr.push(value));<br><span class=\"hljs-comment\">// ②使用展开语法</span><br><span class=\"hljs-built_in\">console</span>.log([...s]);<br><br><span class=\"hljs-comment\">// 2.字符串去重</span><br><span class=\"hljs-keyword\">const</span> s1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(<span class=\"hljs-string\">&#x27;abbacd&#x27;</span>);<br><span class=\"hljs-comment\">// 将s1转为数组后，再用数组的join方法转为字符串</span><br><span class=\"hljs-built_in\">console</span>.log([...s1].join(<span class=\"hljs-string\">&quot;&quot;</span>));<br><br><span class=\"hljs-comment\">// 3.存放dom元素</span><br><span class=\"hljs-keyword\">const</span> s2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&quot;p&quot;</span>));<br><span class=\"hljs-comment\">// 使用forEach改变p标签文本颜色</span><br>s2.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">elem</span>)=&gt;</span>elem.style.color=<span class=\"hljs-string\">&#x27;red&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><strong><code>Map</code></strong> 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive\">原始值</a>) 都可以作为一个键或一个值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.Map和对象本质上都是键值对的集合</span><br><span class=\"hljs-comment\">// 对象</span><br><span class=\"hljs-keyword\">const</span> person=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;alex&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">19</span><br>&#125;<br><span class=\"hljs-comment\">// Map</span><br><span class=\"hljs-keyword\">const</span> m=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br>m.set(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;alex&#x27;</span>);<br>m.set(<span class=\"hljs-string\">&#x27;age&#x27;</span>,<span class=\"hljs-number\">18</span>);<br><span class=\"hljs-built_in\">console</span>.log(m);<br><br><span class=\"hljs-comment\">// 2.Map和对象的区别</span><br><span class=\"hljs-comment\">// 对象一般使用字符串当做键</span><br><span class=\"hljs-keyword\">const</span> obj=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;alex&#x27;</span><br>&#125;<br><br><span class=\"hljs-comment\">// Map的键可以为基本数据类型，也可以为引用数据类型。</span><br><span class=\"hljs-comment\">// 基本数据类型：数字、字符串、布尔值、undefined、null</span><br><span class=\"hljs-comment\">// 引用数据类型：对象、数组、Set、Map、函数等</span><br><span class=\"hljs-keyword\">const</span> mm=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br>mm.set(<span class=\"hljs-literal\">true</span>,<span class=\"hljs-string\">&#x27;true&#x27;</span>);<br>mm.set(&#123;&#125;,<span class=\"hljs-string\">&#x27;object&#x27;</span>);<br>mm.set(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]),<span class=\"hljs-string\">&#x27;set&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(mm);<br><span class=\"hljs-comment\">// &#123;true =&gt; &quot;true&quot;, &#123;…&#125; =&gt; &quot;object&quot;, Set(2) =&gt; &quot;set&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方法和属性\"><a href=\"#方法和属性\" class=\"headerlink\" title=\"方法和属性\"></a>方法和属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.set方法</span><br><span class=\"hljs-comment\">// 使用set添加的新成员，键如果已经存在，后添加的键值对覆盖已有的</span><br><span class=\"hljs-keyword\">const</span> m=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br>m.set(<span class=\"hljs-string\">&quot;age&quot;</span>,<span class=\"hljs-number\">18</span>).set(<span class=\"hljs-literal\">true</span>,<span class=\"hljs-string\">&quot;true&quot;</span>).set(<span class=\"hljs-string\">&quot;age&quot;</span>,<span class=\"hljs-number\">20</span>);<br><span class=\"hljs-built_in\">console</span>.log(m);<br><br><span class=\"hljs-comment\">// 2.get方法，用于获取指定成员</span><br><span class=\"hljs-built_in\">console</span>.log(m.get(<span class=\"hljs-string\">&#x27;age&#x27;</span>)); <span class=\"hljs-comment\">//20</span><br><span class=\"hljs-built_in\">console</span>.log(m.get(<span class=\"hljs-literal\">true</span>)); <span class=\"hljs-comment\">//true</span><br><br><span class=\"hljs-comment\">// 3.has方法 用于判断是否有指定的键</span><br><span class=\"hljs-built_in\">console</span>.log(m.has(<span class=\"hljs-string\">&#x27;age&#x27;</span>));<br><br><span class=\"hljs-comment\">// 4.delete方法</span><br><span class=\"hljs-comment\">// 删除不存在的成员，什么都不会发生，也不会报错</span><br>m.delete(<span class=\"hljs-string\">&#x27;age&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(m);<br><br><span class=\"hljs-comment\">// 5.clear方法 删除所有的成员</span><br>m.clear();<br><br><span class=\"hljs-comment\">// 6.forEach()方法</span><br><span class=\"hljs-keyword\">const</span> mm=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br>mm.set(<span class=\"hljs-string\">&quot;age&quot;</span>,<span class=\"hljs-number\">12</span>).set(<span class=\"hljs-string\">&quot;gender&quot;</span>,<span class=\"hljs-string\">&quot;male&quot;</span>).set(<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;xiaoming&quot;</span>);<br>mm.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index,map</span>)=&gt;</span><span class=\"hljs-built_in\">console</span>.log(value,index,map==mm));<br><span class=\"hljs-comment\">// 12 &quot;age&quot;  true</span><br><span class=\"hljs-comment\">// male gender true</span><br><span class=\"hljs-comment\">// xiaoming name true</span><br><br><span class=\"hljs-comment\">// 7.size属性</span><br><span class=\"hljs-built_in\">console</span>.log(mm.size); <span class=\"hljs-comment\">//3</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Map构造函数的参数\"><a href=\"#Map构造函数的参数\" class=\"headerlink\" title=\"Map构造函数的参数\"></a>Map构造函数的参数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.只能传二维数组，必须体现键和值</span><br><span class=\"hljs-keyword\">const</span> m1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;alex&quot;</span>],[<span class=\"hljs-string\">&quot;age&quot;</span>,<span class=\"hljs-number\">18</span>]]);<br><span class=\"hljs-built_in\">console</span>.log(m1);<br><span class=\"hljs-comment\">// Map(2) &#123;&quot;name&quot; =&gt; &quot;alex&quot;, &quot;age&quot; =&gt; 18&#125;</span><br><br><span class=\"hljs-comment\">// 2.Set, Map等</span><br><span class=\"hljs-comment\">// Set中也必须体现键和值</span><br><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([[<span class=\"hljs-string\">&quot;gender&quot;</span>,<span class=\"hljs-string\">&quot;male&quot;</span>],[<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;xiaoming&quot;</span>]]);<br><span class=\"hljs-keyword\">const</span> m2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(s);<br><span class=\"hljs-built_in\">console</span>.log(m2); <br><span class=\"hljs-comment\">//Map(2) &#123;&quot;gender&quot; =&gt; &quot;male&quot;, &quot;name&quot; =&gt; &quot;xiaoming&quot;&#125;</span><br><br><span class=\"hljs-keyword\">const</span> m3=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(m1);<br><span class=\"hljs-built_in\">console</span>.log(m3, m3==m1);<br><span class=\"hljs-comment\">//Map(2) &#123;&quot;name&quot; =&gt; &quot;alex&quot;, &quot;age&quot; =&gt; 18&#125; false</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Map注意事项\"><a href=\"#Map注意事项\" class=\"headerlink\" title=\"Map注意事项\"></a>Map注意事项</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.Map中判断键名是否相同</span><br><span class=\"hljs-comment\">// 基本遵循严格相等(===)</span><br><span class=\"hljs-comment\">// 例外就是Map中NaN等于NaN</span><br><br><span class=\"hljs-keyword\">const</span> m1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();<br>m1.set(<span class=\"hljs-literal\">NaN</span>,<span class=\"hljs-number\">1</span>).set(<span class=\"hljs-literal\">NaN</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-built_in\">console</span>.log(m1); <span class=\"hljs-comment\">//Map(1) &#123;NaN =&gt; 2&#125;</span><br><br><span class=\"hljs-comment\">// 2.什么时候使用Map什么使用对象</span><br><span class=\"hljs-comment\">// 2.1如果只需要Key-&gt;Value结构</span><br><span class=\"hljs-comment\">// 2.2或者需要除了字符串以为的值做键，使用Map更合适</span><br><span class=\"hljs-comment\">// 只有模拟现实世界的实体的时候才会使用对象</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">const</span> [p1, p2, p3] = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;p&#x27;</span>);</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 二维数组做Map构造函数的参数</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([</span><br><span class=\"javascript\">    [p1, &#123; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;red&quot;</span>, <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">&quot;yellow&quot;</span>, <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">&quot;20px&quot;</span> &#125;],</span><br><span class=\"javascript\">    [p2, &#123; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;pink&quot;</span>, <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">&quot;orange&quot;</span>, <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">&quot;20px&quot;</span> &#125;],</span><br><span class=\"javascript\">    [p3, &#123; <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;green&quot;</span>, <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">&quot;blue&quot;</span>, <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">&quot;20px&quot;</span> &#125;]</span><br><span class=\"javascript\">]);</span><br><span class=\"javascript\">m.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, key</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> p <span class=\"hljs-keyword\">in</span> value)&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 有点难理解，多想想还是能理解的</span></span><br><span class=\"javascript\">        key.style[p]=value[p];</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">&#125;);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>SeT/Map总结</p>\n<p><img src=\"https://i.loli.net/2021/06/10/xEzm7YcGRnAQhOs.png\" alt=\"image-20210610175416433\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/E1XHQBYURp8IgjC.png\" alt=\"image-20210610175506099\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/JNXSG9yTZjbPFdK.png\" alt=\"image-20210610175655315\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/aXh4TLvYSuf1qQE.png\" alt=\"image-20210610175710050\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/FOBbacWuGtU1I23.png\" alt=\"image-20210610175745097\"></p>\n<p><img src=\"https://i.loli.net/2021/06/10/drQIFyD9Gmx2YJ7.png\" alt=\"image-20210610175848667\"></p>\n<h1 id=\"Iterator\"><a href=\"#Iterator\" class=\"headerlink\" title=\"Iterator\"></a>Iterator</h1><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610180623.png\" alt=\"image-20210610180620847\"></p>\n<h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>Iterator是如下的过程：Symbol.iterator(可遍历对象的生成方法)-&gt;it(可遍历对象)-&gt;next()-&gt;next()-&gt;(知道done为true)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 数组的.__proto__原型中有Symbol.iterator这个方法</span><br><span class=\"hljs-comment\">// 而这个方法不符合命名规范，因此用方括号来调用。</span><br><br><span class=\"hljs-comment\">// Symbol.iterator 可遍历对象的生成方法</span><br><span class=\"hljs-comment\">// it：可遍历对象 (可迭代对象)</span><br><span class=\"hljs-keyword\">const</span> it = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>][<span class=\"hljs-built_in\">Symbol</span>.iterator]();<br><span class=\"hljs-built_in\">console</span>.log(it); <span class=\"hljs-comment\">//Array Iterator &#123;&#125;</span><br><br><span class=\"hljs-comment\">// value表示值，done表示遍历还没有完成</span><br><span class=\"hljs-built_in\">console</span>.log(it.next());<span class=\"hljs-comment\">//&#123;value: 1, done: false&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(it.next()); <span class=\"hljs-comment\">//&#123;value: 2, done: false&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(it.next()); <span class=\"hljs-comment\">//&#123;value: undefined, done: true&#125;</span><br><br><br></code></pre></td></tr></table></figure>\n\n<p>为什么需要Iterator遍历器</p>\n<p>遍历数组： for循环、forEach方法 ，遍历对象：for in循环。Iterator 遍历器是一个统一的遍历方式</p>\n<h3 id=\"for-of-用法\"><a href=\"#for-of-用法\" class=\"headerlink\" title=\"for of 用法\"></a>for of 用法</h3><p>for of将下面Iterator过程封装起来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arr=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">const</span> it =arr[<span class=\"hljs-built_in\">Symbol</span>.iterator]();<br><span class=\"hljs-keyword\">let</span> next=it.next();<br><span class=\"hljs-keyword\">while</span>(!next.done)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(next.value);<br>    next=it.next();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>for of循环只会遍历出那些done为false时对应的value值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">of</span> arr)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>for of可以和break、continue一起使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arr2=[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>];<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">of</span> arr2)&#123;<br>    <span class=\"hljs-keyword\">if</span>(i===<span class=\"hljs-number\">7</span>)&#123;<br>        <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在for of循环中获取索引值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// keys()得到的是索引的可遍历对象，可以遍历出索引值</span><br><span class=\"hljs-keyword\">const</span> arr3=[<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;c&#x27;</span>,<span class=\"hljs-string\">&#x27;d&#x27;</span>];<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> keys <span class=\"hljs-keyword\">of</span> arr3.keys())&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(keys); <span class=\"hljs-comment\">//</span><br>&#125;<br><span class=\"hljs-comment\">// values()得到的是值的可遍历对象，可以遍历出值</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> value <span class=\"hljs-keyword\">of</span> arr3.values())&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(value); <span class=\"hljs-comment\">// a b c d</span><br>&#125;<br><span class=\"hljs-comment\">// entries()可以得到索引和值组成的数组的可遍历对象</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> entries <span class=\"hljs-keyword\">of</span> arr3.entries())&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(entries);<br>&#125;<br><span class=\"hljs-comment\">// 结合解构赋值</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [index, value] <span class=\"hljs-keyword\">of</span> arr3.entries())&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(index,value);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"可遍历\"><a href=\"#可遍历\" class=\"headerlink\" title=\"可遍历\"></a>可遍历</h3><p>只要有Symbol.iterator方法，并且这个方法可以生成可遍历对象，就是可遍历的。</p>\n<p>只要可遍历，就可以使用for…of循环来统一遍历。</p>\n<h4 id=\"原生可遍历\"><a href=\"#原生可遍历\" class=\"headerlink\" title=\"原生可遍历\"></a>原生可遍历</h4><p>数组、字符串、Set、Map、arguments、NodeList这些原生可遍历。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">of</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>])&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125; <span class=\"hljs-comment\">// 1 2 3</span><br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]))&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125; <span class=\"hljs-comment\">// 4 5 6</span><br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&#x27;p&#x27;</span>))&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>    i.style.color=<span class=\"hljs-string\">&#x27;red&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"非原生可遍历\"><a href=\"#非原生可遍历\" class=\"headerlink\" title=\"非原生可遍历\"></a>非原生可遍历</h4><p>没有Symbol.iterator属性的，可以为它手动添加该属性就可以使用for…of循环了。</p>\n<p>1.一般的对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person =&#123;<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>,<span class=\"hljs-attr\">sex</span>:<span class=\"hljs-string\">&#x27;male&#x27;</span>&#125;;<br><span class=\"hljs-comment\">// 给一般的对象手动添加Symbol.iterator属性</span><br>person[<span class=\"hljs-built_in\">Symbol</span>.iterator]=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> index=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">next</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>            index++;<br>            <span class=\"hljs-keyword\">if</span>(index===<span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-keyword\">return</span>&#123;<br>                    <span class=\"hljs-attr\">value</span>:person.age,<br>                    <span class=\"hljs-attr\">done</span>:<span class=\"hljs-literal\">false</span><br>                &#125;<br>            &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(index===<span class=\"hljs-number\">2</span>)&#123;<br>                <span class=\"hljs-keyword\">return</span>&#123;<br>                    <span class=\"hljs-attr\">value</span>:person.sex,<br>                    <span class=\"hljs-attr\">done</span>:<span class=\"hljs-literal\">false</span><br>                &#125;<br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                <span class=\"hljs-keyword\">return</span>&#123;<br>                    <span class=\"hljs-attr\">value</span>:<span class=\"hljs-literal\">undefined</span>,<br>                    <span class=\"hljs-attr\">done</span>:<span class=\"hljs-literal\">true</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> person)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(item);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2.有length和索引值的对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj=&#123;<br>    <span class=\"hljs-number\">0</span>:<span class=\"hljs-string\">&#x27;alex&#x27;</span>,<br>    <span class=\"hljs-number\">1</span>:<span class=\"hljs-string\">&#x27;male&#x27;</span>,<br>    <span class=\"hljs-attr\">length</span>:<span class=\"hljs-number\">2</span><br>&#125;<br>obj[<span class=\"hljs-built_in\">Symbol</span>.iterator]=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> index=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">next</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>            <span class=\"hljs-keyword\">let</span> value,done;<br>            <span class=\"hljs-keyword\">if</span>(index&lt;obj.length)&#123;<br>                value=obj[index];<br>                done=<span class=\"hljs-literal\">false</span><br>            &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>                done=<span class=\"hljs-literal\">true</span>;<br>            &#125;<br>            index++;<br>            <span class=\"hljs-keyword\">return</span>&#123;<br>                value,<br>                done<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 或者直接使用数组原型链的Symbol.iterator属性</span><br>obj[<span class=\"hljs-built_in\">Symbol</span>.iterator]=<span class=\"hljs-built_in\">Array</span>.prototype[<span class=\"hljs-built_in\">Symbol</span>.iterator];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">of</span> obj)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用Iterator的场合\"><a href=\"#使用Iterator的场合\" class=\"headerlink\" title=\"使用Iterator的场合\"></a>使用Iterator的场合</h3><p> 1.数组的展开运算符</p>\n<p>只要是原生可遍历的，就可以使用数组的展开运算。数组、字符串、Set、Map、arguments、NodeList这些原生可遍历。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(...[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">//1 2 3</span><br><span class=\"hljs-built_in\">console</span>.log(...<span class=\"hljs-string\">&quot;str&quot;</span>); <span class=\"hljs-comment\">// s t r</span><br><span class=\"hljs-built_in\">console</span>.log(...new <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]));<br></code></pre></td></tr></table></figure>\n\n<p>2.数组的解构赋值</p>\n<p>只要是原生可遍历的，就可以使用数组的进行解构赋值。因为可以在解构赋值前，进行展开运算让其变为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-keyword\">const</span> [a,b]=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>];<br><span class=\"hljs-comment\">// 在解构赋值前，&quot;hi&quot;进行了展开运算 [...&quot;hi&quot;]</span><br><span class=\"hljs-keyword\">const</span> [c,d]=<span class=\"hljs-string\">&quot;hi&quot;</span>;<br><span class=\"hljs-keyword\">const</span> [e,f]=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>]);<br><span class=\"hljs-built_in\">console</span>.log(a,b,c,d,e,f);<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Iterator总结\"><a href=\"#Iterator总结\" class=\"headerlink\" title=\"Iterator总结\"></a>Iterator总结</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222130.png\" alt=\"image-20210610222129343\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222157.png\" alt=\"image-20210610222156497\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222305.png\" alt=\"image-20210610222304196\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210610222325.png\" alt=\"image-20210610220808524\"></p>\n<h1 id=\"ES6新增方法\"><a href=\"#ES6新增方法\" class=\"headerlink\" title=\"ES6新增方法\"></a>ES6新增方法</h1><h2 id=\"字符串的新增方法\"><a href=\"#字符串的新增方法\" class=\"headerlink\" title=\"字符串的新增方法\"></a>字符串的新增方法</h2><h3 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a>includes()</h3><p><strong><code>includes()</code></strong> 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.基本用法</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;abc&#x27;</span>.includes(<span class=\"hljs-string\">&#x27;a&#x27;</span>)); <span class=\"hljs-comment\">//true</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;abc&#x27;</span>.includes(<span class=\"hljs-string\">&#x27;ab&#x27;</span>)); <span class=\"hljs-comment\">//true</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;abc&#x27;</span>.includes(<span class=\"hljs-string\">&#x27;ac&#x27;</span>)); <span class=\"hljs-comment\">//false</span><br><br><span class=\"hljs-comment\">// 2.第二个参数</span><br><span class=\"hljs-comment\">// 表示开始搜索的位置，默认是0</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;abc&#x27;</span>.includes(<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-number\">1</span>));<span class=\"hljs-comment\">//false</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"padStart-和padEnd\"><a href=\"#padStart-和padEnd\" class=\"headerlink\" title=\"padStart()和padEnd()\"></a>padStart()和padEnd()</h3><p><strong><code>padStart()</code></strong> 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">str.padStart(targetLength [, padString])<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><code>targetLength</code></p>\n<p>当前字符串需要填充到的目标长度。<strong>如果这个数值小于当前字符串的长度，则返回当前字符串本身。</strong></p>\n<p><code>padString</code> 可选</p>\n<p>填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 “ “（空格）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-string\">&#x27;abc&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>);         <span class=\"hljs-comment\">// &quot;       abc&quot;</span><br><span class=\"hljs-string\">&#x27;abc&#x27;</span>.padStart(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&quot;foo&quot;</span>);  <span class=\"hljs-comment\">// &quot;foofoofabc&quot;</span><br><span class=\"hljs-string\">&#x27;abc&#x27;</span>.padStart(<span class=\"hljs-number\">6</span>,<span class=\"hljs-string\">&quot;123465&quot;</span>); <span class=\"hljs-comment\">// &quot;123abc&quot;</span><br><span class=\"hljs-string\">&#x27;abc&#x27;</span>.padStart(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;0&quot;</span>);     <span class=\"hljs-comment\">// &quot;00000abc&quot;</span><br><span class=\"hljs-string\">&#x27;abc&#x27;</span>.padStart(<span class=\"hljs-number\">1</span>);          <span class=\"hljs-comment\">// &quot;abc&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong><code>padEnd()</code></strong> 方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</p>\n<h3 id=\"trimStart-和trimEnd\"><a href=\"#trimStart-和trimEnd\" class=\"headerlink\" title=\"trimStart()和trimEnd()\"></a>trimStart()和trimEnd()</h3><p><strong><code>trimStart()</code></strong> 方法从字符串的开头删除空格。<code>trimEnd() </code>方法从一个字符串的末端移除空白字符。**<code>trim()</code>** 方法会从一个字符串的两端删除空白字符。</p>\n<p><code>trimLeft()</code> 是<code>trimStart()</code>的别名。<code>trimRight()</code> 是<code>trimEnd() </code>的别名。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> s=<span class=\"hljs-string\">&quot;   abc  &quot;</span>;<br><span class=\"hljs-built_in\">console</span>.log(s.trimStart()); <span class=\"hljs-comment\">//&quot;abc  &quot;</span><br><span class=\"hljs-built_in\">console</span>.log(s.trimEnd()); <span class=\"hljs-comment\">//&quot;   abc&quot;</span><br><span class=\"hljs-built_in\">console</span>.log(s.trim()); <span class=\"hljs-comment\">//&quot;abc&quot;</span><br><span class=\"hljs-built_in\">console</span>.log(s); <span class=\"hljs-comment\">//&quot;   abc  &quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数组新增方法\"><a href=\"#数组新增方法\" class=\"headerlink\" title=\"数组新增方法\"></a>数组新增方法</h2><h3 id=\"includes-1\"><a href=\"#includes-1\" class=\"headerlink\" title=\"includes()\"></a>includes()</h3><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">arr.includes(valueToFind[, fromIndex])<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><code>valueToFind</code></p>\n<p>需要查找的元素值。<strong>Note:</strong> 使用 <code>includes()</code>比较字符串和字符时是区分大小写。</p>\n<p><code>fromIndex</code> 可选</p>\n<p>从<code>fromIndex</code> 索引处开始查找 <code>valueToFind</code>。如果为负值，则按升序从 <code>array.length + fromIndex</code> 的索引开始搜 。如果计算出的索引小于 0，则整个数组都会被搜索。默认为 0。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].includes(<span class=\"hljs-number\">2</span>);     <span class=\"hljs-comment\">// true</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].includes(<span class=\"hljs-number\">4</span>);     <span class=\"hljs-comment\">// false</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].includes(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">// false</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].includes(<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// true</span><br>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">NaN</span>].includes(<span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from()\"></a>Array.from()</h3><p><code>Array.from()</code> 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Array</span>.from(arrayLike[, mapFn[, thisArg]])<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><code>arrayLike</code></p>\n<p>想要转换成数组的伪数组对象或可迭代对象。</p>\n<p><code>mapFn</code> 可选</p>\n<p>如果指定了该参数，新数组中的每个元素会执行该回调函数。</p>\n<p><code>thisArg</code> 可选</p>\n<p>可选参数，执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//从 String 生成数组</span><br><span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-string\">&#x27;foo&#x27;</span>);<br><span class=\"hljs-comment\">// [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]</span><br><br><span class=\"hljs-comment\">//从Set生成数组</span><br><span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-string\">&#x27;foo&#x27;</span>, <span class=\"hljs-string\">&#x27;bar&#x27;</span>, <span class=\"hljs-string\">&#x27;baz&#x27;</span>, <span class=\"hljs-string\">&#x27;foo&#x27;</span>]);<br><span class=\"hljs-built_in\">Array</span>.from(set);<br><span class=\"hljs-comment\">// [ &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot; ]</span><br>[...new <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>])]; <span class=\"hljs-comment\">//使用展开语法会更方便</span><br><br><span class=\"hljs-comment\">//从 Map 生成数组</span><br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>]]);<br><span class=\"hljs-built_in\">Array</span>.from(map);<br><span class=\"hljs-comment\">// [[1, 2], [2, 4], [4, 8]]</span><br><br><span class=\"hljs-keyword\">const</span> mapper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>], [<span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>]]);<br><span class=\"hljs-built_in\">Array</span>.from(mapper.values());<br><span class=\"hljs-comment\">// [&#x27;a&#x27;, &#x27;b&#x27;];</span><br><br><span class=\"hljs-built_in\">Array</span>.from(mapper.keys());<br><span class=\"hljs-comment\">// [&#x27;1&#x27;, &#x27;2&#x27;];</span><br></code></pre></td></tr></table></figure>\n\n<p>拥有length的任意对象都可以通过Array.from()转换为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> obj=&#123;<span class=\"hljs-attr\">length</span>:<span class=\"hljs-number\">2</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(obj)); <br><span class=\"hljs-comment\">// [undefined, undefined]</span><br><br><span class=\"hljs-keyword\">const</span> obj1=&#123;<span class=\"hljs-attr\">length</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>:<span class=\"hljs-string\">&quot;liu&quot;</span>,<span class=\"hljs-number\">1</span>:<span class=\"hljs-string\">&quot;jiaqi&quot;</span>,<span class=\"hljs-number\">3</span>:<span class=\"hljs-string\">&quot;haha&quot;</span>&#125;;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(obj1)); <span class=\"hljs-comment\">//[&quot;liu&quot;, &quot;jiaqi&quot;]</span><br></code></pre></td></tr></table></figure>\n\n<p>在Array.from()中使用箭头函数</p>\n<p>作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在Array.from()中使用箭头函数</span><br><span class=\"hljs-comment\">// 作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组中。</span><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>].map(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>)=&gt;</span>value*<span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">//2 4 6</span><br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Array</span>.from(&#123;<span class=\"hljs-attr\">length</span>:<span class=\"hljs-number\">4</span>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">value,index</span>)=&gt;</span>value=index*<span class=\"hljs-number\">2</span>));<br><span class=\"hljs-comment\">// 0 2 4 6</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"find-和findIndex\"><a href=\"#find-和findIndex\" class=\"headerlink\" title=\"find()和findIndex()\"></a>find()和findIndex()</h3><p> <code>find()</code> 方法返回数组中满足提供的测试函数的<strong>第一个元素</strong>的值，否则返回undefined。</p>\n<p><code>findIndex()</code>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。若没有找到对应元素则返回-1。</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">arr.find(callback[, thisArg])<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><code>callback</code>在数组每一项上执行的函数，接收 3 个参数：</p>\n<ul>\n<li><code>element</code>当前遍历到的元素。</li>\n<li><code>index</code>可选 当前遍历到的索引。</li>\n<li><code>array</code>可选 数组本身。</li>\n</ul>\n<p><code>thisArg</code>可选,执行回调时用作<code>this</code> 的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//返回找到的第一个质数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isPrime</span>(<span class=\"hljs-params\">element, index, array</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> start = <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-keyword\">while</span> (start &lt;= <span class=\"hljs-built_in\">Math</span>.sqrt(element)) &#123;<br>    <span class=\"hljs-keyword\">if</span> (element % start++ &lt; <span class=\"hljs-number\">1</span>) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> element &gt; <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">12</span>].find(isPrime)); <span class=\"hljs-comment\">// undefined, not found</span><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">12</span>].find(isPrime)); <span class=\"hljs-comment\">// 5</span><br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//用对象的属性查找数组里的对象</span><br><span class=\"hljs-keyword\">var</span> inventory = [<br>    &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;apples&#x27;</span>, <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">2</span>&#125;,<br>    &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;bananas&#x27;</span>, <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">0</span>&#125;,<br>    &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;cherries&#x27;</span>, <span class=\"hljs-attr\">quantity</span>: <span class=\"hljs-number\">5</span>&#125;<br>];<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findCherries</span>(<span class=\"hljs-params\">fruit</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> fruit.name === <span class=\"hljs-string\">&#x27;cherries&#x27;</span>;<br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.log(inventory.find(findCherries)); <span class=\"hljs-comment\">// &#123; name: &#x27;cherries&#x27;, quantity: 5 &#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"对象的新增方法\"><a href=\"#对象的新增方法\" class=\"headerlink\" title=\"对象的新增方法\"></a>对象的新增方法</h2><h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p>\n<p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。</p>\n<blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.assign(target, ...sources)<br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> apple = &#123;<br>    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;red&quot;</span>,<br>    <span class=\"hljs-attr\">taste</span>: <span class=\"hljs-string\">&quot;sweet&quot;</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> banana = &#123;<br>    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&quot;yellow&quot;</span>,<br>    <span class=\"hljs-attr\">category</span>: <span class=\"hljs-string\">&quot;fruit&quot;</span><br>&#125;<br><span class=\"hljs-comment\">// Object.assign直接合并到了第一个对象中，返回的就是合并后的对象</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(apple,banana));<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(apple,banana)===apple); <br><span class=\"hljs-comment\">//因为此时的apple 已经被改变了 true</span><br><br><span class=\"hljs-comment\">// 对象是引用类型的，Object.assign会直接修改第一个对象。</span><br><span class=\"hljs-comment\">// 如果想要原来的对象不被修改，可以第一个参数放空对象</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,apple,banana));<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Object.assign(目标对象，源对象);</span><br><span class=\"hljs-comment\">// 1.基本数据类型作为源对象</span><br><span class=\"hljs-comment\">// 与对象的展开类似，先转换为对象，再合并</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,<span class=\"hljs-literal\">undefined</span>)); <span class=\"hljs-comment\">//&#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,<span class=\"hljs-literal\">null</span>)); <span class=\"hljs-comment\">//&#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,<span class=\"hljs-number\">22</span>)); <span class=\"hljs-comment\">//&#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,<span class=\"hljs-number\">22</span>)); <span class=\"hljs-comment\">//&#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,<span class=\"hljs-string\">&quot;str&quot;</span>)); <span class=\"hljs-comment\">//&#123;0: &quot;s&quot;, 1: &quot;t&quot;, 2: &quot;r&quot;&#125;</span><br><br><span class=\"hljs-comment\">// 2.同名属性的替换</span><br><span class=\"hljs-comment\">// 后面的属性直接覆盖前面的属性</span><br><span class=\"hljs-keyword\">const</span> apple = &#123;<br>    <span class=\"hljs-attr\">color</span>: [<span class=\"hljs-string\">&quot;蓝色&quot;</span>,<span class=\"hljs-string\">&quot;紫色&quot;</span>],<br>    <span class=\"hljs-attr\">taste</span>: <span class=\"hljs-string\">&quot;sweet&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> banana = &#123;<br>    <span class=\"hljs-attr\">color</span>: [<span class=\"hljs-string\">&quot;红色&quot;</span>,<span class=\"hljs-string\">&quot;黄色&quot;</span>],<br>    <span class=\"hljs-attr\">category</span>: <span class=\"hljs-string\">&quot;fruit&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign(apple,banana)); <span class=\"hljs-comment\">//&#123;color:[&quot;红色&quot;, &quot;黄色&quot;], taste: &quot;sweet&quot;, category: &quot;fruit&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> user=<span class=\"hljs-function\"><span class=\"hljs-params\">useroptions</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> defaults=&#123;<br>        <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;alex&quot;</span>,<br>        <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">0</span>,<br>        <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&quot;male&quot;</span><br>    &#125;<br>    <span class=\"hljs-keyword\">const</span> options=<span class=\"hljs-built_in\">Object</span>.assign(&#123;&#125;,defaults,useroptions);<br>    <span class=\"hljs-built_in\">console</span>.log(options);<br>&#125;;<br>user();<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Object-keys-、Object-values-、Object-entries\"><a href=\"#Object-keys-、Object-values-、Object-entries\" class=\"headerlink\" title=\"Object.keys()、Object.values()、Object.entries()\"></a>Object.keys()、Object.values()、Object.entries()</h3><h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Alex&quot;</span>,<br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.keys(person)); <span class=\"hljs-comment\">// [&quot;name&quot;, &quot;age&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.values(person)); <span class=\"hljs-comment\">// [&quot;Alex&quot;, 18]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.entries(person)); <span class=\"hljs-comment\">// [ [&quot;name&quot;, &quot;Alex&quot;],[&quot;age&quot;, 18]]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"与数组的类似方法的区别\"><a href=\"#与数组的类似方法的区别\" class=\"headerlink\" title=\"与数组的类似方法的区别\"></a>与数组的类似方法的区别</h4><p>数组的keys(), values(), entries()等方法都是实例方法，返回的都是可遍历对象。对象的Object.keys(), Object.values(),Object.values()等方法返回的都是数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 2.与数组类似的方法的区别</span><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>].keys()); <span class=\"hljs-comment\">// 返回可遍历对象</span><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>].values()); <span class=\"hljs-comment\">// 返回可遍历对象</span><br><span class=\"hljs-built_in\">console</span>.log([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>].entries()); <span class=\"hljs-comment\">// 返回可遍历对象</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> person=&#123;<br><span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;Alex&quot;</span>,<br><span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span><br>&#125;<br><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> [key,value] <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">Object</span>.entries(person))&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(key,value)<br>&#125;<br><br><span class=\"hljs-comment\">// Object.keys(), Object.values(), Object.entires()</span><br><span class=\"hljs-comment\">// 这三个方法并不能保证顺序，和for...in 一样无法保证顺序</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"新增方法总结\"><a href=\"#新增方法总结\" class=\"headerlink\" title=\"新增方法总结\"></a>新增方法总结</h2><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160239.png\" alt=\"image-20210611160231073\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160311.png\" alt=\"image-20210611160310273\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160445.png\" alt=\"image-20210611160444694\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160657.png\" alt=\"image-20210611160655803\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160735.png\" alt=\"image-20210611160733628\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611160905.png\" alt=\"image-20210611160904401\"></p>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><h3 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>Promise 一般用来解决层层嵌套的回调函数(回调地狱callback hell)的问题。</p>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611181352.png\" alt=\"image-20210611181350553\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.实例化构造函数生成实例对象</span><br><span class=\"hljs-comment\">// Promise 解决的不是回调函数，而是用于解决回调地域的问题。</span><br><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(&#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;alex&#x27;</span> &#125;);<br>    <span class=\"hljs-comment\">// reject(new Error(&quot;reason&quot;));</span><br>&#125;);<br><span class=\"hljs-built_in\">console</span>.log(p);<br><span class=\"hljs-comment\">// 2.Promise的状态</span><br><span class=\"hljs-comment\">// Promise的状态一旦完成变化，就不会再改变了 </span><br><span class=\"hljs-comment\">// Promise有3种状态，一开始是pending(未完成),执行resolve,变成fulfilled(resolved)已成功, 执行reject，变成rejected，已失败</span><br><span class=\"hljs-comment\">// 执行resolve();</span><br><span class=\"hljs-comment\">// pending-&gt;fulfilled</span><br><span class=\"hljs-comment\">// 执行reject();</span><br><span class=\"hljs-comment\">// pending-&gt;rejected</span><br><br><span class=\"hljs-comment\">// 3.then()方法</span><br><span class=\"hljs-comment\">// 当Promise的状态变为fulfilled时，执行第一个then()方法</span><br><span class=\"hljs-comment\">// 当Promise的状态变为rejected时，执行第二个then()方法</span><br>p.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;success&quot;</span>, data);<br>&#125;, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;error&quot;</span>,err);<br>&#125;);<br><br><span class=\"hljs-comment\">// 4.resolve和reject函数的参数</span><br><span class=\"hljs-comment\">// 执行resole或者reject函数所传的参数，可以被then中的回调函数接收</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then()\"></a>then()</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611183500.png\" alt=\"image-20210611183459134\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210611183555.png\" alt=\"image-20210611183554286\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.then()什么时候执行</span><br><span class=\"hljs-comment\">// pending-&gt;fulfilled时，执行then的第一个回调函数</span><br><span class=\"hljs-comment\">// pending-&gt;rejected时，执行then的第二个回调函数</span><br><br><span class=\"hljs-comment\">// 2.执行后的返回值</span><br><span class=\"hljs-comment\">// then()执行后返回一个新的Promise对象，返回的新的Promise对象又可以继续调用then();</span><br><span class=\"hljs-keyword\">const</span> p =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>    reject();<br>&#125;);<br><span class=\"hljs-comment\">// 在then()的回调函数中，return后面的东西，会用Promise包装一下</span><br><span class=\"hljs-comment\">// return undefined 等价于 return new Promise((resolve)=&gt;&#123;resolve(undefined);&#125;);</span><br><span class=\"hljs-comment\">// then()执行后返回新的Promise对象，新的Promise对象调用then，默认会返回成功状态的Promise对象</span><br><span class=\"hljs-comment\">// 如果想要返回失败状态的Promise对象，return的时候写完整。return new Promise((resolve,reject)=&gt;&#123;reject();&#125;)</span><br><br>p.then(<br>    <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;success1&#x27;</span>);<br>    &#125;,<br>    <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;error1&#x27;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">123</span>;<br>    &#125;<br>).then(<br>    <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;success2&#x27;</span>,data);<br>    &#125;,<br>    <span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;error2&#x27;</span>);<br>    &#125;<br>);<br><br><span class=\"hljs-comment\">// 3.then()方法返回的Promise对象的状态是如何改变的</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用Promise解决回调地狱\"><a href=\"#使用Promise解决回调地狱\" class=\"headerlink\" title=\"使用Promise解决回调地狱\"></a>使用Promise解决回调地狱</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Promise 一般用来解决层层嵌套的回调函数(回调地狱callback hell)的问题</span><br><span class=\"hljs-keyword\">const</span> move = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, &#123; x = <span class=\"hljs-number\">0</span>, y = <span class=\"hljs-number\">0</span> &#125; = &#123;&#125;, end = () =&gt; &#123; &#125;</span>) =&gt;</span> &#123;<br>    el.style.transform = <span class=\"hljs-string\">`translate3d(<span class=\"hljs-subst\">$&#123;x&#125;</span>px,<span class=\"hljs-subst\">$&#123;y&#125;</span>px,0)`</span>;<br>    el.addEventListener(<br>        <span class=\"hljs-string\">&#x27;transitionend&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>            end();<br>        &#125;, <span class=\"hljs-literal\">false</span><br>    );<br>&#125;;<br><span class=\"hljs-keyword\">const</span> box = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;box&quot;</span>);<br><span class=\"hljs-comment\">// document.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class=\"hljs-comment\">//     move(box,&#123;x:150&#125;,()=&gt;&#123;</span><br><span class=\"hljs-comment\">//         move(box,&#123;x:150,y:150&#125;,()=&gt;&#123;</span><br><span class=\"hljs-comment\">//             move(box,&#123;y:150&#125;,()=&gt;&#123;</span><br><span class=\"hljs-comment\">//                 move(box,&#123;x:0,y:0&#125;);</span><br><span class=\"hljs-comment\">//             &#125;)</span><br><span class=\"hljs-comment\">//         &#125;)</span><br><span class=\"hljs-comment\">//     &#125;)</span><br><span class=\"hljs-comment\">// &#125;,false);</span><br><span class=\"hljs-keyword\">const</span> movePromise = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, point</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123;<br>        move(el, point, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>            resolve();<br>        &#125;)<br>    &#125;)<br>&#125;<br><br><span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    movePromise(box, &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">150</span> &#125;).then(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> movePromise(box, &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">150</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">150</span> &#125;)<br>    &#125;).then(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> movePromise(box, &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">150</span> &#125;)<br>    &#125;).then(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> movePromise(box, &#123; <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span> &#125;)<br>    &#125;);<br>&#125;, <span class=\"hljs-literal\">false</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"catch\"><a href=\"#catch\" class=\"headerlink\" title=\"catch()\"></a>catch()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.尽管then()方法的第一个回调函数可以传成功后执行的回调函数，第二个传失败后执行的回调函数</span><br><span class=\"hljs-comment\">// 2.但为了更好地语义化，一般只在then()中传成功后执行的，catch()传reject()后执行的回调函数</span><br><span class=\"hljs-comment\">// catch专门用来处理rejected的状态，catch的本质是then的特例</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// resolve(123);</span><br>    reject(<span class=\"hljs-string\">&#x27;reason&#x27;</span>);<br>&#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>    <span class=\"hljs-comment\">// 同样会默认返回一个成功的Promise对象。</span><br>    <span class=\"hljs-comment\">// 如果想要返回一个错误的Promise对象</span><br>    <span class=\"hljs-comment\">// 可以throw一个错误</span><br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;errrrr&#x27;</span>);<br>&#125;);<br><span class=\"hljs-comment\">// 3.catch()可以捕获前面的错误</span><br><span class=\"hljs-comment\">// 一般总是Promise对象后面要跟着catch方法，这样可以处理Promise内部发生的错误</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-resolve-和Promise-reject\"><a href=\"#Promise-resolve-和Promise-reject\" class=\"headerlink\" title=\"Promise.resolve()和Promise.reject()\"></a>Promise.resolve()和Promise.reject()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.Promise.resolve()</span><br><span class=\"hljs-comment\">// 是成功状态Promise的一种简写形式</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> &#123; resolve(<span class=\"hljs-string\">&quot;foo&quot;</span>); &#125;);<br><span class=\"hljs-comment\">// 简写</span><br><span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-string\">&quot;foo&quot;</span>);<br><br><span class=\"hljs-comment\">//① 参数：一般参数</span><br><span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-string\">&quot;foo&quot;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(data));<br><span class=\"hljs-comment\">//②当Promise.resolve()接收的是Promise对象时，直接返回的是这个Promise对象，什么也不做</span><br><span class=\"hljs-keyword\">const</span> p1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">setTimeout</span>(resolve, <span class=\"hljs-number\">1000</span>, <span class=\"hljs-string\">&quot;我执行了&quot;</span>);<br>&#125;);<br><span class=\"hljs-built_in\">Promise</span>.resolve(p1).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Promise</span>.resolve(p1) === p1); <span class=\"hljs-comment\">//true</span><br><span class=\"hljs-comment\">// 当resolve函数接收的是Promise对象时，后面的then会根据传递的Promise对象的状态变化决定执行哪一个回调</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> resolve(p1)).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123; <span class=\"hljs-built_in\">console</span>.log(data) &#125;);<br><br><span class=\"hljs-comment\">// ③具有then方法的对象，对象中的then()方法和new Promise()差不多</span><br><span class=\"hljs-keyword\">const</span> thenable=&#123;<br>    <span class=\"hljs-comment\">// 和new Promise()里的参数差不多</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">then</span>(<span class=\"hljs-params\">resolve, reject</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;thenable&quot;</span>);<br>        resolve(<span class=\"hljs-string\">&quot;123&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-built_in\">Promise</span>.resolve(thenable).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span><span class=\"hljs-built_in\">console</span>.log(data),<span class=\"hljs-function\"><span class=\"hljs-params\">err</span>=&gt;</span><span class=\"hljs-built_in\">console</span>.log(err));<br><br><span class=\"hljs-comment\">// 2.Promise.reject();</span><br><span class=\"hljs-comment\">// 是失败状态的一种简写形式</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;<br>    reject(<span class=\"hljs-string\">&#x27;reason&#x27;</span>);<br>&#125;);<br><span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-string\">&#x27;reason&#x27;</span>);<br><span class=\"hljs-comment\">// 不管什么参数都会原封不动的向后传递，作为后续方法的参数</span><br><span class=\"hljs-built_in\">Promise</span>.reject(p1).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Promise.all()用来关注多个Promise对象的状态变化</span><br><span class=\"hljs-comment\">// 可以传入多个Promise实例，包装成一个新的Promise对象返回</span><br><span class=\"hljs-keyword\">const</span> delay=<span class=\"hljs-function\"><span class=\"hljs-params\">ms</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(resolve,ms);<br>    &#125;)<br>&#125;;<br><span class=\"hljs-keyword\">const</span> p1=delay(<span class=\"hljs-number\">1000</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;p1 finished&#x27;</span>);<br>    <span class=\"hljs-comment\">// return Promise.reject(&quot;uifsf&quot;);</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;我是p1&#x27;</span>;<br>&#125;);<br><span class=\"hljs-keyword\">const</span> p2=delay(<span class=\"hljs-number\">2000</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;p2 finished&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;我是p2&#x27;</span>;<br>&#125;);<br><span class=\"hljs-comment\">// Promise.all()的状态变化与所有传入的Promise实例对象状态变化有关</span><br><span class=\"hljs-comment\">// 所有状态都变成了resolved，最终的状态才会变为resolved</span><br><span class=\"hljs-comment\">// 只要有一个变成了rejected，最终的状态才会变为rejected</span><br><br><span class=\"hljs-comment\">// 要给Promise.all()中传入数组，或者任何可遍历的参数</span><br><span class=\"hljs-keyword\">const</span> p=<span class=\"hljs-built_in\">Promise</span>.all([p1,p2]);<br>p.then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race-和Promise-allSettled\"><a href=\"#Promise-race-和Promise-allSettled\" class=\"headerlink\" title=\"Promise.race()和Promise.allSettled()\"></a>Promise.race()和Promise.allSettled()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.Promise.race()</span><br><span class=\"hljs-keyword\">const</span> delay=<span class=\"hljs-function\"><span class=\"hljs-params\">ms</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(resolve,ms);<br>    &#125;);<br>&#125;;<br><span class=\"hljs-keyword\">const</span> p1=delay(<span class=\"hljs-number\">1000</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;p1 finished&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;我是p1&quot;</span>;<br>&#125;);<br><span class=\"hljs-keyword\">const</span> p2=delay(<span class=\"hljs-number\">2000</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;p2 finised&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;我是p2&quot;</span>;<br>&#125;);<br><span class=\"hljs-comment\">// Promise.race()的状态取决于第一个完成的Promise实例对象</span><br><span class=\"hljs-comment\">// 如果第一个完成的成功了，就是最终的成功</span><br><span class=\"hljs-comment\">// 如果第一个完成的失败了，就是最终的失败</span><br><span class=\"hljs-keyword\">const</span> racePromise=<span class=\"hljs-built_in\">Promise</span>.race([p1,p2]);<br>racePromise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 2.Promise.allSetted()</span><br><span class=\"hljs-keyword\">const</span> delay=<span class=\"hljs-function\"><span class=\"hljs-params\">ms</span>=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span>=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(resolve,ms);<br>    &#125;);<br>&#125;;<br><span class=\"hljs-keyword\">const</span> p1=delay(<span class=\"hljs-number\">1000</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;p1 finished&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-string\">&quot;fjsf&quot;</span>);<br>    <span class=\"hljs-comment\">// return &quot;我是p1&quot;;</span><br>&#125;);<br><br><span class=\"hljs-keyword\">const</span> p2=delay(<span class=\"hljs-number\">200</span>).then(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;p2 finished&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;我是p2&quot;</span>;<br>&#125;);<br><br><span class=\"hljs-keyword\">const</span> allSettedPromise=<span class=\"hljs-built_in\">Promise</span>.allSettled([p1,p2]);<br><span class=\"hljs-comment\">// Promise.allSetted()的状态与传入的Promise的状态无关</span><br><span class=\"hljs-comment\">// 永远都是成功的，它只会忠实的记录各个Promise的表现</span><br><br>allSettedPromise.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;succeed&quot;</span>,data);<br>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;fail&quot;</span>,err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210612210208.png\" alt=\"image-20210612210200175\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.resolve和reject函数执行后的代码</span><br><span class=\"hljs-comment\">// 推荐在调用resolve或reject函数的时候加上return，不再执行它们后面的代码</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class=\"hljs-number\">123</span>);<br>    <span class=\"hljs-comment\">// reject(&quot;reason&quot;);</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hi&quot;</span>); <span class=\"hljs-comment\">//还可以执行</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 2.Promise.all/race/allSettled的参数</span><br><span class=\"hljs-comment\">// 参数如果不是Promise数组，会将不是Promise的数组元素转变成Promise对象</span><br><span class=\"hljs-comment\">// Promise.all([1,2,3]).then(datas=&gt;&#123;</span><br><span class=\"hljs-comment\">//     console.log(datas);</span><br><span class=\"hljs-comment\">// &#125;);</span><br><span class=\"hljs-comment\">// 等价于</span><br><span class=\"hljs-built_in\">Promise</span>.all([<br>    <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">1</span>),<br>    <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">2</span>),<br>    <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">3</span>)<br>]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;) <span class=\"hljs-comment\">//[1,2,3]</span><br><br><span class=\"hljs-comment\">// 除了数组，任何可遍历的都可以作为数组</span><br><span class=\"hljs-comment\">// 数组、字符串、Set、Map、NodeList、arguments</span><br><span class=\"hljs-built_in\">Promise</span>.all(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;) <span class=\"hljs-comment\">//[1,2,3]</span><br><br><span class=\"hljs-comment\">// 3.Promise.all/race/allsettled错误处理</span><br><span class=\"hljs-comment\">// 错误既可以单独处理，也可以统一处理</span><br><span class=\"hljs-comment\">// 一旦被处理，就不会再处理一遍</span><br><span class=\"hljs-keyword\">const</span> delay = <span class=\"hljs-function\"><span class=\"hljs-params\">ms</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">setTimeout</span>(resolve, ms);<br>    &#125;);<br>&#125;;<br><span class=\"hljs-keyword\">const</span> p1 = delay(<span class=\"hljs-number\">1000</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;p1 finished&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;我是P1&quot;</span>;<br>&#125;);<br><span class=\"hljs-keyword\">const</span> p2 = delay(<span class=\"hljs-number\">2000</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;p2 finished&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-string\">&#x27;rej&#x27;</span>);<br><br>&#125;);<br><br><span class=\"hljs-keyword\">const</span> allPromise = <span class=\"hljs-built_in\">Promise</span>.all([p1, p2]);<br>allPromise.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">datas</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(datas);<br>&#125;).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>Promise应用异步加载图片</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\"></span><br><span class=\"css\">        <span class=\"hljs-selector-id\">#img</span>&#123;</span><br><span class=\"css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">80%</span>;</span><br><span class=\"css\">            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10%</span>;</span><br><span class=\"css\">        &#125;</span><br><span class=\"css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;img&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://img.mukewang.com/szimg/5feb016d097497d905400304.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 1.异步加载图片</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> loadImgAsync=<span class=\"hljs-function\"><span class=\"hljs-params\">url</span>=&gt;</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// Image()函数将会创建一个新的HTMLImageElement实例。</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 它的功能等价于 document.createElement(&#x27;img&#x27;)</span></span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">const</span> img=<span class=\"hljs-keyword\">new</span> Image();</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// Promise函数中不用写具体过程，只需要决定用resolve还是reject即可</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// onload 属性是一个事件处理程序用于处理Window, XMLHttpRequest, &lt;img&gt; 等元素的加载事件，当资源已加载时被触发。     </span></span><br><span class=\"javascript\">                img.onload=<span class=\"hljs-function\">()=&gt;</span>&#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;sb&quot;</span>);</span><br><span class=\"javascript\">                    resolve(img);</span><br><span class=\"javascript\">                &#125;;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 当一项资源（如&lt;img&gt;或&lt;script&gt;）加载失败，加载资源的元素会触发一个Event接口的error事件，并执行该元素上的onerror()处理函数。</span></span><br><span class=\"javascript\">                img.onerror=<span class=\"hljs-function\">()=&gt;</span>&#123;</span><br><span class=\"javascript\">                    reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`couldn&#x27;t load image at <span class=\"hljs-subst\">$&#123;url&#125;</span>`</span>));</span><br><span class=\"javascript\">                &#125;</span><br><span class=\"javascript\">                img.src=url;</span><br><span class=\"javascript\">            &#125;);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> url1=<span class=\"hljs-string\">&#x27;https://img4.mukewang.com/szimg/60b9864a09995aa605400304.png&#x27;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> imgDom=<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;img&#x27;</span>);</span><br><span class=\"javascript\">        loadImgAsync(url1).then(<span class=\"hljs-function\"><span class=\"hljs-params\">img</span>=&gt;</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(img.src);</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;</span><br><span class=\"javascript\">                imgDom.src=img.src;</span><br><span class=\"javascript\">            &#125;,<span class=\"hljs-number\">1000</span>);</span><br><span class=\"javascript\">        &#125;).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span>=&gt;</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(err);</span><br><span class=\"javascript\">        &#125;);</span><br><span class=\"javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141556.png\" alt=\"image-20210613141548090\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141646.png\" alt=\"image-20210613141645235\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141718.png\" alt=\"image-20210613141717621\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613141850.png\" alt=\"image-20210613141849863\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142008.png\" alt=\"image-20210613142007368\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142051.png\" alt=\"image-20210613142050967\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142136.png\" alt=\"image-20210613142135558\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142151.png\" alt=\"image-20210613142150152\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613142217.png\" alt=\"image-20210613142216303\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163043.png\" alt=\"image-20210613163042772\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163154.png\" alt=\"image-20210613163153293\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163220.png\" alt=\"image-20210613163219353\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163246.png\" alt=\"image-20210613163245239\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210613163304.png\" alt=\"image-20210613163303168\"></p>\n<h1 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h1><h3 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><strong>class 声明</strong>创建一个基于原型继承的具有给定名称的新类。</p>\n<p>要注意类的写法，并没有圆括号直接跟上了花括号，方法和方法之间不需要用逗号分隔。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 类可以看做是对象的模板，用一个类可以创建出许多不同的对象</span><br><span class=\"hljs-comment\">// 类名一般来说，首字母是大写的</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-comment\">// 实例化时必须执行构造方法，所以必须有构造方法，但是可以不写出来</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name,age</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name=name;<br>        <span class=\"hljs-built_in\">this</span>.age=age;<br>        <span class=\"hljs-comment\">// 一般只在构造方法中定义属性，方法不在构造方法中定义</span><br>    &#125;<br>    <span class=\"hljs-comment\">// 各个实例共用的方法</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;speak&#x27;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 实例对象</span><br><span class=\"hljs-keyword\">const</span> zs=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;张三&#x27;</span>,<span class=\"hljs-number\">18</span>);<br><span class=\"hljs-keyword\">const</span> ls=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;ls&#x27;</span>,<span class=\"hljs-number\">58</span>);<br><span class=\"hljs-built_in\">console</span>.log(zs.speak===ls.speak); <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<p>声明的Person类本质上是一个函数，和构造函数差不多。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> Person); <span class=\"hljs-comment\">//function</span><br><span class=\"hljs-built_in\">console</span>.log(Person.prototype.speak);<br></code></pre></td></tr></table></figure>\n\n<p>对比一下Person构造函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 构造函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person1</span>(<span class=\"hljs-params\">name,age</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name=name;<br>    <span class=\"hljs-built_in\">this</span>.age=age;<br>&#125;<br>Person1.prototype.speak=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;speak&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2种定义形式\"><a href=\"#2种定义形式\" class=\"headerlink\" title=\"2种定义形式\"></a>2种定义形式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.声明形式</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br><br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 2.表达式形式</span><br><span class=\"hljs-keyword\">const</span> Person1=<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"立即执行的类\"><a href=\"#立即执行的类\" class=\"headerlink\" title=\"立即执行的类\"></a>立即执行的类</h3><p>类也可以像立即执行的匿名函数一样立即执行，但要记得在类前面加上关键字<code>new</code>，否则会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 立即执行的类</span><br><span class=\"hljs-keyword\">new</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;hahah&quot;</span>);<br>    &#125;<br>&#125;)();<br><br><span class=\"hljs-comment\">// 立即执行函数</span><br><span class=\"hljs-comment\">// (function()&#123;</span><br><br><span class=\"hljs-comment\">// &#125;)();</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实例属性、静态方法、静态属性\"><a href=\"#实例属性、静态方法、静态属性\" class=\"headerlink\" title=\"实例属性、静态方法、静态属性\"></a>实例属性、静态方法、静态属性</h3><h4 id=\"1-实例属性\"><a href=\"#1-实例属性\" class=\"headerlink\" title=\"1.实例属性\"></a>1.实例属性</h4><p>实例属性一般可以用作默认值，它不能用<code>var</code>、<code>let</code>、<code>const</code>等关键字声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.实例属性</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-comment\">//constructor外 不能用关键字声明属性，也不能用this</span><br>    <span class=\"hljs-comment\">// 一般用作默认值</span><br>    name=<span class=\"hljs-string\">&quot;zhangsan&quot;</span><br>    age=<span class=\"hljs-number\">18</span>;<br>    <span class=\"hljs-comment\">// 实例方法 方法是值为函数的特殊属性</span><br>    getAge=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.age;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name=name;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> p=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;alex&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(p.name,p.age);<span class=\"hljs-comment\">// alex 18</span><br><span class=\"hljs-built_in\">console</span>.log(p.getAge()); <span class=\"hljs-comment\">//18</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-静态方法\"><a href=\"#2-静态方法\" class=\"headerlink\" title=\"2.静态方法\"></a>2.静态方法</h4><p>静态方法是类的方法，不需要实例化类就能够调用。用关键字static来声明静态方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name,sex</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name=name;<br>        <span class=\"hljs-built_in\">this</span>.sex=sex;<br>    &#125;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;haha...&#x27;</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <span class=\"hljs-comment\">//this指向Person类</span><br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">speak</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;awsl&quot;</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>); <span class=\"hljs-comment\">//this指向实例对象</span><br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 调用类的方法 静态方法</span><br>Person.speak();  <span class=\"hljs-comment\">//haha...</span><br><span class=\"hljs-keyword\">const</span> xm=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;xm&quot;</span>,<span class=\"hljs-number\">12</span>);<br>xm.speak(); <span class=\"hljs-comment\">//awsl</span><br><br><span class=\"hljs-comment\">//也可以把类的方法写在</span><br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h1><h3 id=\"定义-5\"><a href=\"#定义-5\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>模块是一个一个的局部作用域的代码块。模块系统可以解决①模块化的问题②消除全局变量③管理加载顺序。</p>\n<h3 id=\"例子一\"><a href=\"#例子一\" class=\"headerlink\" title=\"例子一\"></a>例子一</h3><p>一个模块即使没有导出，也可以将其导入。要注意在<code>script</code>标签中 加上 <code>type=&quot;module&quot;</code>，导入后代码会执行一遍，多次导入也仅仅会执行一遍。</p>\n<blockquote>\n<p>exp1.html</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>  <span class=\"hljs-comment\">//18</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>module.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> age=<span class=\"hljs-number\">18</span>;<br><span class=\"hljs-built_in\">console</span>.log(age);<br></code></pre></td></tr></table></figure>\n\n<p>没有导出，直接导入就相当于写成:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">scr</span>=<span class=\"hljs-string\">&#x27;./module.js&#x27;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&#x27;module&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"例子二\"><a href=\"#例子二\" class=\"headerlink\" title=\"例子二\"></a>例子二</h3><p>一个模块只能有一个export default。</p>\n<blockquote>\n<p>exp2.html</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">//可以随便取名</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">import</span> age <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;moudle.js&#x27;</span>;</span><br><span class=\"javascript\"><span class=\"hljs-built_in\">console</span>.log(age); <span class=\"hljs-comment\">//18</span></span><br><span class=\"javascript\"></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>module.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> age=<span class=\"hljs-number\">18</span>;<br><span class=\"hljs-comment\">// 一个模块只能有一个export default</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> age;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"例子三\"><a href=\"#例子三\" class=\"headerlink\" title=\"例子三\"></a>例子三</h3><blockquote>\n<p>exp3.html</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;module&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// import age from &#x27;./module.js&#x27;; </span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 上面的是export default对应的import</span></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 法一：普通导入</span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 不能随意命名，需要和导出的名字一样</span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 因此无法导出匿名函数、类等</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">import</span> &#123;age,gender&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;</span><br><span class=\"javascript\">    </span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 法二：导入时起别名</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">import</span> &#123;func,userName <span class=\"hljs-keyword\">as</span> person&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;</span><br><span class=\"javascript\">    </span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 法三： 整体导入(会同时导入export和export default导出的)，obj为别名</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> obj <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;</span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">console</span>.log(age,gender,func,person);</span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">console</span>.log(obj);</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 法四：同时导入export和export default导出的参数</span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 注意export default导出的要写在前面</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">import</span> weight,&#123;height&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;</span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">console</span>.log(weight,height); <span class=\"hljs-comment\">//56 168</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>module.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 法一：export后面接声明或语句</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> age =<span class=\"hljs-number\">18</span>;<br><br><span class=\"hljs-comment\">// 法二： export后接 &#123;argument&#125;;</span><br><span class=\"hljs-keyword\">const</span> gender=<span class=\"hljs-string\">&quot;male&quot;</span>;<br><span class=\"hljs-keyword\">export</span> &#123;gender&#125;; <span class=\"hljs-comment\">//√</span><br><span class=\"hljs-comment\">// export gender; ×</span><br><br><span class=\"hljs-comment\">// 注意不能导出匿名函数或者类等</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Name</span></span>&#123;&#125;<br><br><br><span class=\"hljs-comment\">// 法三：导出为别名</span><br><span class=\"hljs-keyword\">export</span> &#123;fn <span class=\"hljs-keyword\">as</span> func,Name <span class=\"hljs-keyword\">as</span> userName&#125;;<br><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">56</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> height=<span class=\"hljs-number\">168</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>1.模块顶层的<code>this</code>指向</p>\n<p>顶层是值不在for块级、function函数作用域中，直接在模块中的作用域。</p>\n<p>在模块中，顶层的this是指向undefined的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span>!==<span class=\"hljs-string\">&#x27;undefined&#x27;</span>)&#123;<br>    <span class=\"hljs-comment\">// 如果this不为undefined，说明并不是用模块的方式来加载的</span><br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;没有以模块的形式导入&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2.import和import()</p>\n<p>import关键字具有提升效果，会提升到整个模块的头部、率先执行。也即import执行的时候，其他代码还没有开始执行。因此import和export命令只能在模块的顶层，<strong>不能放在在代码块中执行</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><br><span class=\"hljs-comment\">// 会直接报错！！！</span><br><span class=\"hljs-keyword\">if</span> (PC)&#123;<br>    <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;pc.js&#x27;</span>;<br>&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(mobile)&#123;<br>    <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;mobile.js&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而import()可以按条件导入，且会返回promise对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span> (PC)&#123;<br>    <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;pc.js&#x27;</span>).then().catch();<br>&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(mobile)&#123;<br>    <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;mobile.js&#x27;</span>).then().catch();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3.先导入再导出的复合写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 把age从别的模块导入，再又导出，相当于一个中转站</span><br><span class=\"hljs-comment\">// export &#123;age&#125; from &#x27;./module.js&#x27;; </span><br><span class=\"hljs-comment\">// 复合写法导出的，无法在当前模块使用</span><br><span class=\"hljs-comment\">// 相当于下面的import和export语句，但是上面的复合写法age无法正常输出</span><br><span class=\"hljs-keyword\">import</span> &#123;age&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;<br><span class=\"hljs-built_in\">console</span>.log(age); <span class=\"hljs-comment\">// 可以正常输出</span><br><span class=\"hljs-keyword\">export</span> &#123;age&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./module.js&#x27;</span>;<br><span class=\"hljs-built_in\">console</span>.log(age); <span class=\"hljs-comment\">// 可以正常输出</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615232944.png\" alt=\"image-20210615232937033\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233124.png\" alt=\"image-20210615233123778\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233158.png\" alt=\"image-20210615233157075\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233229.png\" alt=\"image-20210615233228936\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233314.png\" alt=\"image-20210615233313046\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233404.png\" alt=\"image-20210615233403786\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233452.png\" alt=\"image-20210615233451256\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233558.png\" alt=\"image-20210615233557251\"></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210615233652.png\" alt=\"image-20210615233651225\"></p>\n<h1 id=\"node入门\"><a href=\"#node入门\" class=\"headerlink\" title=\"node入门\"></a>node入门</h1><p>笔记内容源自：<a href=\"https://youtu.be/TlB_eWDSMt4\">https://youtu.be/TlB_eWDSMt4</a></p>\n<p>在powershell中输入<code>code .</code>会用VS Code打开当前文件夹。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616170542.png\" alt=\"image-20210616170534238\"></p>\n<p> 首先进入到要执行js的文件夹，然后输入 node +要运行的程序名，即可运行js。</p>\n<p>在node中，没有window和document对象，但在node中有其他的对象可以操作文件、操作系统、网络等。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616171059.png\" alt=\"image-20210616171058446\"></p>\n<p>在浏览器中中运行JavaScript，可以通过window.setTimeout()来调用setTimeout全局函数。在node中，则可以通过global.setTimeout()来调用，变量和函数不会添加到global对象中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> message=<span class=\"hljs-string\">&#x27;&#x27;</span>; <br><span class=\"hljs-comment\">//在浏览器中变量message会被添加到window对象中</span><br><span class=\"hljs-comment\">//在node中变量message不会被添加到global对象中</span><br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">global</span>.message); <span class=\"hljs-comment\">//undefined</span><br></code></pre></td></tr></table></figure>\n\n<p>在node中任何文件都被视为模块(module)，在文件中定义的变量或函数的作用域限制在了该文件。如果需要使用这些私有变量或函数，需要明确地export它。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210616172238.png\" alt=\"image-20210616172237280\"></p>\n<p>任何node应用程序都至少有一个main 模块(文件)，我们称之为main module。</p>\n<p>使用require()来加载模块，require函数的参数时是目标加载模块的路径。当导出不止一个参数时，require会返回一个从目标模块导出的对象。</p>\n<blockquote>\n<p>app.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> logger = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./logger&#x27;</span>)<br><span class=\"hljs-comment\">//&#123; log: [Function: log], url: &#x27;http://mylogger.io/log&#x27; &#125;</span><br><span class=\"hljs-built_in\">console</span>.log(logger);<br><br><span class=\"hljs-comment\">//调用另外一个模块的函数</span><br>logger.log(<span class=\"hljs-string\">&quot;message&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>logger.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span>  url=<span class=\"hljs-string\">&#x27;http://mylogger.io/log&#x27;</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">message</span>)</span>&#123;<br>    <span class=\"hljs-comment\">// send an http request</span><br>    <span class=\"hljs-built_in\">console</span>.log(message);<br>&#125;<br><br><span class=\"hljs-comment\">//输出的名字可以自定义</span><br><span class=\"hljs-built_in\">module</span>.exports.log=log;<br><span class=\"hljs-built_in\">module</span>.exports.url=url;<br></code></pre></td></tr></table></figure>\n\n<p>最后，console.log(logger)会输出一个对象。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210617112306.png\" alt=\"image-20210617112257229\"></p>\n<p>如果只需要导出一个参数，导出时可以不自定义名字，这样require函数返回的不是导出模块的参数对象，而是返回的导出模块导出的变量名或常量名。</p>\n<blockquote>\n<p>app.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> log = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./logger&#x27;</span>)<br><br>log(<span class=\"hljs-string\">&quot;message&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>logger.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span>  url=<span class=\"hljs-string\">&#x27;http://mylogger.io/log&#x27;</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">message</span>)</span>&#123;<br>    <span class=\"hljs-comment\">// send an http request</span><br>    <span class=\"hljs-built_in\">console</span>.log(message);<br>&#125;<br><br><br><span class=\"hljs-built_in\">module</span>.exports=log;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h1><p>babel官网： <a href=\"https://babeljs.io/\">https://babeljs.io/</a>。</p>\n<p>主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p>\n<p>Babel本身可以编译ES6的大部分语法，比如let、 const、箭头函数、类。但是对于ES6新增的API，比如Set、Map、 Promise等全局对象都不能直接编译，需要借助其它的模块。Babel一般需要配合 Webpack来编译模块语法。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c3b181a491acea93cf6d8ef6a58c848d.png\" alt=\"image-20210618115716149\"></p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>要在项目目录文件下，在powershell中安装babel所需要的包。首先要<code>npm init</code>，初始化项目，回车后，会提示包名，注意包名不能是中文。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/833503aaf604e173ec462d091e6c9f2a.png\" alt=\"image-20210618120620517\"><br><img src=\"https://img-blog.csdnimg.cn/img_convert/18f61389a04283749f3fe5fec2fd72fc.png\" alt=\"image-20210618120938972\"></p>\n<p>一系列回车后，项目中会多了一个package.json的文件，执行<code>npm init</code>就是为了得到这个json文件。这个json文件会记录安装的其他的包。</p>\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210618121541.png\" alt=\"image-20210618121540287\" style=\"zoom:33%;\" />\n\n<h2 id=\"安装babel\"><a href=\"#安装babel\" class=\"headerlink\" title=\"安装babel\"></a>安装babel</h2><p>安装babel的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev @babel/core @babel/cli @babel/preset-env<br></code></pre></td></tr></table></figure>\n\n<p><code>--save-dev</code>：<code>save</code>表示要把它们的信息写入 package.json, <code>dev</code>表示是开发模式下。</p>\n<p><code> @babel/core @babel/cli @babel/preset-env</code>表示三个一般都要安装的babel包。</p>\n<blockquote>\n<p>PS：只要有<code>package.json</code>，就可以直接在命名行中输入<code>npm install</code>安装所有的该json文件中提到的所有包。</p>\n</blockquote>\n<h2 id=\"配置babel\"><a href=\"#配置babel\" class=\"headerlink\" title=\"配置babel\"></a>配置babel</h2><p><img src=\"https://img-blog.csdnimg.cn/img_convert/f1c3c2ba0abdba32f6fbda1eda7926fe.png\" alt=\"image-20210618122619509\"><br>需要在根目录<code>package.json</code>文件中添加下面的代码。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-string\">&quot;scripts&quot;</span>: &#123;<br>  <span class=\"hljs-attr\">&quot;build&quot;</span>: <span class=\"hljs-string\">&quot;babel src -d dist&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/703d2d400cda8e83635ec81522c221bb.png\" alt=\"image-20210618123402148\"><br><code>babel src -d lib</code>是<code>babel src --out-dir dist</code>的缩写，也就是从src目录输出到lib目录。</p>\n<hr>\n<p>在项目的根目录中创建名为 <code>babel.config.json</code>的配置文件。</p>\n<p>如果想要转换<code>let</code> 、<code>const</code>，必须要在<code>target</code>中写<code>ie:10</code>，因为目前除了ie不支持几乎所有版本的浏览器都支持。不写的话就代表不把ie10作为目标浏览器，就不会转换<code>const</code>、<code>let</code>、<code>箭头函数</code>等这些几年前就出来的语法。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;presets&quot;</span>: [<br>    [<br>      <span class=\"hljs-string\">&quot;@babel/env&quot;</span>,<br>      &#123;<br>        <span class=\"hljs-attr\">&quot;targets&quot;</span>: &#123;<br>            <span class=\"hljs-attr\">&quot;ie&quot;</span>:<span class=\"hljs-string\">&quot;10&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;edge&quot;</span>: <span class=\"hljs-string\">&quot;17&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;firefox&quot;</span>: <span class=\"hljs-string\">&quot;60&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;chrome&quot;</span>: <span class=\"hljs-string\">&quot;67&quot;</span>,<br>          <span class=\"hljs-attr\">&quot;safari&quot;</span>: <span class=\"hljs-string\">&quot;11.1&quot;</span><br>        &#125;,<br>        <span class=\"hljs-attr\">&quot;useBuiltIns&quot;</span>: <span class=\"hljs-string\">&quot;usage&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;corejs&quot;</span>: <span class=\"hljs-string\">&quot;3.6.5&quot;</span><br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当然，如果缺省<code>target</code>，直接写如下代码，默认会转换为ES5。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;presets&quot;</span>: [<span class=\"hljs-string\">&quot;@babel/env&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm run build<br></code></pre></td></tr></table></figure>\n\n<p>build就是<code>package.json</code>script中自定义的名字，通过npm run build开始执行。可以在项目中看到多了名为lib的文件夹，里面有babel编译后的js文件。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a52e2d447d3daf8b9d66240b53e3bdad.png\" alt=\"image-20210618124246687\"></p>\n<p><strong>最后，我走了很多很多弯路，因为我tm没有看官方文档</strong>。要是我看看文档，我也就知道了<code>const</code>、<code>let</code>为什么没有转换。因为要定义target，要把ie也作为目标浏览器。</p>\n<p><a href=\"https://babel.docschina.org/docs/en/usage/\">中文官方文档</a>拜托我自己多看官方文档，再到处提问。</p>\n<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><p><a href=\"https://www.webpackjs.com/\">webpack中文官网</a></p>\n<p>webpack是静态模块打包器，当使用webpack处理应用程序时，会将这些模块打包成一个或多个文件。</p>\n<p>它可以处理js/css/图片/字体/图标等文件，用于处理静态(本地)文件。</p>\n<p>模块化是一种将系统分离成独立功能部分的方法，严格定义模块接口、模块间具有透明性。</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><h3 id=\"入口-entry\"><a href=\"#入口-entry\" class=\"headerlink\" title=\"入口(entry)\"></a>入口(entry)</h3><p><strong>入口起点(entry point)</strong> 指示 webpack 应该使用哪个模块，来作为构建其内部 <a href=\"https://webpack.docschina.org/concepts/dependency-graph/\">依赖图(dependency graph)</a> 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p>\n<p>默认值是 <code>./src/index.js</code>，但你可以通过在 <a href=\"https://webpack.docschina.org/configuration\">webpack configuration</a> 中配置 <code>entry</code> 属性，来指定一个（或多个）不同的入口起点。例如：</p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;./path/to/my/entry/file.js&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"多个入口\"><a href=\"#多个入口\" class=\"headerlink\" title=\"多个入口\"></a>多个入口</h4><p>用法：<code>entry: &#123; &lt;entryChunkName&gt; string | [string] &#125; | &#123;&#125;</code></p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: &#123;<br>    <span class=\"hljs-attr\">app</span>: <span class=\"hljs-string\">&#x27;./src/app.js&#x27;</span>,<br>    <span class=\"hljs-attr\">adminApp</span>: <span class=\"hljs-string\">&#x27;./src/adminApp.js&#x27;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"描述入口的对象\"><a href=\"#描述入口的对象\" class=\"headerlink\" title=\"描述入口的对象\"></a>描述入口的对象</h4><p>用于描述入口的对象。你可以使用如下属性：</p>\n<ul>\n<li><code>dependOn</code>: 当前入口所依赖的入口。它们必须在该入口被加载前被加载。</li>\n<li><code>filename</code>: 指定要输出的文件名称。</li>\n<li><code>import</code>: 启动时需加载的模块。</li>\n<li><code>library</code>: 指定 library 选项，为当前 entry 构建一个 library。</li>\n<li><code>runtime</code>: 运行时 chunk 的名字。如果设置了，就会创建一个以这个名字命名的运行时 chunk，否则将使用现有的入口作为运行时。</li>\n<li><code>publicPath</code>: 当该入口的输出文件在浏览器中被引用时，为它们指定一个公共 URL 地址。请查看 <a href=\"https://webpack.docschina.org/configuration/output/#outputpublicpath\">output.publicPath</a>。</li>\n</ul>\n<p><code>runtime</code> 和 <code>dependOn</code> 不应在同一个入口上同时使用，所以如下配置无效，并且会抛出错误：</p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: &#123;<br>    <span class=\"hljs-attr\">a2</span>: <span class=\"hljs-string\">&#x27;./a&#x27;</span>,<br>    <span class=\"hljs-attr\">b2</span>: &#123;<br>      <span class=\"hljs-attr\">runtime</span>: <span class=\"hljs-string\">&#x27;x2&#x27;</span>,<br>      <span class=\"hljs-attr\">dependOn</span>: <span class=\"hljs-string\">&#x27;a2&#x27;</span>,<br>      <span class=\"hljs-attr\">import</span>: <span class=\"hljs-string\">&#x27;./b&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>确保 <code>runtime</code> 不能指向已存在的入口名称，例如下面配置会抛出一个错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: &#123;<br>    <span class=\"hljs-attr\">a1</span>: <span class=\"hljs-string\">&#x27;./a&#x27;</span>,<br>    <span class=\"hljs-attr\">b1</span>: &#123;<br>      <span class=\"hljs-attr\">runtime</span>: <span class=\"hljs-string\">&#x27;a1&#x27;</span>,<br>      <span class=\"hljs-attr\">import</span>: <span class=\"hljs-string\">&#x27;./b&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>另外 <code>dependOn</code> 不能是循环引用的，下面的例子也会出现错误：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: &#123;<br>    <span class=\"hljs-attr\">a3</span>: &#123;<br>      <span class=\"hljs-attr\">import</span>: <span class=\"hljs-string\">&#x27;./a&#x27;</span>,<br>      <span class=\"hljs-attr\">dependOn</span>: <span class=\"hljs-string\">&#x27;b3&#x27;</span>,<br>    &#125;,<br>    <span class=\"hljs-attr\">b3</span>: &#123;<br>      <span class=\"hljs-attr\">import</span>: <span class=\"hljs-string\">&#x27;./b&#x27;</span>,<br>      <span class=\"hljs-attr\">dependOn</span>: <span class=\"hljs-string\">&#x27;a3&#x27;</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"输出-output\"><a href=\"#输出-output\" class=\"headerlink\" title=\"输出(output)\"></a>输出(output)</h3><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 <em>bundle</em>，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在 <code>./dist</code> 文件夹中。</p>\n<p>注意，即使可以存在多个 <code>entry</code> 起点，但只能指定一个 <code>output</code> 配置。</p>\n<p>你可以通过在配置中指定一个 <code>output</code> 字段，来配置这些处理过程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;./path/to/my/entry/file.js&#x27;</span>,<br>  <span class=\"hljs-attr\">output</span>: &#123;<br>    <span class=\"hljs-comment\">// path:绝对路径</span><br>    <span class=\"hljs-attr\">path</span>: path.resolve(__dirname, <span class=\"hljs-string\">&#x27;dist&#x27;</span>),<br>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;my-first-webpack.bundle.js&#x27;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>在上面的示例中，我们通过 <code>output.filename</code> 和 <code>output.path</code> 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成(emit)到哪里。在代码最上面导入的 path 模块是什么，它是一个 <a href=\"https://nodejs.org/api/modules.html\">Node.js 核心模块</a>，用于操作文件路径。</p>\n<p>如果有多个入口文件，出口文件需要改名，否则就会覆盖。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-built_in\">module</span>.exports=&#123;<br>    <span class=\"hljs-attr\">entry</span>:&#123;<br>        <span class=\"hljs-string\">&quot;main&quot;</span>:<span class=\"hljs-string\">&#x27;./src/index.js&#x27;</span>,<br>        <span class=\"hljs-string\">&quot;app&quot;</span>:<span class=\"hljs-string\">&#x27;./src/module.js&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-comment\">// [name]表示入口的名字</span><br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&#x27;[name].bundle.js&#x27;</span>,<br>        <span class=\"hljs-attr\">path</span>:path.resolve(__dirname,<span class=\"hljs-string\">&#x27;dist&#x27;</span>),  <br>        <span class=\"hljs-comment\">// 清除没有用到的文件</span><br>        <span class=\"hljs-attr\">clean</span>:<span class=\"hljs-literal\">true</span><br>        <br>    &#125;,<br>    <span class=\"hljs-attr\">mode</span>:<span class=\"hljs-string\">&#x27;development&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a><a href=\"https://www.webpackjs.com/loaders/babel-loader/\">loader</a></h3><p>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。<strong>loader</strong> 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 <a href=\"https://webpack.docschina.org/concepts/modules\">模块</a>，以供应用程序使用，以及被添加到依赖图中。</p>\n<blockquote>\n<h5 id=\"Warning\"><a href=\"#Warning\" class=\"headerlink\" title=\"Warning\"></a>Warning</h5><p>注意，loader 能够 <code>import</code> 导入任何类型的模块（例如 <code>.css</code> 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是很有必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p>\n</blockquote>\n<p>在更高层面，在 webpack 的配置中，<strong>loader</strong> 有两个属性：</p>\n<ol>\n<li><code>test</code> 属性，识别出哪些文件会被转换。</li>\n<li><code>use</code> 属性，定义出在进行转换时，应该使用哪个 loader。</li>\n</ol>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">output</span>: &#123;<br>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;my-first-webpack.bundle.js&#x27;</span>,<br>  &#125;,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [&#123; <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.txt$/</span>, use: <span class=\"hljs-string\">&#x27;raw-loader&#x27;</span> &#125;],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>以上配置中，对一个单独的 module 对象定义了 <code>rules</code> 属性，里面包含两个必须属性：<code>test</code> 和 <code>use</code>。这告诉 webpack 编译器(compiler) 如下信息：</p>\n<blockquote>\n<p>“嘿，webpack 编译器，当你碰到「在 <code>require()</code>/<code>import</code> 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先 <strong>use(使用)</strong> <code>raw-loader</code> 转换一下。”</p>\n</blockquote>\n<blockquote>\n<h5 id=\"Warning-1\"><a href=\"#Warning-1\" class=\"headerlink\" title=\"Warning\"></a>Warning</h5><p>重要的是要记住，在 webpack 配置中定义 rules 时，要定义在 <code>module.rules</code> 而不是 <code>rules</code> 中。为了使你便于理解，如果没有按照正确方式去做，webpack 会给出警告。</p>\n</blockquote>\n<h3 id=\"插件-plugin\"><a href=\"#插件-plugin\" class=\"headerlink\" title=\"插件(plugin)\"></a><a href=\"https://www.webpackjs.com/plugins/\">插件(plugin)</a></h3><p>loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p>\n<p>想要使用一个插件，你只需要 <code>require()</code> 它，然后把它添加到 <code>plugins</code> 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 <code>new</code> 操作符来创建一个插件实例。</p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;html-webpack-plugin&#x27;</span>); <span class=\"hljs-comment\">// 通过 npm 安装</span><br><span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;webpack&#x27;</span>); <span class=\"hljs-comment\">// 用于访问内置插件</span><br><br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [&#123; <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.txt$/</span>, use: <span class=\"hljs-string\">&#x27;raw-loader&#x27;</span> &#125;],<br>  &#125;,<br>  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;./src/index.html&#x27;</span> &#125;)],<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>在上面的示例中，<code>html-webpack-plugin</code> 为应用程序生成一个 HTML 文件，并自动注入所有生成的 bundle。</p>\n<h3 id=\"模式-mode\"><a href=\"#模式-mode\" class=\"headerlink\" title=\"模式(mode)\"></a>模式(mode)</h3><p>通过选择 <code>development</code>, <code>production</code> 或 <code>none</code> 之中的一个，来设置 <code>mode</code> 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 <code>production</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;production&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"浏览器兼容性-browser-compatibility\"><a href=\"#浏览器兼容性-browser-compatibility\" class=\"headerlink\" title=\"浏览器兼容性(browser compatibility)\"></a>浏览器兼容性(browser compatibility)</h3><p>webpack 支持所有符合 <a href=\"https://kangax.github.io/compat-table/es5/\">ES5 标准</a> 的浏览器（不支持 IE8 及以下版本）。webpack 的 <code>import()</code> 和 <code>require.ensure()</code> 需要 <code>Promise</code>。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 <a href=\"https://webpack.docschina.org/guides/shimming/\">提前加载 polyfill</a>。</p>\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p><a href=\"https://webpack.docschina.org/guides%EF%BC%8C%E7%94%A8%E8%BF%99%E4%B8%AA%E5%85%A5%E9%97%A8%E9%9D%9E%E5%B8%B8%E6%A3%92%EF%BC%8C%E8%AE%B2%E8%A7%A3%E9%9D%9E%E5%B8%B8%E8%AF%A6%E7%BB%86%EF%BC%8C%E5%86%85%E5%AE%B9%E4%B9%9F%E8%B6%85%E7%BA%A7%E4%B8%B0%E5%AF%8C%EF%BC%8C%E5%8F%AA%E7%BB%83%E4%B8%80%E9%81%8D%E6%98%AF%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E3%80%82\">https://webpack.docschina.org/guides，用这个入门非常棒，讲解非常详细，内容也超级丰富，只练一遍是记不住的。</a></p>\n<h3 id=\"极简教程\"><a href=\"#极简教程\" class=\"headerlink\" title=\"极简教程\"></a>极简教程</h3><p>1.首先要先在项目中初始化，<code>npm init -y</code>，会生成一个package.json文件，-y表示全部默认，省去回车过程。</p>\n<p>2.在powershell中输入<code>npm install --save-dev webpack webpack-cli</code>来安装webpack。</p>\n<p>3.项目根目录下创建一个名为<code>webpack.config.js</code>的配置文件，在这个配置文件中用module.exports来导出配置。</p>\n<p>下面的代码的意思为入口为’./src/indec.js’，出口为’dist’文件夹，文件名为’bundle.js’。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-built_in\">module</span>.exports=&#123;<br>    <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./src/index.js&#x27;</span>,<br>    <span class=\"hljs-attr\">output</span>:&#123;<br>        <span class=\"hljs-attr\">path</span>:path.resolve(__dirname,<span class=\"hljs-string\">&#x27;dist&#x27;</span>),<br>        <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&quot;bundle.js&quot;</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>4.在<code>package.json</code>文件中的scrpits下添加如下代码：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-string\">&quot;scripts&quot;</span>: &#123;<br>  <span class=\"hljs-attr\">&quot;build&quot;</span>:<span class=\"hljs-string\">&quot;webpack&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>5.在终端中输入<code>npm run build</code>，webpack即会开始编译，可以在dist目录下看到编译结果。</p>\n<p>如果在webpack配置文件中(默认为webpack.config.js)中将模式改为<strong>development</strong>(默认为production)，编译后的文件会看起来更加清晰。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path=require(&#x27;path&#x27;);<br><br>module.exports=&#123;<br>    entry:&#x27;./src/index.js&#x27;,<br>    output:&#123;<br>        path:path.resolve(__dirname,&#x27;dist&#x27;),<br>        filename:&quot;bundle.js&quot;<br>    &#125;,<br> +  mode:&#x27;development&#x27;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"插件plugins\"><a href=\"#插件plugins\" class=\"headerlink\" title=\"插件plugins\"></a><a href=\"https://www.webpackjs.com/plugins/\">插件plugins</a></h2><p>loader被用于帮助webpack处理各种模块，而插件则可用于执行范围更广的任务。</p>\n<h3 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a><a href=\"https://www.webpackjs.com/plugins/html-webpack-plugin/\">HtmlWebpackPlugin</a></h3><p>如果我们更改了一个入口起点的名称，甚至添加了一个新的入口，会发生什么？会在构建时重新命名生成的 bundle，但是我们的 <code>index.html</code> 文件的<code>script</code>标签仍然引用旧的名称。让我们用 <a href=\"https://webpack.docschina.org/plugins/html-webpack-plugin\"><code>HtmlWebpackPlugin</code></a> 来解决这个问题。</p>\n<p>有了这个插件，就不用在<code>npm run build</code>改变了js的名字后手动去改变html中<code>script</code>标签引入的js路径。</p>\n<h4 id=\"单入口配置\"><a href=\"#单入口配置\" class=\"headerlink\" title=\"单入口配置\"></a>单入口配置</h4><p>首先安装插件，并且调整 <code>webpack.config.js</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev html-webpack-plugin<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br><span class=\"hljs-addition\">+ const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><br> module.exports = &#123;<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>   &#125;,<br><span class=\"hljs-addition\">+  plugins: [</span><br><span class=\"hljs-addition\">+    new HtmlWebpackPlugin(&#123;</span><br><span class=\"hljs-addition\">+      //指定一个html文件作为模板</span><br><span class=\"hljs-addition\">+      template:&quot;./index.html&quot;</span><br><span class=\"hljs-addition\">+    &#125;),</span><br><span class=\"hljs-addition\">+  ],</span><br>   output: &#123;<br>     filename: &#x27;[name].bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br>   mode:&#x27;development&#x27;<br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<p>虽然在 <code>dist/</code> 文件夹我们已经有了 <code>index.html</code> 这个文件，然而 <code>HtmlWebpackPlugin</code> 还是会默认生成它自己的 <code>index.html</code> 文件。也就是说，它会用新生成的 <code>index.html</code> 文件，替换我们的原有文件。</p>\n<h4 id=\"多html配置\"><a href=\"#多html配置\" class=\"headerlink\" title=\"多html配置\"></a>多html配置</h4><p>配置含有2个html和2个js的项目。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path=require(&#x27;path&#x27;);<br>const HtmlWebpackPlugin=require(&#x27;html-webpack-plugin&#x27;);<br><br>module.exports=&#123;<br>    mode:&#x27;development&#x27;,<br>    // 多入口<br><span class=\"hljs-addition\">+    entry:&#123;</span><br><span class=\"hljs-addition\">+        index:&#x27;./src/index.js&#x27;,</span><br><span class=\"hljs-addition\">+        search:&#x27;./src/search.js&#x27;</span><br><span class=\"hljs-addition\">+    &#125;,</span><br>    output:&#123;<br>        filename:&#x27;[name].js&#x27;,<br>        path:path.resolve(__dirname,&quot;dist&quot;),<br>    &#125;,<br>    // 多入口 有几个入口就实例化几次<br><span class=\"hljs-addition\">+    plugins:[</span><br><span class=\"hljs-addition\">+        new HtmlWebpackPlugin(&#123;</span><br><span class=\"hljs-addition\">+            //指定一个html文件作为模板</span><br><span class=\"hljs-addition\">+           template:&quot;./index.html&quot;,</span><br><span class=\"hljs-addition\">+            //多个html必须要命名，否则默认为index.html</span><br><span class=\"hljs-addition\">+            //同名文件，后生成的文件会覆盖前面的</span><br><span class=\"hljs-addition\">+            filename:&#x27;index.html&#x27;,</span><br><span class=\"hljs-addition\">+            //指定要引入的js文件，否则会引入所有的js文件</span><br><span class=\"hljs-addition\">+            chunks:[&#x27;index&#x27;] //写entry中的名字</span><br><span class=\"hljs-addition\">+        &#125;),</span><br><span class=\"hljs-addition\">+        new HtmlWebpackPlugin(&#123;</span><br><span class=\"hljs-addition\">+            template:&quot;./search.html&quot;,</span><br><span class=\"hljs-addition\">+            filename:&#x27;./search.html&#x27;,</span><br><span class=\"hljs-addition\">+            // 同时引入index和search两个文件</span><br><span class=\"hljs-addition\">+            chunks:[&#x27;index&#x27;,&#x27;search&#x27;],</span><br><span class=\"hljs-addition\">+        &#125;)</span><br><span class=\"hljs-addition\">+    ]</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"其他功能\"><a href=\"#其他功能\" class=\"headerlink\" title=\"其他功能\"></a>其他功能</h4><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br>const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br><br> module.exports = &#123;<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>   &#125;,<br>  plugins: [<br>   new HtmlWebpackPlugin(&#123;<br>     //指定一个html文件作为模板<br>     template:&quot;./index.html&quot;,<br><span class=\"hljs-addition\">+     minify:&#123;</span><br><span class=\"hljs-addition\">+         //删除index.html中的注释</span><br><span class=\"hljs-addition\">+         removeComments:true,</span><br><span class=\"hljs-addition\">+         // 删除index.html中的空格</span><br><span class=\"hljs-addition\">+         collapseWhitespace:true,</span><br><span class=\"hljs-addition\">+         //删除html标签属性值的双引号</span><br><span class=\"hljs-addition\">+         removeAttributeQuotes:true</span><br><span class=\"hljs-addition\">+     &#125;</span><br>    &#125;),<br>  ],<br>   output: &#123;<br>     filename: &#x27;[name].js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br>   mode:&#x27;development&#x27;<br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"loader-1\"><a href=\"#loader-1\" class=\"headerlink\" title=\"loader\"></a><a href=\"https://www.webpackjs.com/loaders/babel-loader/\">loader</a></h2><p>loader可以用webpack能够处理非JS文件(css、图片、字体等)的模块。</p>\n<h3 id=\"使用loader\"><a href=\"#使用loader\" class=\"headerlink\" title=\"使用loader\"></a>使用loader</h3><p>在你的应用程序中，有两种使用 loader 的方式：</p>\n<ul>\n<li><a href=\"https://webpack.docschina.org/concepts/loaders/#configuration\">配置方式</a>（推荐）：在 <strong>webpack.config.js</strong> 文件中指定 loader。</li>\n<li><a href=\"https://webpack.docschina.org/concepts/loaders/#inline\">内联方式</a>：在每个 <code>import</code> 语句中显式指定 loader。</li>\n</ul>\n<h4 id=\"配置方式\"><a href=\"#配置方式\" class=\"headerlink\" title=\"配置方式\"></a>配置方式</h4><p><a href=\"https://webpack.docschina.org/configuration/module/#modulerules\"><code>module.rules</code></a> 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：</p>\n<p>loader <strong>从右到左（或从下到上）</strong>地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 <a href=\"https://webpack.docschina.org/concepts/loaders/#loader-features\">loader 功能</a> 章节，了解有关 loader 顺序的更多信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>        use: [<br>          <span class=\"hljs-comment\">// [style-loader](/loaders/style-loader)</span><br>          &#123; <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;style-loader&#x27;</span> &#125;,<br>          <span class=\"hljs-comment\">// [css-loader](/loaders/css-loader)</span><br>          &#123;<br>            <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>,<br>            <span class=\"hljs-attr\">options</span>: &#123;<br>              <span class=\"hljs-attr\">modules</span>: <span class=\"hljs-literal\">true</span><br>            &#125;<br>          &#125;,<br>          <span class=\"hljs-comment\">// [sass-loader](/loaders/sass-loader)</span><br>          &#123; <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;sass-loader&#x27;</span> &#125;<br>        ]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"内联方式-不推荐\"><a href=\"#内联方式-不推荐\" class=\"headerlink\" title=\"内联方式(不推荐)\"></a>内联方式(不推荐)</h4><p>可以在 <code>import</code> 语句或任何 <a href=\"https://webpack.docschina.org/api/module-methods\">与 “import” 方法同等的引用方式</a> 中指定 loader。使用 <code>!</code> 将资源中的 loader 分开。每个部分都会相对于当前目录解析。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;style-loader!css-loader?modules!./styles.css&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"已废用file-loader\"><a href=\"#已废用file-loader\" class=\"headerlink\" title=\"已废用file-loader\"></a>已废用file-loader</h3><p><strong>v5 版本已废弃</strong>file-loader: 请向 <a href=\"https://webpack.docschina.org/guides/asset-modules/\"><code>asset modules</code></a> 迁移。资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。</p>\n<p>在 webpack 5 之前，通常使用：</p>\n<ul>\n<li><a href=\"https://webpack.docschina.org/loaders/raw-loader/\"><code>raw-loader</code></a> 将文件导入为字符串</li>\n<li><a href=\"https://webpack.docschina.org/loaders/url-loader/\"><code>url-loader</code></a> 将文件作为 data URI 内联到 bundle 中</li>\n<li><a href=\"https://webpack.docschina.org/loaders/file-loader/\"><code>file-loader</code></a> 将文件发送到输出目录</li>\n</ul>\n<p>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p>\n<ul>\n<li><code>asset/resource</code> 发送一个单独的文件并导出 URL。之前通过使用 <code>file-loader</code> 实现。</li>\n<li><code>asset/inline</code> 导出一个资源的 data URI。之前通过使用 <code>url-loader</code> 实现。</li>\n<li><code>asset/source</code> 导出资源的源代码。之前通过使用 <code>raw-loader</code> 实现。</li>\n<li><code>asset</code> 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li>\n</ul>\n<h3 id=\"babel-loader\"><a href=\"#babel-loader\" class=\"headerlink\" title=\"babel-loader\"></a>babel-loader</h3><p>先要安装babel，毕竟活是babel干的，webpack只是打包的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev @babel/core @babel/cli @babel/preset-env<br></code></pre></td></tr></table></figure>\n\n<p>接着安装babel-loader这个插件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev babel-loader<br></code></pre></td></tr></table></figure>\n\n<p>接下来，配置babel，在根目录下创建<code>babel.config.json</code>的文件，并写下如下代码。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><br>&#123;<br>  <span class=\"hljs-attr\">&quot;presets&quot;</span>: [<span class=\"hljs-string\">&quot;@babel/env&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>下一步，便是在<code>webpack.config.js</code>文件中配置loader。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br>module.exports = &#123;<br>    entry: &#123;<br>        &quot;index&quot;: &#x27;./src/module.js&#x27;<br>    &#125;,<br>    output: &#123;<br>        filename: &#x27;[name].bundle.js&#x27;,<br>        path: path.resolve(__dirname, &#x27;dist&#x27;),<br>    &#125;,<br><span class=\"hljs-addition\">+    module: &#123;</span><br><span class=\"hljs-addition\">+       rules: [</span><br><span class=\"hljs-addition\">+            &#123;</span><br><span class=\"hljs-addition\">+                test: /\\.js$/,</span><br><span class=\"hljs-addition\">+                // 排除node_modules里面的js文件</span><br><span class=\"hljs-addition\">+                exclude: /node_modules/,</span><br><span class=\"hljs-addition\">+                use: &quot;babel-loader&quot;</span><br><span class=\"hljs-addition\">+            &#125;,</span><br><span class=\"hljs-addition\">+        ],</span><br><span class=\"hljs-addition\">+    &#125;,</span><br>    mode: &#x27;development&#x27;,<br>   <br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>如果想要转换promise这些，需要安装babel的<a href=\"https://babeljs.io/docs/en/babel-polyfill\">垫片插件</a>。</p>\n<p>第一步要先安装<code>core-js</code>。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620124723.png\" alt=\"image-20210620124715403\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev core-js<br></code></pre></td></tr></table></figure>\n\n<p>接着在源文件夹下(src)的js代码中引入该模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;core-js/stable&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>值得注意的是安装babel-loader和core-js的版本，尝试了很多次发现，他们需要低版本。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-string\">&quot;devDependencies&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;@babel/core&quot;</span>: <span class=\"hljs-string\">&quot;^7.11.0&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;@babel/preset-env&quot;</span>: <span class=\"hljs-string\">&quot;^7.11.0&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;babel-loader&quot;</span>: <span class=\"hljs-string\">&quot;^8.1.0&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;core-js&quot;</span>: <span class=\"hljs-string\">&quot;^3.6.5&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;webpack&quot;</span>: <span class=\"hljs-string\">&quot;^4.44.1&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;webpack-cli&quot;</span>: <span class=\"hljs-string\">&quot;^3.3.12&quot;</span><br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"综合应用\"><a href=\"#综合应用\" class=\"headerlink\" title=\"综合应用\"></a>综合应用</h2><h3 id=\"加载css\"><a href=\"#加载css\" class=\"headerlink\" title=\"加载css\"></a>加载css</h3><h4 id=\"style-loader-css-loader\"><a href=\"#style-loader-css-loader\" class=\"headerlink\" title=\"style-loader+css-loader\"></a>style-loader+css-loader</h4><p>首先要在src文件夹下的某个js文件中导入css文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./src/style.css&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>为了在 JavaScript 模块中 <code>import</code> 一个 CSS 文件，你需要安装 <a href=\"https://webpack.docschina.org/loaders/style-loader\">style-loader</a> 和 <a href=\"https://webpack.docschina.org/loaders/css-loader\">css-loader</a>，并在 <a href=\"https://webpack.docschina.org/configuration/module\"><code>module</code> 配置</a> 中添加这些 loader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev style-loader css-loader<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br><br> module.exports = &#123;<br>   entry: &#x27;./src/index.js&#x27;,<br>   output: &#123;<br>     filename: &#x27;bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br><span class=\"hljs-addition\">+  module: &#123;</span><br><span class=\"hljs-addition\">+    rules: [</span><br><span class=\"hljs-addition\">+      &#123;</span><br><span class=\"hljs-addition\">+        test: /\\.css$/i,</span><br><span class=\"hljs-addition\">+        use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;],</span><br><span class=\"hljs-addition\">+      &#125;,</span><br><span class=\"hljs-addition\">+    ],</span><br><span class=\"hljs-addition\">+  &#125;,</span><br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<p>模块 loader 可以链式调用。链中的每个 loader 都将对资源进行转换。链会逆序执行。第一个 loader 将其结果（被转换后的资源）传递给下一个 loader，依此类推。最后，webpack 期望链中的最后的 loader 返回 JavaScript。</p>\n<p>应保证 loader 的先后顺序：<a href=\"https://webpack.docschina.org/loaders/style-loader\"><code>&#39;style-loader&#39;</code></a> 在前，而 <a href=\"https://webpack.docschina.org/loaders/css-loader\"><code>&#39;css-loader&#39;</code></a> 在后。loader数组是从右到左执行，先通过’css-loader’识别css文件，再通过<code>style-loader</code>将css代码嵌入到style标签中。（在控制台可以看到）</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620190458.png\" alt=\"image-20210620190450697\"></p>\n<h4 id=\"插件-loader\"><a href=\"#插件-loader\" class=\"headerlink\" title=\"插件+loader\"></a>插件+loader</h4><p>和上面的<code>style-loader</code>在style标签中内联不同，插件<code>mini-css-extract-plugin</code>会让html文件通过<code>link</code>标签引入css文件</p>\n<p>首先要在src文件夹下的某个js文件中导入css文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./src/style.css&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>接着安装插件<code>mini-css-extract-plugin</code>和<code>css-loader</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev css-loader mini-css-extract-plugin<br></code></pre></td></tr></table></figure>\n\n<p>配置<code>webpack.config.js</code></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br><span class=\"hljs-addition\">+ const MiniCssExtractPlugin=require(&#x27;mini-css-extract-plugin&#x27;);</span><br><br> module.exports = &#123;<br>   entry: &#x27;./src/index.js&#x27;,<br>   output: &#123;<br>     filename: &#x27;bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br><span class=\"hljs-addition\">+  module: &#123;</span><br><span class=\"hljs-addition\">+    rules: [</span><br><span class=\"hljs-addition\">+      &#123;</span><br><span class=\"hljs-addition\">+        test: /\\.css$/i,</span><br><span class=\"hljs-addition\">+        //注意导入顺序</span><br><span class=\"hljs-addition\">+        use: [MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;],</span><br><span class=\"hljs-addition\">+      &#125;,</span><br><span class=\"hljs-addition\">+    ],</span><br><span class=\"hljs-addition\">+  &#125;,</span><br><span class=\"hljs-addition\">+\tplugins: [</span><br><span class=\"hljs-addition\">+        new MiniCssExtractPlugin(&#123;</span><br><span class=\"hljs-addition\">+            //指定生成的css的文件名</span><br><span class=\"hljs-addition\">+            filename:&#x27;[name].css&#x27;</span><br><span class=\"hljs-addition\">+        &#125;),</span><br><span class=\"hljs-addition\">+    ],</span><br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<p>最后，可以在dist文件夹下看到生成的css文件。</p>\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620194806.png\" alt=\"image-20210620194803569\" style=\"zoom:33%;\" />\n\n<p>而且在控制台可以看到样式是通过<code>link</code>标签引入的。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210620194915.png\" alt=\"image-20210620194914627\"></p>\n<h3 id=\"加载图片\"><a href=\"#加载图片\" class=\"headerlink\" title=\"加载图片\"></a>加载图片</h3><p>如果是远程图片，则可以直接显示。而本地图片通过webpack打包，需要额外处理。</p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br><br> module.exports = &#123;<br>   entry: &#x27;./src/index.js&#x27;,<br>   output: &#123;<br>     filename: &#x27;bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>   &#125;,<br>   module: &#123;<br>     rules: [<br>       &#123;<br>         test: /\\.css$/i,<br>         use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;],<br>       &#125;,<br><span class=\"hljs-addition\">+      &#123;</span><br><span class=\"hljs-addition\">+        test: /\\.(png|svg|jpg|jpeg|gif)$/i,</span><br><span class=\"hljs-addition\">+        type: &#x27;asset/resource&#x27;,</span><br><span class=\"hljs-addition\">+      &#125;,</span><br>     ],<br>   &#125;,<br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<p>现在，在 <code>import MyImage from &#39;./my-image.png&#39;</code> 时，此图像将被处理并添加到 <code>output</code> 目录，<em>并且</em> <code>MyImage</code> 变量将包含该图像在处理后的最终 url。在使用 <a href=\"https://webpack.docschina.org/loaders/css-loader\">css-loader</a> 时，如前所示，会使用类似过程处理你的 CSS 中的 <code>url(&#39;./my-image.png&#39;)</code>。loader 会识别这是一个本地文件，并将 <code>&#39;./my-image.png&#39;</code> 路径，替换为 <code>output</code> 目录中图像的最终路径。而 <a href=\"https://webpack.docschina.org/loaders/html-loader\">html-loader</a> 以相同的方式处理 <code>&lt;img src=&quot;./my-image.png&quot; /&gt;</code>。</p>\n<h4 id=\"js中使用图片\"><a href=\"#js中使用图片\" class=\"headerlink\" title=\"js中使用图片\"></a>js中使用图片</h4><p>如果需要在js文件中使用图片，也可以用<code>asset module</code>这个loader，无需额外安装其他的loader。只需要在js中使用<code>import</code>引入图片即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 把图片当做模块引入</span><br><span class=\"hljs-keyword\">import</span> logo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./image/img.png&#x27;</span>;<br><br><span class=\"hljs-built_in\">console</span>.log(logo); <span class=\"hljs-comment\">// 会输出图片的路径</span><br><span class=\"hljs-keyword\">const</span> myLogo = <span class=\"hljs-keyword\">new</span> Image();<br>myLogo.src = logo;<br><span class=\"hljs-built_in\">document</span>.body.appendChild(myLogo)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"自定义文件名\"><a href=\"#自定义文件名\" class=\"headerlink\" title=\"自定义文件名\"></a>自定义文件名</h4><p>默认情况下，<code>asset/resource</code> 模块以 <code>[hash][ext][query]</code> 文件名发送到输出目录。</p>\n<p>可以通过在 webpack 配置中设置 <a href=\"https://webpack.docschina.org/configuration/output/#outputassetmodulefilename\"><code>output.assetModuleFilename</code></a> 来修改此模板字符串：</p>\n<blockquote>\n<p> <strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br><br>module.exports = &#123;<br>  entry: &#x27;./src/index.js&#x27;,<br>  output: &#123;<br>    filename: &#x27;main.js&#x27;,<br>    path: path.resolve(__dirname, &#x27;dist&#x27;),<br><span class=\"hljs-addition\">+   assetModuleFilename: &#x27;images/[hash][ext][query]&#x27;</span><br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        test: /\\.png/,<br>        type: &#x27;asset/resource&#x27;<br>      &#125;<br>    ]<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>如可以设置为<code>assetModuleFilename: &#39;images/[name][ext]&#39;</code>，此时的[name]指图片本身的名字，而是entry中的名字，[ext]是指”filename extension”，用它表示文件原来的后缀。</p>\n<p>另一种自定义输出文件名的方式是，将某些资源发送到指定目录：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br><br>module.exports = &#123;<br>  entry: &#x27;./src/index.js&#x27;,<br>  output: &#123;<br>    filename: &#x27;main.js&#x27;,<br>    path: path.resolve(__dirname, &#x27;dist&#x27;),<br><span class=\"hljs-addition\">+   assetModuleFilename: &#x27;images/[hash][ext][query]&#x27;</span><br>  &#125;,<br>  module: &#123;<br>    rules: [<br>      &#123;<br>        test: /\\.png/,<br>        type: &#x27;asset/resource&#x27;<br><span class=\"hljs-deletion\">-     &#125;</span><br><span class=\"hljs-addition\">+     &#125;,</span><br><span class=\"hljs-addition\">+     &#123;</span><br><span class=\"hljs-addition\">+       test: /\\.html/,</span><br><span class=\"hljs-addition\">+       type: &#x27;asset/resource&#x27;,</span><br><span class=\"hljs-addition\">+       generator: &#123;</span><br><span class=\"hljs-addition\">+         filename: &#x27;static/[hash][ext][query]&#x27;</span><br><span class=\"hljs-addition\">+       &#125;</span><br><span class=\"hljs-addition\">+     &#125;</span><br>    ]<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>使用此配置，所有 <code>html</code> 文件都将被发送到输出目录中的 <code>static</code> 目录中。</p>\n<p><code>Rule.generator.filename</code> 与 <a href=\"https://webpack.docschina.org/configuration/output/#outputassetmodulefilename\"><code>output.assetModuleFilename</code></a> 相同，并且仅适用于 <code>asset</code> 和 <code>asset/resource</code> 模块类型。</p>\n<h4 id=\"添加公共路径\"><a href=\"#添加公共路径\" class=\"headerlink\" title=\"添加公共路径\"></a>添加公共路径</h4><p>当使用<code> MiniCssExtractPlugin</code>生成的css在dist下一个文件夹时(如<code>dist/css/style.css</code>)，此时如果不设置生成的css的公共路径(<code>publicPath</code>)，图片不会正常显示。</p>\n<p>因为<code>css-loader</code>以为生成的<code>style.css</code>文件直接在dist目录下，所以图片路径会默认设置为<code>url(./随机名字.png)</code>，而事实上图片的正确的路径为<code>url(../随机名字.png)</code>。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">  img-demo<br>  |- package.json<br>  |- webpack.config.js<br>  |- /dist<br>    |- index.js<br>    |- index.html<br><span class=\"hljs-addition\">+   |- 随机字符.png</span><br><span class=\"hljs-addition\">+   |- /css</span><br><span class=\"hljs-addition\">+    \t|- style.css</span><br>  |- /src<br>    |- icon.png<br>    |- style.css<br>    |- index.js<br>  |- /node_modules<br></code></pre></td></tr></table></figure>\n\n<p>因此，需要在<code>options</code>中设置<code>publicPath</code>为<code>../</code>，这样该css文件引入的所有url前面都会加上<code>../</code>的前缀。</p>\n<blockquote>\n<p><strong>webpack.config.js</strong></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br>const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br>const MiniCssExtractPlugin=require(&#x27;mini-css-extract-plugin&#x27;);<br><br>module.exports = &#123;<br>    entry: &#123;<br>        index: &#x27;./src/index.js&#x27;,<br>    &#125;,<br>    output: &#123;<br>        filename: &#x27;[name].js&#x27;,<br>        path: path.resolve(__dirname, &#x27;dist&#x27;),<br>    &#125;,<br>    module:&#123;<br>        rules:[<br>            &#123;<br>                test:/\\.css$/i,<br>                //此时生成的css在dist/css的文件夹下，要设置公共路径<br>                //这样该css文件所有的url前面都会加上../的前缀。<br><span class=\"hljs-addition\">+                use:[&#123;</span><br><span class=\"hljs-addition\">+                    loader:MiniCssExtractPlugin.loader,</span><br><span class=\"hljs-addition\">+                    options:&#123;</span><br><span class=\"hljs-addition\">+                        publicPath:&#x27;../&#x27;</span><br><span class=\"hljs-addition\">+                    &#125;</span><br><span class=\"hljs-addition\">+                &#125;, &#x27;css-loader&#x27;]&#125;,</span><br>            &#123;<br>                test:/\\.(png|svg|jepg|gif)/,<br>                type:&#x27;asset/resource&#x27;<br>            &#125;<br>        ]  <br>    &#125;,<br>    plugins: [<br>        new HtmlWebpackPlugin(&#123;<br>            //指定一个html文件作为模板<br>            template: &quot;./index.html&quot;<br>        &#125;),<br><span class=\"hljs-addition\">+        new MiniCssExtractPlugin(&#123;</span><br><span class=\"hljs-addition\">+            //在dist/css文件夹下创建一个index.css文件</span><br><span class=\"hljs-addition\">+            filename:&#x27;css/[name].css&#x27;</span><br><span class=\"hljs-addition\">+        &#125;)</span><br>    ],<br>    mode: &#x27;development&#x27;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"html中的图片\"><a href=\"#html中的图片\" class=\"headerlink\" title=\"html中的图片\"></a>html中的图片</h4><p>css中引入的图片可以用<code>type:asset/resource;</code> ，html中的图片则需要额外安装loader<code>html-withimg-loader</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev html-withimg-loader<br></code></pre></td></tr></table></figure>\n\n<p>此时，我只写出新增的代码，其他的如图片loader，html-webpack-plugin和mini-css-extract-plugin插件用法参考上面的代码。</p>\n<p><strong>注意</strong>:这个<code>html-withimg-loader</code>必须要配合处理图片的loader——<code>asset  module</code> 一起使用，因为真正能够加载图片的还是<code>asset module</code>，<code>html-withimg-loader</code>用来处理路径问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>:&#123;<br>    <span class=\"hljs-attr\">rules</span>:[<br>        &#123;<br>            <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.(html|htm)/i</span>,<br>            use:<span class=\"hljs-string\">&#x27;html-withimg-loader&#x27;</span><br>        &#125;<br>    ]  <br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"asset-inline\"><a href=\"#asset-inline\" class=\"headerlink\" title=\"asset/inline\"></a>asset/inline</h4><p>asset/inline输出的 data URI，默认是呈现为使用 Base64 算法编码的文件内容。</p>\n<p><strong>webpack.config.js</strong></p>\n<blockquote>\n<p>关于<a href=\"https://webpack.docschina.org/configuration/module/#ruleparserdataurlcondition\">rules.parser</a></p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\">const path = require(&#x27;path&#x27;);<br><br>module.exports = &#123;<br>  entry: &#x27;./src/index.js&#x27;,<br>  output: &#123;<br>    filename: &#x27;main.js&#x27;,<br>    path: path.resolve(__dirname, &#x27;dist&#x27;),<br>  &#125;,<br>  module: &#123;<br>    rules: [<br><span class=\"hljs-addition\">+      &#123;</span><br><span class=\"hljs-addition\">+       test: /\\.svg/,</span><br><span class=\"hljs-addition\">+       type: &#x27;asset/inline&#x27;,</span><br><span class=\"hljs-addition\">+\t\tparser:&#123;</span><br><span class=\"hljs-addition\">+\t\t\tdataUrlCondition:</span><br><span class=\"hljs-addition\">+\t\t\t\tmaxSize:10000</span><br><span class=\"hljs-addition\">+      \t\t\t//表示10kb</span><br><span class=\"hljs-addition\">+       &#125;</span><br><span class=\"hljs-addition\">+     &#125;,</span><br><br>    ]<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>maxSize为10000，表示小于10kb将其转换为base64格式，大于则按照asset/resource来处理。一般只对较小的图片进行这种操作，因为转为base64格式后，图片会以base64格式来存在js中。</p>\n<h3 id=\"配置开发环境\"><a href=\"#配置开发环境\" class=\"headerlink\" title=\"配置开发环境\"></a>配置开发环境</h3><h4 id=\"使用source-map-追踪错误\"><a href=\"#使用source-map-追踪错误\" class=\"headerlink\" title=\"使用source map 追踪错误\"></a>使用source map 追踪错误</h4><p>当 webpack 打包源代码时，可能会很难追踪到 error(错误) 和 warning(警告) 在源代码中的原始位置。例如，如果将三个源文件（<code>a.js</code>, <code>b.js</code> 和 <code>c.js</code>）打包到一个 bundle（<code>bundle.js</code>）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 <code>bundle.js</code>。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。</p>\n<p>为了更容易地追踪 error 和 warning，JavaScript 提供了 <a href=\"http://blog.teamtreehouse.com/introduction-source-maps\">source maps</a> 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于 <code>b.js</code>，source map 就会明确的告诉你。</p>\n<p>source map 有许多 <a href=\"https://webpack.docschina.org/configuration/devtool\">可用选项</a>，请务必仔细阅读它们，以便可以根据需要进行配置。</p>\n<p>对于本指南，我们将使用 <code>inline-source-map</code> 选项，这有助于解释说明示例意图（此配置仅用于示例，不要用于生产环境）：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br> const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br><br> module.exports = &#123;<br>   mode: &#x27;development&#x27;,<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>     print: &#x27;./src/print.js&#x27;,<br>   &#125;,<br><span class=\"hljs-addition\">+  devtool: &#x27;inline-source-map&#x27;,</span><br>   plugins: [<br>     new HtmlWebpackPlugin(&#123;<br>       title: &#x27;Development&#x27;,<br>     &#125;),<br>   ],<br>   output: &#123;<br>     filename: &#x27;[name].bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>     clean: true,<br>   &#125;,<br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用-webpack-dev-server\"><a href=\"#使用-webpack-dev-server\" class=\"headerlink\" title=\"使用 webpack-dev-server\"></a>使用 webpack-dev-server</h3><p><code>webpack-dev-server</code> 为你提供了一个基本的 web server，并且具有 live reloading(实时重新加载) 功能。设置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install --save-dev webpack-dev-server<br></code></pre></td></tr></table></figure>\n\n<p>修改配置文件，告知 dev server，从什么位置查找文件：</p>\n<p><strong>webpack.config.js</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> const path = require(&#x27;path&#x27;);<br> const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);<br><br> module.exports = &#123;<br>   mode: &#x27;development&#x27;,<br>   entry: &#123;<br>     index: &#x27;./src/index.js&#x27;,<br>     print: &#x27;./src/print.js&#x27;,<br>   &#125;,<br>   devtool: &#x27;inline-source-map&#x27;,<br><span class=\"hljs-addition\">+  devServer: &#123;</span><br><span class=\"hljs-addition\">+    contentBase: &#x27;./dist&#x27;,</span><br><span class=\"hljs-addition\">+  &#125;,</span><br>   plugins: [<br>     new HtmlWebpackPlugin(&#123;<br>       title: &#x27;Development&#x27;,<br>     &#125;),<br>   ],<br>   output: &#123;<br>     filename: &#x27;[name].bundle.js&#x27;,<br>     path: path.resolve(__dirname, &#x27;dist&#x27;),<br>     clean: true,<br>   &#125;,<br> &#125;;<br></code></pre></td></tr></table></figure>\n\n<p>以上配置告知 <code>webpack-dev-server</code>，将 <code>dist</code> 目录下的文件 serve 到 <code>localhost:8080</code> 下。（serve，将资源作为 server 的可访问文件）</p>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"> &#123;<br>   &quot;name&quot;: &quot;webpack-demo&quot;,<br>   &quot;version&quot;: &quot;1.0.0&quot;,<br>   &quot;description&quot;: &quot;&quot;,<br>   &quot;private&quot;: true,<br>   &quot;scripts&quot;: &#123;<br>     &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,<br>     &quot;watch&quot;: &quot;webpack --watch&quot;,<br><span class=\"hljs-addition\">+    &quot;start&quot;: &quot;webpack serve --open&quot;,</span><br>     &quot;build&quot;: &quot;webpack&quot;<br>   &#125;,<br>   &quot;keywords&quot;: [],<br>   &quot;author&quot;: &quot;&quot;,<br>   &quot;license&quot;: &quot;ISC&quot;,<br>   &quot;devDependencies&quot;: &#123;<br>     &quot;html-webpack-plugin&quot;: &quot;^4.5.0&quot;,<br>     &quot;webpack&quot;: &quot;^5.4.0&quot;,<br>     &quot;webpack-cli&quot;: &quot;^4.2.0&quot;,<br>     &quot;webpack-dev-server&quot;: &quot;^3.11.0&quot;<br>   &#125;,<br>   &quot;dependencies&quot;: &#123;<br>     &quot;lodash&quot;: &quot;^4.17.20&quot;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>现在，在命令行中运行 <code>npm start</code>，我们会看到浏览器自动加载页面。如果你更改任何源文件并保存它们，web server 将在编译代码后自动重新加载。试试看！</p>\n<p><code>webpack-dev-server</code> 具有许多可配置的选项。关于其他更多配置，请查看 <a href=\"https://webpack.docschina.org/configuration/dev-server\">配置文档</a>。</p>\n<blockquote>\n<h6 id=\"Warning-2\"><a href=\"#Warning-2\" class=\"headerlink\" title=\"Warning\"></a>Warning</h6><p>webpack-dev-server 在编译之后不会写入到任何输出文件。而是将 bundle 文件保留在内存中，然后将它们 serve 到 server 中，就好像它们是挂载在 server 根路径上的真实文件一样。如果你的页面希望在其他不同路径中找到 bundle 文件，则可以通过 dev server 配置中的 <a href=\"https://webpack.docschina.org/configuration/dev-server/#devserverpublicpath-\"><code>publicPath</code></a> 选项进行修改。</p>\n</blockquote>\n"},{"title":"Vue学习笔记","date":"2021-07-27T10:38:33.000Z","_content":"\n\n笔记基于：https://www.runoob.com/vue2/\n\n# Vue起步\n\n每个 Vue 应用都需要通过实例化 Vue 来实现。\n\n语法格式如下：\n\n```html\n<div id=\"app\">\n    <h1>site : {{site}}</h1>\n    <h1>url : {{url}}</h1>\n    <h1>{{details()}}</h1>\n</div>\n<script>\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            site: \"菜鸟教程\",\n            url: \"www.runoob.com\",\n            alexa: \"10000\"\n        },\n        methods: {\n            details: function() {\n                return  this.site + \" - 学的不仅是技术，更是梦想！\";\n            }\n        }\n    })\n</script>\n```\n\n可以看到在 Vue 构造器中有一个el 参数，它是 DOM 元素中的 id。在上面实例中 id 为 app，在 div 元素中：\n\n```html\n<div id = \"app\"></div>\n```\n\n这意味着我们接下来的改动全部在以上指定的 div 内，div 外部不受影响。\n\n接下来我们看看如何定义数据对象。\n\n**data** 用于定义属性，实例中有三个属性分别为：site、url、alexa。\n\n**methods** 用于定义的函数，可以通过 return 来返回函数值。\n\n`{{ }}` 用于输出对象属性和函数返回值。\n\n```html\n<div id=\"vue_det\">\n    <h1>site : {{site}}</h1>\n    <h1>url : {{url}}</h1>\n    <h1>{{details()}}</h1>\n</div>\n```\n\n当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，html 视图将也会产生相应的变化。\n\n## 实例一\n\n```html\n<div id=\"vue_det\">\n    <h1>site : {{site}}</h1>\n    <h1>url : {{url}}</h1>\n    <h1>Alexa : {{alexa}}</h1>\n</div>\n<script type=\"text/javascript\">\n// 我们的数据对象\nvar data = { site: \"菜鸟教程\", url: \"www.runoob.com\", alexa: 10000}\nvar vm = new Vue({\n    el: '#vue_det',\n    data: data\n})\n// 它们引用相同的对象！\ndocument.write(vm.site === data.site) // true\ndocument.write(\"<br>\")\n// 设置属性也会影响到原始数据\nvm.site = \"Runoob\"\ndocument.write(data.site + \"<br>\") // Runoob\n \n// ……反之亦然\ndata.alexa = 1234\ndocument.write(vm.alexa) // 1234\n</script>\n```\n\n## 实例二\n\n除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。例如：\n\n```js\n<div id=\"vue_det\">\n    <h1>site : {{site}}</h1>\n    <h1>url : {{url}}</h1>\n    <h1>Alexa : {{alexa}}</h1>\n</div>\n<script type=\"text/javascript\">\n// 我们的数据对象\nvar data = { site: \"菜鸟教程\", url: \"www.runoob.com\", alexa: 10000}\nvar vm = new Vue({\n    el: '#vue_det',\n    data: data\n})\n// 它们引用相同的对象！\ndocument.write(vm.site === data.site) // true\ndocument.write(\"<br>\")\n// 设置属性也会影响到原始数据\nvm.site = \"Runoob\"\ndocument.write(data.site + \"<br>\") // Runoob\n \n// ……反之亦然\ndata.alexa = 1234\ndocument.write(vm.alexa) // 1234\n</script>\n```\n\n# 模板语法\n\nVue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。\n\nVue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。\n\n结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。\n\n## 插值\n\n### 文本\n\n数据绑定最常见的形式就是使用 `{{...}}`（双大括号）的文本插值：\n\n```html\n<div id=\"app\">\n  <p>{{ message }}</p>\n</div>\n\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue.js!'\n  }\n})\n</script>\n```\n\n### html和text\n\n 使用 v-html 指令用于输出 html 代码，使用v-text用于输出text代码：\n\n```HTML\n<div id=\"app\">\n    <div v-html=\"message\"></div>\n    <div v-text=\"message\"></div>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    message: '<h1>菜鸟教程</h1>'\n  }\n})\n</script>\n```\n\n![image-20210727192913338](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727192921.png)\n\n### 属性\n\nHTML 属性中的值应使用 v-bind 指令。\n\n以下实例判断 use 的值，如果为 true 使用 class1 类的样式，否则不使用该类：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n</head>\n<style>\n.class1{\n  background: #444;\n  color: #eee;\n}\n</style>\n<body>\n<script src=\"https://cdn.staticfile.org/vue/2.2.2/vue.min.js\"></script>\n\n<div id=\"app\">\n  <label for=\"r1\">修改颜色</label><input type=\"checkbox\" v-model=\"use\" id=\"r1\">\n  <br><br>\n  <div v-bind:class=\"{'class1': use}\">\n    v-bind:class 指令\n  </div>\n</div>\n    \n<script>\nnew Vue({\n    el: '#app',\n  data:{\n      use: false\n  }\n});\n</script>\n</body>\n```\n\n![image-20210727193358942](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727193400.png)\n\n### 表达式\n\nVue.js 都提供了完全的 JavaScript 表达式支持。\n\n```html\n<div id=\"app\">\n    {{5+5}}<br>\n    {{ ok ? 'YES' : 'NO' }}<br>\n    {{ message.split('').reverse().join('') }}\n    <div v-bind:id=\"'list-' + id\">菜鸟教程</div>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    ok: true,\n    message: 'RUNOOB',\n    id : 1\n  }\n})\n</script>\n```\n\n### 指令\n\n指令是带有 v- 前缀的特殊属性。\n\n指令用于在表达式的值改变时，将某些行为应用到 DOM 上。如下例子：\n\n```html\n<div id=\"app\">\n    <p v-if=\"seen\">现在你看到我了</p>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    seen: true\n  }\n})\n</script>\n```\n\n这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。\n\n另一个例子是 v-on 指令，它用于监听 DOM 事件：监听\n\n```html\n<a v-on:click=\"doSomething\">\n```\n\n### 修饰符\n\n修饰符是以半角句号 **.** 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，**.prevent** 修饰符告诉 **v-on** 指令对于触发的事件调用 **event.preventDefault()**：\n\n```js\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\n\n## 用户输入\n\n在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定：\n\n```html\n<div id=\"app\">\n    <p>{{ message }}</p>\n    <input v-model=\"message\">\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    message: 'Runoob!'\n  }\n})\n</script>\n```\n\n使用v-model会将input等输入框的value发生变化，会将其值传给Vue实例data的message属性，同时如果Vue实例的message发生变化，也会将数据更新表单的value。\n\n**v-model** 指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。\n\n## 过滤器\n\nVue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由\"管道符\"指示, 格式如下：\n\n```html\n<!-- 在两个大括号中 -->\n{{ message | capitalize }}\n\n<!-- 在 v-bind 指令中 -->\n<div v-bind:id=\"rawId | formatId\"></div>\n```\n\n过滤器函数接受表达式的值作为第一个参数。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<script src=\"https://cdn.staticfile.org/vue/2.2.2/vue.min.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n  {{ message | capitalize }}\n</div>\n\t\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n\tmessage: 'runoob'\n  },\n  filters: {\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n</script>\n</body>\n</html>\n```\n\n## 缩写\n\nVue.js 为两个最为常用的指令提供了特别的缩写：\n\n### v-bind\n\n```html\n<!-- 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- 缩写 -->\n<a :href=\"url\"></a>\n```\n\n### v-on 缩写\n\n```html\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- 缩写 -->\n<a @click=\"doSomething\"></a\n```\n\n# Vue.js 条件和循环语句\n\n## 条件判断\n\n条件判断使用 v-if 指令：\n\n### v-if\n\n```html\n<div id=\"app\">\n    <p v-if=\"seen\">现在你看到我了</p>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    seen: true,\n  }\n})\n</script>\n```\n\n这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。\n\n### v-else\n\n可以用 v-else 指令给 v-if 添加一个 \"else\" 块：\n\n随机生成一个数字，判断是否大于0.5，然后输出对应信息：\n\n```html\n<div id=\"app\">\n    <div v-if=\"Math.random() > 0.5\">\n      Sorry\n    </div>\n    <div v-else>\n      Not sorry\n    </div>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app'\n})\n</script>\n```\n\n### v-else-if\n\n用作 v-if 的 else-if 块，可以链式的多次使用。\n\n```html\n<div id=\"app\">\n    <div v-if=\"type === 'A'\">\n      A\n    </div>\n    <div v-else-if=\"type === 'B'\">\n      B\n    </div>\n    <div v-else-if=\"type === 'C'\">\n      C\n    </div>\n    <div v-else>\n      Not A/B/C\n    </div>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    type: 'C'\n  }\n})\n</script>\n```\n\n> v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。\n\n## 循环语句\n\n循环使用 v-for 指令。v-for 指令需要以 **site in sites** 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。\n\n### v-for 遍历数组\n\nv-for 可以绑定数据到数组来渲染一个列表：\n\n```html\n<div id=\"app\">\n  <ol>\n    <li v-for=\"site in sites\">\n      {{ site.name }}\n    </li>\n  </ol>\n</div>\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    sites: [\n      { name: 'Runoob' },\n      { name: 'Google' },\n      { name: 'Taobao' }\n    ]\n  }\n})\n</script>\n```\n\n![image-20210727232644828](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727232652.png)\n\n### v-for迭代对象\n\nv-for 可以通过一个对象的属性来迭代数据：\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"value in object\">\n    {{ value }}\n    </li>\n  </ul>\n</div>\n \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    object: {\n      name: '菜鸟教程',\n      url: 'http://www.runoob.com',\n      slogan: '学的不仅是技术，更是梦想！'\n    }\n  }\n})\n</script>\n```\n\n以提供第二个的参数为键名，第三个参数为索引。\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(value, key, index) in object\">\n     {{ index }}. {{ key }} : {{ value }}\n    </li>\n  </ul>\n</div>\n```\n\n### v-for迭代整数\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"n in 10\">\n     {{ n }}\n    </li>\n  </ul>\n</div>\n```\n\n# Vue.js 计算属性\n\n## computed\n\n计算属性关键词: **computed**。计算属性在处理一些复杂逻辑时是很有用的。可以看下以下反转字符串的例子：\n\n```html\n<div id=\"app\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n 上述例子变得很复杂，也不容易看懂理解。\n\n接着，让我们看看使用计算属性的实例：\n\n```html\n<div id=\"app\">\n  <p>原始字符串: {{ message }}</p>\n  <p>计算后反转字符串: {{ reversedMessage }}</p>\n</div>\n \n<script>\nvar vm = new Vue({\n  el: '#app',\n  data: {\n    message: 'Runoob!'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n```\n\n上述例子 中声明了一个计算属性 reversedMessage 。提供的函数将用作属性 vm.reversedMessage 的 getter 。\n\nvm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。\n\n## computed vs methods\n\n我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。\n\n```html\n<div id=\"app\">\n  <p>原始字符串: {{ message }}</p>\n  <p>计算后反转字符串: {{ reversedMessage }}</p>\n  <p>使用方法后反转字符串: {{ reversedMessage2() }}</p>\n</div>\n\n<script>\nvar vm = new Vue({\n  el: '#app',\n  data: {\n    message: 'Runoob!'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  },\n  methods: {\n    reversedMessage2: function () {\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n```\n\n> 关于getter和setter，[点击查看](https://jiaqicoder.com/2021/07/27/%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7/#%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7-getter%E5%92%8Csetter)\n\n## computed setter\n\ncomputed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：\n\n```html\n<script src=\"0.vue.js\"></script>\n<div id=\"app\">\n  <p>{{site}}</p>\n</div>\n\n<script>\n  let vm=new Vue({\n    el:'#app',\n    data:{\n      name:'Google',\n      url:'http://www.google.com'\n    },\n    computed:{\n      site:{\n        // getter\n        get:function () {\n          return this.name+' '+this.url;\n        },\n        // setter\n        set:function(newValue){\n          [this.name,this.url]=newValue.split(' ');\n        }\n      }\n    }\n  })\n  // 1s 后页面上的site将会发生变化\n  setInterval(()=>{\n    vm.site='jiaqi https://www.jiaqicoder.com'\n  },1000);\n</script>\n```\n\n# Vue.js 监听属性\n\n虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 `watch` 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。\n\n```html\n<div id=\"app\">\n  <p>{{counter}}</p>\n  <p>{{text}}</p>\n  <button @click='counter++'>按我</button>\n</div>\n\n<script src=\"0.vue.js\"></script>\n<script>\n  let vm = new Vue({\n    el: '#app',\n    data: {\n      counter: 1,\n      text:''\n    },\n    watch:{\n      counter:function(newValue,oldValue){\n        this.text=`counter从${oldValue}变为${newValue}`;\n      }\n    }\n  })\n</script>\n```\n\n![动1](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728001253.gif)\n\n以下实例进行**华氏度**与**摄氏度**之间的换算：\n\n```html\n<div id=\"app\">\n  华氏度: <input type=\"text\" @change='fahrenheit=$event.target.value' :value='fahrenheit'>\n  摄氏度：<input type=\"text\" @change='celsius=$event.target.value' :value='celsius'>\n</div>\n\n<script src=\"0.vue.js\"></script>\n<script>\n  let vm = new Vue({\n    el: '#app',\n    data: {\n      fahrenheit: '',\n      celsius: ''\n    },\n    watch: {\n      fahrenheit: function (value) {\n        this.celsius = ((value - 32) / 1.8).toFixed(2);\n      },\n      celsius: function (value) {\n        this.fahrenheit = (value * 1.8 + 32).toFixed(2);\n      }\n    }\n  })\n</script>\n```\n\n![动2](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728004031.gif)\n\n# Vue.js 样式绑定\n\n## Vue.js class\n\nclass 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。\n\nVue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。\n\n## class属性绑定\n\n我们可以为 v-bind:class 设置一个对象，从而动态的切换 class:\n\n```html\n<div v-bind:class=\"{ 'active': isActive }\"></div>\n```\n\n如果isActive的值为true，则上面的代码相当于：\n\n```html\n<div class=\"active\"></div>\n```\n\n我们也可以直接绑定一个对象\n\n```html\n<div id=\"app\">\n  <div v-bind:class=\"classObject\"></div>\n</div>\n\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    classObject: {\n      active: true,\n      'text-danger': true\n    }\n  }\n})\n</script>\n```\n\n此外，我们也可以在这里绑定返回对象的计算属性。\n\n```html\n<div id=\"app\">\n  <div v-bind:class=\"classObject\"></div>\n</div>\n<script>\n\nnew Vue({\n  el: '#app',\n  data: {\n    isActive: true,\n    error: {\n      value: true,\n      type: 'fatal'\n    }\n  },\n  computed: {\n    classObject: function () {\n      return {\n  base: true,\n        active: this.isActive && !this.error.value,\n        'text-danger': this.error.value && this.error.type === 'fatal',\n      }\n    }\n  }\n})\n</script>\n```\n\n### 数组语法\n\n我们可以把一个数组传给 **v-bind:class** ，实例如下：\n\n```html\n<div id=\"app\">\n\t<div v-bind:class=\"[activeClass, errorClass]\"></div>\n</div>\n\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n  }\n})\n</script>\n```\n\n我们还可以使用三元表达式来切换列表中的 class ：errorClass 是始终存在的，isActive 为 true 时添加 activeClass 类：\n\n```html\n<div v-bind:class=\"[errorClass ,isActive ? activeClass : '']\"></div>\n```\n\n## Vue.js style 内联样式\n\n我们可以在 **v-bind:style** 直接设置样式：\n\n```html\n<div id=\"app\">\n    <div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\">菜鸟教程</div>\n</div>\n```\n\n也可以直接绑定到一个样式对象，让模板更清晰：\n\n```html\n<div id=\"app\">\n  <div v-bind:style=\"styleObject\">菜鸟教程</div>\n</div>\n\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    styleObject: {\n      color: 'green',\n      fontSize: '30px'\n    }\n  }\n})\n</script>\n```\n\nv-bind:style 可以使用数组将多个样式对象应用到一个元素上：\n\n```html\n<div id=\"app\">\n  <div v-bind:style=\"[baseStyles, overridingStyles]\">菜鸟教程</div>\n</div>\n```\n\n# Vue.js 事件处理器\n\n## v-on\n\n事件监听可以使用 v-on 指令：\n\n```html\n<div id=\"app\">\n  <button v-on:click=\"counter += 1\">增加 1</button>\n  <p>这个按钮被点击了 {{ counter }} 次。</p>\n</div>\n \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    counter: 0\n  }\n})\n</script>\n```\n\nv-on 可以接收一个定义的方法来调用。\n\n```html\n<div id=\"app\">\n   <!-- `greet` 是在下面定义的方法名 -->\n  <button v-on:click=\"greet\">Greet</button>\n</div>\n \n<script>\nvar app = new Vue({\n  el: '#app',\n  data: {\n    name: 'Vue.js'\n  },\n  // 在 `methods` 对象中定义方法\n  methods: {\n    greet: function (event) {\n      // `this` 在方法里指当前 Vue 实例\n      alert('Hello ' + this.name + '!')\n      // `event` 是原生 DOM 事件\n      if (event) {\n          alert(event.target.tagName)\n      }\n    }\n  }\n})\n// 也可以用 JavaScript 直接调用方法\napp.greet() // -> 'Hello Vue.js!'\n</script>\n```\n\n除了直接绑定到一个方法，也可以用内联 JavaScript 语句：\n\n```html\n<div id=\"app\">\n  <button v-on:click=\"say('hi')\">Say hi</button>\n  <button v-on:click=\"say('what')\">Say what</button>\n</div>\n \n<script>\nnew Vue({\n  el: '#app',\n  methods: {\n    say: function (message) {\n      alert(message)\n    }\n  }\n})\n</script>\n```\n\n## 事件修饰符\n\nVue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。\n\nVue.js 通过由点 **.** 表示的指令后缀来调用修饰符。\n\n- `.stop` - 阻止冒泡\n- `.prevent` - 阻止默认事件\n- `.capture` - 阻止捕获\n- `.self` - 只监听触发该元素的事件\n- `.once` - 只触发一次\n- `.left` - 左键事件\n- `.right` - 右键事件\n- `.middle` - 中间滚轮事件\n\n```html\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n\n<!-- click 事件只能点击一次，2.1.4版本新增 -->\n<a v-on:click.once=\"doThis\"></a>\n```\n\n## 按键修饰符\n\nVue 允许为 v-on 在监听键盘事件时添加按键修饰符：\n\n```html\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n```\n\n记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：\n\n```html\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n```\n\n```html\n<p><!-- Alt + C -->\n<input @keyup.alt.67=\"clear\">\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>\n```\n\n# Vue.js 表单\n\n你可以用 v-model 指令在表单控件元素上创建双向数据绑定。\n\n![img](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728105745.png)\n\n## 控件\n\n### 输入框\n\n实例中演示了 input 和 textarea 元素中使用 v-model 实现双向数据绑定：\n\n```html\n<div id=\"app\">\n  <p>input 元素：</p>\n  <input v-model=\"message\" placeholder=\"编辑我……\">\n  <p>消息是: {{ message }}</p>\n    \n  <p>textarea 元素：</p>\n  <p style=\"white-space: pre\">{{ message2 }}</p>\n  <textarea v-model=\"message2\" placeholder=\"多行文本输入……\"></textarea>\n</div>\n \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    message: 'Runoob',\n    message2: '菜鸟教程\\r\\nhttp://www.runoob.com'\n  }\n})\n</script>\n```\n\n## 复选框\n\n复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组：\n\n```html\n<div id=\"app\">\n  <p>单个复选框：</p>\n  <input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\" value=\"hhhhhh\">\n  <label for=\"checkbox\">{{ checked }}</label>\n    \n  <p>多个复选框：</p>\n  <input type=\"checkbox\" id=\"runoob\" value=\"Rob\" v-model=\"checkedNames\">\n  <label for=\"runoob\">Runoob</label>\n  <input type=\"checkbox\" id=\"google\" value=\"Google\" v-model=\"checkedNames\">\n  <label for=\"google\">Google</label>\n  <input type=\"checkbox\" id=\"taobao\" value=\"Taobao\" v-model=\"checkedNames\">\n  <label for=\"taobao\">taobao</label>\n  <br>\n  <span>选择的值为: {{ checkedNames }}</span>\n</div>\n  <script src=\"0.vue.js\"></script>\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    checked : false,\n    checkedNames: []\n  }\n})\n</script>\n```\n\n![image-20210728114748599](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728114757.png)\n\n可见，如果复选框只有一个，通过v-model绑定的checked的值为true或者false，而复选框有多个时，v-model绑定的checkedNames的值为input的value，且checkedNames是一个数组。\n\n### select列表\n\n注意：此时的v-model 添加在select上面，而非option上。\n\n```html\n<div id=\"app\">\n  <select name=\"fruit\" v-model='selected'>\n    <option value=\"\">请选择一个网站</option>\n    <option value=\"www.baidu.com\">百度</option>\n    <option value=\"www.google.com\">谷歌</option>\n  </select>\n  <p>选择的网站为 {{selected}}</p>\n</div>\n<script src=\"0.vue.js\"></script>\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      selected:''\n    }\n  })\n</script>\n```\n\n![image-20210728115636548](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728115637.png)\n\n## 修饰符\n\n### .lazy\n\n在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：\n\n```html\n<!-- 在 \"change\" 而不是 \"input\" 事件中更新 -->\n<input v-model.lazy=\"msg\" >\n```\n\n### .number\n\n如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：\n\n```html\n<input v-model.number=\"age\" type=\"number\">\n```\n\n这通常很有用，因为在 type=\"number\" 时 HTML 中输入的值也总是会返回字符串类型。\n\n### .trim\n\n如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：\n\n```html\n<input v-model.trim=\"msg\">\n```\n\n# Vue.js 组件\n\n组件（Component）是 Vue.js 最强大的功能之一。\n\n组件可以扩展 HTML 元素，封装可重用的代码。\n\n组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：\n\n![img](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728120331.png)\n\n注册一个全局组件语法格式如下：\n\n```js\nVue.component(tagName, options)\n```\n\ntagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：\n\n```html\n<tagName></tagName>\n```\n\n## 全局组件\n\n所有实例都能用全局组件。\n\n```html\n<div id=\"app\">\n  <hello></hello>\n</div>\n<script>\n  // 组件注册\n  Vue.component('hello', {\n    template: '<h1>自定义组件</h1>'\n  })\n  new Vue({\n    el: '#app',\n\n  })\n</script>\n```\n\n局部组件\n\n我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：\n\n```html\n<div id=\"app\">\n  <hello></hello>\n</div>\n<script>\n  // 组件注册\n  Vue.component('hello', {\n    template: '<h1>自定义组件</h1>'\n  })\n  new Vue({\n    el: '#app',\n    components:{\n      // 只能在父模板中使用\n      'hello':{\n        template:'<h1>笑死我么</h1>'\n      }\n    }\n  })\n</script>\n```\n\n## Prop\n\nprop 是子组件用来接受父组件传递过来的数据的一个自定义属性。**父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 \"prop\"**。\n\n```html\n<div id=\"app\">\n  <child message='hello'></child>\n</div>\n<script>\n  // 组件注册\n  Vue.component('child',{\n    // 声明props\n    props:['message'],\n    template:'<span>{{message}}</span>'\n  })\n  new Vue({\n    el:'#app'\n  })\n</script>\n```\n\n## 动态prop\n\n类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件。\n\n注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。\n\n```html\n<div id=\"app\">\n  <child v-bind:message='parentMsg'></child>\n</div>\n<script>\n  // 组件注册\n  Vue.component('child',{\n    // 声明props\n    props:['message'],\n    template:'<span>{{message}}</span>'\n  })\n  // 创建根实例\n  new Vue({\n    el:'#app',\n    data:{\n      parentMsg:'父组件内容aa'\n    }\n  })\n</script>\n```\n\n以下实例中使用 v-bind 指令将 todo 传到每一个重复的组件中：\n\n```html\n<div id=\"app\">\n  <ol>\n    <todo-item v-for='(item) in sites' v-bind:todo=item.text></todo-item>\n  </ol>\n</div>\n<script>\n  // 组件注册\n  Vue.component('todo-item',{\n    props:['todo'],\n    template:'<li>{{todo}}</li>'\n  })\n  // 创建根实例\n  new Vue({\n    el:'#app',\n    data:{\n      sites:[\n        {text:'jiaqi'},\n        {text:'google'},\n        {text:'taobao'}\n      ]\n    }\n    \n  })\n</script>\n```\n\n## Prop 验证\n\n组件可以为 props 指定验证要求。当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。\n\n为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：\n\n```js\nVue.component('my-component',{\n  props:{\n    // 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)\n    propA:Number,\n    // 多个可能的类型\n    propB:[String,Number],\n    // 必填的字符串\n    propC:{\n      type:String,\n      required:true\n    },\n    // 带有默认值的数字\n    propD:{\n      type:Number,\n      default:100\n    },\n    // 带有默认值的对象\n    // 对象或数组的默认值必须从一个工厂函数中获取\n    propE:{\n      type:Object,\n      default:function(){\n        return {hello:'hello'}\n      }\n    },\n    // 自定义验证函数\n    propF:{\n      validator:function(value){\n        // 这个值必须从下面的字符串中选择一个\n        return ['success','warning','danger'].indexOf(value)!==-1;\n      }\n    }\n  }\n})\n```\n\ntype 可以是下面原生构造器：\n\n- `String`\n- `Number`\n- `Boolean`\n- `Array`\n- `Object`\n- `Date`\n- `Function`\n- `Symbol`\n\ntype 也可以是一个自定义构造器，使用 instanceof 检测。\n\n# Vue组件- 自定义事件\n\n父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！\n\n我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：\n\n- 使用 `$on(eventName)` 监听事件\n- 使用 `$emit(eventName)` 触发事件\n\n另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。\n\n```html\n<div id=\"app\">\n    <div id=\"counter-event-example\">\n      <p>{{ total }}</p>\n      <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n      <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n    </div>\n</div>\n \n<script>\nVue.component('button-counter', {\n  template: '<button v-on:click=\"incrementHandler\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    incrementHandler: function () {\n      this.counter += 1\n      this.$emit('increment')\n    }\n  },\n})\nnew Vue({\n  el: '#counter-event-example',\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal: function () {\n      this.total += 1\n    }\n  }\n})\n</script>\n```\n\n如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：\n\n```html\n<my-component v-on:click.native=\"doTheThing\"></my-component>\n```\n\n```html\n<div id=\"app\">\n  {{total}}\n  <my-component @click.native='dosome'></my-component>\n</div>\n<script>\n  Vue.component('my-component',{\n    template:`<button>按我<botton>`\n  })\n  // 创建根实例\n  new Vue({\n    el: '#app',\n    data:{\n      total:''\n    },\n    methods: {\n      dosome(){\n        this.total++;\n      }\n    },\n  })\n</script>\n```\n\n## data 必须是一个函数\n\n上面例子中，可以看到 button-counter 组件中的 data 不是一个对象，而是一个函数：\n\n```js\ndata: function () {\n  return {\n    count: 0\n  }\n}\n```\n\n这样的好处就是每个实例可以维护一份被返回对象的独立的拷贝，如果 data 是一个对象则会影响到其他实例，如下所示：\n\n```html\n<div id=\"components-demo3\" class=\"demo\">\n    <button-counter2></button-counter2>\n    <button-counter2></button-counter2>\n    <button-counter2></button-counter2>\n</div>\n \n<script>\nvar buttonCounter2Data = {\n  count: 0\n}\nVue.component('button-counter2', {\n    /*\n    data: function () {\n        // data 选项是一个函数，组件不相互影响\n        return {\n            count: 0\n        }\n    },\n    */\n    data: function () {\n        // data 选项是一个对象，会影响到其他实例\n        return buttonCounter2Data\n    },\n    template: '<button v-on:click=\"count++\">点击了 {{ count }} 次。</button>'\n})\nnew Vue({ el: '#components-demo3' })\n</script>\n```\n\n## 自定义组件的v-model\n\n**组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件。**\n\n```html\n<input v-model=\"parentData\">\n```\n\n等价于：\n\n```html\n<input \n    :value=\"parentData\"\n    @input=\"parentData = $event.target.value\"\n>\n```\n\n以下实例自定义组件 runoob-input，父组件的 num 的初始值是 100，更改子组件的值能实时更新父组件的 num：\n\n```html\n<div id=\"app\">\n    <runoob-input v-model=\"num\"></runoob-input>\n    <p>输入的数字为:{{num}}</p>\n</div>\n<script>\nVue.component('runoob-input', {\n    template: `\n    <p>   <!-- 包含了名为 input 的事件 -->\n      <input\n       ref=\"input\"\n       :value=\"value\" \n       @input=\"$emit('input', $event.target.value)\"\n      >\n    </p>\n    `,\n    props: ['value'], // 名为 value 的 prop\n})\n   \nnew Vue({\n    el: '#app',\n    data: {\n        num: 100,\n    }\n})\n</script>\n```\n\n由于 v-model 默认传的是 value，不是 checked，所以对于复选框或者单选框的组件时，我们需要使用 model 选项，model 选项可以指定当前的事件类型和传入的 props。\n\n```html\n<div id=\"app\">\n    <base-checkbox v-model=\"lovingVue\"></base-checkbox> \n     <div v-show=\"lovingVue\"> \n        如果选择框打勾我就会显示。 \n    </div>\n</div> \n<script>\n// 注册\nVue.component('base-checkbox', {\n \n  model: {\n    prop: 'checked',\n    event: 'change'  // onchange 事件\n  },\n  props: {\n    checked: Boolean\n  },\n   \n  template: `\n    <input\n      type=\"checkbox\"\n      v-bind:checked=\"checked\"\n      v-on:change=\"$emit('change', $event.target.checked)\"\n    >\n  `\n})\n// 创建根实例\nnew Vue({\n  el: '#app',\n  data: {\n    lovingVue: true\n  }\n})\n</script>\n```\n\n# Vue.js 自定义指令\n\n除了默认设置的核心指令( v-model 和 v-show ), Vue 也允许注册自定义指令。\n\n下面我们注册一个全局指令 v-focus, 该指令的功能是在页面加载时，元素获得焦点：\n\n```html\n<div id=\"app\">\n    <p>页面载入时，input 元素自动获取焦点：</p>\n    <input v-focus>\n</div>\n \n<script>\n// 注册一个全局自定义指令 v-focus\nVue.directive('focus', {\n  // 当绑定元素插入到 DOM 中。\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n// 创建根实例\nnew Vue({\n  el: '#app'\n})\n</script>\n```\n\n我们也可以在实例使用 directives 选项来注册局部指令，这样指令只能在这个实例中使用：\n\n```html\n<div id=\"app\">\n  <p>页面载入时，input 元素自动获取焦点：</p>\n  <input v-focus>\n</div>\n \n<script>\n// 创建根实例\nnew Vue({\n  el: '#app',\n  directives: {\n    // 注册一个局部的自定义指令 v-focus\n    focus: {\n      // 指令的定义\n      inserted: function (el) {\n        // 聚焦元素\n        el.focus()\n      }\n    }\n  }\n})\n</script>\n```\n\n## 钩子\n\n### 钩子函数\n\n指令定义函数提供了几个钩子函数（可选）：\n\n- `bind`: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。\n- `inserted`: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。\n- `update`: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。\n- `componentUpdated`: 被绑定元素所在模板完成一次更新周期时调用。\n- `unbind`: 只调用一次， 指令与元素解绑时调用。\n\n### 钩子函数的参数\n\n钩子函数的参数有：\n\n- **el**: 指令所绑定的元素，可以用来直接操作 DOM 。\n- binding: 一个对象，包含以下属性：\n  - **name**: 指令名，不包括 `v-` 前缀。\n  - **value**: 指令的绑定值， 例如： `v-my-directive=\"1 + 1\"`, value 的值是 `2`。\n  - **oldValue**: 指令绑定的前一个值，仅在 `update` 和 `componentUpdated` 钩子中可用。无论值是否改变都可用。\n  - **expression**: 绑定值的表达式或变量名。 例如 `v-my-directive=\"1 + 1\"` ， expression 的值是 `\"1 + 1\"`。\n  - **arg**: 传给指令的参数。例如 `v-my-directive:foo`， arg 的值是 `\"foo\"`。\n  - **modifiers**: 一个包含修饰符的对象。 例如： `v-my-directive.foo.bar`, 修饰符对象 modifiers 的值是 `{ foo: true, bar: true }`。\n- **vnode**: Vue 编译生成的虚拟节点。\n- **oldVnode**: 上一个虚拟节点，仅在 `update` 和 `componentUpdated` 钩子中可用。\n\n```html\n<div id=\"app\"  v-runoob:hello.a.b=\"message\">\n</div>\n \n<script>\nVue.directive('runoob', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      'name: '       + s(binding.name) + '<br>' +\n      'value: '      + s(binding.value) + '<br>' +\n      'expression: ' + s(binding.expression) + '<br>' +\n      'argument: '   + s(binding.arg) + '<br>' +\n      'modifiers: '  + s(binding.modifiers) + '<br>' +\n      'vnode keys: ' + Object.keys(vnode).join(', ')\n  }\n})\nnew Vue({\n  el: '#app',\n  data: {\n    message: '菜鸟教程!'\n  }\n})\n</script>\n```\n\n![image-20210730162439990](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730162448.png)\n\n有时候我们不需要其他钩子函数，我们可以简写函数，如下格式：\n\n```js\nVue.directive('runoob', function (el, binding) {\n  // 设置指令的背景颜色\n  el.style.backgroundColor = binding.value.color\n})\n```\n\n指令函数可接受所有合法的 JavaScript 表达式，以下实例传入了 JavaScript 对象：\n\n```html\n<div id=\"app\">\n  <div v-jiaqi='{color:\"pink\",text:\"666\"}'></div>\n</div>\n<script>\n  Vue.directive('jiaqi',function(el,binding){\n    el.style.color=binding.value.color;\n    el.innerHTML=binding.value.text;\n  })\n  new Vue({\n    el: '#app',\n  })\n</script>\n```\n\n# Vue数组处理\n\n## 变异方法\n\n1.变异方法和替换数组有什么区别\n\n- 变异的方法能够实现数据更新视图自动更新\n- 替换数组不会修改原始数据，数据改变视图不一定更新\n\n2.变异方法和替换数组有哪些\n\n- 变异方法：push  pop shift unshift  splice  sort  reverse\n\n- 替换数组：filter  concat  slice\n\n```html\n<div id=\"app\">\n  <div><input type=\"text\" v-model='fname'></div>\n  <button @click='add'>添加</button> \n  <button @click='del'>删除</button>\n  <button @click='change'>替换</button>\n  <ol>\n    <li v-for='item in list'>{{item}}</li>\n  </ol>\n</div>\n<script>\n\n  new Vue({\n    el: '#app',\n    data() {\n      return {\n        list:['apple','orange','banana'],\n        fname:''\n      }\n    },\n    methods: {\n      add:function(){\n        this.list.push(this.fname);\n      },\n      del(){\n        this.list.pop(this.fname);\n      },\n      change(){\n        this.list=this.list.slice(0,2)\n      }\n    },\n  })\n</script>\n```\n\n## 数组响应式变化\n\n- Vue.set(vm.items, indexOfItem, newValue)  \n- vm.$set(vm.items, indexOfItem, newValue)  \n- ① 参数一表示要处理的数组名称\n  ② 参数二表示要处理的数组的索引\n  ③ 参数三表示要处理的数组的值  \n\n```js\nlet vm = new Vue({\n  el: '#app',\n  data() {\n    return {\n      list: ['apple', 'orange', 'banana'],\n    }\n  },\n})\nVue.set(vm.list,0,'lemon'); // 数据和视图都发生了变化\nvm.$set(vm.list,1,'banana');// 数据和视图都发生了变化\n//  vm.list[1]='lemon';  数据被修改了，但是视图没有被修改\n```\n\n## 对象响应式变化\n\n- Vue.set(vm.items, key, newValue)  \n- vm.$set(vm.items, key, newValue)  \n- ① 参数一表示要处理的对象名称\n  ② 参数二表示要处理的对象的属性名\n  ③ 参数三表示要处理的对象的值  \n\n```html\n<div id=\"app\">\n  <div>\n    <p>{{info.name}}</p>\n    <p>{{info.age}}</p>\n    <p>{{info.gender}}</p>\n  </div>\n</div>\n<script>\n\n  let vm = new Vue({\n    el: '#app',\n    data() {\n      return {\n        info: {\n          name: 'lisi',\n          age: 23,\n          gender: 'male'\n        }\n      }\n    },\n  })\n\n  // vm.info.gender='female'  不会修改视图层，只会修改数据\n  vm.$set(vm.info, 'gender', 'non-binary') // 而且此时再用vm.info.gender来修改也是响应式的\n</script>\n```\n\n\n\n","source":"_posts/Vue学习笔记.md","raw":"---\ntitle: Vue学习笔记\ndate: 2021-07-27 18:38:33\ntags: Vue\n---\n\n\n笔记基于：https://www.runoob.com/vue2/\n\n# Vue起步\n\n每个 Vue 应用都需要通过实例化 Vue 来实现。\n\n语法格式如下：\n\n```html\n<div id=\"app\">\n    <h1>site : {{site}}</h1>\n    <h1>url : {{url}}</h1>\n    <h1>{{details()}}</h1>\n</div>\n<script>\n    var vm = new Vue({\n        el: '#app',\n        data: {\n            site: \"菜鸟教程\",\n            url: \"www.runoob.com\",\n            alexa: \"10000\"\n        },\n        methods: {\n            details: function() {\n                return  this.site + \" - 学的不仅是技术，更是梦想！\";\n            }\n        }\n    })\n</script>\n```\n\n可以看到在 Vue 构造器中有一个el 参数，它是 DOM 元素中的 id。在上面实例中 id 为 app，在 div 元素中：\n\n```html\n<div id = \"app\"></div>\n```\n\n这意味着我们接下来的改动全部在以上指定的 div 内，div 外部不受影响。\n\n接下来我们看看如何定义数据对象。\n\n**data** 用于定义属性，实例中有三个属性分别为：site、url、alexa。\n\n**methods** 用于定义的函数，可以通过 return 来返回函数值。\n\n`{{ }}` 用于输出对象属性和函数返回值。\n\n```html\n<div id=\"vue_det\">\n    <h1>site : {{site}}</h1>\n    <h1>url : {{url}}</h1>\n    <h1>{{details()}}</h1>\n</div>\n```\n\n当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，html 视图将也会产生相应的变化。\n\n## 实例一\n\n```html\n<div id=\"vue_det\">\n    <h1>site : {{site}}</h1>\n    <h1>url : {{url}}</h1>\n    <h1>Alexa : {{alexa}}</h1>\n</div>\n<script type=\"text/javascript\">\n// 我们的数据对象\nvar data = { site: \"菜鸟教程\", url: \"www.runoob.com\", alexa: 10000}\nvar vm = new Vue({\n    el: '#vue_det',\n    data: data\n})\n// 它们引用相同的对象！\ndocument.write(vm.site === data.site) // true\ndocument.write(\"<br>\")\n// 设置属性也会影响到原始数据\nvm.site = \"Runoob\"\ndocument.write(data.site + \"<br>\") // Runoob\n \n// ……反之亦然\ndata.alexa = 1234\ndocument.write(vm.alexa) // 1234\n</script>\n```\n\n## 实例二\n\n除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。例如：\n\n```js\n<div id=\"vue_det\">\n    <h1>site : {{site}}</h1>\n    <h1>url : {{url}}</h1>\n    <h1>Alexa : {{alexa}}</h1>\n</div>\n<script type=\"text/javascript\">\n// 我们的数据对象\nvar data = { site: \"菜鸟教程\", url: \"www.runoob.com\", alexa: 10000}\nvar vm = new Vue({\n    el: '#vue_det',\n    data: data\n})\n// 它们引用相同的对象！\ndocument.write(vm.site === data.site) // true\ndocument.write(\"<br>\")\n// 设置属性也会影响到原始数据\nvm.site = \"Runoob\"\ndocument.write(data.site + \"<br>\") // Runoob\n \n// ……反之亦然\ndata.alexa = 1234\ndocument.write(vm.alexa) // 1234\n</script>\n```\n\n# 模板语法\n\nVue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。\n\nVue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。\n\n结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。\n\n## 插值\n\n### 文本\n\n数据绑定最常见的形式就是使用 `{{...}}`（双大括号）的文本插值：\n\n```html\n<div id=\"app\">\n  <p>{{ message }}</p>\n</div>\n\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue.js!'\n  }\n})\n</script>\n```\n\n### html和text\n\n 使用 v-html 指令用于输出 html 代码，使用v-text用于输出text代码：\n\n```HTML\n<div id=\"app\">\n    <div v-html=\"message\"></div>\n    <div v-text=\"message\"></div>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    message: '<h1>菜鸟教程</h1>'\n  }\n})\n</script>\n```\n\n![image-20210727192913338](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727192921.png)\n\n### 属性\n\nHTML 属性中的值应使用 v-bind 指令。\n\n以下实例判断 use 的值，如果为 true 使用 class1 类的样式，否则不使用该类：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n</head>\n<style>\n.class1{\n  background: #444;\n  color: #eee;\n}\n</style>\n<body>\n<script src=\"https://cdn.staticfile.org/vue/2.2.2/vue.min.js\"></script>\n\n<div id=\"app\">\n  <label for=\"r1\">修改颜色</label><input type=\"checkbox\" v-model=\"use\" id=\"r1\">\n  <br><br>\n  <div v-bind:class=\"{'class1': use}\">\n    v-bind:class 指令\n  </div>\n</div>\n    \n<script>\nnew Vue({\n    el: '#app',\n  data:{\n      use: false\n  }\n});\n</script>\n</body>\n```\n\n![image-20210727193358942](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727193400.png)\n\n### 表达式\n\nVue.js 都提供了完全的 JavaScript 表达式支持。\n\n```html\n<div id=\"app\">\n    {{5+5}}<br>\n    {{ ok ? 'YES' : 'NO' }}<br>\n    {{ message.split('').reverse().join('') }}\n    <div v-bind:id=\"'list-' + id\">菜鸟教程</div>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    ok: true,\n    message: 'RUNOOB',\n    id : 1\n  }\n})\n</script>\n```\n\n### 指令\n\n指令是带有 v- 前缀的特殊属性。\n\n指令用于在表达式的值改变时，将某些行为应用到 DOM 上。如下例子：\n\n```html\n<div id=\"app\">\n    <p v-if=\"seen\">现在你看到我了</p>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    seen: true\n  }\n})\n</script>\n```\n\n这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。\n\n另一个例子是 v-on 指令，它用于监听 DOM 事件：监听\n\n```html\n<a v-on:click=\"doSomething\">\n```\n\n### 修饰符\n\n修饰符是以半角句号 **.** 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，**.prevent** 修饰符告诉 **v-on** 指令对于触发的事件调用 **event.preventDefault()**：\n\n```js\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\n\n## 用户输入\n\n在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定：\n\n```html\n<div id=\"app\">\n    <p>{{ message }}</p>\n    <input v-model=\"message\">\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    message: 'Runoob!'\n  }\n})\n</script>\n```\n\n使用v-model会将input等输入框的value发生变化，会将其值传给Vue实例data的message属性，同时如果Vue实例的message发生变化，也会将数据更新表单的value。\n\n**v-model** 指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。\n\n## 过滤器\n\nVue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由\"管道符\"指示, 格式如下：\n\n```html\n<!-- 在两个大括号中 -->\n{{ message | capitalize }}\n\n<!-- 在 v-bind 指令中 -->\n<div v-bind:id=\"rawId | formatId\"></div>\n```\n\n过滤器函数接受表达式的值作为第一个参数。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<script src=\"https://cdn.staticfile.org/vue/2.2.2/vue.min.js\"></script>\n</head>\n<body>\n<div id=\"app\">\n  {{ message | capitalize }}\n</div>\n\t\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n\tmessage: 'runoob'\n  },\n  filters: {\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n</script>\n</body>\n</html>\n```\n\n## 缩写\n\nVue.js 为两个最为常用的指令提供了特别的缩写：\n\n### v-bind\n\n```html\n<!-- 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- 缩写 -->\n<a :href=\"url\"></a>\n```\n\n### v-on 缩写\n\n```html\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- 缩写 -->\n<a @click=\"doSomething\"></a\n```\n\n# Vue.js 条件和循环语句\n\n## 条件判断\n\n条件判断使用 v-if 指令：\n\n### v-if\n\n```html\n<div id=\"app\">\n    <p v-if=\"seen\">现在你看到我了</p>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    seen: true,\n  }\n})\n</script>\n```\n\n这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。\n\n### v-else\n\n可以用 v-else 指令给 v-if 添加一个 \"else\" 块：\n\n随机生成一个数字，判断是否大于0.5，然后输出对应信息：\n\n```html\n<div id=\"app\">\n    <div v-if=\"Math.random() > 0.5\">\n      Sorry\n    </div>\n    <div v-else>\n      Not sorry\n    </div>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app'\n})\n</script>\n```\n\n### v-else-if\n\n用作 v-if 的 else-if 块，可以链式的多次使用。\n\n```html\n<div id=\"app\">\n    <div v-if=\"type === 'A'\">\n      A\n    </div>\n    <div v-else-if=\"type === 'B'\">\n      B\n    </div>\n    <div v-else-if=\"type === 'C'\">\n      C\n    </div>\n    <div v-else>\n      Not A/B/C\n    </div>\n</div>\n    \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    type: 'C'\n  }\n})\n</script>\n```\n\n> v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。\n\n## 循环语句\n\n循环使用 v-for 指令。v-for 指令需要以 **site in sites** 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。\n\n### v-for 遍历数组\n\nv-for 可以绑定数据到数组来渲染一个列表：\n\n```html\n<div id=\"app\">\n  <ol>\n    <li v-for=\"site in sites\">\n      {{ site.name }}\n    </li>\n  </ol>\n</div>\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    sites: [\n      { name: 'Runoob' },\n      { name: 'Google' },\n      { name: 'Taobao' }\n    ]\n  }\n})\n</script>\n```\n\n![image-20210727232644828](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727232652.png)\n\n### v-for迭代对象\n\nv-for 可以通过一个对象的属性来迭代数据：\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"value in object\">\n    {{ value }}\n    </li>\n  </ul>\n</div>\n \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    object: {\n      name: '菜鸟教程',\n      url: 'http://www.runoob.com',\n      slogan: '学的不仅是技术，更是梦想！'\n    }\n  }\n})\n</script>\n```\n\n以提供第二个的参数为键名，第三个参数为索引。\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"(value, key, index) in object\">\n     {{ index }}. {{ key }} : {{ value }}\n    </li>\n  </ul>\n</div>\n```\n\n### v-for迭代整数\n\n```html\n<div id=\"app\">\n  <ul>\n    <li v-for=\"n in 10\">\n     {{ n }}\n    </li>\n  </ul>\n</div>\n```\n\n# Vue.js 计算属性\n\n## computed\n\n计算属性关键词: **computed**。计算属性在处理一些复杂逻辑时是很有用的。可以看下以下反转字符串的例子：\n\n```html\n<div id=\"app\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n\n 上述例子变得很复杂，也不容易看懂理解。\n\n接着，让我们看看使用计算属性的实例：\n\n```html\n<div id=\"app\">\n  <p>原始字符串: {{ message }}</p>\n  <p>计算后反转字符串: {{ reversedMessage }}</p>\n</div>\n \n<script>\nvar vm = new Vue({\n  el: '#app',\n  data: {\n    message: 'Runoob!'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n```\n\n上述例子 中声明了一个计算属性 reversedMessage 。提供的函数将用作属性 vm.reversedMessage 的 getter 。\n\nvm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。\n\n## computed vs methods\n\n我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。\n\n```html\n<div id=\"app\">\n  <p>原始字符串: {{ message }}</p>\n  <p>计算后反转字符串: {{ reversedMessage }}</p>\n  <p>使用方法后反转字符串: {{ reversedMessage2() }}</p>\n</div>\n\n<script>\nvar vm = new Vue({\n  el: '#app',\n  data: {\n    message: 'Runoob!'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  },\n  methods: {\n    reversedMessage2: function () {\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n</script>\n```\n\n> 关于getter和setter，[点击查看](https://jiaqicoder.com/2021/07/27/%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7/#%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7-getter%E5%92%8Csetter)\n\n## computed setter\n\ncomputed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：\n\n```html\n<script src=\"0.vue.js\"></script>\n<div id=\"app\">\n  <p>{{site}}</p>\n</div>\n\n<script>\n  let vm=new Vue({\n    el:'#app',\n    data:{\n      name:'Google',\n      url:'http://www.google.com'\n    },\n    computed:{\n      site:{\n        // getter\n        get:function () {\n          return this.name+' '+this.url;\n        },\n        // setter\n        set:function(newValue){\n          [this.name,this.url]=newValue.split(' ');\n        }\n      }\n    }\n  })\n  // 1s 后页面上的site将会发生变化\n  setInterval(()=>{\n    vm.site='jiaqi https://www.jiaqicoder.com'\n  },1000);\n</script>\n```\n\n# Vue.js 监听属性\n\n虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 `watch` 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。\n\n```html\n<div id=\"app\">\n  <p>{{counter}}</p>\n  <p>{{text}}</p>\n  <button @click='counter++'>按我</button>\n</div>\n\n<script src=\"0.vue.js\"></script>\n<script>\n  let vm = new Vue({\n    el: '#app',\n    data: {\n      counter: 1,\n      text:''\n    },\n    watch:{\n      counter:function(newValue,oldValue){\n        this.text=`counter从${oldValue}变为${newValue}`;\n      }\n    }\n  })\n</script>\n```\n\n![动1](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728001253.gif)\n\n以下实例进行**华氏度**与**摄氏度**之间的换算：\n\n```html\n<div id=\"app\">\n  华氏度: <input type=\"text\" @change='fahrenheit=$event.target.value' :value='fahrenheit'>\n  摄氏度：<input type=\"text\" @change='celsius=$event.target.value' :value='celsius'>\n</div>\n\n<script src=\"0.vue.js\"></script>\n<script>\n  let vm = new Vue({\n    el: '#app',\n    data: {\n      fahrenheit: '',\n      celsius: ''\n    },\n    watch: {\n      fahrenheit: function (value) {\n        this.celsius = ((value - 32) / 1.8).toFixed(2);\n      },\n      celsius: function (value) {\n        this.fahrenheit = (value * 1.8 + 32).toFixed(2);\n      }\n    }\n  })\n</script>\n```\n\n![动2](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728004031.gif)\n\n# Vue.js 样式绑定\n\n## Vue.js class\n\nclass 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。\n\nVue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。\n\n## class属性绑定\n\n我们可以为 v-bind:class 设置一个对象，从而动态的切换 class:\n\n```html\n<div v-bind:class=\"{ 'active': isActive }\"></div>\n```\n\n如果isActive的值为true，则上面的代码相当于：\n\n```html\n<div class=\"active\"></div>\n```\n\n我们也可以直接绑定一个对象\n\n```html\n<div id=\"app\">\n  <div v-bind:class=\"classObject\"></div>\n</div>\n\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    classObject: {\n      active: true,\n      'text-danger': true\n    }\n  }\n})\n</script>\n```\n\n此外，我们也可以在这里绑定返回对象的计算属性。\n\n```html\n<div id=\"app\">\n  <div v-bind:class=\"classObject\"></div>\n</div>\n<script>\n\nnew Vue({\n  el: '#app',\n  data: {\n    isActive: true,\n    error: {\n      value: true,\n      type: 'fatal'\n    }\n  },\n  computed: {\n    classObject: function () {\n      return {\n  base: true,\n        active: this.isActive && !this.error.value,\n        'text-danger': this.error.value && this.error.type === 'fatal',\n      }\n    }\n  }\n})\n</script>\n```\n\n### 数组语法\n\n我们可以把一个数组传给 **v-bind:class** ，实例如下：\n\n```html\n<div id=\"app\">\n\t<div v-bind:class=\"[activeClass, errorClass]\"></div>\n</div>\n\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n  }\n})\n</script>\n```\n\n我们还可以使用三元表达式来切换列表中的 class ：errorClass 是始终存在的，isActive 为 true 时添加 activeClass 类：\n\n```html\n<div v-bind:class=\"[errorClass ,isActive ? activeClass : '']\"></div>\n```\n\n## Vue.js style 内联样式\n\n我们可以在 **v-bind:style** 直接设置样式：\n\n```html\n<div id=\"app\">\n    <div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\">菜鸟教程</div>\n</div>\n```\n\n也可以直接绑定到一个样式对象，让模板更清晰：\n\n```html\n<div id=\"app\">\n  <div v-bind:style=\"styleObject\">菜鸟教程</div>\n</div>\n\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    styleObject: {\n      color: 'green',\n      fontSize: '30px'\n    }\n  }\n})\n</script>\n```\n\nv-bind:style 可以使用数组将多个样式对象应用到一个元素上：\n\n```html\n<div id=\"app\">\n  <div v-bind:style=\"[baseStyles, overridingStyles]\">菜鸟教程</div>\n</div>\n```\n\n# Vue.js 事件处理器\n\n## v-on\n\n事件监听可以使用 v-on 指令：\n\n```html\n<div id=\"app\">\n  <button v-on:click=\"counter += 1\">增加 1</button>\n  <p>这个按钮被点击了 {{ counter }} 次。</p>\n</div>\n \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    counter: 0\n  }\n})\n</script>\n```\n\nv-on 可以接收一个定义的方法来调用。\n\n```html\n<div id=\"app\">\n   <!-- `greet` 是在下面定义的方法名 -->\n  <button v-on:click=\"greet\">Greet</button>\n</div>\n \n<script>\nvar app = new Vue({\n  el: '#app',\n  data: {\n    name: 'Vue.js'\n  },\n  // 在 `methods` 对象中定义方法\n  methods: {\n    greet: function (event) {\n      // `this` 在方法里指当前 Vue 实例\n      alert('Hello ' + this.name + '!')\n      // `event` 是原生 DOM 事件\n      if (event) {\n          alert(event.target.tagName)\n      }\n    }\n  }\n})\n// 也可以用 JavaScript 直接调用方法\napp.greet() // -> 'Hello Vue.js!'\n</script>\n```\n\n除了直接绑定到一个方法，也可以用内联 JavaScript 语句：\n\n```html\n<div id=\"app\">\n  <button v-on:click=\"say('hi')\">Say hi</button>\n  <button v-on:click=\"say('what')\">Say what</button>\n</div>\n \n<script>\nnew Vue({\n  el: '#app',\n  methods: {\n    say: function (message) {\n      alert(message)\n    }\n  }\n})\n</script>\n```\n\n## 事件修饰符\n\nVue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。\n\nVue.js 通过由点 **.** 表示的指令后缀来调用修饰符。\n\n- `.stop` - 阻止冒泡\n- `.prevent` - 阻止默认事件\n- `.capture` - 阻止捕获\n- `.self` - 只监听触发该元素的事件\n- `.once` - 只触发一次\n- `.left` - 左键事件\n- `.right` - 右键事件\n- `.middle` - 中间滚轮事件\n\n```html\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n\n<!-- click 事件只能点击一次，2.1.4版本新增 -->\n<a v-on:click.once=\"doThis\"></a>\n```\n\n## 按键修饰符\n\nVue 允许为 v-on 在监听键盘事件时添加按键修饰符：\n\n```html\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n```\n\n记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：\n\n```html\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n```\n\n```html\n<p><!-- Alt + C -->\n<input @keyup.alt.67=\"clear\">\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>\n```\n\n# Vue.js 表单\n\n你可以用 v-model 指令在表单控件元素上创建双向数据绑定。\n\n![img](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728105745.png)\n\n## 控件\n\n### 输入框\n\n实例中演示了 input 和 textarea 元素中使用 v-model 实现双向数据绑定：\n\n```html\n<div id=\"app\">\n  <p>input 元素：</p>\n  <input v-model=\"message\" placeholder=\"编辑我……\">\n  <p>消息是: {{ message }}</p>\n    \n  <p>textarea 元素：</p>\n  <p style=\"white-space: pre\">{{ message2 }}</p>\n  <textarea v-model=\"message2\" placeholder=\"多行文本输入……\"></textarea>\n</div>\n \n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    message: 'Runoob',\n    message2: '菜鸟教程\\r\\nhttp://www.runoob.com'\n  }\n})\n</script>\n```\n\n## 复选框\n\n复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组：\n\n```html\n<div id=\"app\">\n  <p>单个复选框：</p>\n  <input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\" value=\"hhhhhh\">\n  <label for=\"checkbox\">{{ checked }}</label>\n    \n  <p>多个复选框：</p>\n  <input type=\"checkbox\" id=\"runoob\" value=\"Rob\" v-model=\"checkedNames\">\n  <label for=\"runoob\">Runoob</label>\n  <input type=\"checkbox\" id=\"google\" value=\"Google\" v-model=\"checkedNames\">\n  <label for=\"google\">Google</label>\n  <input type=\"checkbox\" id=\"taobao\" value=\"Taobao\" v-model=\"checkedNames\">\n  <label for=\"taobao\">taobao</label>\n  <br>\n  <span>选择的值为: {{ checkedNames }}</span>\n</div>\n  <script src=\"0.vue.js\"></script>\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    checked : false,\n    checkedNames: []\n  }\n})\n</script>\n```\n\n![image-20210728114748599](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728114757.png)\n\n可见，如果复选框只有一个，通过v-model绑定的checked的值为true或者false，而复选框有多个时，v-model绑定的checkedNames的值为input的value，且checkedNames是一个数组。\n\n### select列表\n\n注意：此时的v-model 添加在select上面，而非option上。\n\n```html\n<div id=\"app\">\n  <select name=\"fruit\" v-model='selected'>\n    <option value=\"\">请选择一个网站</option>\n    <option value=\"www.baidu.com\">百度</option>\n    <option value=\"www.google.com\">谷歌</option>\n  </select>\n  <p>选择的网站为 {{selected}}</p>\n</div>\n<script src=\"0.vue.js\"></script>\n<script>\n  new Vue({\n    el: '#app',\n    data: {\n      selected:''\n    }\n  })\n</script>\n```\n\n![image-20210728115636548](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728115637.png)\n\n## 修饰符\n\n### .lazy\n\n在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：\n\n```html\n<!-- 在 \"change\" 而不是 \"input\" 事件中更新 -->\n<input v-model.lazy=\"msg\" >\n```\n\n### .number\n\n如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：\n\n```html\n<input v-model.number=\"age\" type=\"number\">\n```\n\n这通常很有用，因为在 type=\"number\" 时 HTML 中输入的值也总是会返回字符串类型。\n\n### .trim\n\n如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：\n\n```html\n<input v-model.trim=\"msg\">\n```\n\n# Vue.js 组件\n\n组件（Component）是 Vue.js 最强大的功能之一。\n\n组件可以扩展 HTML 元素，封装可重用的代码。\n\n组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：\n\n![img](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728120331.png)\n\n注册一个全局组件语法格式如下：\n\n```js\nVue.component(tagName, options)\n```\n\ntagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：\n\n```html\n<tagName></tagName>\n```\n\n## 全局组件\n\n所有实例都能用全局组件。\n\n```html\n<div id=\"app\">\n  <hello></hello>\n</div>\n<script>\n  // 组件注册\n  Vue.component('hello', {\n    template: '<h1>自定义组件</h1>'\n  })\n  new Vue({\n    el: '#app',\n\n  })\n</script>\n```\n\n局部组件\n\n我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：\n\n```html\n<div id=\"app\">\n  <hello></hello>\n</div>\n<script>\n  // 组件注册\n  Vue.component('hello', {\n    template: '<h1>自定义组件</h1>'\n  })\n  new Vue({\n    el: '#app',\n    components:{\n      // 只能在父模板中使用\n      'hello':{\n        template:'<h1>笑死我么</h1>'\n      }\n    }\n  })\n</script>\n```\n\n## Prop\n\nprop 是子组件用来接受父组件传递过来的数据的一个自定义属性。**父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 \"prop\"**。\n\n```html\n<div id=\"app\">\n  <child message='hello'></child>\n</div>\n<script>\n  // 组件注册\n  Vue.component('child',{\n    // 声明props\n    props:['message'],\n    template:'<span>{{message}}</span>'\n  })\n  new Vue({\n    el:'#app'\n  })\n</script>\n```\n\n## 动态prop\n\n类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件。\n\n注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。\n\n```html\n<div id=\"app\">\n  <child v-bind:message='parentMsg'></child>\n</div>\n<script>\n  // 组件注册\n  Vue.component('child',{\n    // 声明props\n    props:['message'],\n    template:'<span>{{message}}</span>'\n  })\n  // 创建根实例\n  new Vue({\n    el:'#app',\n    data:{\n      parentMsg:'父组件内容aa'\n    }\n  })\n</script>\n```\n\n以下实例中使用 v-bind 指令将 todo 传到每一个重复的组件中：\n\n```html\n<div id=\"app\">\n  <ol>\n    <todo-item v-for='(item) in sites' v-bind:todo=item.text></todo-item>\n  </ol>\n</div>\n<script>\n  // 组件注册\n  Vue.component('todo-item',{\n    props:['todo'],\n    template:'<li>{{todo}}</li>'\n  })\n  // 创建根实例\n  new Vue({\n    el:'#app',\n    data:{\n      sites:[\n        {text:'jiaqi'},\n        {text:'google'},\n        {text:'taobao'}\n      ]\n    }\n    \n  })\n</script>\n```\n\n## Prop 验证\n\n组件可以为 props 指定验证要求。当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。\n\n为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：\n\n```js\nVue.component('my-component',{\n  props:{\n    // 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)\n    propA:Number,\n    // 多个可能的类型\n    propB:[String,Number],\n    // 必填的字符串\n    propC:{\n      type:String,\n      required:true\n    },\n    // 带有默认值的数字\n    propD:{\n      type:Number,\n      default:100\n    },\n    // 带有默认值的对象\n    // 对象或数组的默认值必须从一个工厂函数中获取\n    propE:{\n      type:Object,\n      default:function(){\n        return {hello:'hello'}\n      }\n    },\n    // 自定义验证函数\n    propF:{\n      validator:function(value){\n        // 这个值必须从下面的字符串中选择一个\n        return ['success','warning','danger'].indexOf(value)!==-1;\n      }\n    }\n  }\n})\n```\n\ntype 可以是下面原生构造器：\n\n- `String`\n- `Number`\n- `Boolean`\n- `Array`\n- `Object`\n- `Date`\n- `Function`\n- `Symbol`\n\ntype 也可以是一个自定义构造器，使用 instanceof 检测。\n\n# Vue组件- 自定义事件\n\n父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！\n\n我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：\n\n- 使用 `$on(eventName)` 监听事件\n- 使用 `$emit(eventName)` 触发事件\n\n另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。\n\n```html\n<div id=\"app\">\n    <div id=\"counter-event-example\">\n      <p>{{ total }}</p>\n      <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n      <button-counter v-on:increment=\"incrementTotal\"></button-counter>\n    </div>\n</div>\n \n<script>\nVue.component('button-counter', {\n  template: '<button v-on:click=\"incrementHandler\">{{ counter }}</button>',\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    incrementHandler: function () {\n      this.counter += 1\n      this.$emit('increment')\n    }\n  },\n})\nnew Vue({\n  el: '#counter-event-example',\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal: function () {\n      this.total += 1\n    }\n  }\n})\n</script>\n```\n\n如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：\n\n```html\n<my-component v-on:click.native=\"doTheThing\"></my-component>\n```\n\n```html\n<div id=\"app\">\n  {{total}}\n  <my-component @click.native='dosome'></my-component>\n</div>\n<script>\n  Vue.component('my-component',{\n    template:`<button>按我<botton>`\n  })\n  // 创建根实例\n  new Vue({\n    el: '#app',\n    data:{\n      total:''\n    },\n    methods: {\n      dosome(){\n        this.total++;\n      }\n    },\n  })\n</script>\n```\n\n## data 必须是一个函数\n\n上面例子中，可以看到 button-counter 组件中的 data 不是一个对象，而是一个函数：\n\n```js\ndata: function () {\n  return {\n    count: 0\n  }\n}\n```\n\n这样的好处就是每个实例可以维护一份被返回对象的独立的拷贝，如果 data 是一个对象则会影响到其他实例，如下所示：\n\n```html\n<div id=\"components-demo3\" class=\"demo\">\n    <button-counter2></button-counter2>\n    <button-counter2></button-counter2>\n    <button-counter2></button-counter2>\n</div>\n \n<script>\nvar buttonCounter2Data = {\n  count: 0\n}\nVue.component('button-counter2', {\n    /*\n    data: function () {\n        // data 选项是一个函数，组件不相互影响\n        return {\n            count: 0\n        }\n    },\n    */\n    data: function () {\n        // data 选项是一个对象，会影响到其他实例\n        return buttonCounter2Data\n    },\n    template: '<button v-on:click=\"count++\">点击了 {{ count }} 次。</button>'\n})\nnew Vue({ el: '#components-demo3' })\n</script>\n```\n\n## 自定义组件的v-model\n\n**组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件。**\n\n```html\n<input v-model=\"parentData\">\n```\n\n等价于：\n\n```html\n<input \n    :value=\"parentData\"\n    @input=\"parentData = $event.target.value\"\n>\n```\n\n以下实例自定义组件 runoob-input，父组件的 num 的初始值是 100，更改子组件的值能实时更新父组件的 num：\n\n```html\n<div id=\"app\">\n    <runoob-input v-model=\"num\"></runoob-input>\n    <p>输入的数字为:{{num}}</p>\n</div>\n<script>\nVue.component('runoob-input', {\n    template: `\n    <p>   <!-- 包含了名为 input 的事件 -->\n      <input\n       ref=\"input\"\n       :value=\"value\" \n       @input=\"$emit('input', $event.target.value)\"\n      >\n    </p>\n    `,\n    props: ['value'], // 名为 value 的 prop\n})\n   \nnew Vue({\n    el: '#app',\n    data: {\n        num: 100,\n    }\n})\n</script>\n```\n\n由于 v-model 默认传的是 value，不是 checked，所以对于复选框或者单选框的组件时，我们需要使用 model 选项，model 选项可以指定当前的事件类型和传入的 props。\n\n```html\n<div id=\"app\">\n    <base-checkbox v-model=\"lovingVue\"></base-checkbox> \n     <div v-show=\"lovingVue\"> \n        如果选择框打勾我就会显示。 \n    </div>\n</div> \n<script>\n// 注册\nVue.component('base-checkbox', {\n \n  model: {\n    prop: 'checked',\n    event: 'change'  // onchange 事件\n  },\n  props: {\n    checked: Boolean\n  },\n   \n  template: `\n    <input\n      type=\"checkbox\"\n      v-bind:checked=\"checked\"\n      v-on:change=\"$emit('change', $event.target.checked)\"\n    >\n  `\n})\n// 创建根实例\nnew Vue({\n  el: '#app',\n  data: {\n    lovingVue: true\n  }\n})\n</script>\n```\n\n# Vue.js 自定义指令\n\n除了默认设置的核心指令( v-model 和 v-show ), Vue 也允许注册自定义指令。\n\n下面我们注册一个全局指令 v-focus, 该指令的功能是在页面加载时，元素获得焦点：\n\n```html\n<div id=\"app\">\n    <p>页面载入时，input 元素自动获取焦点：</p>\n    <input v-focus>\n</div>\n \n<script>\n// 注册一个全局自定义指令 v-focus\nVue.directive('focus', {\n  // 当绑定元素插入到 DOM 中。\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n// 创建根实例\nnew Vue({\n  el: '#app'\n})\n</script>\n```\n\n我们也可以在实例使用 directives 选项来注册局部指令，这样指令只能在这个实例中使用：\n\n```html\n<div id=\"app\">\n  <p>页面载入时，input 元素自动获取焦点：</p>\n  <input v-focus>\n</div>\n \n<script>\n// 创建根实例\nnew Vue({\n  el: '#app',\n  directives: {\n    // 注册一个局部的自定义指令 v-focus\n    focus: {\n      // 指令的定义\n      inserted: function (el) {\n        // 聚焦元素\n        el.focus()\n      }\n    }\n  }\n})\n</script>\n```\n\n## 钩子\n\n### 钩子函数\n\n指令定义函数提供了几个钩子函数（可选）：\n\n- `bind`: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。\n- `inserted`: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。\n- `update`: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。\n- `componentUpdated`: 被绑定元素所在模板完成一次更新周期时调用。\n- `unbind`: 只调用一次， 指令与元素解绑时调用。\n\n### 钩子函数的参数\n\n钩子函数的参数有：\n\n- **el**: 指令所绑定的元素，可以用来直接操作 DOM 。\n- binding: 一个对象，包含以下属性：\n  - **name**: 指令名，不包括 `v-` 前缀。\n  - **value**: 指令的绑定值， 例如： `v-my-directive=\"1 + 1\"`, value 的值是 `2`。\n  - **oldValue**: 指令绑定的前一个值，仅在 `update` 和 `componentUpdated` 钩子中可用。无论值是否改变都可用。\n  - **expression**: 绑定值的表达式或变量名。 例如 `v-my-directive=\"1 + 1\"` ， expression 的值是 `\"1 + 1\"`。\n  - **arg**: 传给指令的参数。例如 `v-my-directive:foo`， arg 的值是 `\"foo\"`。\n  - **modifiers**: 一个包含修饰符的对象。 例如： `v-my-directive.foo.bar`, 修饰符对象 modifiers 的值是 `{ foo: true, bar: true }`。\n- **vnode**: Vue 编译生成的虚拟节点。\n- **oldVnode**: 上一个虚拟节点，仅在 `update` 和 `componentUpdated` 钩子中可用。\n\n```html\n<div id=\"app\"  v-runoob:hello.a.b=\"message\">\n</div>\n \n<script>\nVue.directive('runoob', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      'name: '       + s(binding.name) + '<br>' +\n      'value: '      + s(binding.value) + '<br>' +\n      'expression: ' + s(binding.expression) + '<br>' +\n      'argument: '   + s(binding.arg) + '<br>' +\n      'modifiers: '  + s(binding.modifiers) + '<br>' +\n      'vnode keys: ' + Object.keys(vnode).join(', ')\n  }\n})\nnew Vue({\n  el: '#app',\n  data: {\n    message: '菜鸟教程!'\n  }\n})\n</script>\n```\n\n![image-20210730162439990](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730162448.png)\n\n有时候我们不需要其他钩子函数，我们可以简写函数，如下格式：\n\n```js\nVue.directive('runoob', function (el, binding) {\n  // 设置指令的背景颜色\n  el.style.backgroundColor = binding.value.color\n})\n```\n\n指令函数可接受所有合法的 JavaScript 表达式，以下实例传入了 JavaScript 对象：\n\n```html\n<div id=\"app\">\n  <div v-jiaqi='{color:\"pink\",text:\"666\"}'></div>\n</div>\n<script>\n  Vue.directive('jiaqi',function(el,binding){\n    el.style.color=binding.value.color;\n    el.innerHTML=binding.value.text;\n  })\n  new Vue({\n    el: '#app',\n  })\n</script>\n```\n\n# Vue数组处理\n\n## 变异方法\n\n1.变异方法和替换数组有什么区别\n\n- 变异的方法能够实现数据更新视图自动更新\n- 替换数组不会修改原始数据，数据改变视图不一定更新\n\n2.变异方法和替换数组有哪些\n\n- 变异方法：push  pop shift unshift  splice  sort  reverse\n\n- 替换数组：filter  concat  slice\n\n```html\n<div id=\"app\">\n  <div><input type=\"text\" v-model='fname'></div>\n  <button @click='add'>添加</button> \n  <button @click='del'>删除</button>\n  <button @click='change'>替换</button>\n  <ol>\n    <li v-for='item in list'>{{item}}</li>\n  </ol>\n</div>\n<script>\n\n  new Vue({\n    el: '#app',\n    data() {\n      return {\n        list:['apple','orange','banana'],\n        fname:''\n      }\n    },\n    methods: {\n      add:function(){\n        this.list.push(this.fname);\n      },\n      del(){\n        this.list.pop(this.fname);\n      },\n      change(){\n        this.list=this.list.slice(0,2)\n      }\n    },\n  })\n</script>\n```\n\n## 数组响应式变化\n\n- Vue.set(vm.items, indexOfItem, newValue)  \n- vm.$set(vm.items, indexOfItem, newValue)  \n- ① 参数一表示要处理的数组名称\n  ② 参数二表示要处理的数组的索引\n  ③ 参数三表示要处理的数组的值  \n\n```js\nlet vm = new Vue({\n  el: '#app',\n  data() {\n    return {\n      list: ['apple', 'orange', 'banana'],\n    }\n  },\n})\nVue.set(vm.list,0,'lemon'); // 数据和视图都发生了变化\nvm.$set(vm.list,1,'banana');// 数据和视图都发生了变化\n//  vm.list[1]='lemon';  数据被修改了，但是视图没有被修改\n```\n\n## 对象响应式变化\n\n- Vue.set(vm.items, key, newValue)  \n- vm.$set(vm.items, key, newValue)  \n- ① 参数一表示要处理的对象名称\n  ② 参数二表示要处理的对象的属性名\n  ③ 参数三表示要处理的对象的值  \n\n```html\n<div id=\"app\">\n  <div>\n    <p>{{info.name}}</p>\n    <p>{{info.age}}</p>\n    <p>{{info.gender}}</p>\n  </div>\n</div>\n<script>\n\n  let vm = new Vue({\n    el: '#app',\n    data() {\n      return {\n        info: {\n          name: 'lisi',\n          age: 23,\n          gender: 'male'\n        }\n      }\n    },\n  })\n\n  // vm.info.gender='female'  不会修改视图层，只会修改数据\n  vm.$set(vm.info, 'gender', 'non-binary') // 而且此时再用vm.info.gender来修改也是响应式的\n</script>\n```\n\n\n\n","slug":"Vue学习笔记","published":1,"updated":"2021-07-30T09:59:13.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr8ldbg0001moun2hcr29at","content":"<p>笔记基于：<a href=\"https://www.runoob.com/vue2/\">https://www.runoob.com/vue2/</a></p>\n<h1 id=\"Vue起步\"><a href=\"#Vue起步\" class=\"headerlink\" title=\"Vue起步\"></a>Vue起步</h1><p>每个 Vue 应用都需要通过实例化 Vue 来实现。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">site</span>: <span class=\"hljs-string\">&quot;菜鸟教程&quot;</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&quot;www.runoob.com&quot;</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">alexa</span>: <span class=\"hljs-string\">&quot;10000&quot;</span></span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">details</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span>  <span class=\"hljs-built_in\">this</span>.site + <span class=\"hljs-string\">&quot; - 学的不仅是技术，更是梦想！&quot;</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">    &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到在 Vue 构造器中有一个el 参数，它是 DOM 元素中的 id。在上面实例中 id 为 app，在 div 元素中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span> = <span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这意味着我们接下来的改动全部在以上指定的 div 内，div 外部不受影响。</p>\n<p>接下来我们看看如何定义数据对象。</p>\n<p><strong>data</strong> 用于定义属性，实例中有三个属性分别为：site、url、alexa。</p>\n<p><strong>methods</strong> 用于定义的函数，可以通过 return 来返回函数值。</p>\n<p><code>&#123;&#123; &#125;&#125;</code> 用于输出对象属性和函数返回值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;vue_det&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，html 视图将也会产生相应的变化。</p>\n<h2 id=\"实例一\"><a href=\"#实例一\" class=\"headerlink\" title=\"实例一\"></a>实例一</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;vue_det&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Alexa : &#123;&#123;alexa&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 我们的数据对象</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> data = &#123; <span class=\"hljs-attr\">site</span>: <span class=\"hljs-string\">&quot;菜鸟教程&quot;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&quot;www.runoob.com&quot;</span>, <span class=\"hljs-attr\">alexa</span>: <span class=\"hljs-number\">10000</span>&#125;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#vue_det&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: data</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 它们引用相同的对象！</span></span><br><span class=\"javascript\"><span class=\"hljs-built_in\">document</span>.write(vm.site === data.site) <span class=\"hljs-comment\">// true</span></span><br><span class=\"javascript\"><span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&quot;&lt;br&gt;&quot;</span>)</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 设置属性也会影响到原始数据</span></span><br><span class=\"javascript\">vm.site = <span class=\"hljs-string\">&quot;Runoob&quot;</span></span><br><span class=\"javascript\"><span class=\"hljs-built_in\">document</span>.write(data.site + <span class=\"hljs-string\">&quot;&lt;br&gt;&quot;</span>) <span class=\"hljs-comment\">// Runoob</span></span><br><span class=\"javascript\"> </span><br><span class=\"javascript\"><span class=\"hljs-comment\">// ……反之亦然</span></span><br><span class=\"javascript\">data.alexa = <span class=\"hljs-number\">1234</span></span><br><span class=\"javascript\"><span class=\"hljs-built_in\">document</span>.write(vm.alexa) <span class=\"hljs-comment\">// 1234</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"实例二\"><a href=\"#实例二\" class=\"headerlink\" title=\"实例二\"></a>实例二</h2><p>除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;div id=<span class=\"hljs-string\">&quot;vue_det&quot;</span>&gt;<br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Alexa : &#123;&#123;alexa&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br>&lt;/div&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>// 我们的数据对象<br>var data = &#123; site: &quot;菜鸟教程&quot;, url: &quot;www.runoob.com&quot;, alexa: 10000&#125;<br>var vm = new Vue(&#123;<br>    el: &#x27;#vue_det&#x27;,<br>    data: data<br>&#125;)<br>// 它们引用相同的对象！<br>document.write(vm.site === data.site) // true<br>document.write(&quot;&lt;br&gt;&quot;)<br>// 设置属性也会影响到原始数据<br>vm.site = &quot;Runoob&quot;<br>document.write(data.site + &quot;&lt;br&gt;&quot;) // Runoob<br> <br>// ……反之亦然<br>data.alexa = 1234<br>document.write(vm.alexa) // 1234<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h1><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。</p>\n<p>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。</p>\n<p>结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。</p>\n<h2 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h2><h3 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h3><p>数据绑定最常见的形式就是使用 <code>&#123;&#123;...&#125;&#125;</code>（双大括号）的文本插值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Hello Vue.js!&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"html和text\"><a href=\"#html和text\" class=\"headerlink\" title=\"html和text\"></a>html和text</h3><p> 使用 v-html 指令用于输出 html 代码，使用v-text用于输出text代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">&quot;message&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-text</span>=<span class=\"hljs-string\">&quot;message&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;&lt;h1&gt;菜鸟教程&lt;/h1&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727192921.png\" alt=\"image-20210727192913338\"></p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>HTML 属性中的值应使用 v-bind 指令。</p>\n<p>以下实例判断 use 的值，如果为 true 使用 class1 类的样式，否则不使用该类：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\"></span><br><span class=\"css\"><span class=\"hljs-selector-class\">.class1</span>&#123;</span><br><span class=\"css\">  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#444</span>;</span><br><span class=\"css\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#eee</span>;</span><br><span class=\"css\">&#125;</span><br><span class=\"css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;r1&quot;</span>&gt;</span>修改颜色<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;use&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;r1&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;&#123;&#x27;class1&#x27;: use&#125;&quot;</span>&gt;</span><br>    v-bind:class 指令<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">use</span>: <span class=\"hljs-literal\">false</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727193400.png\" alt=\"image-20210727193358942\"></p>\n<h3 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h3><p>Vue.js 都提供了完全的 JavaScript 表达式支持。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    &#123;&#123;5+5&#125;&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    &#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:id</span>=<span class=\"hljs-string\">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span>菜鸟教程<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;RUNOOB&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">id</span> : <span class=\"hljs-number\">1</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>指令是带有 v- 前缀的特殊属性。</p>\n<p>指令用于在表达式的值改变时，将某些行为应用到 DOM 上。如下例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">seen</span>: <span class=\"hljs-literal\">true</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。</p>\n<p>另一个例子是 v-on 指令，它用于监听 DOM 事件：监听</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;doSomething&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><p>修饰符是以半角句号 <strong>.</strong> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，**.prevent** 修饰符告诉 <strong>v-on</strong> 指令对于触发的事件调用 **event.preventDefault()**：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;form v-on:submit.prevent=<span class=\"hljs-string\">&quot;onSubmit&quot;</span>&gt;&lt;/form&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"用户输入\"><a href=\"#用户输入\" class=\"headerlink\" title=\"用户输入\"></a>用户输入</h2><p>在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;message&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Runoob!&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>使用v-model会将input等输入框的value发生变化，会将其值传给Vue实例data的message属性，同时如果Vue实例的message发生变化，也会将数据更新表单的value。</p>\n<p><strong>v-model</strong> 指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由”管道符”指示, 格式如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 在两个大括号中 --&gt;</span><br>&#123;&#123; message | capitalize &#125;&#125;<br><br><span class=\"hljs-comment\">&lt;!-- 在 v-bind 指令中 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:id</span>=<span class=\"hljs-string\">&quot;rawId | formatId&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>过滤器函数接受表达式的值作为第一个参数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  &#123;&#123; message | capitalize &#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">\t<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;runoob&#x27;</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">filters</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">capitalize</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (!value) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      value = value.toString()</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> value.charAt(<span class=\"hljs-number\">0</span>).toUpperCase() + value.slice(<span class=\"hljs-number\">1</span>)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h2><p>Vue.js 为两个最为常用的指令提供了特别的缩写：</p>\n<h3 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 完整语法 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 缩写 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-on-缩写\"><a href=\"#v-on-缩写\" class=\"headerlink\" title=\"v-on 缩写\"></a>v-on 缩写</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 完整语法 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;doSomething&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 缩写 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;doSomething&quot;</span>&gt;</span>&lt;/a<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-条件和循环语句\"><a href=\"#Vue-js-条件和循环语句\" class=\"headerlink\" title=\"Vue.js 条件和循环语句\"></a>Vue.js 条件和循环语句</h1><h2 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h2><p>条件判断使用 v-if 指令：</p>\n<h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">seen</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。</p>\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><p>可以用 v-else 指令给 v-if 添加一个 “else” 块：</p>\n<p>随机生成一个数字，判断是否大于0.5，然后输出对应信息：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span><br>      Sorry<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span><br>      Not sorry<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span></span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-else-if\"><a href=\"#v-else-if\" class=\"headerlink\" title=\"v-else-if\"></a>v-else-if</h3><p>用作 v-if 的 else-if 块，可以链式的多次使用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span><br>      A<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else-if</span>=<span class=\"hljs-string\">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span><br>      B<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else-if</span>=<span class=\"hljs-string\">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span><br>      C<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span><br>      Not A/B/C<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;C&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。</p>\n</blockquote>\n<h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><p>循环使用 v-for 指令。v-for 指令需要以 <strong>site in sites</strong> 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。</p>\n<h3 id=\"v-for-遍历数组\"><a href=\"#v-for-遍历数组\" class=\"headerlink\" title=\"v-for 遍历数组\"></a>v-for 遍历数组</h3><p>v-for 可以绑定数据到数组来渲染一个列表：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;site in sites&quot;</span>&gt;</span><br>      &#123;&#123; site.name &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">sites</span>: [</span><br><span class=\"javascript\">      &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Runoob&#x27;</span> &#125;,</span><br><span class=\"javascript\">      &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Google&#x27;</span> &#125;,</span><br><span class=\"javascript\">      &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Taobao&#x27;</span> &#125;</span><br><span class=\"javascript\">    ]</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727232652.png\" alt=\"image-20210727232644828\"></p>\n<h3 id=\"v-for迭代对象\"><a href=\"#v-for迭代对象\" class=\"headerlink\" title=\"v-for迭代对象\"></a>v-for迭代对象</h3><p>v-for 可以通过一个对象的属性来迭代数据：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;value in object&quot;</span>&gt;</span><br>    &#123;&#123; value &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">object</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;菜鸟教程&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;http://www.runoob.com&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">slogan</span>: <span class=\"hljs-string\">&#x27;学的不仅是技术，更是梦想！&#x27;</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>以提供第二个的参数为键名，第三个参数为索引。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;(value, key, index) in object&quot;</span>&gt;</span><br>     &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-for迭代整数\"><a href=\"#v-for迭代整数\" class=\"headerlink\" title=\"v-for迭代整数\"></a>v-for迭代整数</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;n in 10&quot;</span>&gt;</span><br>     &#123;&#123; n &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-计算属性\"><a href=\"#Vue-js-计算属性\" class=\"headerlink\" title=\"Vue.js 计算属性\"></a>Vue.js 计算属性</h1><h2 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h2><p>计算属性关键词: <strong>computed</strong>。计算属性在处理一些复杂逻辑时是很有用的。可以看下以下反转字符串的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p> 上述例子变得很复杂，也不容易看懂理解。</p>\n<p>接着，让我们看看使用计算属性的实例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Runoob!&#x27;</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">computed</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 计算属性的 getter</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">reversedMessage</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// `this` 指向 vm 实例</span></span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.message.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse().join(<span class=\"hljs-string\">&#x27;&#x27;</span>)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>上述例子 中声明了一个计算属性 reversedMessage 。提供的函数将用作属性 vm.reversedMessage 的 getter 。</p>\n<p>vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。</p>\n<h2 id=\"computed-vs-methods\"><a href=\"#computed-vs-methods\" class=\"headerlink\" title=\"computed vs methods\"></a>computed vs methods</h2><p>我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>使用方法后反转字符串: &#123;&#123; reversedMessage2() &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Runoob!&#x27;</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">computed</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 计算属性的 getter</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">reversedMessage</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// `this` 指向 vm 实例</span></span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.message.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse().join(<span class=\"hljs-string\">&#x27;&#x27;</span>)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">reversedMessage2</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.message.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse().join(<span class=\"hljs-string\">&#x27;&#x27;</span>)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关于getter和setter，<a href=\"https://jiaqicoder.com/2021/07/27/%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7/#%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7-getter%E5%92%8Csetter\">点击查看</a></p>\n</blockquote>\n<h2 id=\"computed-setter\"><a href=\"#computed-setter\" class=\"headerlink\" title=\"computed setter\"></a>computed setter</h2><p>computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;site&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> vm=<span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;Google&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&#x27;http://www.google.com&#x27;</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">computed</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">site</span>:&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// getter</span></span><br><span class=\"javascript\">        <span class=\"hljs-attr\">get</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name+<span class=\"hljs-string\">&#x27; &#x27;</span>+<span class=\"hljs-built_in\">this</span>.url;</span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// setter</span></span><br><span class=\"javascript\">        <span class=\"hljs-attr\">set</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newValue</span>)</span>&#123;</span><br><span class=\"javascript\">          [<span class=\"hljs-built_in\">this</span>.name,<span class=\"hljs-built_in\">this</span>.url]=newValue.split(<span class=\"hljs-string\">&#x27; &#x27;</span>);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 1s 后页面上的site将会发生变化</span></span><br><span class=\"javascript\">  <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;</span><br><span class=\"javascript\">    vm.site=<span class=\"hljs-string\">&#x27;jiaqi https://www.jiaqicoder.com&#x27;</span></span><br><span class=\"javascript\">  &#125;,<span class=\"hljs-number\">1000</span>);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-监听属性\"><a href=\"#Vue-js-监听属性\" class=\"headerlink\" title=\"Vue.js 监听属性\"></a>Vue.js 监听属性</h1><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;counter++&#x27;</span>&gt;</span>按我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">text</span>:<span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">watch</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">counter</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newValue,oldValue</span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.text=<span class=\"hljs-string\">`counter从<span class=\"hljs-subst\">$&#123;oldValue&#125;</span>变为<span class=\"hljs-subst\">$&#123;newValue&#125;</span>`</span>;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728001253.gif\" alt=\"动1\"></p>\n<p>以下实例进行<strong>华氏度</strong>与<strong>摄氏度</strong>之间的换算：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  华氏度: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">&#x27;fahrenheit=$event.target.value&#x27;</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">&#x27;fahrenheit&#x27;</span>&gt;</span><br>  摄氏度：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">&#x27;celsius=$event.target.value&#x27;</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">&#x27;celsius&#x27;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">fahrenheit</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">celsius</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">watch</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">fahrenheit</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.celsius = ((value - <span class=\"hljs-number\">32</span>) / <span class=\"hljs-number\">1.8</span>).toFixed(<span class=\"hljs-number\">2</span>);</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">celsius</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.fahrenheit = (value * <span class=\"hljs-number\">1.8</span> + <span class=\"hljs-number\">32</span>).toFixed(<span class=\"hljs-number\">2</span>);</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728004031.gif\" alt=\"动2\"></p>\n<h1 id=\"Vue-js-样式绑定\"><a href=\"#Vue-js-样式绑定\" class=\"headerlink\" title=\"Vue.js 样式绑定\"></a>Vue.js 样式绑定</h1><h2 id=\"Vue-js-class\"><a href=\"#Vue-js-class\" class=\"headerlink\" title=\"Vue.js class\"></a>Vue.js class</h2><p>class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。</p>\n<p>Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。</p>\n<h2 id=\"class属性绑定\"><a href=\"#class属性绑定\" class=\"headerlink\" title=\"class属性绑定\"></a>class属性绑定</h2><p>我们可以为 v-bind:class 设置一个对象，从而动态的切换 class:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;&#123; &#x27;active&#x27;: isActive &#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>如果isActive的值为true，则上面的代码相当于：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;active&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>我们也可以直接绑定一个对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;classObject&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">classObject</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">active</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;text-danger&#x27;</span>: <span class=\"hljs-literal\">true</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>此外，我们也可以在这里绑定返回对象的计算属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;classObject&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">isActive</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">error</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;fatal&#x27;</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">computed</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">classObject</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">base</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">active</span>: <span class=\"hljs-built_in\">this</span>.isActive &amp;&amp; !<span class=\"hljs-built_in\">this</span>.error.value,</span><br><span class=\"javascript\">        <span class=\"hljs-string\">&#x27;text-danger&#x27;</span>: <span class=\"hljs-built_in\">this</span>.error.value &amp;&amp; <span class=\"hljs-built_in\">this</span>.error.type === <span class=\"hljs-string\">&#x27;fatal&#x27;</span>,</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数组语法\"><a href=\"#数组语法\" class=\"headerlink\" title=\"数组语法\"></a>数组语法</h3><p>我们可以把一个数组传给 <strong>v-bind:class</strong> ，实例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">activeClass</span>: <span class=\"hljs-string\">&#x27;active&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">errorClass</span>: <span class=\"hljs-string\">&#x27;text-danger&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>我们还可以使用三元表达式来切换列表中的 class ：errorClass 是始终存在的，isActive 为 true 时添加 activeClass 类：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;[errorClass ,isActive ? activeClass : &#x27;&#x27;]&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Vue-js-style-内联样式\"><a href=\"#Vue-js-style-内联样式\" class=\"headerlink\" title=\"Vue.js style 内联样式\"></a>Vue.js style 内联样式</h2><p>我们可以在 <strong>v-bind:style</strong> 直接设置样式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:style</span>=<span class=\"hljs-string\">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span>菜鸟教程<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以直接绑定到一个样式对象，让模板更清晰：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:style</span>=<span class=\"hljs-string\">&quot;styleObject&quot;</span>&gt;</span>菜鸟教程<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">styleObject</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;green&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">&#x27;30px&#x27;</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>v-bind:style 可以使用数组将多个样式对象应用到一个元素上：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:style</span>=<span class=\"hljs-string\">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span>菜鸟教程<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-事件处理器\"><a href=\"#Vue-js-事件处理器\" class=\"headerlink\" title=\"Vue.js 事件处理器\"></a>Vue.js 事件处理器</h1><h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h2><p>事件监听可以使用 v-on 指令：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;counter += 1&quot;</span>&gt;</span>增加 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>v-on 可以接收一个定义的方法来调用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;greet&quot;</span>&gt;</span>Greet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Vue.js&#x27;</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 在 `methods` 对象中定义方法</span></span><br><span class=\"javascript\">  <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">greet</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// `this` 在方法里指当前 Vue 实例</span></span><br><span class=\"javascript\">      alert(<span class=\"hljs-string\">&#x27;Hello &#x27;</span> + <span class=\"hljs-built_in\">this</span>.name + <span class=\"hljs-string\">&#x27;!&#x27;</span>)</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// `event` 是原生 DOM 事件</span></span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (event) &#123;</span><br><span class=\"javascript\">          alert(event.target.tagName)</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 也可以用 JavaScript 直接调用方法</span></span><br><span class=\"javascript\">app.greet() <span class=\"hljs-comment\">// -&gt; &#x27;Hello Vue.js!&#x27;</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>除了直接绑定到一个方法，也可以用内联 JavaScript 语句：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>Say hi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">say</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">message</span>) </span>&#123;</span><br><span class=\"javascript\">      alert(message)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h2><p>Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。</p>\n<p>Vue.js 通过由点 <strong>.</strong> 表示的指令后缀来调用修饰符。</p>\n<ul>\n<li><code>.stop</code> - 阻止冒泡</li>\n<li><code>.prevent</code> - 阻止默认事件</li>\n<li><code>.capture</code> - 阻止捕获</li>\n<li><code>.self</code> - 只监听触发该元素的事件</li>\n<li><code>.once</code> - 只触发一次</li>\n<li><code>.left</code> - 左键事件</li>\n<li><code>.right</code> - 右键事件</li>\n<li><code>.middle</code> - 中间滚轮事件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-on:click.stop</span>=<span class=\"hljs-string\">&quot;doThis&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">v-on:submit.prevent</span>=<span class=\"hljs-string\">&quot;onSubmit&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 修饰符可以串联  --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-on:click.stop.prevent</span>=<span class=\"hljs-string\">&quot;doThat&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 只有修饰符 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">v-on:submit.prevent</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-on:click.capture</span>=<span class=\"hljs-string\">&quot;doThis&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-on:click.self</span>=<span class=\"hljs-string\">&quot;doThat&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-on:click.once</span>=<span class=\"hljs-string\">&quot;doThis&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h2><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-on:keyup.13</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 同上 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-on:keyup.enter</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 缩写语法 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> @<span class=\"hljs-attr\">keyup.enter</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- Alt + C --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> @<span class=\"hljs-attr\">keyup.alt.67</span>=<span class=\"hljs-string\">&quot;clear&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- Ctrl + Click --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> @<span class=\"hljs-attr\">click.ctrl</span>=<span class=\"hljs-string\">&quot;doSomething&quot;</span>&gt;</span>Do something<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-表单\"><a href=\"#Vue-js-表单\" class=\"headerlink\" title=\"Vue.js 表单\"></a>Vue.js 表单</h1><p>你可以用 v-model 指令在表单控件元素上创建双向数据绑定。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728105745.png\" alt=\"img\"></p>\n<h2 id=\"控件\"><a href=\"#控件\" class=\"headerlink\" title=\"控件\"></a>控件</h2><h3 id=\"输入框\"><a href=\"#输入框\" class=\"headerlink\" title=\"输入框\"></a>输入框</h3><p>实例中演示了 input 和 textarea 元素中使用 v-model 实现双向数据绑定：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>input 元素：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;message&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;编辑我……&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>消息是: &#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>textarea 元素：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;white-space: pre&quot;</span>&gt;</span>&#123;&#123; message2 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;message2&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;多行文本输入……&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Runoob&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message2</span>: <span class=\"hljs-string\">&#x27;菜鸟教程\\r\\nhttp://www.runoob.com&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"复选框\"><a href=\"#复选框\" class=\"headerlink\" title=\"复选框\"></a>复选框</h2><p>复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>单个复选框：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;hhhhhh&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>    <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>多个复选框：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;runoob&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Rob&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checkedNames&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;runoob&quot;</span>&gt;</span>Runoob<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;google&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Google&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checkedNames&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;google&quot;</span>&gt;</span>Google<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;taobao&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Taobao&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checkedNames&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;taobao&quot;</span>&gt;</span>taobao<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>选择的值为: &#123;&#123; checkedNames &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">checked</span> : <span class=\"hljs-literal\">false</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">checkedNames</span>: []</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728114757.png\" alt=\"image-20210728114748599\"></p>\n<p>可见，如果复选框只有一个，通过v-model绑定的checked的值为true或者false，而复选框有多个时，v-model绑定的checkedNames的值为input的value，且checkedNames是一个数组。</p>\n<h3 id=\"select列表\"><a href=\"#select列表\" class=\"headerlink\" title=\"select列表\"></a>select列表</h3><p>注意：此时的v-model 添加在select上面，而非option上。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;fruit&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;selected&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>请选择一个网站<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;www.baidu.com&quot;</span>&gt;</span>百度<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;www.google.com&quot;</span>&gt;</span>谷歌<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>选择的网站为 &#123;&#123;selected&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728115637.png\" alt=\"image-20210728115636548\"></p>\n<h2 id=\"修饰符-1\"><a href=\"#修饰符-1\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h2><h3 id=\"lazy\"><a href=\"#lazy\" class=\"headerlink\" title=\".lazy\"></a>.lazy</h3><p>在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model.lazy</span>=<span class=\"hljs-string\">&quot;msg&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\".number\"></a>.number</h3><p>如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model.number</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这通常很有用，因为在 type=”number” 时 HTML 中输入的值也总是会返回字符串类型。</p>\n<h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\".trim\"></a>.trim</h3><p>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model.trim</span>=<span class=\"hljs-string\">&quot;msg&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-组件\"><a href=\"#Vue-js-组件\" class=\"headerlink\" title=\"Vue.js 组件\"></a>Vue.js 组件</h1><p>组件（Component）是 Vue.js 最强大的功能之一。</p>\n<p>组件可以扩展 HTML 元素，封装可重用的代码。</p>\n<p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728120331.png\" alt=\"img\"></p>\n<p>注册一个全局组件语法格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Vue.component(tagName, options)<br></code></pre></td></tr></table></figure>\n\n<p>tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tagName</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tagName</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"全局组件\"><a href=\"#全局组件\" class=\"headerlink\" title=\"全局组件\"></a>全局组件</h2><p>所有实例都能用全局组件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 组件注册</span></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;hello&#x27;</span>, &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;h1&gt;自定义组件&lt;/h1&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>局部组件</p>\n<p>我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 组件注册</span></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;hello&#x27;</span>, &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;h1&gt;自定义组件&lt;/h1&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">components</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 只能在父模板中使用</span></span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;hello&#x27;</span>:&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;h1&gt;笑死我么&lt;/h1&gt;&#x27;</span></span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Prop\"><a href=\"#Prop\" class=\"headerlink\" title=\"Prop\"></a>Prop</h2><p>prop 是子组件用来接受父组件传递过来的数据的一个自定义属性。**父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”**。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child</span> <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&#x27;hello&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 组件注册</span></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;child&#x27;</span>,&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 声明props</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">props</span>:[<span class=\"hljs-string\">&#x27;message&#x27;</span>],</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"动态prop\"><a href=\"#动态prop\" class=\"headerlink\" title=\"动态prop\"></a>动态prop</h2><p>类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件。</p>\n<p>注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child</span> <span class=\"hljs-attr\">v-bind:message</span>=<span class=\"hljs-string\">&#x27;parentMsg&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 组件注册</span></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;child&#x27;</span>,&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 声明props</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">props</span>:[<span class=\"hljs-string\">&#x27;message&#x27;</span>],</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">parentMsg</span>:<span class=\"hljs-string\">&#x27;父组件内容aa&#x27;</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>以下实例中使用 v-bind 指令将 todo 传到每一个重复的组件中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">todo-item</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;(item) in sites&#x27;</span> <span class=\"hljs-attr\">v-bind:todo</span>=<span class=\"hljs-string\">item.text</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">todo-item</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 组件注册</span></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;todo-item&#x27;</span>,&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">props</span>:[<span class=\"hljs-string\">&#x27;todo&#x27;</span>],</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;li&gt;&#123;&#123;todo&#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">sites</span>:[</span><br><span class=\"javascript\">        &#123;<span class=\"hljs-attr\">text</span>:<span class=\"hljs-string\">&#x27;jiaqi&#x27;</span>&#125;,</span><br><span class=\"javascript\">        &#123;<span class=\"hljs-attr\">text</span>:<span class=\"hljs-string\">&#x27;google&#x27;</span>&#125;,</span><br><span class=\"javascript\">        &#123;<span class=\"hljs-attr\">text</span>:<span class=\"hljs-string\">&#x27;taobao&#x27;</span>&#125;</span><br><span class=\"javascript\">      ]</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">    </span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Prop-验证\"><a href=\"#Prop-验证\" class=\"headerlink\" title=\"Prop 验证\"></a>Prop 验证</h2><p>组件可以为 props 指定验证要求。当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</p>\n<p>为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Vue.component(<span class=\"hljs-string\">&#x27;my-component&#x27;</span>,&#123;<br>  <span class=\"hljs-attr\">props</span>:&#123;<br>    <span class=\"hljs-comment\">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br>    <span class=\"hljs-attr\">propA</span>:<span class=\"hljs-built_in\">Number</span>,<br>    <span class=\"hljs-comment\">// 多个可能的类型</span><br>    <span class=\"hljs-attr\">propB</span>:[<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">Number</span>],<br>    <span class=\"hljs-comment\">// 必填的字符串</span><br>    <span class=\"hljs-attr\">propC</span>:&#123;<br>      <span class=\"hljs-attr\">type</span>:<span class=\"hljs-built_in\">String</span>,<br>      <span class=\"hljs-attr\">required</span>:<span class=\"hljs-literal\">true</span><br>    &#125;,<br>    <span class=\"hljs-comment\">// 带有默认值的数字</span><br>    <span class=\"hljs-attr\">propD</span>:&#123;<br>      <span class=\"hljs-attr\">type</span>:<span class=\"hljs-built_in\">Number</span>,<br>      <span class=\"hljs-attr\">default</span>:<span class=\"hljs-number\">100</span><br>    &#125;,<br>    <span class=\"hljs-comment\">// 带有默认值的对象</span><br>    <span class=\"hljs-comment\">// 对象或数组的默认值必须从一个工厂函数中获取</span><br>    <span class=\"hljs-attr\">propE</span>:&#123;<br>      <span class=\"hljs-attr\">type</span>:<span class=\"hljs-built_in\">Object</span>,<br>      <span class=\"hljs-attr\">default</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">hello</span>:<span class=\"hljs-string\">&#x27;hello&#x27;</span>&#125;<br>      &#125;<br>    &#125;,<br>    <span class=\"hljs-comment\">// 自定义验证函数</span><br>    <span class=\"hljs-attr\">propF</span>:&#123;<br>      <span class=\"hljs-attr\">validator</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>)</span>&#123;<br>        <span class=\"hljs-comment\">// 这个值必须从下面的字符串中选择一个</span><br>        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">&#x27;success&#x27;</span>,<span class=\"hljs-string\">&#x27;warning&#x27;</span>,<span class=\"hljs-string\">&#x27;danger&#x27;</span>].indexOf(value)!==-<span class=\"hljs-number\">1</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>type 可以是下面原生构造器：</p>\n<ul>\n<li><code>String</code></li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>Array</code></li>\n<li><code>Object</code></li>\n<li><code>Date</code></li>\n<li><code>Function</code></li>\n<li><code>Symbol</code></li>\n</ul>\n<p>type 也可以是一个自定义构造器，使用 instanceof 检测。</p>\n<h1 id=\"Vue组件-自定义事件\"><a href=\"#Vue组件-自定义事件\" class=\"headerlink\" title=\"Vue组件- 自定义事件\"></a>Vue组件- 自定义事件</h1><p>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！</p>\n<p>我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：</p>\n<ul>\n<li>使用 <code>$on(eventName)</code> 监听事件</li>\n<li>使用 <code>$emit(eventName)</code> 触发事件</li>\n</ul>\n<p>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;counter-event-example&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter</span> <span class=\"hljs-attr\">v-on:increment</span>=<span class=\"hljs-string\">&quot;incrementTotal&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter</span> <span class=\"hljs-attr\">v-on:increment</span>=<span class=\"hljs-string\">&quot;incrementTotal&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">Vue.component(<span class=\"hljs-string\">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;button v-on:click=&quot;incrementHandler&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">incrementHandler</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">this</span>.counter += <span class=\"hljs-number\">1</span></span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;increment&#x27;</span>)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#counter-event-example&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">total</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">incrementTotal</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">this</span>.total += <span class=\"hljs-number\">1</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span> <span class=\"hljs-attr\">v-on:click.native</span>=<span class=\"hljs-string\">&quot;doTheThing&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  &#123;&#123;total&#125;&#125;<br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span> @<span class=\"hljs-attr\">click.native</span>=<span class=\"hljs-string\">&#x27;dosome&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;my-component&#x27;</span>,&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;button&gt;按我&lt;botton&gt;`</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">total</span>:<span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">dosome</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.total++;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"data-必须是一个函数\"><a href=\"#data-必须是一个函数\" class=\"headerlink\" title=\"data 必须是一个函数\"></a>data 必须是一个函数</h2><p>上面例子中，可以看到 button-counter 组件中的 data 不是一个对象，而是一个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">data: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这样的好处就是每个实例可以维护一份被返回对象的独立的拷贝，如果 data 是一个对象则会影响到其他实例，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;components-demo3&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;demo&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter2</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> buttonCounter2Data = &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"javascript\">&#125;</span><br><span class=\"javascript\">Vue.component(<span class=\"hljs-string\">&#x27;button-counter2&#x27;</span>, &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">/*</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">    data: function () &#123;</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">        // data 选项是一个函数，组件不相互影响</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">        return &#123;</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">            count: 0</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">    */</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// data 选项是一个对象，会影响到其他实例</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span> buttonCounter2Data</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;点击了 &#123;&#123; count &#125;&#125; 次。&lt;/button&gt;&#x27;</span></span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123; <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#components-demo3&#x27;</span> &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"自定义组件的v-model\"><a href=\"#自定义组件的v-model\" class=\"headerlink\" title=\"自定义组件的v-model\"></a>自定义组件的v-model</h2><p><strong>组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;parentData&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>等价于：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> </span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">&quot;parentData&quot;</span></span><br><span class=\"hljs-tag\">    @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">&quot;parentData = $event.target.value&quot;</span></span><br><span class=\"hljs-tag\">&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>以下实例自定义组件 runoob-input，父组件的 num 的初始值是 100，更改子组件的值能实时更新父组件的 num：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">runoob-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;num&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">runoob-input</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>输入的数字为:&#123;&#123;num&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\"></span></span><br><span class=\"xml\"><span class=\"handlebars\">Vue.component(&#x27;runoob-input&#x27;, &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    template: `</span></span><br><span class=\"xml\"><span class=\"handlebars\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>   <span class=\"hljs-comment\">&lt;!-- 包含了名为 input 的事件 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span></span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"handlebars\">       <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;input&quot;</span></span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"handlebars\">       <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">&quot;value&quot;</span> </span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"handlebars\">       @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"handlebars\">      &gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">    `,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    props: [&#x27;value&#x27;], // 名为 value 的 prop</span></span><br><span class=\"xml\"><span class=\"handlebars\">&#125;)</span></span><br><span class=\"xml\"><span class=\"handlebars\">   </span></span><br><span class=\"xml\"><span class=\"handlebars\">new Vue(&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    el: &#x27;#app&#x27;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    data: &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">        num: 100,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">&#125;)</span></span><br><span class=\"xml\"><span class=\"handlebars\"></span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>由于 v-model 默认传的是 value，不是 checked，所以对于复选框或者单选框的组件时，我们需要使用 model 选项，model 选项可以指定当前的事件类型和传入的 props。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">base-checkbox</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;lovingVue&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">base-checkbox</span>&gt;</span> <br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">&quot;lovingVue&quot;</span>&gt;</span> <br>        如果选择框打勾我就会显示。 <br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 注册</span></span><br><span class=\"javascript\">Vue.component(<span class=\"hljs-string\">&#x27;base-checkbox&#x27;</span>, &#123;</span><br><span class=\"javascript\"> </span><br><span class=\"javascript\">  <span class=\"hljs-attr\">model</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-string\">&#x27;checked&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">event</span>: <span class=\"hljs-string\">&#x27;change&#x27;</span>  <span class=\"hljs-comment\">// onchange 事件</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">props</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">checked</span>: <span class=\"hljs-built_in\">Boolean</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">   </span><br><span class=\"javascript\">  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">    &lt;input</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">      type=&quot;checkbox&quot;</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">      v-bind:checked=&quot;checked&quot;</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">      v-on:change=&quot;$emit(&#x27;change&#x27;, $event.target.checked)&quot;</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">    &gt;</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">  `</span></span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">lovingVue</span>: <span class=\"hljs-literal\">true</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-自定义指令\"><a href=\"#Vue-js-自定义指令\" class=\"headerlink\" title=\"Vue.js 自定义指令\"></a>Vue.js 自定义指令</h1><p>除了默认设置的核心指令( v-model 和 v-show ), Vue 也允许注册自定义指令。</p>\n<p>下面我们注册一个全局指令 v-focus, 该指令的功能是在页面加载时，元素获得焦点：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-focus</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 注册一个全局自定义指令 v-focus</span></span><br><span class=\"javascript\">Vue.directive(<span class=\"hljs-string\">&#x27;focus&#x27;</span>, &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 当绑定元素插入到 DOM 中。</span></span><br><span class=\"javascript\">  <span class=\"hljs-attr\">inserted</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el</span>) </span>&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 聚焦元素</span></span><br><span class=\"javascript\">    el.focus()</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span></span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>我们也可以在实例使用 directives 选项来注册局部指令，这样指令只能在这个实例中使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-focus</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">directives</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 注册一个局部的自定义指令 v-focus</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">focus</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 指令的定义</span></span><br><span class=\"javascript\">      <span class=\"hljs-attr\">inserted</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 聚焦元素</span></span><br><span class=\"javascript\">        el.focus()</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"钩子\"><a href=\"#钩子\" class=\"headerlink\" title=\"钩子\"></a>钩子</h2><h3 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h3><p>指令定义函数提供了几个钩子函数（可选）：</p>\n<ul>\n<li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li>\n<li><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li>\n<li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li>\n<li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li>\n<li><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li>\n</ul>\n<h3 id=\"钩子函数的参数\"><a href=\"#钩子函数的参数\" class=\"headerlink\" title=\"钩子函数的参数\"></a>钩子函数的参数</h3><p>钩子函数的参数有：</p>\n<ul>\n<li><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 DOM 。</li>\n<li>binding: 一个对象，包含以下属性：<ul>\n<li><strong>name</strong>: 指令名，不包括 <code>v-</code> 前缀。</li>\n<li><strong>value</strong>: 指令的绑定值， 例如： <code>v-my-directive=&quot;1 + 1&quot;</code>, value 的值是 <code>2</code>。</li>\n<li><strong>oldValue</strong>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>\n<li><strong>expression</strong>: 绑定值的表达式或变量名。 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> ， expression 的值是 <code>&quot;1 + 1&quot;</code>。</li>\n<li><strong>arg</strong>: 传给指令的参数。例如 <code>v-my-directive:foo</code>， arg 的值是 <code>&quot;foo&quot;</code>。</li>\n<li><strong>modifiers</strong>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 modifiers 的值是 <code>&#123; foo: true, bar: true &#125;</code>。</li>\n</ul>\n</li>\n<li><strong>vnode</strong>: Vue 编译生成的虚拟节点。</li>\n<li><strong>oldVnode</strong>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>  <span class=\"hljs-attr\">v-runoob:hello.a.b</span>=<span class=\"hljs-string\">&quot;message&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">Vue.directive(<span class=\"hljs-string\">&#x27;runoob&#x27;</span>, &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">bind</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, binding, vnode</span>) </span>&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-built_in\">JSON</span>.stringify</span><br><span class=\"javascript\">    el.innerHTML =</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;name: &#x27;</span>       + s(binding.name) + <span class=\"hljs-string\">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;value: &#x27;</span>      + s(binding.value) + <span class=\"hljs-string\">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;expression: &#x27;</span> + s(binding.expression) + <span class=\"hljs-string\">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;argument: &#x27;</span>   + s(binding.arg) + <span class=\"hljs-string\">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;modifiers: &#x27;</span>  + s(binding.modifiers) + <span class=\"hljs-string\">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;vnode keys: &#x27;</span> + <span class=\"hljs-built_in\">Object</span>.keys(vnode).join(<span class=\"hljs-string\">&#x27;, &#x27;</span>)</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;菜鸟教程!&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730162448.png\" alt=\"image-20210730162439990\"></p>\n<p>有时候我们不需要其他钩子函数，我们可以简写函数，如下格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Vue.directive(<span class=\"hljs-string\">&#x27;runoob&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, binding</span>) </span>&#123;<br>  <span class=\"hljs-comment\">// 设置指令的背景颜色</span><br>  el.style.backgroundColor = binding.value.color<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>指令函数可接受所有合法的 JavaScript 表达式，以下实例传入了 JavaScript 对象：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-jiaqi</span>=<span class=\"hljs-string\">&#x27;&#123;color:&quot;pink&quot;,text:&quot;666&quot;&#125;&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  Vue.directive(<span class=\"hljs-string\">&#x27;jiaqi&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,binding</span>)</span>&#123;</span><br><span class=\"javascript\">    el.style.color=binding.value.color;</span><br><span class=\"javascript\">    el.innerHTML=binding.value.text;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue数组处理\"><a href=\"#Vue数组处理\" class=\"headerlink\" title=\"Vue数组处理\"></a>Vue数组处理</h1><h2 id=\"变异方法\"><a href=\"#变异方法\" class=\"headerlink\" title=\"变异方法\"></a>变异方法</h2><p>1.变异方法和替换数组有什么区别</p>\n<ul>\n<li>变异的方法能够实现数据更新视图自动更新</li>\n<li>替换数组不会修改原始数据，数据改变视图不一定更新</li>\n</ul>\n<p>2.变异方法和替换数组有哪些</p>\n<ul>\n<li><p>变异方法：push  pop shift unshift  splice  sort  reverse</p>\n</li>\n<li><p>替换数组：filter  concat  slice</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;fname&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;add&#x27;</span>&gt;</span>添加<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;del&#x27;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;change&#x27;</span>&gt;</span>替换<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;item in list&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">list</span>:[<span class=\"hljs-string\">&#x27;apple&#x27;</span>,<span class=\"hljs-string\">&#x27;orange&#x27;</span>,<span class=\"hljs-string\">&#x27;banana&#x27;</span>],</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">fname</span>:<span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">add</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.list.push(<span class=\"hljs-built_in\">this</span>.fname);</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">del</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.list.pop(<span class=\"hljs-built_in\">this</span>.fname);</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">change</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.list=<span class=\"hljs-built_in\">this</span>.list.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>)</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数组响应式变化\"><a href=\"#数组响应式变化\" class=\"headerlink\" title=\"数组响应式变化\"></a>数组响应式变化</h2><ul>\n<li>Vue.set(vm.items, indexOfItem, newValue)  </li>\n<li>vm.$set(vm.items, indexOfItem, newValue)  </li>\n<li>① 参数一表示要处理的数组名称<br>② 参数二表示要处理的数组的索引<br>③ 参数三表示要处理的数组的值  </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">list</span>: [<span class=\"hljs-string\">&#x27;apple&#x27;</span>, <span class=\"hljs-string\">&#x27;orange&#x27;</span>, <span class=\"hljs-string\">&#x27;banana&#x27;</span>],<br>    &#125;<br>  &#125;,<br>&#125;)<br>Vue.set(vm.list,<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&#x27;lemon&#x27;</span>); <span class=\"hljs-comment\">// 数据和视图都发生了变化</span><br>vm.$set(vm.list,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;banana&#x27;</span>);<span class=\"hljs-comment\">// 数据和视图都发生了变化</span><br><span class=\"hljs-comment\">//  vm.list[1]=&#x27;lemon&#x27;;  数据被修改了，但是视图没有被修改</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"对象响应式变化\"><a href=\"#对象响应式变化\" class=\"headerlink\" title=\"对象响应式变化\"></a>对象响应式变化</h2><ul>\n<li>Vue.set(vm.items, key, newValue)  </li>\n<li>vm.$set(vm.items, key, newValue)  </li>\n<li>① 参数一表示要处理的对象名称<br>② 参数二表示要处理的对象的属性名<br>③ 参数三表示要处理的对象的值  </li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;info.age&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;info.gender&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">info</span>: &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;lisi&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">gender</span>: <span class=\"hljs-string\">&#x27;male&#x27;</span></span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// vm.info.gender=&#x27;female&#x27;  不会修改视图层，只会修改数据</span></span><br><span class=\"javascript\">  vm.$set(vm.info, <span class=\"hljs-string\">&#x27;gender&#x27;</span>, <span class=\"hljs-string\">&#x27;non-binary&#x27;</span>) <span class=\"hljs-comment\">// 而且此时再用vm.info.gender来修改也是响应式的</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>笔记基于：<a href=\"https://www.runoob.com/vue2/\">https://www.runoob.com/vue2/</a></p>\n<h1 id=\"Vue起步\"><a href=\"#Vue起步\" class=\"headerlink\" title=\"Vue起步\"></a>Vue起步</h1><p>每个 Vue 应用都需要通过实例化 Vue 来实现。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">site</span>: <span class=\"hljs-string\">&quot;菜鸟教程&quot;</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&quot;www.runoob.com&quot;</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">alexa</span>: <span class=\"hljs-string\">&quot;10000&quot;</span></span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">details</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span>  <span class=\"hljs-built_in\">this</span>.site + <span class=\"hljs-string\">&quot; - 学的不仅是技术，更是梦想！&quot;</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">    &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到在 Vue 构造器中有一个el 参数，它是 DOM 元素中的 id。在上面实例中 id 为 app，在 div 元素中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span> = <span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这意味着我们接下来的改动全部在以上指定的 div 内，div 外部不受影响。</p>\n<p>接下来我们看看如何定义数据对象。</p>\n<p><strong>data</strong> 用于定义属性，实例中有三个属性分别为：site、url、alexa。</p>\n<p><strong>methods</strong> 用于定义的函数，可以通过 return 来返回函数值。</p>\n<p><code>&#123;&#123; &#125;&#125;</code> 用于输出对象属性和函数返回值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;vue_det&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，html 视图将也会产生相应的变化。</p>\n<h2 id=\"实例一\"><a href=\"#实例一\" class=\"headerlink\" title=\"实例一\"></a>实例一</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;vue_det&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Alexa : &#123;&#123;alexa&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 我们的数据对象</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> data = &#123; <span class=\"hljs-attr\">site</span>: <span class=\"hljs-string\">&quot;菜鸟教程&quot;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&quot;www.runoob.com&quot;</span>, <span class=\"hljs-attr\">alexa</span>: <span class=\"hljs-number\">10000</span>&#125;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#vue_det&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: data</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 它们引用相同的对象！</span></span><br><span class=\"javascript\"><span class=\"hljs-built_in\">document</span>.write(vm.site === data.site) <span class=\"hljs-comment\">// true</span></span><br><span class=\"javascript\"><span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">&quot;&lt;br&gt;&quot;</span>)</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 设置属性也会影响到原始数据</span></span><br><span class=\"javascript\">vm.site = <span class=\"hljs-string\">&quot;Runoob&quot;</span></span><br><span class=\"javascript\"><span class=\"hljs-built_in\">document</span>.write(data.site + <span class=\"hljs-string\">&quot;&lt;br&gt;&quot;</span>) <span class=\"hljs-comment\">// Runoob</span></span><br><span class=\"javascript\"> </span><br><span class=\"javascript\"><span class=\"hljs-comment\">// ……反之亦然</span></span><br><span class=\"javascript\">data.alexa = <span class=\"hljs-number\">1234</span></span><br><span class=\"javascript\"><span class=\"hljs-built_in\">document</span>.write(vm.alexa) <span class=\"hljs-comment\">// 1234</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"实例二\"><a href=\"#实例二\" class=\"headerlink\" title=\"实例二\"></a>实例二</h2><p>除了数据属性，Vue 实例还提供了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;div id=<span class=\"hljs-string\">&quot;vue_det&quot;</span>&gt;<br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Alexa : &#123;&#123;alexa&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span><br>&lt;/div&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>// 我们的数据对象<br>var data = &#123; site: &quot;菜鸟教程&quot;, url: &quot;www.runoob.com&quot;, alexa: 10000&#125;<br>var vm = new Vue(&#123;<br>    el: &#x27;#vue_det&#x27;,<br>    data: data<br>&#125;)<br>// 它们引用相同的对象！<br>document.write(vm.site === data.site) // true<br>document.write(&quot;&lt;br&gt;&quot;)<br>// 设置属性也会影响到原始数据<br>vm.site = &quot;Runoob&quot;<br>document.write(data.site + &quot;&lt;br&gt;&quot;) // Runoob<br> <br>// ……反之亦然<br>data.alexa = 1234<br>document.write(vm.alexa) // 1234<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h1><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。</p>\n<p>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。</p>\n<p>结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。</p>\n<h2 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h2><h3 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h3><p>数据绑定最常见的形式就是使用 <code>&#123;&#123;...&#125;&#125;</code>（双大括号）的文本插值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Hello Vue.js!&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"html和text\"><a href=\"#html和text\" class=\"headerlink\" title=\"html和text\"></a>html和text</h3><p> 使用 v-html 指令用于输出 html 代码，使用v-text用于输出text代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">&quot;message&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-text</span>=<span class=\"hljs-string\">&quot;message&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;&lt;h1&gt;菜鸟教程&lt;/h1&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727192921.png\" alt=\"image-20210727192913338\"></p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>HTML 属性中的值应使用 v-bind 指令。</p>\n<p>以下实例判断 use 的值，如果为 true 使用 class1 类的样式，否则不使用该类：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\"></span><br><span class=\"css\"><span class=\"hljs-selector-class\">.class1</span>&#123;</span><br><span class=\"css\">  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#444</span>;</span><br><span class=\"css\">  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#eee</span>;</span><br><span class=\"css\">&#125;</span><br><span class=\"css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;r1&quot;</span>&gt;</span>修改颜色<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;use&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;r1&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;&#123;&#x27;class1&#x27;: use&#125;&quot;</span>&gt;</span><br>    v-bind:class 指令<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">use</span>: <span class=\"hljs-literal\">false</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727193400.png\" alt=\"image-20210727193358942\"></p>\n<h3 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h3><p>Vue.js 都提供了完全的 JavaScript 表达式支持。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    &#123;&#123;5+5&#125;&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    &#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>    &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:id</span>=<span class=\"hljs-string\">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span>菜鸟教程<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">ok</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;RUNOOB&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">id</span> : <span class=\"hljs-number\">1</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><p>指令是带有 v- 前缀的特殊属性。</p>\n<p>指令用于在表达式的值改变时，将某些行为应用到 DOM 上。如下例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">seen</span>: <span class=\"hljs-literal\">true</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。</p>\n<p>另一个例子是 v-on 指令，它用于监听 DOM 事件：监听</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;doSomething&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><p>修饰符是以半角句号 <strong>.</strong> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，**.prevent** 修饰符告诉 <strong>v-on</strong> 指令对于触发的事件调用 **event.preventDefault()**：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;form v-on:submit.prevent=<span class=\"hljs-string\">&quot;onSubmit&quot;</span>&gt;&lt;/form&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"用户输入\"><a href=\"#用户输入\" class=\"headerlink\" title=\"用户输入\"></a>用户输入</h2><p>在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;message&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Runoob!&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>使用v-model会将input等输入框的value发生变化，会将其值传给Vue实例data的message属性，同时如果Vue实例的message发生变化，也会将数据更新表单的value。</p>\n<p><strong>v-model</strong> 指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。由”管道符”指示, 格式如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 在两个大括号中 --&gt;</span><br>&#123;&#123; message | capitalize &#125;&#125;<br><br><span class=\"hljs-comment\">&lt;!-- 在 v-bind 指令中 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:id</span>=<span class=\"hljs-string\">&quot;rawId | formatId&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>过滤器函数接受表达式的值作为第一个参数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  &#123;&#123; message | capitalize &#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>\t<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">\t<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;runoob&#x27;</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">filters</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">capitalize</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (!value) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      value = value.toString()</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> value.charAt(<span class=\"hljs-number\">0</span>).toUpperCase() + value.slice(<span class=\"hljs-number\">1</span>)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h2><p>Vue.js 为两个最为常用的指令提供了特别的缩写：</p>\n<h3 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 完整语法 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 缩写 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">:href</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-on-缩写\"><a href=\"#v-on-缩写\" class=\"headerlink\" title=\"v-on 缩写\"></a>v-on 缩写</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 完整语法 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;doSomething&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 缩写 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;doSomething&quot;</span>&gt;</span>&lt;/a<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-条件和循环语句\"><a href=\"#Vue-js-条件和循环语句\" class=\"headerlink\" title=\"Vue.js 条件和循环语句\"></a>Vue.js 条件和循环语句</h1><h2 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h2><p>条件判断使用 v-if 指令：</p>\n<h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">seen</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这里， v-if 指令将根据表达式 seen 的值(true 或 false )来决定是否插入 p 元素。</p>\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><p>可以用 v-else 指令给 v-if 添加一个 “else” 块：</p>\n<p>随机生成一个数字，判断是否大于0.5，然后输出对应信息：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span><br>      Sorry<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span><br>      Not sorry<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span></span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-else-if\"><a href=\"#v-else-if\" class=\"headerlink\" title=\"v-else-if\"></a>v-else-if</h3><p>用作 v-if 的 else-if 块，可以链式的多次使用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span><br>      A<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else-if</span>=<span class=\"hljs-string\">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span><br>      B<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else-if</span>=<span class=\"hljs-string\">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span><br>      C<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span><br>      Not A/B/C<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;C&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。</p>\n</blockquote>\n<h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><p>循环使用 v-for 指令。v-for 指令需要以 <strong>site in sites</strong> 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。</p>\n<h3 id=\"v-for-遍历数组\"><a href=\"#v-for-遍历数组\" class=\"headerlink\" title=\"v-for 遍历数组\"></a>v-for 遍历数组</h3><p>v-for 可以绑定数据到数组来渲染一个列表：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;site in sites&quot;</span>&gt;</span><br>      &#123;&#123; site.name &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">sites</span>: [</span><br><span class=\"javascript\">      &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Runoob&#x27;</span> &#125;,</span><br><span class=\"javascript\">      &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Google&#x27;</span> &#125;,</span><br><span class=\"javascript\">      &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Taobao&#x27;</span> &#125;</span><br><span class=\"javascript\">    ]</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210727232652.png\" alt=\"image-20210727232644828\"></p>\n<h3 id=\"v-for迭代对象\"><a href=\"#v-for迭代对象\" class=\"headerlink\" title=\"v-for迭代对象\"></a>v-for迭代对象</h3><p>v-for 可以通过一个对象的属性来迭代数据：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;value in object&quot;</span>&gt;</span><br>    &#123;&#123; value &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">object</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;菜鸟教程&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;http://www.runoob.com&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">slogan</span>: <span class=\"hljs-string\">&#x27;学的不仅是技术，更是梦想！&#x27;</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>以提供第二个的参数为键名，第三个参数为索引。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;(value, key, index) in object&quot;</span>&gt;</span><br>     &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"v-for迭代整数\"><a href=\"#v-for迭代整数\" class=\"headerlink\" title=\"v-for迭代整数\"></a>v-for迭代整数</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;n in 10&quot;</span>&gt;</span><br>     &#123;&#123; n &#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-计算属性\"><a href=\"#Vue-js-计算属性\" class=\"headerlink\" title=\"Vue.js 计算属性\"></a>Vue.js 计算属性</h1><h2 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h2><p>计算属性关键词: <strong>computed</strong>。计算属性在处理一些复杂逻辑时是很有用的。可以看下以下反转字符串的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p> 上述例子变得很复杂，也不容易看懂理解。</p>\n<p>接着，让我们看看使用计算属性的实例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Runoob!&#x27;</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">computed</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 计算属性的 getter</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">reversedMessage</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// `this` 指向 vm 实例</span></span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.message.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse().join(<span class=\"hljs-string\">&#x27;&#x27;</span>)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>上述例子 中声明了一个计算属性 reversedMessage 。提供的函数将用作属性 vm.reversedMessage 的 getter 。</p>\n<p>vm.reversedMessage 依赖于 vm.message，在 vm.message 发生改变时，vm.reversedMessage 也会更新。</p>\n<h2 id=\"computed-vs-methods\"><a href=\"#computed-vs-methods\" class=\"headerlink\" title=\"computed vs methods\"></a>computed vs methods</h2><p>我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>使用方法后反转字符串: &#123;&#123; reversedMessage2() &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Runoob!&#x27;</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">computed</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 计算属性的 getter</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">reversedMessage</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// `this` 指向 vm 实例</span></span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.message.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse().join(<span class=\"hljs-string\">&#x27;&#x27;</span>)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">reversedMessage2</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.message.split(<span class=\"hljs-string\">&#x27;&#x27;</span>).reverse().join(<span class=\"hljs-string\">&#x27;&#x27;</span>)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关于getter和setter，<a href=\"https://jiaqicoder.com/2021/07/27/%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7/#%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7-getter%E5%92%8Csetter\">点击查看</a></p>\n</blockquote>\n<h2 id=\"computed-setter\"><a href=\"#computed-setter\" class=\"headerlink\" title=\"computed setter\"></a>computed setter</h2><p>computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;site&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> vm=<span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;Google&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&#x27;http://www.google.com&#x27;</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">computed</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">site</span>:&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// getter</span></span><br><span class=\"javascript\">        <span class=\"hljs-attr\">get</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name+<span class=\"hljs-string\">&#x27; &#x27;</span>+<span class=\"hljs-built_in\">this</span>.url;</span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// setter</span></span><br><span class=\"javascript\">        <span class=\"hljs-attr\">set</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newValue</span>)</span>&#123;</span><br><span class=\"javascript\">          [<span class=\"hljs-built_in\">this</span>.name,<span class=\"hljs-built_in\">this</span>.url]=newValue.split(<span class=\"hljs-string\">&#x27; &#x27;</span>);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 1s 后页面上的site将会发生变化</span></span><br><span class=\"javascript\">  <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;</span><br><span class=\"javascript\">    vm.site=<span class=\"hljs-string\">&#x27;jiaqi https://www.jiaqicoder.com&#x27;</span></span><br><span class=\"javascript\">  &#125;,<span class=\"hljs-number\">1000</span>);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-监听属性\"><a href=\"#Vue-js-监听属性\" class=\"headerlink\" title=\"Vue.js 监听属性\"></a>Vue.js 监听属性</h1><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;counter++&#x27;</span>&gt;</span>按我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">text</span>:<span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">watch</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">counter</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newValue,oldValue</span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.text=<span class=\"hljs-string\">`counter从<span class=\"hljs-subst\">$&#123;oldValue&#125;</span>变为<span class=\"hljs-subst\">$&#123;newValue&#125;</span>`</span>;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728001253.gif\" alt=\"动1\"></p>\n<p>以下实例进行<strong>华氏度</strong>与<strong>摄氏度</strong>之间的换算：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  华氏度: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">&#x27;fahrenheit=$event.target.value&#x27;</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">&#x27;fahrenheit&#x27;</span>&gt;</span><br>  摄氏度：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> @<span class=\"hljs-attr\">change</span>=<span class=\"hljs-string\">&#x27;celsius=$event.target.value&#x27;</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">&#x27;celsius&#x27;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">fahrenheit</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">celsius</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">watch</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">fahrenheit</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.celsius = ((value - <span class=\"hljs-number\">32</span>) / <span class=\"hljs-number\">1.8</span>).toFixed(<span class=\"hljs-number\">2</span>);</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">celsius</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.fahrenheit = (value * <span class=\"hljs-number\">1.8</span> + <span class=\"hljs-number\">32</span>).toFixed(<span class=\"hljs-number\">2</span>);</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728004031.gif\" alt=\"动2\"></p>\n<h1 id=\"Vue-js-样式绑定\"><a href=\"#Vue-js-样式绑定\" class=\"headerlink\" title=\"Vue.js 样式绑定\"></a>Vue.js 样式绑定</h1><h2 id=\"Vue-js-class\"><a href=\"#Vue-js-class\" class=\"headerlink\" title=\"Vue.js class\"></a>Vue.js class</h2><p>class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。</p>\n<p>Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。</p>\n<h2 id=\"class属性绑定\"><a href=\"#class属性绑定\" class=\"headerlink\" title=\"class属性绑定\"></a>class属性绑定</h2><p>我们可以为 v-bind:class 设置一个对象，从而动态的切换 class:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;&#123; &#x27;active&#x27;: isActive &#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>如果isActive的值为true，则上面的代码相当于：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;active&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>我们也可以直接绑定一个对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;classObject&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">classObject</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">active</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;text-danger&#x27;</span>: <span class=\"hljs-literal\">true</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>此外，我们也可以在这里绑定返回对象的计算属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;classObject&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">isActive</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">error</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;fatal&#x27;</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">computed</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">classObject</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">base</span>: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">active</span>: <span class=\"hljs-built_in\">this</span>.isActive &amp;&amp; !<span class=\"hljs-built_in\">this</span>.error.value,</span><br><span class=\"javascript\">        <span class=\"hljs-string\">&#x27;text-danger&#x27;</span>: <span class=\"hljs-built_in\">this</span>.error.value &amp;&amp; <span class=\"hljs-built_in\">this</span>.error.type === <span class=\"hljs-string\">&#x27;fatal&#x27;</span>,</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数组语法\"><a href=\"#数组语法\" class=\"headerlink\" title=\"数组语法\"></a>数组语法</h3><p>我们可以把一个数组传给 <strong>v-bind:class</strong> ，实例如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">activeClass</span>: <span class=\"hljs-string\">&#x27;active&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">errorClass</span>: <span class=\"hljs-string\">&#x27;text-danger&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>我们还可以使用三元表达式来切换列表中的 class ：errorClass 是始终存在的，isActive 为 true 时添加 activeClass 类：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;[errorClass ,isActive ? activeClass : &#x27;&#x27;]&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Vue-js-style-内联样式\"><a href=\"#Vue-js-style-内联样式\" class=\"headerlink\" title=\"Vue.js style 内联样式\"></a>Vue.js style 内联样式</h2><p>我们可以在 <strong>v-bind:style</strong> 直接设置样式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:style</span>=<span class=\"hljs-string\">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span>菜鸟教程<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以直接绑定到一个样式对象，让模板更清晰：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:style</span>=<span class=\"hljs-string\">&quot;styleObject&quot;</span>&gt;</span>菜鸟教程<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">styleObject</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;green&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">&#x27;30px&#x27;</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>v-bind:style 可以使用数组将多个样式对象应用到一个元素上：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-bind:style</span>=<span class=\"hljs-string\">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span>菜鸟教程<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-事件处理器\"><a href=\"#Vue-js-事件处理器\" class=\"headerlink\" title=\"Vue.js 事件处理器\"></a>Vue.js 事件处理器</h1><h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h2><p>事件监听可以使用 v-on 指令：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;counter += 1&quot;</span>&gt;</span>增加 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>v-on 可以接收一个定义的方法来调用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;greet&quot;</span>&gt;</span>Greet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Vue.js&#x27;</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 在 `methods` 对象中定义方法</span></span><br><span class=\"javascript\">  <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">greet</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// `this` 在方法里指当前 Vue 实例</span></span><br><span class=\"javascript\">      alert(<span class=\"hljs-string\">&#x27;Hello &#x27;</span> + <span class=\"hljs-built_in\">this</span>.name + <span class=\"hljs-string\">&#x27;!&#x27;</span>)</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// `event` 是原生 DOM 事件</span></span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (event) &#123;</span><br><span class=\"javascript\">          alert(event.target.tagName)</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 也可以用 JavaScript 直接调用方法</span></span><br><span class=\"javascript\">app.greet() <span class=\"hljs-comment\">// -&gt; &#x27;Hello Vue.js!&#x27;</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>除了直接绑定到一个方法，也可以用内联 JavaScript 语句：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>Say hi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">say</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">message</span>) </span>&#123;</span><br><span class=\"javascript\">      alert(message)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h2><p>Vue.js 为 v-on 提供了事件修饰符来处理 DOM 事件细节，如：event.preventDefault() 或 event.stopPropagation()。</p>\n<p>Vue.js 通过由点 <strong>.</strong> 表示的指令后缀来调用修饰符。</p>\n<ul>\n<li><code>.stop</code> - 阻止冒泡</li>\n<li><code>.prevent</code> - 阻止默认事件</li>\n<li><code>.capture</code> - 阻止捕获</li>\n<li><code>.self</code> - 只监听触发该元素的事件</li>\n<li><code>.once</code> - 只触发一次</li>\n<li><code>.left</code> - 左键事件</li>\n<li><code>.right</code> - 右键事件</li>\n<li><code>.middle</code> - 中间滚轮事件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-on:click.stop</span>=<span class=\"hljs-string\">&quot;doThis&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">v-on:submit.prevent</span>=<span class=\"hljs-string\">&quot;onSubmit&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 修饰符可以串联  --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-on:click.stop.prevent</span>=<span class=\"hljs-string\">&quot;doThat&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 只有修饰符 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">v-on:submit.prevent</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-on:click.capture</span>=<span class=\"hljs-string\">&quot;doThis&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-on:click.self</span>=<span class=\"hljs-string\">&quot;doThat&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-on:click.once</span>=<span class=\"hljs-string\">&quot;doThis&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h2><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-on:keyup.13</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 同上 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-on:keyup.enter</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 缩写语法 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> @<span class=\"hljs-attr\">keyup.enter</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- Alt + C --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> @<span class=\"hljs-attr\">keyup.alt.67</span>=<span class=\"hljs-string\">&quot;clear&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- Ctrl + Click --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> @<span class=\"hljs-attr\">click.ctrl</span>=<span class=\"hljs-string\">&quot;doSomething&quot;</span>&gt;</span>Do something<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-表单\"><a href=\"#Vue-js-表单\" class=\"headerlink\" title=\"Vue.js 表单\"></a>Vue.js 表单</h1><p>你可以用 v-model 指令在表单控件元素上创建双向数据绑定。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728105745.png\" alt=\"img\"></p>\n<h2 id=\"控件\"><a href=\"#控件\" class=\"headerlink\" title=\"控件\"></a>控件</h2><h3 id=\"输入框\"><a href=\"#输入框\" class=\"headerlink\" title=\"输入框\"></a>输入框</h3><p>实例中演示了 input 和 textarea 元素中使用 v-model 实现双向数据绑定：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>input 元素：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;message&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;编辑我……&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>消息是: &#123;&#123; message &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>textarea 元素：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;white-space: pre&quot;</span>&gt;</span>&#123;&#123; message2 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;message2&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;多行文本输入……&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Runoob&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message2</span>: <span class=\"hljs-string\">&#x27;菜鸟教程\\r\\nhttp://www.runoob.com&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"复选框\"><a href=\"#复选框\" class=\"headerlink\" title=\"复选框\"></a>复选框</h2><p>复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>单个复选框：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checked&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;hhhhhh&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>    <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>多个复选框：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;runoob&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Rob&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checkedNames&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;runoob&quot;</span>&gt;</span>Runoob<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;google&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Google&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checkedNames&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;google&quot;</span>&gt;</span>Google<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;taobao&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Taobao&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;checkedNames&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;taobao&quot;</span>&gt;</span>taobao<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>选择的值为: &#123;&#123; checkedNames &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">checked</span> : <span class=\"hljs-literal\">false</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">checkedNames</span>: []</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728114757.png\" alt=\"image-20210728114748599\"></p>\n<p>可见，如果复选框只有一个，通过v-model绑定的checked的值为true或者false，而复选框有多个时，v-model绑定的checkedNames的值为input的value，且checkedNames是一个数组。</p>\n<h3 id=\"select列表\"><a href=\"#select列表\" class=\"headerlink\" title=\"select列表\"></a>select列表</h3><p>注意：此时的v-model 添加在select上面，而非option上。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;fruit&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;selected&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>请选择一个网站<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;www.baidu.com&quot;</span>&gt;</span>百度<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;www.google.com&quot;</span>&gt;</span>谷歌<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>选择的网站为 &#123;&#123;selected&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">selected</span>:<span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728115637.png\" alt=\"image-20210728115636548\"></p>\n<h2 id=\"修饰符-1\"><a href=\"#修饰符-1\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h2><h3 id=\"lazy\"><a href=\"#lazy\" class=\"headerlink\" title=\".lazy\"></a>.lazy</h3><p>在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model.lazy</span>=<span class=\"hljs-string\">&quot;msg&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\".number\"></a>.number</h3><p>如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model.number</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>这通常很有用，因为在 type=”number” 时 HTML 中输入的值也总是会返回字符串类型。</p>\n<h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\".trim\"></a>.trim</h3><p>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model.trim</span>=<span class=\"hljs-string\">&quot;msg&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-组件\"><a href=\"#Vue-js-组件\" class=\"headerlink\" title=\"Vue.js 组件\"></a>Vue.js 组件</h1><p>组件（Component）是 Vue.js 最强大的功能之一。</p>\n<p>组件可以扩展 HTML 元素，封装可重用的代码。</p>\n<p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210728120331.png\" alt=\"img\"></p>\n<p>注册一个全局组件语法格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Vue.component(tagName, options)<br></code></pre></td></tr></table></figure>\n\n<p>tagName 为组件名，options 为配置选项。注册后，我们可以使用以下方式来调用组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tagName</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tagName</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"全局组件\"><a href=\"#全局组件\" class=\"headerlink\" title=\"全局组件\"></a>全局组件</h2><p>所有实例都能用全局组件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 组件注册</span></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;hello&#x27;</span>, &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;h1&gt;自定义组件&lt;/h1&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>局部组件</p>\n<p>我们也可以在实例选项中注册局部组件，这样组件只能在这个实例中使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 组件注册</span></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;hello&#x27;</span>, &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;h1&gt;自定义组件&lt;/h1&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">components</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 只能在父模板中使用</span></span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;hello&#x27;</span>:&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;h1&gt;笑死我么&lt;/h1&gt;&#x27;</span></span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Prop\"><a href=\"#Prop\" class=\"headerlink\" title=\"Prop\"></a>Prop</h2><p>prop 是子组件用来接受父组件传递过来的数据的一个自定义属性。**父组件的数据需要通过 props 把数据传给子组件，子组件需要显式地用 props 选项声明 “prop”**。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child</span> <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&#x27;hello&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 组件注册</span></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;child&#x27;</span>,&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 声明props</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">props</span>:[<span class=\"hljs-string\">&#x27;message&#x27;</span>],</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"动态prop\"><a href=\"#动态prop\" class=\"headerlink\" title=\"动态prop\"></a>动态prop</h2><p>类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件。</p>\n<p>注意: prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">child</span> <span class=\"hljs-attr\">v-bind:message</span>=<span class=\"hljs-string\">&#x27;parentMsg&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">child</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 组件注册</span></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;child&#x27;</span>,&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 声明props</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">props</span>:[<span class=\"hljs-string\">&#x27;message&#x27;</span>],</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">parentMsg</span>:<span class=\"hljs-string\">&#x27;父组件内容aa&#x27;</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>以下实例中使用 v-bind 指令将 todo 传到每一个重复的组件中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">todo-item</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;(item) in sites&#x27;</span> <span class=\"hljs-attr\">v-bind:todo</span>=<span class=\"hljs-string\">item.text</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">todo-item</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 组件注册</span></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;todo-item&#x27;</span>,&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">props</span>:[<span class=\"hljs-string\">&#x27;todo&#x27;</span>],</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&#x27;&lt;li&gt;&#123;&#123;todo&#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">sites</span>:[</span><br><span class=\"javascript\">        &#123;<span class=\"hljs-attr\">text</span>:<span class=\"hljs-string\">&#x27;jiaqi&#x27;</span>&#125;,</span><br><span class=\"javascript\">        &#123;<span class=\"hljs-attr\">text</span>:<span class=\"hljs-string\">&#x27;google&#x27;</span>&#125;,</span><br><span class=\"javascript\">        &#123;<span class=\"hljs-attr\">text</span>:<span class=\"hljs-string\">&#x27;taobao&#x27;</span>&#125;</span><br><span class=\"javascript\">      ]</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">    </span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Prop-验证\"><a href=\"#Prop-验证\" class=\"headerlink\" title=\"Prop 验证\"></a>Prop 验证</h2><p>组件可以为 props 指定验证要求。当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</p>\n<p>为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Vue.component(<span class=\"hljs-string\">&#x27;my-component&#x27;</span>,&#123;<br>  <span class=\"hljs-attr\">props</span>:&#123;<br>    <span class=\"hljs-comment\">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br>    <span class=\"hljs-attr\">propA</span>:<span class=\"hljs-built_in\">Number</span>,<br>    <span class=\"hljs-comment\">// 多个可能的类型</span><br>    <span class=\"hljs-attr\">propB</span>:[<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">Number</span>],<br>    <span class=\"hljs-comment\">// 必填的字符串</span><br>    <span class=\"hljs-attr\">propC</span>:&#123;<br>      <span class=\"hljs-attr\">type</span>:<span class=\"hljs-built_in\">String</span>,<br>      <span class=\"hljs-attr\">required</span>:<span class=\"hljs-literal\">true</span><br>    &#125;,<br>    <span class=\"hljs-comment\">// 带有默认值的数字</span><br>    <span class=\"hljs-attr\">propD</span>:&#123;<br>      <span class=\"hljs-attr\">type</span>:<span class=\"hljs-built_in\">Number</span>,<br>      <span class=\"hljs-attr\">default</span>:<span class=\"hljs-number\">100</span><br>    &#125;,<br>    <span class=\"hljs-comment\">// 带有默认值的对象</span><br>    <span class=\"hljs-comment\">// 对象或数组的默认值必须从一个工厂函数中获取</span><br>    <span class=\"hljs-attr\">propE</span>:&#123;<br>      <span class=\"hljs-attr\">type</span>:<span class=\"hljs-built_in\">Object</span>,<br>      <span class=\"hljs-attr\">default</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">hello</span>:<span class=\"hljs-string\">&#x27;hello&#x27;</span>&#125;<br>      &#125;<br>    &#125;,<br>    <span class=\"hljs-comment\">// 自定义验证函数</span><br>    <span class=\"hljs-attr\">propF</span>:&#123;<br>      <span class=\"hljs-attr\">validator</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>)</span>&#123;<br>        <span class=\"hljs-comment\">// 这个值必须从下面的字符串中选择一个</span><br>        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">&#x27;success&#x27;</span>,<span class=\"hljs-string\">&#x27;warning&#x27;</span>,<span class=\"hljs-string\">&#x27;danger&#x27;</span>].indexOf(value)!==-<span class=\"hljs-number\">1</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>type 可以是下面原生构造器：</p>\n<ul>\n<li><code>String</code></li>\n<li><code>Number</code></li>\n<li><code>Boolean</code></li>\n<li><code>Array</code></li>\n<li><code>Object</code></li>\n<li><code>Date</code></li>\n<li><code>Function</code></li>\n<li><code>Symbol</code></li>\n</ul>\n<p>type 也可以是一个自定义构造器，使用 instanceof 检测。</p>\n<h1 id=\"Vue组件-自定义事件\"><a href=\"#Vue组件-自定义事件\" class=\"headerlink\" title=\"Vue组件- 自定义事件\"></a>Vue组件- 自定义事件</h1><p>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！</p>\n<p>我们可以使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：</p>\n<ul>\n<li>使用 <code>$on(eventName)</code> 监听事件</li>\n<li>使用 <code>$emit(eventName)</code> 触发事件</li>\n</ul>\n<p>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;counter-event-example&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter</span> <span class=\"hljs-attr\">v-on:increment</span>=<span class=\"hljs-string\">&quot;incrementTotal&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter</span> <span class=\"hljs-attr\">v-on:increment</span>=<span class=\"hljs-string\">&quot;incrementTotal&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">Vue.component(<span class=\"hljs-string\">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;button v-on:click=&quot;incrementHandler&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">counter</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">incrementHandler</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">this</span>.counter += <span class=\"hljs-number\">1</span></span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;increment&#x27;</span>)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#counter-event-example&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">total</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">incrementTotal</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">this</span>.total += <span class=\"hljs-number\">1</span></span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>如果你想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span> <span class=\"hljs-attr\">v-on:click.native</span>=<span class=\"hljs-string\">&quot;doTheThing&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  &#123;&#123;total&#125;&#125;<br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">my-component</span> @<span class=\"hljs-attr\">click.native</span>=<span class=\"hljs-string\">&#x27;dosome&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">my-component</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  Vue.component(<span class=\"hljs-string\">&#x27;my-component&#x27;</span>,&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;button&gt;按我&lt;botton&gt;`</span></span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">total</span>:<span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">dosome</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.total++;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"data-必须是一个函数\"><a href=\"#data-必须是一个函数\" class=\"headerlink\" title=\"data 必须是一个函数\"></a>data 必须是一个函数</h2><p>上面例子中，可以看到 button-counter 组件中的 data 不是一个对象，而是一个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">data: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这样的好处就是每个实例可以维护一份被返回对象的独立的拷贝，如果 data 是一个对象则会影响到其他实例，如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;components-demo3&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;demo&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter2</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter2</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">var</span> buttonCounter2Data = &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span></span><br><span class=\"javascript\">&#125;</span><br><span class=\"javascript\">Vue.component(<span class=\"hljs-string\">&#x27;button-counter2&#x27;</span>, &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">/*</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">    data: function () &#123;</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">        // data 选项是一个函数，组件不相互影响</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">        return &#123;</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">            count: 0</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"hljs-comment\"><span class=\"javascript\">    */</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// data 选项是一个对象，会影响到其他实例</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span> buttonCounter2Data</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;点击了 &#123;&#123; count &#125;&#125; 次。&lt;/button&gt;&#x27;</span></span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123; <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#components-demo3&#x27;</span> &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"自定义组件的v-model\"><a href=\"#自定义组件的v-model\" class=\"headerlink\" title=\"自定义组件的v-model\"></a>自定义组件的v-model</h2><p><strong>组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件。</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;parentData&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>等价于：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> </span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">&quot;parentData&quot;</span></span><br><span class=\"hljs-tag\">    @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">&quot;parentData = $event.target.value&quot;</span></span><br><span class=\"hljs-tag\">&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>以下实例自定义组件 runoob-input，父组件的 num 的初始值是 100，更改子组件的值能实时更新父组件的 num：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">runoob-input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;num&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">runoob-input</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>输入的数字为:&#123;&#123;num&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\"></span></span><br><span class=\"xml\"><span class=\"handlebars\">Vue.component(&#x27;runoob-input&#x27;, &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    template: `</span></span><br><span class=\"xml\"><span class=\"handlebars\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>   <span class=\"hljs-comment\">&lt;!-- 包含了名为 input 的事件 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span></span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"handlebars\">       <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;input&quot;</span></span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"handlebars\">       <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">&quot;value&quot;</span> </span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"handlebars\">       @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span></span></span><br><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"handlebars\">      &gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">    `,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    props: [&#x27;value&#x27;], // 名为 value 的 prop</span></span><br><span class=\"xml\"><span class=\"handlebars\">&#125;)</span></span><br><span class=\"xml\"><span class=\"handlebars\">   </span></span><br><span class=\"xml\"><span class=\"handlebars\">new Vue(&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    el: &#x27;#app&#x27;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    data: &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">        num: 100,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">&#125;)</span></span><br><span class=\"xml\"><span class=\"handlebars\"></span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>由于 v-model 默认传的是 value，不是 checked，所以对于复选框或者单选框的组件时，我们需要使用 model 选项，model 选项可以指定当前的事件类型和传入的 props。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">base-checkbox</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;lovingVue&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">base-checkbox</span>&gt;</span> <br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">&quot;lovingVue&quot;</span>&gt;</span> <br>        如果选择框打勾我就会显示。 <br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 注册</span></span><br><span class=\"javascript\">Vue.component(<span class=\"hljs-string\">&#x27;base-checkbox&#x27;</span>, &#123;</span><br><span class=\"javascript\"> </span><br><span class=\"javascript\">  <span class=\"hljs-attr\">model</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-string\">&#x27;checked&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">event</span>: <span class=\"hljs-string\">&#x27;change&#x27;</span>  <span class=\"hljs-comment\">// onchange 事件</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">props</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">checked</span>: <span class=\"hljs-built_in\">Boolean</span></span><br><span class=\"javascript\">  &#125;,</span><br><span class=\"javascript\">   </span><br><span class=\"javascript\">  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">    &lt;input</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">      type=&quot;checkbox&quot;</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">      v-bind:checked=&quot;checked&quot;</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">      v-on:change=&quot;$emit(&#x27;change&#x27;, $event.target.checked)&quot;</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">    &gt;</span></span><br><span class=\"hljs-string\"><span class=\"javascript\">  `</span></span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">lovingVue</span>: <span class=\"hljs-literal\">true</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-js-自定义指令\"><a href=\"#Vue-js-自定义指令\" class=\"headerlink\" title=\"Vue.js 自定义指令\"></a>Vue.js 自定义指令</h1><p>除了默认设置的核心指令( v-model 和 v-show ), Vue 也允许注册自定义指令。</p>\n<p>下面我们注册一个全局指令 v-focus, 该指令的功能是在页面加载时，元素获得焦点：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-focus</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 注册一个全局自定义指令 v-focus</span></span><br><span class=\"javascript\">Vue.directive(<span class=\"hljs-string\">&#x27;focus&#x27;</span>, &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 当绑定元素插入到 DOM 中。</span></span><br><span class=\"javascript\">  <span class=\"hljs-attr\">inserted</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el</span>) </span>&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 聚焦元素</span></span><br><span class=\"javascript\">    el.focus()</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span></span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>我们也可以在实例使用 directives 选项来注册局部指令，这样指令只能在这个实例中使用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-focus</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 创建根实例</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">directives</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 注册一个局部的自定义指令 v-focus</span></span><br><span class=\"javascript\">    <span class=\"hljs-attr\">focus</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 指令的定义</span></span><br><span class=\"javascript\">      <span class=\"hljs-attr\">inserted</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 聚焦元素</span></span><br><span class=\"javascript\">        el.focus()</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"钩子\"><a href=\"#钩子\" class=\"headerlink\" title=\"钩子\"></a>钩子</h2><h3 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h3><p>指令定义函数提供了几个钩子函数（可选）：</p>\n<ul>\n<li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li>\n<li><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li>\n<li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li>\n<li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li>\n<li><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li>\n</ul>\n<h3 id=\"钩子函数的参数\"><a href=\"#钩子函数的参数\" class=\"headerlink\" title=\"钩子函数的参数\"></a>钩子函数的参数</h3><p>钩子函数的参数有：</p>\n<ul>\n<li><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 DOM 。</li>\n<li>binding: 一个对象，包含以下属性：<ul>\n<li><strong>name</strong>: 指令名，不包括 <code>v-</code> 前缀。</li>\n<li><strong>value</strong>: 指令的绑定值， 例如： <code>v-my-directive=&quot;1 + 1&quot;</code>, value 的值是 <code>2</code>。</li>\n<li><strong>oldValue</strong>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>\n<li><strong>expression</strong>: 绑定值的表达式或变量名。 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> ， expression 的值是 <code>&quot;1 + 1&quot;</code>。</li>\n<li><strong>arg</strong>: 传给指令的参数。例如 <code>v-my-directive:foo</code>， arg 的值是 <code>&quot;foo&quot;</code>。</li>\n<li><strong>modifiers</strong>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 modifiers 的值是 <code>&#123; foo: true, bar: true &#125;</code>。</li>\n</ul>\n</li>\n<li><strong>vnode</strong>: Vue 编译生成的虚拟节点。</li>\n<li><strong>oldVnode</strong>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>  <span class=\"hljs-attr\">v-runoob:hello.a.b</span>=<span class=\"hljs-string\">&quot;message&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">Vue.directive(<span class=\"hljs-string\">&#x27;runoob&#x27;</span>, &#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">bind</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, binding, vnode</span>) </span>&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-built_in\">JSON</span>.stringify</span><br><span class=\"javascript\">    el.innerHTML =</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;name: &#x27;</span>       + s(binding.name) + <span class=\"hljs-string\">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;value: &#x27;</span>      + s(binding.value) + <span class=\"hljs-string\">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;expression: &#x27;</span> + s(binding.expression) + <span class=\"hljs-string\">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;argument: &#x27;</span>   + s(binding.arg) + <span class=\"hljs-string\">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;modifiers: &#x27;</span>  + s(binding.modifiers) + <span class=\"hljs-string\">&#x27;&lt;br&gt;&#x27;</span> +</span><br><span class=\"javascript\">      <span class=\"hljs-string\">&#x27;vnode keys: &#x27;</span> + <span class=\"hljs-built_in\">Object</span>.keys(vnode).join(<span class=\"hljs-string\">&#x27;, &#x27;</span>)</span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;菜鸟教程!&#x27;</span></span><br><span class=\"javascript\">  &#125;</span><br><span class=\"javascript\">&#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730162448.png\" alt=\"image-20210730162439990\"></p>\n<p>有时候我们不需要其他钩子函数，我们可以简写函数，如下格式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Vue.directive(<span class=\"hljs-string\">&#x27;runoob&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, binding</span>) </span>&#123;<br>  <span class=\"hljs-comment\">// 设置指令的背景颜色</span><br>  el.style.backgroundColor = binding.value.color<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>指令函数可接受所有合法的 JavaScript 表达式，以下实例传入了 JavaScript 对象：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-jiaqi</span>=<span class=\"hljs-string\">&#x27;&#123;color:&quot;pink&quot;,text:&quot;666&quot;&#125;&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  Vue.directive(<span class=\"hljs-string\">&#x27;jiaqi&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el,binding</span>)</span>&#123;</span><br><span class=\"javascript\">    el.style.color=binding.value.color;</span><br><span class=\"javascript\">    el.innerHTML=binding.value.text;</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue数组处理\"><a href=\"#Vue数组处理\" class=\"headerlink\" title=\"Vue数组处理\"></a>Vue数组处理</h1><h2 id=\"变异方法\"><a href=\"#变异方法\" class=\"headerlink\" title=\"变异方法\"></a>变异方法</h2><p>1.变异方法和替换数组有什么区别</p>\n<ul>\n<li>变异的方法能够实现数据更新视图自动更新</li>\n<li>替换数组不会修改原始数据，数据改变视图不一定更新</li>\n</ul>\n<p>2.变异方法和替换数组有哪些</p>\n<ul>\n<li><p>变异方法：push  pop shift unshift  splice  sort  reverse</p>\n</li>\n<li><p>替换数组：filter  concat  slice</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;fname&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;add&#x27;</span>&gt;</span>添加<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;del&#x27;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;change&#x27;</span>&gt;</span>替换<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;item in list&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">list</span>:[<span class=\"hljs-string\">&#x27;apple&#x27;</span>,<span class=\"hljs-string\">&#x27;orange&#x27;</span>,<span class=\"hljs-string\">&#x27;banana&#x27;</span>],</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">fname</span>:<span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">add</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.list.push(<span class=\"hljs-built_in\">this</span>.fname);</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">del</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.list.pop(<span class=\"hljs-built_in\">this</span>.fname);</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">change</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.list=<span class=\"hljs-built_in\">this</span>.list.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>)</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数组响应式变化\"><a href=\"#数组响应式变化\" class=\"headerlink\" title=\"数组响应式变化\"></a>数组响应式变化</h2><ul>\n<li>Vue.set(vm.items, indexOfItem, newValue)  </li>\n<li>vm.$set(vm.items, indexOfItem, newValue)  </li>\n<li>① 参数一表示要处理的数组名称<br>② 参数二表示要处理的数组的索引<br>③ 参数三表示要处理的数组的值  </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">list</span>: [<span class=\"hljs-string\">&#x27;apple&#x27;</span>, <span class=\"hljs-string\">&#x27;orange&#x27;</span>, <span class=\"hljs-string\">&#x27;banana&#x27;</span>],<br>    &#125;<br>  &#125;,<br>&#125;)<br>Vue.set(vm.list,<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&#x27;lemon&#x27;</span>); <span class=\"hljs-comment\">// 数据和视图都发生了变化</span><br>vm.$set(vm.list,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;banana&#x27;</span>);<span class=\"hljs-comment\">// 数据和视图都发生了变化</span><br><span class=\"hljs-comment\">//  vm.list[1]=&#x27;lemon&#x27;;  数据被修改了，但是视图没有被修改</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"对象响应式变化\"><a href=\"#对象响应式变化\" class=\"headerlink\" title=\"对象响应式变化\"></a>对象响应式变化</h2><ul>\n<li>Vue.set(vm.items, key, newValue)  </li>\n<li>vm.$set(vm.items, key, newValue)  </li>\n<li>① 参数一表示要处理的对象名称<br>② 参数二表示要处理的对象的属性名<br>③ 参数三表示要处理的对象的值  </li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;info.age&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;info.gender&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">info</span>: &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;lisi&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">gender</span>: <span class=\"hljs-string\">&#x27;male&#x27;</span></span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;)</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// vm.info.gender=&#x27;female&#x27;  不会修改视图层，只会修改数据</span></span><br><span class=\"javascript\">  vm.$set(vm.info, <span class=\"hljs-string\">&#x27;gender&#x27;</span>, <span class=\"hljs-string\">&#x27;non-binary&#x27;</span>) <span class=\"hljs-comment\">// 而且此时再用vm.info.gender来修改也是响应式的</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"使用正则格式化时间","date":"2021-07-31T03:47:51.000Z","_content":"\n具体的原理我也不太懂，但是能用就行。\n\n\n```js\nfunction dateFormat(date, format) {\n    if (typeof date === \"string\") {\n      var mts = date.match(/(\\/Date\\((\\d+)\\)\\/)/);\n      if (mts && mts.length >= 3) {\n        date = parseInt(mts[2]);\n      }\n    }\n    date = new Date(date);\n    if (!date || date.toUTCString() == \"Invalid Date\") {\n      return \"\";\n    }\n    var map = {\n      \"M\": date.getMonth() + 1, //月份 \n      \"d\": date.getDate(), //日 \n      \"h\": date.getHours(), //小时 \n      \"m\": date.getMinutes(), //分 \n      \"s\": date.getSeconds(), //秒 \n      \"q\": Math.floor((date.getMonth() + 3) / 3), //季度 \n      \"S\": date.getMilliseconds() //毫秒 \n    };\n    format = format.replace(/([yMdhmsqS])+/g, function(all, t) {\n      var v = map[t];\n      if (v !== undefined) {\n        if (all.length > 1) {\n          v = '0' + v;\n          v = v.substr(v.length - 2);\n        }\n        return v;\n      } else if (t === 'y') {\n        return (date.getFullYear() + '').substr(4 - all.length);\n      }\n      return all;\n    });\n    return format;\n  }\n\n\n\nconsole.log(dateFormat(Date.now(),'yyyy'));  //2021\nconsole.log(dateFormat(Date.now(),'yyyy-MM-dd hh:mm'));  //2021-07-31 11:41\nconsole.log(dateFormat(1627702957686,'yyyy-MM-dd hh:mm'));  //2021-07-31 11:41\n\n```\n\n","source":"_posts/使用正则格式化时间.md","raw":"---\ntitle: 使用正则格式化时间\ndate: 2021-07-31 11:47:51\ntags: 正则\n---\n\n具体的原理我也不太懂，但是能用就行。\n\n\n```js\nfunction dateFormat(date, format) {\n    if (typeof date === \"string\") {\n      var mts = date.match(/(\\/Date\\((\\d+)\\)\\/)/);\n      if (mts && mts.length >= 3) {\n        date = parseInt(mts[2]);\n      }\n    }\n    date = new Date(date);\n    if (!date || date.toUTCString() == \"Invalid Date\") {\n      return \"\";\n    }\n    var map = {\n      \"M\": date.getMonth() + 1, //月份 \n      \"d\": date.getDate(), //日 \n      \"h\": date.getHours(), //小时 \n      \"m\": date.getMinutes(), //分 \n      \"s\": date.getSeconds(), //秒 \n      \"q\": Math.floor((date.getMonth() + 3) / 3), //季度 \n      \"S\": date.getMilliseconds() //毫秒 \n    };\n    format = format.replace(/([yMdhmsqS])+/g, function(all, t) {\n      var v = map[t];\n      if (v !== undefined) {\n        if (all.length > 1) {\n          v = '0' + v;\n          v = v.substr(v.length - 2);\n        }\n        return v;\n      } else if (t === 'y') {\n        return (date.getFullYear() + '').substr(4 - all.length);\n      }\n      return all;\n    });\n    return format;\n  }\n\n\n\nconsole.log(dateFormat(Date.now(),'yyyy'));  //2021\nconsole.log(dateFormat(Date.now(),'yyyy-MM-dd hh:mm'));  //2021-07-31 11:41\nconsole.log(dateFormat(1627702957686,'yyyy-MM-dd hh:mm'));  //2021-07-31 11:41\n\n```\n\n","slug":"使用正则格式化时间","published":1,"updated":"2021-07-31T03:49:00.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr8ldbk0003moundzrx9z8d","content":"<p>具体的原理我也不太懂，但是能用就行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dateFormat</span>(<span class=\"hljs-params\">date, format</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> date === <span class=\"hljs-string\">&quot;string&quot;</span>) &#123;<br>      <span class=\"hljs-keyword\">var</span> mts = date.match(<span class=\"hljs-regexp\">/(\\/Date\\((\\d+)\\)\\/)/</span>);<br>      <span class=\"hljs-keyword\">if</span> (mts &amp;&amp; mts.length &gt;= <span class=\"hljs-number\">3</span>) &#123;<br>        date = <span class=\"hljs-built_in\">parseInt</span>(mts[<span class=\"hljs-number\">2</span>]);<br>      &#125;<br>    &#125;<br>    date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(date);<br>    <span class=\"hljs-keyword\">if</span> (!date || date.toUTCString() == <span class=\"hljs-string\">&quot;Invalid Date&quot;</span>) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">var</span> map = &#123;<br>      <span class=\"hljs-string\">&quot;M&quot;</span>: date.getMonth() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">//月份 </span><br>      <span class=\"hljs-string\">&quot;d&quot;</span>: date.getDate(), <span class=\"hljs-comment\">//日 </span><br>      <span class=\"hljs-string\">&quot;h&quot;</span>: date.getHours(), <span class=\"hljs-comment\">//小时 </span><br>      <span class=\"hljs-string\">&quot;m&quot;</span>: date.getMinutes(), <span class=\"hljs-comment\">//分 </span><br>      <span class=\"hljs-string\">&quot;s&quot;</span>: date.getSeconds(), <span class=\"hljs-comment\">//秒 </span><br>      <span class=\"hljs-string\">&quot;q&quot;</span>: <span class=\"hljs-built_in\">Math</span>.floor((date.getMonth() + <span class=\"hljs-number\">3</span>) / <span class=\"hljs-number\">3</span>), <span class=\"hljs-comment\">//季度 </span><br>      <span class=\"hljs-string\">&quot;S&quot;</span>: date.getMilliseconds() <span class=\"hljs-comment\">//毫秒 </span><br>    &#125;;<br>    format = format.replace(<span class=\"hljs-regexp\">/([yMdhmsqS])+/g</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">all, t</span>) </span>&#123;<br>      <span class=\"hljs-keyword\">var</span> v = map[t];<br>      <span class=\"hljs-keyword\">if</span> (v !== <span class=\"hljs-literal\">undefined</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (all.length &gt; <span class=\"hljs-number\">1</span>) &#123;<br>          v = <span class=\"hljs-string\">&#x27;0&#x27;</span> + v;<br>          v = v.substr(v.length - <span class=\"hljs-number\">2</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> v;<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (t === <span class=\"hljs-string\">&#x27;y&#x27;</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (date.getFullYear() + <span class=\"hljs-string\">&#x27;&#x27;</span>).substr(<span class=\"hljs-number\">4</span> - all.length);<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> all;<br>    &#125;);<br>    <span class=\"hljs-keyword\">return</span> format;<br>  &#125;<br><br><br><br><span class=\"hljs-built_in\">console</span>.log(dateFormat(<span class=\"hljs-built_in\">Date</span>.now(),<span class=\"hljs-string\">&#x27;yyyy&#x27;</span>));  <span class=\"hljs-comment\">//2021</span><br><span class=\"hljs-built_in\">console</span>.log(dateFormat(<span class=\"hljs-built_in\">Date</span>.now(),<span class=\"hljs-string\">&#x27;yyyy-MM-dd hh:mm&#x27;</span>));  <span class=\"hljs-comment\">//2021-07-31 11:41</span><br><span class=\"hljs-built_in\">console</span>.log(dateFormat(<span class=\"hljs-number\">1627702957686</span>,<span class=\"hljs-string\">&#x27;yyyy-MM-dd hh:mm&#x27;</span>));  <span class=\"hljs-comment\">//2021-07-31 11:41</span><br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>具体的原理我也不太懂，但是能用就行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dateFormat</span>(<span class=\"hljs-params\">date, format</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> date === <span class=\"hljs-string\">&quot;string&quot;</span>) &#123;<br>      <span class=\"hljs-keyword\">var</span> mts = date.match(<span class=\"hljs-regexp\">/(\\/Date\\((\\d+)\\)\\/)/</span>);<br>      <span class=\"hljs-keyword\">if</span> (mts &amp;&amp; mts.length &gt;= <span class=\"hljs-number\">3</span>) &#123;<br>        date = <span class=\"hljs-built_in\">parseInt</span>(mts[<span class=\"hljs-number\">2</span>]);<br>      &#125;<br>    &#125;<br>    date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(date);<br>    <span class=\"hljs-keyword\">if</span> (!date || date.toUTCString() == <span class=\"hljs-string\">&quot;Invalid Date&quot;</span>) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">var</span> map = &#123;<br>      <span class=\"hljs-string\">&quot;M&quot;</span>: date.getMonth() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">//月份 </span><br>      <span class=\"hljs-string\">&quot;d&quot;</span>: date.getDate(), <span class=\"hljs-comment\">//日 </span><br>      <span class=\"hljs-string\">&quot;h&quot;</span>: date.getHours(), <span class=\"hljs-comment\">//小时 </span><br>      <span class=\"hljs-string\">&quot;m&quot;</span>: date.getMinutes(), <span class=\"hljs-comment\">//分 </span><br>      <span class=\"hljs-string\">&quot;s&quot;</span>: date.getSeconds(), <span class=\"hljs-comment\">//秒 </span><br>      <span class=\"hljs-string\">&quot;q&quot;</span>: <span class=\"hljs-built_in\">Math</span>.floor((date.getMonth() + <span class=\"hljs-number\">3</span>) / <span class=\"hljs-number\">3</span>), <span class=\"hljs-comment\">//季度 </span><br>      <span class=\"hljs-string\">&quot;S&quot;</span>: date.getMilliseconds() <span class=\"hljs-comment\">//毫秒 </span><br>    &#125;;<br>    format = format.replace(<span class=\"hljs-regexp\">/([yMdhmsqS])+/g</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">all, t</span>) </span>&#123;<br>      <span class=\"hljs-keyword\">var</span> v = map[t];<br>      <span class=\"hljs-keyword\">if</span> (v !== <span class=\"hljs-literal\">undefined</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (all.length &gt; <span class=\"hljs-number\">1</span>) &#123;<br>          v = <span class=\"hljs-string\">&#x27;0&#x27;</span> + v;<br>          v = v.substr(v.length - <span class=\"hljs-number\">2</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> v;<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (t === <span class=\"hljs-string\">&#x27;y&#x27;</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> (date.getFullYear() + <span class=\"hljs-string\">&#x27;&#x27;</span>).substr(<span class=\"hljs-number\">4</span> - all.length);<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> all;<br>    &#125;);<br>    <span class=\"hljs-keyword\">return</span> format;<br>  &#125;<br><br><br><br><span class=\"hljs-built_in\">console</span>.log(dateFormat(<span class=\"hljs-built_in\">Date</span>.now(),<span class=\"hljs-string\">&#x27;yyyy&#x27;</span>));  <span class=\"hljs-comment\">//2021</span><br><span class=\"hljs-built_in\">console</span>.log(dateFormat(<span class=\"hljs-built_in\">Date</span>.now(),<span class=\"hljs-string\">&#x27;yyyy-MM-dd hh:mm&#x27;</span>));  <span class=\"hljs-comment\">//2021-07-31 11:41</span><br><span class=\"hljs-built_in\">console</span>.log(dateFormat(<span class=\"hljs-number\">1627702957686</span>,<span class=\"hljs-string\">&#x27;yyyy-MM-dd hh:mm&#x27;</span>));  <span class=\"hljs-comment\">//2021-07-31 11:41</span><br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"Vue小案例--图书管理系统","date":"2021-07-30T09:55:39.000Z","_content":"\n# 图书管理\n\n## 1. 图书列表\n\n⚫ 实现静态列表效果\n⚫ 基于数据实现模板效果\n⚫ 处里每行的操作按钮  \n\n![image-20210730181114909](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730181123.png)\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style type=\"text/css\">\n    .grid {\n      margin: auto;\n      width: 500px;\n      text-align: center;\n    }\n\n    .grid table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n\n    .grid th,\n    td {\n      padding: 10;\n      border: 1px dashed orange;\n      height: 35px;\n      line-height: 35px;\n    }\n\n    .grid th {\n      background-color: orange;\n    }\n  </style>\n</head>\n\n<body>\n  <div id=\"app\">\n    <div class=\"grid\">\n      <table>\n        <thead>\n          <tr>\n            <th>编号</th>\n            <th>名称</th>\n            <th>时间</th>\n            <th>操作</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>\n              <a href=\"\">修改</a>\n              <span>|</span>\n              <a href=\"\">删除</a>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <script type=\"text/javascript\" src=\"0./vue.js\"></script>\n  <script type=\"text/javascript\">\n\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        books: [{\n          id: 1,\n          name: '三国演义',\n          date: ''\n        }, {\n          id: 2,\n          name: '水浒传',\n          date: ''\n        }, {\n          id: 3,\n          name: '红楼梦',\n          date: ''\n        }, {\n          id: 4,\n          name: '西游记',\n          date: ''\n        }]\n      }\n    });\n  </script>\n</body>\n\n</html>\n```\n\n## 2. 添加图书\n\n⚫ 实现表单的静态效果\n⚫ 添加图书表单域数据绑定\n⚫ 添加按钮事件绑定\n⚫ 实现添加业务逻辑  \n\n![image-20210730182422489](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730182423.png)\n\n```html\n<div id=\"app\">\n  <div class=\"grid\">\n    <div>\n      <h1>图书管理</h1>\n      <div class=\"book\">\n        <div>\n          <label for=\"id\">\n            编号：\n          </label>\n          <input type=\"text\" id=\"id\" v-model='id'>\n          <label for=\"name\">\n            名称：\n          </label>\n          <input type=\"text\" id=\"name\" v-model='name'>\n          <button @click='handle'>提交</button>\n        </div>\n      </div>\n    </div>\n    <table>\n      <thead>\n        <tr>\n          <th>编号</th>\n          <th>名称</th>\n          <th>时间</th>\n          <th>操作</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for='book in books' :key='book.id'>\n          <td>{{book.id}}</td>\n          <td>{{book.name}}</td>\n          <td>{{book.date}}</td>\n          <td>\n            <!-- 禁用页面刷新 -->\n            <a href=\"\" @click.prevent>修改</a>\n            <span>|</span>\n            <a href=\"\" @click.prevent>删除</a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n<script type=\"text/javascript\" src=\"/0.vue.js\"></script>\n<script type=\"text/javascript\">\n\n  var vm = new Vue({\n    el: '#app',\n    data: {\n      id:'',\n      name:'',\n      books: [{\n        id: 1,\n        name: '三国演义',\n        date: ''\n      }, {\n        id: 2,\n        name: '水浒传',\n        date: ''\n      }, {\n        id: 3,\n        name: '红楼梦',\n        date: ''\n      }, {\n        id: 4,\n        name: '西游记',\n        date: ''\n      }]\n    },\n    methods: {\n      handle(){\n        // 添加图书\n        let book={};\n        book.id=this.id;\n        book.name=this.name;\n        this.books.push(book);\n        // 清空input输入域\n        this.id='';\n        this.name='';\n      }\n    },\n  });\n</script>\n```\n\n## 3. 修改图书\n\n⚫ 修改信息填充到表单\n⚫ 修改后重新提交表单\n⚫ 重用添加和修改的方法  \n\n```html\n<div id=\"app\">\n  <div class=\"grid\">\n    <div>\n      <h1>图书管理</h1>\n      <div class=\"book\">\n        <div>\n          <label for=\"id\">\n            编号：\n          </label>\n          <input type=\"text\" id=\"id\" v-model='id' :disabled='flag'>\n          <label for=\"name\">\n            名称：\n          </label>\n          <input type=\"text\" id=\"name\" v-model='name'>\n          <button @click='handle'>提交</button>\n        </div>\n      </div>\n    </div>\n    <table>\n      <thead>\n        <tr>\n          <th>编号</th>\n          <th>名称</th>\n          <th>时间</th>\n          <th>操作</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for='book in books' :key='book.id'>\n          <td>{{book.id}}</td>\n          <td>{{book.name}}</td>\n          <td>{{book.date}}</td>\n          <td>\n            <!-- 禁用页面刷新 -->\n            <a href=\"\" @click.prevent='edit(book.id)'>修改</a>\n            <span>|</span>\n            <a href=\"\" @click.prevent>删除</a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n<script type=\"text/javascript\" src=\"/0.vue.js\"></script>\n<script type=\"text/javascript\">\n\n  var vm = new Vue({\n    el: '#app',\n    data: {\n      id: '',\n      name: '',\n      books: [{\n        id: 1,\n        name: '三国演义',\n        date: ''\n      }, {\n        id: 2,\n        name: '水浒传',\n        date: ''\n      }, {\n        id: 3,\n        name: '红楼梦',\n        date: ''\n      }, {\n        id: 4,\n        name: '西游记',\n        date: ''\n      }],\n      flag: false\n    },\n    methods: {\n      handle() {\n        if (this.flag) {\n          this.books.forEach(item => {\n            // 如果表单中的id与数据中的id相同\n            if (item.id == this.id) {\n              item.name = this.name;\n              // 允许输入\n              this.flag = false;\n              return;\n            }\n          })\n        } else {\n          // 添加图书\n          let book = {};\n          book.id = this.id;\n          book.name = this.name;\n          this.books.push(book);\n        }\n        // 清空input输入域\n        this.id = '';\n        this.name = '';\n      },\n      edit(id) {\n        this.books.forEach(item => {\n          if (item.id == id) {\n            this.id = item.id;\n            this.name = item.name;\n            this.flag = true;\n            return;\n          }\n        });\n      }\n    },\n  });\n</script>\n```\n\n## 4.删除图书\n\n⚫ 删除按钮绑定事件处理方法\n⚫ 实现删除业务逻辑  \n\n```html\n<div id=\"app\">\n  <div class=\"grid\">\n    <div>\n      <h1>图书管理</h1>\n      <div class=\"book\">\n        <div>\n          <label for=\"id\">\n            编号：\n          </label>\n          <input type=\"text\" id=\"id\" v-model='id' :disabled='flag'>\n          <label for=\"name\">\n            名称：\n          </label>\n          <input type=\"text\" id=\"name\" v-model='name'>\n          <button @click='handle'>提交</button>\n        </div>\n      </div>\n    </div>\n    <table>\n      <thead>\n        <tr>\n          <th>编号</th>\n          <th>名称</th>\n          <th>时间</th>\n          <th>操作</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for='book in books' :key='book.id'>\n          <td>{{book.id}}</td>\n          <td>{{book.name}}</td>\n          <td>{{book.date}}</td>\n          <td>\n            <!-- 禁用页面刷新 -->\n            <a href=\"\" @click.prevent='edit(book.id)'>修改</a>\n            <span>|</span>\n            <a href=\"\" @click.prevent='del(book.id)'>删除</a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n<script type=\"text/javascript\" src=\"/0.vue.js\"></script>\n<script type=\"text/javascript\">\n\n  var vm = new Vue({\n    el: '#app',\n    data: {\n      id: '',\n      name: '',\n      books: [{\n        id: 1,\n        name: '三国演义',\n        date: ''\n      }, {\n        id: 2,\n        name: '水浒传',\n        date: ''\n      }, {\n        id: 3,\n        name: '红楼梦',\n        date: ''\n      }, {\n        id: 4,\n        name: '西游记',\n        date: ''\n      }],\n      flag: false\n    },\n    methods: {\n      handle() {\n        if (this.flag) {\n          this.books.some(item => {\n            // 如果表单中的id与数据中的id相同\n            if (item.id == this.id) {\n              item.name = this.name;\n              // 允许输入\n              this.flag = false;\n              console.log(item.id);\n              return true;\n            }\n          })\n        } else {\n          // 添加图书\n          let book = {};\n          book.id = this.id;\n          book.name = this.name;\n          this.books.push(book);\n        }\n        // 清空input输入域\n        this.id = '';\n        this.name = '';\n      },\n      edit(id) {\n        this.books.some(item => {\n          if (item.id == id) {\n            this.id = item.id;\n            this.name = item.name;\n            this.flag = true;\n            return true;\n          }\n        });\n      },\n      del(id){\n        this.books.some((item,index) =>{\n          if(item.id==id){\n            this.books.splice(index,1);\n            return true;\n          }\n        })\n      }\n    },\n  });\n</script>\n```\n\n经过测试，使用forEach方法，如果已经匹配到了想要的数组元素，用return 是无法退出遍历的。因此，使用some方法更为恰当，当匹配到所需元素时，return true即可退出遍历。\n\n## 5.常用特性应用场景\n\n⚫ 过滤器（格式化日期）\n⚫ 自定义指令（获取表单焦点）\n⚫ 计算属性（统计图书数量）\n⚫ 侦听器（验证图书存在性）\n⚫ 生命周期（图书数据处理）  \n\n[使用正则格式化时间](https://jiaqicoder.com/2021/07/31/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4/)\n\n最终代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style type=\"text/css\">\n    .grid {\n      margin: auto;\n      width: 530px;\n      text-align: center;\n    }\n\n    .grid table {\n      border-top: 1px solid #C2D89A;\n      width: 100%;\n      border-collapse: collapse;\n    }\n\n    .grid th,\n    td {\n      padding: 10;\n      border: 1px dashed #F3DCAB;\n      height: 35px;\n      line-height: 35px;\n    }\n\n    .grid th {\n      background-color: #F3DCAB;\n    }\n\n    .grid .book {\n      padding-bottom: 10px;\n      padding-top: 5px;\n      background-color: #F3DCAB;\n    }\n\n    .grid .total {\n      box-sizing: border-box;\n      padding-left: 80px;\n      text-align: left;\n      height: 30px;\n      line-height: 30px;\n      background-color: #F3DCAB;\n      border-top: 1px solid #C2D89A;\n    }\n\n    .grid .total span:nth-child(3) {\n      margin-left: 30px;\n      color: rgba(202, 14, 14, 0.644);\n    }\n  </style>\n</head>\n\n<body>\n  <div id=\"app\">\n    <div class=\"grid\">\n      <div>\n        <h1>图书管理</h1>\n        <div class=\"book\">\n          <div>\n            <label for=\"id\">\n              编号：\n            </label>\n            <input type=\"text\" id=\"id\" v-model='id' :disabled='flag' v-focus>\n            <label for=\"name\">\n              名称：\n            </label>\n            <input type=\"text\" id=\"name\" v-model='name'>\n            <button @click='handle' :disabled='submitFlag'>提交</button>\n          </div>\n        </div>\n      </div>\n      <div class='total'>\n        <span>图书总数: </span>\n        <span>{{totalofbook}}</span>\n        <span v-show='err'>{{errMessage}}</span>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>编号</th>\n            <th>名称</th>\n            <th>时间</th>\n            <th>操作</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for='book in books' :key='book.id'>\n            <td>{{book.id}}</td>\n            <td>{{book.name}}</td>\n            <td>{{book.date | format('yyyy-MM-dd')}}</td>\n            <td>\n              <!-- 禁用页面刷新 -->\n              <a href=\"\" @click.prevent='edit(book.id)'>修改</a>\n              <span>|</span>\n              <a href=\"\" @click.prevent='del(book.id)'>删除</a>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <script type=\"text/javascript\" src=\"/0.vue.js\"></script>\n  <script type=\"text/javascript\">\n    Vue.filter('format', function (date, format) {\n      if (typeof date === \"string\") {\n        var mts = date.match(/(\\/Date\\((\\d+)\\)\\/)/);\n        if (mts && mts.length >= 3) {\n          date = parseInt(mts[2]);\n        }\n      }\n      date = new Date(date);\n      if (!date || date.toUTCString() == \"Invalid Date\") {\n        return \"\";\n      }\n      var map = {\n        \"M\": date.getMonth() + 1, //月份 \n        \"d\": date.getDate(), //日 \n        \"h\": date.getHours(), //小时 \n        \"m\": date.getMinutes(), //分 \n        \"s\": date.getSeconds(), //秒 \n        \"q\": Math.floor((date.getMonth() + 3) / 3), //季度 \n        \"S\": date.getMilliseconds() //毫秒 \n      };\n      format = format.replace(/([yMdhmsqS])+/g, function (all, t) {\n        var v = map[t];\n        if (v !== undefined) {\n          if (all.length > 1) {\n            v = '0' + v;\n            v = v.substr(v.length - 2);\n          }\n          return v;\n        } else if (t === 'y') {\n          return (date.getFullYear() + '').substr(4 - all.length);\n        }\n        return all;\n      });\n      return format;\n    })\n\n    Vue.directive('focus', {\n      inserted: function (el) {\n        el.focus();\n      }\n    })\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        id: '',\n        name: '',\n        books: [],\n        flag: false,\n        submitFlag: false,\n        err: false,\n        errMessage: ''\n      },\n      methods: {\n        handle() {\n          if (this.flag) {\n            this.books.some(item => {\n              // 如果表单中的id与数据中的id相同\n              if (item.id == this.id) {\n                item.name = this.name;\n                // 允许输入\n                this.flag = false;\n                console.log(item.id);\n                return true;\n              }\n            })\n          } else {\n            // 添加图书\n            let book = {};\n            book.id = this.id;\n            book.name = this.name;\n            this.books.push(book);\n          }\n          // 清空input输入域\n          this.id = '';\n          this.name = '';\n        },\n        edit(id) {\n          this.books.some(item => {\n            if (item.id == id) {\n              this.id = item.id;\n              this.name = item.name;\n              this.flag = true;\n              return true;\n            }\n          });\n        },\n        del(id) {\n          this.books.some((item, index) => {\n            if (item.id == id) {\n              this.books.splice(index, 1);\n              return true;\n            }\n          })\n        }\n      },\n      computed: {\n        totalofbook: function () {\n          return this.books.length;\n        }\n      },\n      watch: {\n        name: function (value) {\n          // 验证图书名称是否存在\n          this.books.some(item => {\n            if (value == item.name) {\n              this.submitFlag = true;\n              this.err = true;\n              this.errMessage = '图书名称已存在'\n              return true;\n            }\n          });\n        },\n      },\n      // 该生命周期钩子函数被触发的时候\n      // 一般此时用于获取后台数据，然后把数据填充在模板\n      mounted() {\n        let data=[{\n          id: 1,\n          name: '三国演义',\n          date: Date.now()\n        }, {\n          id: 2,\n          name: '水浒传',\n          date: 962770087686\n        }, {\n          id: 3,\n          name: '红楼梦',\n          date: 999778657686\n        }, {\n          id: 4,\n          name: '西游记',\n          date: 162770298686\n        }];\n        this.books=data;\n      },\n    });\n  </script>\n</body>\n\n</html>\n```\n\n![image-20210731144257953](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731144306.png)\n","source":"_posts/Vue小案例-图书管理系统.md","raw":"---\ntitle: Vue小案例--图书管理系统\ndate: 2021-07-30 17:55:39\ntags: [VUE,案例]\n---\n\n# 图书管理\n\n## 1. 图书列表\n\n⚫ 实现静态列表效果\n⚫ 基于数据实现模板效果\n⚫ 处里每行的操作按钮  \n\n![image-20210730181114909](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730181123.png)\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style type=\"text/css\">\n    .grid {\n      margin: auto;\n      width: 500px;\n      text-align: center;\n    }\n\n    .grid table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n\n    .grid th,\n    td {\n      padding: 10;\n      border: 1px dashed orange;\n      height: 35px;\n      line-height: 35px;\n    }\n\n    .grid th {\n      background-color: orange;\n    }\n  </style>\n</head>\n\n<body>\n  <div id=\"app\">\n    <div class=\"grid\">\n      <table>\n        <thead>\n          <tr>\n            <th>编号</th>\n            <th>名称</th>\n            <th>时间</th>\n            <th>操作</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>\n              <a href=\"\">修改</a>\n              <span>|</span>\n              <a href=\"\">删除</a>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <script type=\"text/javascript\" src=\"0./vue.js\"></script>\n  <script type=\"text/javascript\">\n\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        books: [{\n          id: 1,\n          name: '三国演义',\n          date: ''\n        }, {\n          id: 2,\n          name: '水浒传',\n          date: ''\n        }, {\n          id: 3,\n          name: '红楼梦',\n          date: ''\n        }, {\n          id: 4,\n          name: '西游记',\n          date: ''\n        }]\n      }\n    });\n  </script>\n</body>\n\n</html>\n```\n\n## 2. 添加图书\n\n⚫ 实现表单的静态效果\n⚫ 添加图书表单域数据绑定\n⚫ 添加按钮事件绑定\n⚫ 实现添加业务逻辑  \n\n![image-20210730182422489](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730182423.png)\n\n```html\n<div id=\"app\">\n  <div class=\"grid\">\n    <div>\n      <h1>图书管理</h1>\n      <div class=\"book\">\n        <div>\n          <label for=\"id\">\n            编号：\n          </label>\n          <input type=\"text\" id=\"id\" v-model='id'>\n          <label for=\"name\">\n            名称：\n          </label>\n          <input type=\"text\" id=\"name\" v-model='name'>\n          <button @click='handle'>提交</button>\n        </div>\n      </div>\n    </div>\n    <table>\n      <thead>\n        <tr>\n          <th>编号</th>\n          <th>名称</th>\n          <th>时间</th>\n          <th>操作</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for='book in books' :key='book.id'>\n          <td>{{book.id}}</td>\n          <td>{{book.name}}</td>\n          <td>{{book.date}}</td>\n          <td>\n            <!-- 禁用页面刷新 -->\n            <a href=\"\" @click.prevent>修改</a>\n            <span>|</span>\n            <a href=\"\" @click.prevent>删除</a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n<script type=\"text/javascript\" src=\"/0.vue.js\"></script>\n<script type=\"text/javascript\">\n\n  var vm = new Vue({\n    el: '#app',\n    data: {\n      id:'',\n      name:'',\n      books: [{\n        id: 1,\n        name: '三国演义',\n        date: ''\n      }, {\n        id: 2,\n        name: '水浒传',\n        date: ''\n      }, {\n        id: 3,\n        name: '红楼梦',\n        date: ''\n      }, {\n        id: 4,\n        name: '西游记',\n        date: ''\n      }]\n    },\n    methods: {\n      handle(){\n        // 添加图书\n        let book={};\n        book.id=this.id;\n        book.name=this.name;\n        this.books.push(book);\n        // 清空input输入域\n        this.id='';\n        this.name='';\n      }\n    },\n  });\n</script>\n```\n\n## 3. 修改图书\n\n⚫ 修改信息填充到表单\n⚫ 修改后重新提交表单\n⚫ 重用添加和修改的方法  \n\n```html\n<div id=\"app\">\n  <div class=\"grid\">\n    <div>\n      <h1>图书管理</h1>\n      <div class=\"book\">\n        <div>\n          <label for=\"id\">\n            编号：\n          </label>\n          <input type=\"text\" id=\"id\" v-model='id' :disabled='flag'>\n          <label for=\"name\">\n            名称：\n          </label>\n          <input type=\"text\" id=\"name\" v-model='name'>\n          <button @click='handle'>提交</button>\n        </div>\n      </div>\n    </div>\n    <table>\n      <thead>\n        <tr>\n          <th>编号</th>\n          <th>名称</th>\n          <th>时间</th>\n          <th>操作</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for='book in books' :key='book.id'>\n          <td>{{book.id}}</td>\n          <td>{{book.name}}</td>\n          <td>{{book.date}}</td>\n          <td>\n            <!-- 禁用页面刷新 -->\n            <a href=\"\" @click.prevent='edit(book.id)'>修改</a>\n            <span>|</span>\n            <a href=\"\" @click.prevent>删除</a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n<script type=\"text/javascript\" src=\"/0.vue.js\"></script>\n<script type=\"text/javascript\">\n\n  var vm = new Vue({\n    el: '#app',\n    data: {\n      id: '',\n      name: '',\n      books: [{\n        id: 1,\n        name: '三国演义',\n        date: ''\n      }, {\n        id: 2,\n        name: '水浒传',\n        date: ''\n      }, {\n        id: 3,\n        name: '红楼梦',\n        date: ''\n      }, {\n        id: 4,\n        name: '西游记',\n        date: ''\n      }],\n      flag: false\n    },\n    methods: {\n      handle() {\n        if (this.flag) {\n          this.books.forEach(item => {\n            // 如果表单中的id与数据中的id相同\n            if (item.id == this.id) {\n              item.name = this.name;\n              // 允许输入\n              this.flag = false;\n              return;\n            }\n          })\n        } else {\n          // 添加图书\n          let book = {};\n          book.id = this.id;\n          book.name = this.name;\n          this.books.push(book);\n        }\n        // 清空input输入域\n        this.id = '';\n        this.name = '';\n      },\n      edit(id) {\n        this.books.forEach(item => {\n          if (item.id == id) {\n            this.id = item.id;\n            this.name = item.name;\n            this.flag = true;\n            return;\n          }\n        });\n      }\n    },\n  });\n</script>\n```\n\n## 4.删除图书\n\n⚫ 删除按钮绑定事件处理方法\n⚫ 实现删除业务逻辑  \n\n```html\n<div id=\"app\">\n  <div class=\"grid\">\n    <div>\n      <h1>图书管理</h1>\n      <div class=\"book\">\n        <div>\n          <label for=\"id\">\n            编号：\n          </label>\n          <input type=\"text\" id=\"id\" v-model='id' :disabled='flag'>\n          <label for=\"name\">\n            名称：\n          </label>\n          <input type=\"text\" id=\"name\" v-model='name'>\n          <button @click='handle'>提交</button>\n        </div>\n      </div>\n    </div>\n    <table>\n      <thead>\n        <tr>\n          <th>编号</th>\n          <th>名称</th>\n          <th>时间</th>\n          <th>操作</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for='book in books' :key='book.id'>\n          <td>{{book.id}}</td>\n          <td>{{book.name}}</td>\n          <td>{{book.date}}</td>\n          <td>\n            <!-- 禁用页面刷新 -->\n            <a href=\"\" @click.prevent='edit(book.id)'>修改</a>\n            <span>|</span>\n            <a href=\"\" @click.prevent='del(book.id)'>删除</a>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n<script type=\"text/javascript\" src=\"/0.vue.js\"></script>\n<script type=\"text/javascript\">\n\n  var vm = new Vue({\n    el: '#app',\n    data: {\n      id: '',\n      name: '',\n      books: [{\n        id: 1,\n        name: '三国演义',\n        date: ''\n      }, {\n        id: 2,\n        name: '水浒传',\n        date: ''\n      }, {\n        id: 3,\n        name: '红楼梦',\n        date: ''\n      }, {\n        id: 4,\n        name: '西游记',\n        date: ''\n      }],\n      flag: false\n    },\n    methods: {\n      handle() {\n        if (this.flag) {\n          this.books.some(item => {\n            // 如果表单中的id与数据中的id相同\n            if (item.id == this.id) {\n              item.name = this.name;\n              // 允许输入\n              this.flag = false;\n              console.log(item.id);\n              return true;\n            }\n          })\n        } else {\n          // 添加图书\n          let book = {};\n          book.id = this.id;\n          book.name = this.name;\n          this.books.push(book);\n        }\n        // 清空input输入域\n        this.id = '';\n        this.name = '';\n      },\n      edit(id) {\n        this.books.some(item => {\n          if (item.id == id) {\n            this.id = item.id;\n            this.name = item.name;\n            this.flag = true;\n            return true;\n          }\n        });\n      },\n      del(id){\n        this.books.some((item,index) =>{\n          if(item.id==id){\n            this.books.splice(index,1);\n            return true;\n          }\n        })\n      }\n    },\n  });\n</script>\n```\n\n经过测试，使用forEach方法，如果已经匹配到了想要的数组元素，用return 是无法退出遍历的。因此，使用some方法更为恰当，当匹配到所需元素时，return true即可退出遍历。\n\n## 5.常用特性应用场景\n\n⚫ 过滤器（格式化日期）\n⚫ 自定义指令（获取表单焦点）\n⚫ 计算属性（统计图书数量）\n⚫ 侦听器（验证图书存在性）\n⚫ 生命周期（图书数据处理）  \n\n[使用正则格式化时间](https://jiaqicoder.com/2021/07/31/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4/)\n\n最终代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style type=\"text/css\">\n    .grid {\n      margin: auto;\n      width: 530px;\n      text-align: center;\n    }\n\n    .grid table {\n      border-top: 1px solid #C2D89A;\n      width: 100%;\n      border-collapse: collapse;\n    }\n\n    .grid th,\n    td {\n      padding: 10;\n      border: 1px dashed #F3DCAB;\n      height: 35px;\n      line-height: 35px;\n    }\n\n    .grid th {\n      background-color: #F3DCAB;\n    }\n\n    .grid .book {\n      padding-bottom: 10px;\n      padding-top: 5px;\n      background-color: #F3DCAB;\n    }\n\n    .grid .total {\n      box-sizing: border-box;\n      padding-left: 80px;\n      text-align: left;\n      height: 30px;\n      line-height: 30px;\n      background-color: #F3DCAB;\n      border-top: 1px solid #C2D89A;\n    }\n\n    .grid .total span:nth-child(3) {\n      margin-left: 30px;\n      color: rgba(202, 14, 14, 0.644);\n    }\n  </style>\n</head>\n\n<body>\n  <div id=\"app\">\n    <div class=\"grid\">\n      <div>\n        <h1>图书管理</h1>\n        <div class=\"book\">\n          <div>\n            <label for=\"id\">\n              编号：\n            </label>\n            <input type=\"text\" id=\"id\" v-model='id' :disabled='flag' v-focus>\n            <label for=\"name\">\n              名称：\n            </label>\n            <input type=\"text\" id=\"name\" v-model='name'>\n            <button @click='handle' :disabled='submitFlag'>提交</button>\n          </div>\n        </div>\n      </div>\n      <div class='total'>\n        <span>图书总数: </span>\n        <span>{{totalofbook}}</span>\n        <span v-show='err'>{{errMessage}}</span>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>编号</th>\n            <th>名称</th>\n            <th>时间</th>\n            <th>操作</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for='book in books' :key='book.id'>\n            <td>{{book.id}}</td>\n            <td>{{book.name}}</td>\n            <td>{{book.date | format('yyyy-MM-dd')}}</td>\n            <td>\n              <!-- 禁用页面刷新 -->\n              <a href=\"\" @click.prevent='edit(book.id)'>修改</a>\n              <span>|</span>\n              <a href=\"\" @click.prevent='del(book.id)'>删除</a>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <script type=\"text/javascript\" src=\"/0.vue.js\"></script>\n  <script type=\"text/javascript\">\n    Vue.filter('format', function (date, format) {\n      if (typeof date === \"string\") {\n        var mts = date.match(/(\\/Date\\((\\d+)\\)\\/)/);\n        if (mts && mts.length >= 3) {\n          date = parseInt(mts[2]);\n        }\n      }\n      date = new Date(date);\n      if (!date || date.toUTCString() == \"Invalid Date\") {\n        return \"\";\n      }\n      var map = {\n        \"M\": date.getMonth() + 1, //月份 \n        \"d\": date.getDate(), //日 \n        \"h\": date.getHours(), //小时 \n        \"m\": date.getMinutes(), //分 \n        \"s\": date.getSeconds(), //秒 \n        \"q\": Math.floor((date.getMonth() + 3) / 3), //季度 \n        \"S\": date.getMilliseconds() //毫秒 \n      };\n      format = format.replace(/([yMdhmsqS])+/g, function (all, t) {\n        var v = map[t];\n        if (v !== undefined) {\n          if (all.length > 1) {\n            v = '0' + v;\n            v = v.substr(v.length - 2);\n          }\n          return v;\n        } else if (t === 'y') {\n          return (date.getFullYear() + '').substr(4 - all.length);\n        }\n        return all;\n      });\n      return format;\n    })\n\n    Vue.directive('focus', {\n      inserted: function (el) {\n        el.focus();\n      }\n    })\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        id: '',\n        name: '',\n        books: [],\n        flag: false,\n        submitFlag: false,\n        err: false,\n        errMessage: ''\n      },\n      methods: {\n        handle() {\n          if (this.flag) {\n            this.books.some(item => {\n              // 如果表单中的id与数据中的id相同\n              if (item.id == this.id) {\n                item.name = this.name;\n                // 允许输入\n                this.flag = false;\n                console.log(item.id);\n                return true;\n              }\n            })\n          } else {\n            // 添加图书\n            let book = {};\n            book.id = this.id;\n            book.name = this.name;\n            this.books.push(book);\n          }\n          // 清空input输入域\n          this.id = '';\n          this.name = '';\n        },\n        edit(id) {\n          this.books.some(item => {\n            if (item.id == id) {\n              this.id = item.id;\n              this.name = item.name;\n              this.flag = true;\n              return true;\n            }\n          });\n        },\n        del(id) {\n          this.books.some((item, index) => {\n            if (item.id == id) {\n              this.books.splice(index, 1);\n              return true;\n            }\n          })\n        }\n      },\n      computed: {\n        totalofbook: function () {\n          return this.books.length;\n        }\n      },\n      watch: {\n        name: function (value) {\n          // 验证图书名称是否存在\n          this.books.some(item => {\n            if (value == item.name) {\n              this.submitFlag = true;\n              this.err = true;\n              this.errMessage = '图书名称已存在'\n              return true;\n            }\n          });\n        },\n      },\n      // 该生命周期钩子函数被触发的时候\n      // 一般此时用于获取后台数据，然后把数据填充在模板\n      mounted() {\n        let data=[{\n          id: 1,\n          name: '三国演义',\n          date: Date.now()\n        }, {\n          id: 2,\n          name: '水浒传',\n          date: 962770087686\n        }, {\n          id: 3,\n          name: '红楼梦',\n          date: 999778657686\n        }, {\n          id: 4,\n          name: '西游记',\n          date: 162770298686\n        }];\n        this.books=data;\n      },\n    });\n  </script>\n</body>\n\n</html>\n```\n\n![image-20210731144257953](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731144306.png)\n","slug":"Vue小案例-图书管理系统","published":1,"updated":"2021-07-31T06:43:08.264Z","_id":"ckrr8ldbl0004mound0nx5lqm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"图书管理\"><a href=\"#图书管理\" class=\"headerlink\" title=\"图书管理\"></a>图书管理</h1><h2 id=\"1-图书列表\"><a href=\"#1-图书列表\" class=\"headerlink\" title=\"1. 图书列表\"></a>1. 图书列表</h2><p>⚫ 实现静态列表效果<br>⚫ 基于数据实现模板效果<br>⚫ 处里每行的操作按钮  </p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730181123.png\" alt=\"image-20210730181114909\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">margin</span>: auto;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">500px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">text-align</span>: center;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">table</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border-collapse</span>: collapse;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">th</span>,</span><br><span class=\"css\">    <span class=\"hljs-selector-tag\">td</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> dashed orange;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">35px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">35px</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">th</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">background-color</span>: orange;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;grid&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>编号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0./vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">books</span>: [&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">        &#125;]</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;);</span><br><span class=\"javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-添加图书\"><a href=\"#2-添加图书\" class=\"headerlink\" title=\"2. 添加图书\"></a>2. 添加图书</h2><p>⚫ 实现表单的静态效果<br>⚫ 添加图书表单域数据绑定<br>⚫ 添加按钮事件绑定<br>⚫ 实现添加业务逻辑  </p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730182423.png\" alt=\"image-20210730182422489\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;grid&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>图书管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;id&quot;</span>&gt;</span><br>            编号：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;id&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><br>            名称：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;handle&#x27;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>编号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;book in books&#x27;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&#x27;book.id&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.date&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- 禁用页面刷新 --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>&gt;</span>修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">books</span>: [&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;]</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 添加图书</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> book=&#123;&#125;;</span><br><span class=\"javascript\">        book.id=<span class=\"hljs-built_in\">this</span>.id;</span><br><span class=\"javascript\">        book.name=<span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.books.push(book);</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 清空input输入域</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.id=<span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.name=<span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-修改图书\"><a href=\"#3-修改图书\" class=\"headerlink\" title=\"3. 修改图书\"></a>3. 修改图书</h2><p>⚫ 修改信息填充到表单<br>⚫ 修改后重新提交表单<br>⚫ 重用添加和修改的方法  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;grid&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>图书管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;id&quot;</span>&gt;</span><br>            编号：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;id&#x27;</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&#x27;flag&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><br>            名称：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;handle&#x27;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>编号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;book in books&#x27;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&#x27;book.id&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.date&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- 禁用页面刷新 --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>=<span class=\"hljs-string\">&#x27;edit(book.id)&#x27;</span>&gt;</span>修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">books</span>: [&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;],</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-literal\">false</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.flag) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 如果表单中的id与数据中的id相同</span></span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (item.id == <span class=\"hljs-built_in\">this</span>.id) &#123;</span><br><span class=\"javascript\">              item.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">              <span class=\"hljs-comment\">// 允许输入</span></span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">false</span>;</span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">return</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">          &#125;)</span><br><span class=\"javascript\">        &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 添加图书</span></span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">let</span> book = &#123;&#125;;</span><br><span class=\"javascript\">          book.id = <span class=\"hljs-built_in\">this</span>.id;</span><br><span class=\"javascript\">          book.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.push(book);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 清空input输入域</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.id = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">edit</span>(<span class=\"hljs-params\">id</span>)</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.books.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (item.id == id) &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.id = item.id;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.name = item.name;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span>;</span><br><span class=\"javascript\">          &#125;</span><br><span class=\"javascript\">        &#125;);</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-删除图书\"><a href=\"#4-删除图书\" class=\"headerlink\" title=\"4.删除图书\"></a>4.删除图书</h2><p>⚫ 删除按钮绑定事件处理方法<br>⚫ 实现删除业务逻辑  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;grid&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>图书管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;id&quot;</span>&gt;</span><br>            编号：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;id&#x27;</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&#x27;flag&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><br>            名称：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;handle&#x27;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>编号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;book in books&#x27;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&#x27;book.id&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.date&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- 禁用页面刷新 --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>=<span class=\"hljs-string\">&#x27;edit(book.id)&#x27;</span>&gt;</span>修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>=<span class=\"hljs-string\">&#x27;del(book.id)&#x27;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">books</span>: [&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;],</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-literal\">false</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.flag) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 如果表单中的id与数据中的id相同</span></span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (item.id == <span class=\"hljs-built_in\">this</span>.id) &#123;</span><br><span class=\"javascript\">              item.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">              <span class=\"hljs-comment\">// 允许输入</span></span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">false</span>;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">console</span>.log(item.id);</span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">          &#125;)</span><br><span class=\"javascript\">        &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 添加图书</span></span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">let</span> book = &#123;&#125;;</span><br><span class=\"javascript\">          book.id = <span class=\"hljs-built_in\">this</span>.id;</span><br><span class=\"javascript\">          book.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.push(book);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 清空input输入域</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.id = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">edit</span>(<span class=\"hljs-params\">id</span>)</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (item.id == id) &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.id = item.id;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.name = item.name;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">          &#125;</span><br><span class=\"javascript\">        &#125;);</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">del</span>(<span class=\"hljs-params\">id</span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">item,index</span>) =&gt;</span>&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span>(item.id==id)&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.books.splice(index,<span class=\"hljs-number\">1</span>);</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">          &#125;</span><br><span class=\"javascript\">        &#125;)</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>经过测试，使用forEach方法，如果已经匹配到了想要的数组元素，用return 是无法退出遍历的。因此，使用some方法更为恰当，当匹配到所需元素时，return true即可退出遍历。</p>\n<h2 id=\"5-常用特性应用场景\"><a href=\"#5-常用特性应用场景\" class=\"headerlink\" title=\"5.常用特性应用场景\"></a>5.常用特性应用场景</h2><p>⚫ 过滤器（格式化日期）<br>⚫ 自定义指令（获取表单焦点）<br>⚫ 计算属性（统计图书数量）<br>⚫ 侦听器（验证图书存在性）<br>⚫ 生命周期（图书数据处理）  </p>\n<p><a href=\"https://jiaqicoder.com/2021/07/31/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4/\">使用正则格式化时间</a></p>\n<p>最终代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">margin</span>: auto;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">530px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">text-align</span>: center;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">table</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#C2D89A</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border-collapse</span>: collapse;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">th</span>,</span><br><span class=\"css\">    <span class=\"hljs-selector-tag\">td</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> dashed <span class=\"hljs-number\">#F3DCAB</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">35px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">35px</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">th</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F3DCAB</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-class\">.book</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">padding-bottom</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">padding-top</span>: <span class=\"hljs-number\">5px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F3DCAB</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-class\">.total</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">box-sizing</span>: border-box;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">padding-left</span>: <span class=\"hljs-number\">80px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">text-align</span>: left;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">30px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">30px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F3DCAB</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#C2D89A</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-class\">.total</span> <span class=\"hljs-selector-tag\">span</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">3</span>) &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">30px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">202</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">0.644</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;grid&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>图书管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;id&quot;</span>&gt;</span><br>              编号：<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;id&#x27;</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&#x27;flag&#x27;</span> <span class=\"hljs-attr\">v-focus</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><br>              名称：<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;handle&#x27;</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&#x27;submitFlag&#x27;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;total&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>图书总数: <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&#123;&#123;totalofbook&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">&#x27;err&#x27;</span>&gt;</span>&#123;&#123;errMessage&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>编号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;book in books&#x27;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&#x27;book.id&#x27;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.date | format(&#x27;yyyy-MM-dd&#x27;)&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>              <span class=\"hljs-comment\">&lt;!-- 禁用页面刷新 --&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>=<span class=\"hljs-string\">&#x27;edit(book.id)&#x27;</span>&gt;</span>修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>=<span class=\"hljs-string\">&#x27;del(book.id)&#x27;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">    Vue.filter(<span class=\"hljs-string\">&#x27;format&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">date, format</span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> date === <span class=\"hljs-string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> mts = date.match(<span class=\"hljs-regexp\">/(\\/Date\\((\\d+)\\)\\/)/</span>);</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">if</span> (mts &amp;&amp; mts.length &gt;= <span class=\"hljs-number\">3</span>) &#123;</span><br><span class=\"javascript\">          date = <span class=\"hljs-built_in\">parseInt</span>(mts[<span class=\"hljs-number\">2</span>]);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">      date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(date);</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (!date || date.toUTCString() == <span class=\"hljs-string\">&quot;Invalid Date&quot;</span>) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">var</span> map = &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;M&quot;</span>: date.getMonth() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">//月份 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;d&quot;</span>: date.getDate(), <span class=\"hljs-comment\">//日 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;h&quot;</span>: date.getHours(), <span class=\"hljs-comment\">//小时 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;m&quot;</span>: date.getMinutes(), <span class=\"hljs-comment\">//分 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;s&quot;</span>: date.getSeconds(), <span class=\"hljs-comment\">//秒 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;q&quot;</span>: <span class=\"hljs-built_in\">Math</span>.floor((date.getMonth() + <span class=\"hljs-number\">3</span>) / <span class=\"hljs-number\">3</span>), <span class=\"hljs-comment\">//季度 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;S&quot;</span>: date.getMilliseconds() <span class=\"hljs-comment\">//毫秒 </span></span><br><span class=\"javascript\">      &#125;;</span><br><span class=\"javascript\">      format = format.replace(<span class=\"hljs-regexp\">/([yMdhmsqS])+/g</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">all, t</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> v = map[t];</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">if</span> (v !== <span class=\"hljs-literal\">undefined</span>) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (all.length &gt; <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"javascript\">            v = <span class=\"hljs-string\">&#x27;0&#x27;</span> + v;</span><br><span class=\"javascript\">            v = v.substr(v.length - <span class=\"hljs-number\">2</span>);</span><br><span class=\"javascript\">          &#125;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">return</span> v;</span><br><span class=\"javascript\">        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (t === <span class=\"hljs-string\">&#x27;y&#x27;</span>) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">return</span> (date.getFullYear() + <span class=\"hljs-string\">&#x27;&#x27;</span>).substr(<span class=\"hljs-number\">4</span> - all.length);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span> all;</span><br><span class=\"javascript\">      &#125;);</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> format;</span><br><span class=\"javascript\">    &#125;)</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">    Vue.directive(<span class=\"hljs-string\">&#x27;focus&#x27;</span>, &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">inserted</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el</span>) </span>&#123;</span><br><span class=\"javascript\">        el.focus();</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">books</span>: [],</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">submitFlag</span>: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">err</span>: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">errMessage</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.flag) &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">              <span class=\"hljs-comment\">// 如果表单中的id与数据中的id相同</span></span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">if</span> (item.id == <span class=\"hljs-built_in\">this</span>.id) &#123;</span><br><span class=\"javascript\">                item.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 允许输入</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">false</span>;</span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(item.id);</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">              &#125;</span><br><span class=\"javascript\">            &#125;)</span><br><span class=\"javascript\">          &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 添加图书</span></span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> book = &#123;&#125;;</span><br><span class=\"javascript\">            book.id = <span class=\"hljs-built_in\">this</span>.id;</span><br><span class=\"javascript\">            book.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.books.push(book);</span><br><span class=\"javascript\">          &#125;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 清空input输入域</span></span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.id = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">edit</span>(<span class=\"hljs-params\">id</span>)</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (item.id == id) &#123;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.id = item.id;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.name = item.name;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">          &#125;);</span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">del</span>(<span class=\"hljs-params\">id</span>)</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (item.id == id) &#123;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.books.splice(index, <span class=\"hljs-number\">1</span>);</span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">          &#125;)</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">computed</span>: &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">totalofbook</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.books.length;</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">watch</span>: &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 验证图书名称是否存在</span></span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (value == item.name) &#123;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.submitFlag = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.err = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.errMessage = <span class=\"hljs-string\">&#x27;图书名称已存在&#x27;</span></span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">          &#125;);</span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 该生命周期钩子函数被触发的时候</span></span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 一般此时用于获取后台数据，然后把数据填充在模板</span></span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> data=[&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">Date</span>.now()</span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-number\">962770087686</span></span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-number\">999778657686</span></span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-number\">162770298686</span></span><br><span class=\"javascript\">        &#125;];</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.books=data;</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">    &#125;);</span><br><span class=\"javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731144306.png\" alt=\"image-20210731144257953\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"图书管理\"><a href=\"#图书管理\" class=\"headerlink\" title=\"图书管理\"></a>图书管理</h1><h2 id=\"1-图书列表\"><a href=\"#1-图书列表\" class=\"headerlink\" title=\"1. 图书列表\"></a>1. 图书列表</h2><p>⚫ 实现静态列表效果<br>⚫ 基于数据实现模板效果<br>⚫ 处里每行的操作按钮  </p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730181123.png\" alt=\"image-20210730181114909\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">margin</span>: auto;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">500px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">text-align</span>: center;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">table</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border-collapse</span>: collapse;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">th</span>,</span><br><span class=\"css\">    <span class=\"hljs-selector-tag\">td</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> dashed orange;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">35px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">35px</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">th</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">background-color</span>: orange;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;grid&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>编号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;0./vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">books</span>: [&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">        &#125;]</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;);</span><br><span class=\"javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-添加图书\"><a href=\"#2-添加图书\" class=\"headerlink\" title=\"2. 添加图书\"></a>2. 添加图书</h2><p>⚫ 实现表单的静态效果<br>⚫ 添加图书表单域数据绑定<br>⚫ 添加按钮事件绑定<br>⚫ 实现添加业务逻辑  </p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210730182423.png\" alt=\"image-20210730182422489\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;grid&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>图书管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;id&quot;</span>&gt;</span><br>            编号：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;id&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><br>            名称：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;handle&#x27;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>编号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;book in books&#x27;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&#x27;book.id&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.date&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- 禁用页面刷新 --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>&gt;</span>修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">books</span>: [&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;]</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 添加图书</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> book=&#123;&#125;;</span><br><span class=\"javascript\">        book.id=<span class=\"hljs-built_in\">this</span>.id;</span><br><span class=\"javascript\">        book.name=<span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.books.push(book);</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 清空input输入域</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.id=<span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.name=<span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-修改图书\"><a href=\"#3-修改图书\" class=\"headerlink\" title=\"3. 修改图书\"></a>3. 修改图书</h2><p>⚫ 修改信息填充到表单<br>⚫ 修改后重新提交表单<br>⚫ 重用添加和修改的方法  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;grid&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>图书管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;id&quot;</span>&gt;</span><br>            编号：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;id&#x27;</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&#x27;flag&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><br>            名称：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;handle&#x27;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>编号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;book in books&#x27;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&#x27;book.id&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.date&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- 禁用页面刷新 --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>=<span class=\"hljs-string\">&#x27;edit(book.id)&#x27;</span>&gt;</span>修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">books</span>: [&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;],</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-literal\">false</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.flag) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 如果表单中的id与数据中的id相同</span></span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (item.id == <span class=\"hljs-built_in\">this</span>.id) &#123;</span><br><span class=\"javascript\">              item.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">              <span class=\"hljs-comment\">// 允许输入</span></span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">false</span>;</span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">return</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">          &#125;)</span><br><span class=\"javascript\">        &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 添加图书</span></span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">let</span> book = &#123;&#125;;</span><br><span class=\"javascript\">          book.id = <span class=\"hljs-built_in\">this</span>.id;</span><br><span class=\"javascript\">          book.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.push(book);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 清空input输入域</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.id = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">edit</span>(<span class=\"hljs-params\">id</span>)</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.books.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (item.id == id) &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.id = item.id;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.name = item.name;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span>;</span><br><span class=\"javascript\">          &#125;</span><br><span class=\"javascript\">        &#125;);</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-删除图书\"><a href=\"#4-删除图书\" class=\"headerlink\" title=\"4.删除图书\"></a>4.删除图书</h2><p>⚫ 删除按钮绑定事件处理方法<br>⚫ 实现删除业务逻辑  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;grid&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>图书管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;id&quot;</span>&gt;</span><br>            编号：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;id&#x27;</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&#x27;flag&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><br>            名称：<br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;handle&#x27;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>编号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;book in books&#x27;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&#x27;book.id&#x27;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.date&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- 禁用页面刷新 --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>=<span class=\"hljs-string\">&#x27;edit(book.id)&#x27;</span>&gt;</span>修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>=<span class=\"hljs-string\">&#x27;del(book.id)&#x27;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">books</span>: [&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;, &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">date</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;],</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-literal\">false</span></span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">    <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.flag) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 如果表单中的id与数据中的id相同</span></span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (item.id == <span class=\"hljs-built_in\">this</span>.id) &#123;</span><br><span class=\"javascript\">              item.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">              <span class=\"hljs-comment\">// 允许输入</span></span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">false</span>;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">console</span>.log(item.id);</span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">          &#125;)</span><br><span class=\"javascript\">        &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 添加图书</span></span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">let</span> book = &#123;&#125;;</span><br><span class=\"javascript\">          book.id = <span class=\"hljs-built_in\">this</span>.id;</span><br><span class=\"javascript\">          book.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.push(book);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 清空input输入域</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.id = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">edit</span>(<span class=\"hljs-params\">id</span>)</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (item.id == id) &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.id = item.id;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.name = item.name;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">          &#125;</span><br><span class=\"javascript\">        &#125;);</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">del</span>(<span class=\"hljs-params\">id</span>)</span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">item,index</span>) =&gt;</span>&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span>(item.id==id)&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.books.splice(index,<span class=\"hljs-number\">1</span>);</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">          &#125;</span><br><span class=\"javascript\">        &#125;)</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;,</span><br><span class=\"javascript\">  &#125;);</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>经过测试，使用forEach方法，如果已经匹配到了想要的数组元素，用return 是无法退出遍历的。因此，使用some方法更为恰当，当匹配到所需元素时，return true即可退出遍历。</p>\n<h2 id=\"5-常用特性应用场景\"><a href=\"#5-常用特性应用场景\" class=\"headerlink\" title=\"5.常用特性应用场景\"></a>5.常用特性应用场景</h2><p>⚫ 过滤器（格式化日期）<br>⚫ 自定义指令（获取表单焦点）<br>⚫ 计算属性（统计图书数量）<br>⚫ 侦听器（验证图书存在性）<br>⚫ 生命周期（图书数据处理）  </p>\n<p><a href=\"https://jiaqicoder.com/2021/07/31/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%B6%E9%97%B4/\">使用正则格式化时间</a></p>\n<p>最终代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">margin</span>: auto;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">530px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">text-align</span>: center;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">table</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#C2D89A</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border-collapse</span>: collapse;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">th</span>,</span><br><span class=\"css\">    <span class=\"hljs-selector-tag\">td</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> dashed <span class=\"hljs-number\">#F3DCAB</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">35px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">35px</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-tag\">th</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F3DCAB</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-class\">.book</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">padding-bottom</span>: <span class=\"hljs-number\">10px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">padding-top</span>: <span class=\"hljs-number\">5px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F3DCAB</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-class\">.total</span> &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">box-sizing</span>: border-box;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">padding-left</span>: <span class=\"hljs-number\">80px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">text-align</span>: left;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">30px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">30px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F3DCAB</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">border-top</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#C2D89A</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.grid</span> <span class=\"hljs-selector-class\">.total</span> <span class=\"hljs-selector-tag\">span</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">3</span>) &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">30px</span>;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">202</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">0.644</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;grid&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>图书管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;book&quot;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;id&quot;</span>&gt;</span><br>              编号：<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;id&#x27;</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&#x27;flag&#x27;</span> <span class=\"hljs-attr\">v-focus</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><br>              名称：<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;handle&#x27;</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&#x27;submitFlag&#x27;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&#x27;total&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>图书总数: <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&#123;&#123;totalofbook&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">&#x27;err&#x27;</span>&gt;</span>&#123;&#123;errMessage&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>编号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;book in books&#x27;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&#x27;book.id&#x27;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.id&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123;book.date | format(&#x27;yyyy-MM-dd&#x27;)&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>              <span class=\"hljs-comment\">&lt;!-- 禁用页面刷新 --&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>=<span class=\"hljs-string\">&#x27;edit(book.id)&#x27;</span>&gt;</span>修改<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>|<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> @<span class=\"hljs-attr\">click.prevent</span>=<span class=\"hljs-string\">&#x27;del(book.id)&#x27;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/0.vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">    Vue.filter(<span class=\"hljs-string\">&#x27;format&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">date, format</span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> date === <span class=\"hljs-string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> mts = date.match(<span class=\"hljs-regexp\">/(\\/Date\\((\\d+)\\)\\/)/</span>);</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">if</span> (mts &amp;&amp; mts.length &gt;= <span class=\"hljs-number\">3</span>) &#123;</span><br><span class=\"javascript\">          date = <span class=\"hljs-built_in\">parseInt</span>(mts[<span class=\"hljs-number\">2</span>]);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">      date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(date);</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (!date || date.toUTCString() == <span class=\"hljs-string\">&quot;Invalid Date&quot;</span>) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">var</span> map = &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;M&quot;</span>: date.getMonth() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">//月份 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;d&quot;</span>: date.getDate(), <span class=\"hljs-comment\">//日 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;h&quot;</span>: date.getHours(), <span class=\"hljs-comment\">//小时 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;m&quot;</span>: date.getMinutes(), <span class=\"hljs-comment\">//分 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;s&quot;</span>: date.getSeconds(), <span class=\"hljs-comment\">//秒 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;q&quot;</span>: <span class=\"hljs-built_in\">Math</span>.floor((date.getMonth() + <span class=\"hljs-number\">3</span>) / <span class=\"hljs-number\">3</span>), <span class=\"hljs-comment\">//季度 </span></span><br><span class=\"javascript\">        <span class=\"hljs-string\">&quot;S&quot;</span>: date.getMilliseconds() <span class=\"hljs-comment\">//毫秒 </span></span><br><span class=\"javascript\">      &#125;;</span><br><span class=\"javascript\">      format = format.replace(<span class=\"hljs-regexp\">/([yMdhmsqS])+/g</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">all, t</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> v = map[t];</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">if</span> (v !== <span class=\"hljs-literal\">undefined</span>) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (all.length &gt; <span class=\"hljs-number\">1</span>) &#123;</span><br><span class=\"javascript\">            v = <span class=\"hljs-string\">&#x27;0&#x27;</span> + v;</span><br><span class=\"javascript\">            v = v.substr(v.length - <span class=\"hljs-number\">2</span>);</span><br><span class=\"javascript\">          &#125;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">return</span> v;</span><br><span class=\"javascript\">        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (t === <span class=\"hljs-string\">&#x27;y&#x27;</span>) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">return</span> (date.getFullYear() + <span class=\"hljs-string\">&#x27;&#x27;</span>).substr(<span class=\"hljs-number\">4</span> - all.length);</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span> all;</span><br><span class=\"javascript\">      &#125;);</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">return</span> format;</span><br><span class=\"javascript\">    &#125;)</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">    Vue.directive(<span class=\"hljs-string\">&#x27;focus&#x27;</span>, &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">inserted</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el</span>) </span>&#123;</span><br><span class=\"javascript\">        el.focus();</span><br><span class=\"javascript\">      &#125;</span><br><span class=\"javascript\">    &#125;)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">books</span>: [],</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">submitFlag</span>: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">err</span>: <span class=\"hljs-literal\">false</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">errMessage</span>: <span class=\"hljs-string\">&#x27;&#x27;</span></span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">methods</span>: &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.flag) &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">              <span class=\"hljs-comment\">// 如果表单中的id与数据中的id相同</span></span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">if</span> (item.id == <span class=\"hljs-built_in\">this</span>.id) &#123;</span><br><span class=\"javascript\">                item.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 允许输入</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">false</span>;</span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(item.id);</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">              &#125;</span><br><span class=\"javascript\">            &#125;)</span><br><span class=\"javascript\">          &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 添加图书</span></span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> book = &#123;&#125;;</span><br><span class=\"javascript\">            book.id = <span class=\"hljs-built_in\">this</span>.id;</span><br><span class=\"javascript\">            book.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.books.push(book);</span><br><span class=\"javascript\">          &#125;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 清空input输入域</span></span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.id = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">edit</span>(<span class=\"hljs-params\">id</span>)</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (item.id == id) &#123;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.id = item.id;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.name = item.name;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">          &#125;);</span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-title\">del</span>(<span class=\"hljs-params\">id</span>)</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (item.id == id) &#123;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.books.splice(index, <span class=\"hljs-number\">1</span>);</span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">          &#125;)</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">computed</span>: &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">totalofbook</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.books.length;</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-attr\">watch</span>: &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 验证图书名称是否存在</span></span><br><span class=\"javascript\">          <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (value == item.name) &#123;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.submitFlag = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.err = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">              <span class=\"hljs-built_in\">this</span>.errMessage = <span class=\"hljs-string\">&#x27;图书名称已存在&#x27;</span></span><br><span class=\"javascript\">              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">          &#125;);</span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 该生命周期钩子函数被触发的时候</span></span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 一般此时用于获取后台数据，然后把数据填充在模板</span></span><br><span class=\"javascript\">      <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> data=[&#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;三国演义&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">Date</span>.now()</span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;水浒传&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-number\">962770087686</span></span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;红楼梦&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-number\">999778657686</span></span><br><span class=\"javascript\">        &#125;, &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;西游记&#x27;</span>,</span><br><span class=\"javascript\">          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-number\">162770298686</span></span><br><span class=\"javascript\">        &#125;];</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.books=data;</span><br><span class=\"javascript\">      &#125;,</span><br><span class=\"javascript\">    &#125;);</span><br><span class=\"javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731144306.png\" alt=\"image-20210731144257953\"></p>\n"},{"title":"对象属性描述符和访问器属性","date":"2021-07-27T07:49:28.000Z","_content":"\n本笔记基于：https://zh.javascript.info/property-descriptors\n\n# 属性标识与属性描述符\n\n对象可以存储属性，对象的属性不仅仅只是简单的“键值”对。\n\n##  属性标识\n\n对象属性（properties），除 **`value`** 外，还有三个特殊的特性（attributes），也就是所谓的“标志”：\n\n- **`writable`** — 如果为 `true`，则值可以被修改，否则它是只可读的。\n- **`enumerable`** — 如果为 `true`，则会被在循环中列出，否则不会被列出。\n- **`configurable`** — 如果为 `true`，则此特性可以被删除，这些属性也可以被修改，否则不可以。\n\n当我们用“常用的方式”创建一个属性时，它们都为 `true`，但我们也可以随时更改它们。\n\n[Object.getOwnPropertyDescriptor](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) 方法允许查询有关属性的 **完整** 信息。\n\n> 语法：\n\n```js\nlet descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n```\n\n- obj\n\n  需要从中获取信息的对象\n\n- propertyName\n\n  属性的名称\n\n> 举例\n\n```js\nlet user={\n    name:'John'\n}\nlet descriptor=Object.getOwnPropertyDescriptor(user,'name');\nconsole.log(descriptor);\n// { value: 'John', writable: true, enumerable: true, configurable: true }\n```\n\n为了修改标志，我们可以使用 [Object.defineProperty](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)。\n\n> 语法\n\n```js\nObject.defineProperty(obj, propertyName, descriptor)\n```\n\n- `obj`，`propertyName`\n\n  要应用描述符的对象及其属性。\n\n- `descriptor`\n\n\t要应用的属性描述符对象。\n\n如果`descriptor`属性存在，`defineProperty` 会更新其标志。否则，它会使用给定的值和标志创建属性；在这种情况下，如果没有提供标志，则会假定它是 `false`。\n\n例如，这里创建了一个属性 `name`，该属性的所有标志都为 `false`：\n\n```js\nlet user = {};\n\nObject.defineProperty(user, \"name\", {\n  value: \"John\"\n});\n\nlet descriptor = Object.getOwnPropertyDescriptor(user, 'name');\n\nalert( JSON.stringify(descriptor, null, 2 ) );\n/*\n{\n  \"value\": \"John\",\n  \"writable\": false,\n  \"enumerable\": false,\n  \"configurable\": false\n}\n */\n```\n\n将它与上面的“以常用方式创建的” `user.name` 进行比较：现在所有标志都为 `false`。如果这不是我们想要的，那么我们最好在 `descriptor` 中将它们设置为 `true`。\n\n## 只读\n\n通过更改 `writable` 标志来把 `user.name` 设置为只读（`user.name` 不能被重新赋值）\n\n```js\nlet user = {\n  name: \"John\"\n};\n\nObject.defineProperty(user, \"name\", {\n  writable: false\n});\n\nuser.name = \"Pete\"; // Error: Cannot assign to read only property 'name'\n```\n\n> **只在严格模式下会出现 Errors**\n\n## 不可枚举\n\n如果在 `user`中 添加一个自定义的 `toString`。\n\n通常，对象的内置 `toString` 是不可枚举的，它不会显示在 `for..in` 中。但是如果我们添加我们自己的 `toString`，那么默认情况下它将显示在 `for..in` 中，如下所示：\n\n```js\nlet user = {\n  name: \"John\",\n  toString() {\n    return this.name;\n  }\n};\n\n// 默认情况下，我们的两个属性都会被列出：\nfor (let key in user) alert(key); // name, toString\n```\n\n如果我们不喜欢它，那么我们可以设置 `enumerable:false`。之后它就不会出现在 `for..in` 循环中了，就像内建的 `toString` 一样：\n\n```js\nlet user = {\n  name: \"John\",\n  toString() {\n    return this.name;\n  }\n};\n\nObject.defineProperty(user, \"toString\", {\n  enumerable: false\n});\n\n// 现在我们的 toString 消失了：\nfor (let key in user) alert(key); // name\n```\n\n## 不可配置\n\n不可配置标志（`configurable:false`）有时会预设在内建对象和属性中。不可配置的属性不能被删除。\n\n因此，开发人员无法修改 `Math.PI` 的值或覆盖它。\n\n```javascript\nMath.PI = 3; // Error\n\n// 删除 Math.PI 也不会起作用\n```\n\n使属性变成不可配置是一条单行道。我们无法使用 `defineProperty` 把它改回去。\n\n确切地说，不可配置性对 `defineProperty` 施加了一些限制：\n\n1. 不能修改 `configurable` 标志。\n2. 不能修改 `enumerable` 标志。\n3. 不能将 `writable: false` 修改为 `true`（反过来则可以）。\n4. 不能修改访问者属性的 `get/set`（但是如果没有可以分配它们）。\n\n----\n\n**\"configurable: false\" 的用途是防止更改和删除属性标志，但是允许更改对象的值。**\n\n```js\nlet user = {\n  name: \"John\"\n};\n\nObject.defineProperty(user, \"name\", {\n  configurable: false\n});\n\nuser.name = \"Pete\"; // 正常工作\ndelete user.name; // Error\n```\n\n现在，我们将 `user.name` 设置为一个“永不可改”的常量：\n\n```js\nlet user = {\n  name: \"John\"\n};\n\nObject.defineProperty(user, \"name\", {\n  writable: false,\n  configurable: false\n});\n\n// 不能修改 user.name 或它的标志\n// 下面的所有操作都不起作用：\nuser.name = \"Pete\";\ndelete user.name;\nObject.defineProperty(user, \"name\", { value: \"Pete\" });\n```\n\n## [Object.defineProperties](https://zh.javascript.info/property-descriptors#objectdefineproperties)\n\n有一个方法 [Object.defineProperties(obj, descriptors)](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)，允许一次定义多个属性。\n\n> 语法\n\n```js\nObject.defineProperties(obj, {\n  prop1: descriptor1,\n  prop2: descriptor2\n  // ...\n});\n```\n\n比如：\n\n```js\nObject.defineProperties(user, {\n  name: { value: \"John\", writable: false },\n  surname: { value: \"Smith\", writable: false },\n  // ...\n});\n```\n\n## [Object.getOwnPropertyDescriptors](https://zh.javascript.info/property-descriptors#objectgetownpropertydescriptors)\n\n要一次获取所有属性描述符，我们可以使用 [Object.getOwnPropertyDescriptors(obj)](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors) 方法。\n\n它与 `Object.defineProperties` 一起可以用作克隆对象的“标志感知”方式：\n\n```js\nlet clone = Object.defineProperties({}, Object.getOwnPropertyDescriptors(obj));\n\n```\n\n通常，当我们克隆一个对象时，我们使用赋值的方式来复制属性，像这样：\n\n```javascript\nfor (let key in user) {\n  clone[key] = user[key]\n}\n```\n\n……但是，这并不能复制标志。所以如果我们想要一个“更好”的克隆，那么 `Object.defineProperties` 是首选。\n\n另一个区别是 `for..in` 会忽略 symbol 类型的属性，但是 `Object.getOwnPropertyDescriptors` 返回包含 symbol 类型的属性在内的 **所有** 属性描述符。\n\n# 属性的getter和setter\n\n有两种类型的对象属性。\n\n第一种是 **数据属性**。我们已经知道如何使用它们了。到目前为止，我们使用过的所有属性都是数据属性。\n\n第二种类型的属性是新东西。它是 **访问器属性（accessor properties）**。它们本质上是用于获取和设置值的函数，但从外部代码来看就像常规属性。\n\n## 访问器属性(getter和setter)\n\n访问器属性由 “getter” 和 “setter” 方法表示。在对象字面量中，它们用 `get` 和 `set` 表示：\n\n```javascript\nlet obj = {\n  get propName() {\n    // 当读取 obj.propName 时，getter 起作用\n  },\n\n  set propName(value) {\n    // 当执行 obj.propName = value 操作时，setter 起作用\n  }\n};\n```\n\n当读取 `obj.propName` 时，getter 起作用，当 `obj.propName` 被赋值时，setter 起作用。\n\n例如，我们有一个具有 `name` 和 `surname` 属性的对象 `user`：\n\n```javascript\nlet user = {\n  name: \"John\",\n  surname: \"Smith\"\n};\n```\n\n现在我们想添加一个 `fullName` 属性，该属性值应该为 `\"John Smith\"`。当然，我们不想复制粘贴已有的信息，因此我们可以使用访问器来实现：\n\n```js\nlet user = {\n  name: \"John\",\n  surname: \"Smith\",\n\n  get fullName() {\n    return `${this.name} ${this.surname}`;\n  }\n};\nalert(user.fullName); // John Smith\n```\n\n从外表看，访问器属性看起来就像一个普通属性。这就是访问器属性的设计思想。我们不以函数的方式 **调用** `user.fullName`，我们正常 **读取** 它：getter 在幕后运行。\n\n截至目前，`fullName` 只有一个 getter。如果我们尝试赋值操作 `user.fullName=`，将会出现错误：\n\n```js\nlet user = {\n  get fullName() {\n    return `...`;\n  }\n};\n\nuser.fullName = \"Test\"; // Error（属性只有一个 getter）\n```\n\n```js\nlet user={\n    name:'John',\n    surname:'Smith',\n    get fullname(){\n        return `${this.name} ${this.surname}`;\n    },\n    set fullname(value){\n        // 将获取的值解构赋值给对象的name和surname属性\n        [this.name,this.surname]=value.split(' ');\n    }\n}\n\nuser.fullname='alice cooper';\nconsole.log(user.name);\nconsole.log(user.fullname);\n```\n\n## 访问器描述符\n\n访问器属性的描述符与数据属性的不同。\n\n所以访问器描述符可能有：\n\n- **`get`** —— 一个没有参数的函数，在读取属性时工作，\n- **`set`** —— 带有一个参数的函数，当属性被设置时调用，\n- **`enumerable`** —— 与数据属性的相同，\n- **`configurable`** —— 与数据属性的相同。\n\n例如，要使用 `defineProperty` 创建一个 `fullName` 访问器，我们可以使用 `get` 和 `set` 来传递描述符：\n\n```js\nlet user = {\n  name: \"John\",\n  surname: \"Smith\"\n};\n\nObject.defineProperty(user, 'fullName', {\n  get() {\n    return `${this.name} ${this.surname}`;\n  },\n\n  set(value) {\n    [this.name, this.surname] = value.split(\" \");\n  }\n});\n\nalert(user.fullName); // John Smith\n\nfor(let key in user) alert(key); // name, surname\n```\n\n**请注意，一个属性要么是访问器（具有 `get/set` 方法），要么是数据属性（具有 `value`），但不能两者都是。**\n\n如果我们试图在同一个描述符中同时提供 `get` 和 `value`，则会出现错误：\n\n```js\n// Error: Invalid property descriptor.\nObject.defineProperty({}, 'prop', {\n  get() {\n    return 1\n  },\n\n  value: 2\n});\n```\n\n## 更聪明的getter/setter\n\nGetter/setter 可以用作“真实”属性值的包装器，以便对它们进行更多的控制。\n\n例如，如果我们想禁止太短的 `user` 的 name，我们可以创建一个 setter `name`，并将值存储在一个单独的属性 `_name` 中：\n\n```js\nlet user = {\n  get name() {\n    return this._name;\n  },\n\n  set name(value) {\n    if (value.length < 4) {\n      alert(\"Name is too short, need at least 4 characters\");\n      return;\n    }\n    this._name = value;\n  }\n};\n\nuser.name = \"Pete\";\nalert(user.name); // Pete\n\nuser.name = \"\"; // Name 太短了……\n```\n\n所以，name 被存储在 `_name` 属性中，并通过 getter 和 setter 进行访问。\n\n从技术上讲，外部代码可以使用 `user._name` 直接访问 name。但是，这儿有一个众所周知的约定，即以下划线 `\"_\"` 开头的属性是内部属性，不应该从对象外部进行访问。\n","source":"_posts/对象属性描述符和访问器属性.md","raw":"---\ntitle: 对象属性描述符和访问器属性\ndate: 2021-07-27 15:49:28\ntags: javascript\n---\n\n本笔记基于：https://zh.javascript.info/property-descriptors\n\n# 属性标识与属性描述符\n\n对象可以存储属性，对象的属性不仅仅只是简单的“键值”对。\n\n##  属性标识\n\n对象属性（properties），除 **`value`** 外，还有三个特殊的特性（attributes），也就是所谓的“标志”：\n\n- **`writable`** — 如果为 `true`，则值可以被修改，否则它是只可读的。\n- **`enumerable`** — 如果为 `true`，则会被在循环中列出，否则不会被列出。\n- **`configurable`** — 如果为 `true`，则此特性可以被删除，这些属性也可以被修改，否则不可以。\n\n当我们用“常用的方式”创建一个属性时，它们都为 `true`，但我们也可以随时更改它们。\n\n[Object.getOwnPropertyDescriptor](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) 方法允许查询有关属性的 **完整** 信息。\n\n> 语法：\n\n```js\nlet descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n```\n\n- obj\n\n  需要从中获取信息的对象\n\n- propertyName\n\n  属性的名称\n\n> 举例\n\n```js\nlet user={\n    name:'John'\n}\nlet descriptor=Object.getOwnPropertyDescriptor(user,'name');\nconsole.log(descriptor);\n// { value: 'John', writable: true, enumerable: true, configurable: true }\n```\n\n为了修改标志，我们可以使用 [Object.defineProperty](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)。\n\n> 语法\n\n```js\nObject.defineProperty(obj, propertyName, descriptor)\n```\n\n- `obj`，`propertyName`\n\n  要应用描述符的对象及其属性。\n\n- `descriptor`\n\n\t要应用的属性描述符对象。\n\n如果`descriptor`属性存在，`defineProperty` 会更新其标志。否则，它会使用给定的值和标志创建属性；在这种情况下，如果没有提供标志，则会假定它是 `false`。\n\n例如，这里创建了一个属性 `name`，该属性的所有标志都为 `false`：\n\n```js\nlet user = {};\n\nObject.defineProperty(user, \"name\", {\n  value: \"John\"\n});\n\nlet descriptor = Object.getOwnPropertyDescriptor(user, 'name');\n\nalert( JSON.stringify(descriptor, null, 2 ) );\n/*\n{\n  \"value\": \"John\",\n  \"writable\": false,\n  \"enumerable\": false,\n  \"configurable\": false\n}\n */\n```\n\n将它与上面的“以常用方式创建的” `user.name` 进行比较：现在所有标志都为 `false`。如果这不是我们想要的，那么我们最好在 `descriptor` 中将它们设置为 `true`。\n\n## 只读\n\n通过更改 `writable` 标志来把 `user.name` 设置为只读（`user.name` 不能被重新赋值）\n\n```js\nlet user = {\n  name: \"John\"\n};\n\nObject.defineProperty(user, \"name\", {\n  writable: false\n});\n\nuser.name = \"Pete\"; // Error: Cannot assign to read only property 'name'\n```\n\n> **只在严格模式下会出现 Errors**\n\n## 不可枚举\n\n如果在 `user`中 添加一个自定义的 `toString`。\n\n通常，对象的内置 `toString` 是不可枚举的，它不会显示在 `for..in` 中。但是如果我们添加我们自己的 `toString`，那么默认情况下它将显示在 `for..in` 中，如下所示：\n\n```js\nlet user = {\n  name: \"John\",\n  toString() {\n    return this.name;\n  }\n};\n\n// 默认情况下，我们的两个属性都会被列出：\nfor (let key in user) alert(key); // name, toString\n```\n\n如果我们不喜欢它，那么我们可以设置 `enumerable:false`。之后它就不会出现在 `for..in` 循环中了，就像内建的 `toString` 一样：\n\n```js\nlet user = {\n  name: \"John\",\n  toString() {\n    return this.name;\n  }\n};\n\nObject.defineProperty(user, \"toString\", {\n  enumerable: false\n});\n\n// 现在我们的 toString 消失了：\nfor (let key in user) alert(key); // name\n```\n\n## 不可配置\n\n不可配置标志（`configurable:false`）有时会预设在内建对象和属性中。不可配置的属性不能被删除。\n\n因此，开发人员无法修改 `Math.PI` 的值或覆盖它。\n\n```javascript\nMath.PI = 3; // Error\n\n// 删除 Math.PI 也不会起作用\n```\n\n使属性变成不可配置是一条单行道。我们无法使用 `defineProperty` 把它改回去。\n\n确切地说，不可配置性对 `defineProperty` 施加了一些限制：\n\n1. 不能修改 `configurable` 标志。\n2. 不能修改 `enumerable` 标志。\n3. 不能将 `writable: false` 修改为 `true`（反过来则可以）。\n4. 不能修改访问者属性的 `get/set`（但是如果没有可以分配它们）。\n\n----\n\n**\"configurable: false\" 的用途是防止更改和删除属性标志，但是允许更改对象的值。**\n\n```js\nlet user = {\n  name: \"John\"\n};\n\nObject.defineProperty(user, \"name\", {\n  configurable: false\n});\n\nuser.name = \"Pete\"; // 正常工作\ndelete user.name; // Error\n```\n\n现在，我们将 `user.name` 设置为一个“永不可改”的常量：\n\n```js\nlet user = {\n  name: \"John\"\n};\n\nObject.defineProperty(user, \"name\", {\n  writable: false,\n  configurable: false\n});\n\n// 不能修改 user.name 或它的标志\n// 下面的所有操作都不起作用：\nuser.name = \"Pete\";\ndelete user.name;\nObject.defineProperty(user, \"name\", { value: \"Pete\" });\n```\n\n## [Object.defineProperties](https://zh.javascript.info/property-descriptors#objectdefineproperties)\n\n有一个方法 [Object.defineProperties(obj, descriptors)](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)，允许一次定义多个属性。\n\n> 语法\n\n```js\nObject.defineProperties(obj, {\n  prop1: descriptor1,\n  prop2: descriptor2\n  // ...\n});\n```\n\n比如：\n\n```js\nObject.defineProperties(user, {\n  name: { value: \"John\", writable: false },\n  surname: { value: \"Smith\", writable: false },\n  // ...\n});\n```\n\n## [Object.getOwnPropertyDescriptors](https://zh.javascript.info/property-descriptors#objectgetownpropertydescriptors)\n\n要一次获取所有属性描述符，我们可以使用 [Object.getOwnPropertyDescriptors(obj)](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors) 方法。\n\n它与 `Object.defineProperties` 一起可以用作克隆对象的“标志感知”方式：\n\n```js\nlet clone = Object.defineProperties({}, Object.getOwnPropertyDescriptors(obj));\n\n```\n\n通常，当我们克隆一个对象时，我们使用赋值的方式来复制属性，像这样：\n\n```javascript\nfor (let key in user) {\n  clone[key] = user[key]\n}\n```\n\n……但是，这并不能复制标志。所以如果我们想要一个“更好”的克隆，那么 `Object.defineProperties` 是首选。\n\n另一个区别是 `for..in` 会忽略 symbol 类型的属性，但是 `Object.getOwnPropertyDescriptors` 返回包含 symbol 类型的属性在内的 **所有** 属性描述符。\n\n# 属性的getter和setter\n\n有两种类型的对象属性。\n\n第一种是 **数据属性**。我们已经知道如何使用它们了。到目前为止，我们使用过的所有属性都是数据属性。\n\n第二种类型的属性是新东西。它是 **访问器属性（accessor properties）**。它们本质上是用于获取和设置值的函数，但从外部代码来看就像常规属性。\n\n## 访问器属性(getter和setter)\n\n访问器属性由 “getter” 和 “setter” 方法表示。在对象字面量中，它们用 `get` 和 `set` 表示：\n\n```javascript\nlet obj = {\n  get propName() {\n    // 当读取 obj.propName 时，getter 起作用\n  },\n\n  set propName(value) {\n    // 当执行 obj.propName = value 操作时，setter 起作用\n  }\n};\n```\n\n当读取 `obj.propName` 时，getter 起作用，当 `obj.propName` 被赋值时，setter 起作用。\n\n例如，我们有一个具有 `name` 和 `surname` 属性的对象 `user`：\n\n```javascript\nlet user = {\n  name: \"John\",\n  surname: \"Smith\"\n};\n```\n\n现在我们想添加一个 `fullName` 属性，该属性值应该为 `\"John Smith\"`。当然，我们不想复制粘贴已有的信息，因此我们可以使用访问器来实现：\n\n```js\nlet user = {\n  name: \"John\",\n  surname: \"Smith\",\n\n  get fullName() {\n    return `${this.name} ${this.surname}`;\n  }\n};\nalert(user.fullName); // John Smith\n```\n\n从外表看，访问器属性看起来就像一个普通属性。这就是访问器属性的设计思想。我们不以函数的方式 **调用** `user.fullName`，我们正常 **读取** 它：getter 在幕后运行。\n\n截至目前，`fullName` 只有一个 getter。如果我们尝试赋值操作 `user.fullName=`，将会出现错误：\n\n```js\nlet user = {\n  get fullName() {\n    return `...`;\n  }\n};\n\nuser.fullName = \"Test\"; // Error（属性只有一个 getter）\n```\n\n```js\nlet user={\n    name:'John',\n    surname:'Smith',\n    get fullname(){\n        return `${this.name} ${this.surname}`;\n    },\n    set fullname(value){\n        // 将获取的值解构赋值给对象的name和surname属性\n        [this.name,this.surname]=value.split(' ');\n    }\n}\n\nuser.fullname='alice cooper';\nconsole.log(user.name);\nconsole.log(user.fullname);\n```\n\n## 访问器描述符\n\n访问器属性的描述符与数据属性的不同。\n\n所以访问器描述符可能有：\n\n- **`get`** —— 一个没有参数的函数，在读取属性时工作，\n- **`set`** —— 带有一个参数的函数，当属性被设置时调用，\n- **`enumerable`** —— 与数据属性的相同，\n- **`configurable`** —— 与数据属性的相同。\n\n例如，要使用 `defineProperty` 创建一个 `fullName` 访问器，我们可以使用 `get` 和 `set` 来传递描述符：\n\n```js\nlet user = {\n  name: \"John\",\n  surname: \"Smith\"\n};\n\nObject.defineProperty(user, 'fullName', {\n  get() {\n    return `${this.name} ${this.surname}`;\n  },\n\n  set(value) {\n    [this.name, this.surname] = value.split(\" \");\n  }\n});\n\nalert(user.fullName); // John Smith\n\nfor(let key in user) alert(key); // name, surname\n```\n\n**请注意，一个属性要么是访问器（具有 `get/set` 方法），要么是数据属性（具有 `value`），但不能两者都是。**\n\n如果我们试图在同一个描述符中同时提供 `get` 和 `value`，则会出现错误：\n\n```js\n// Error: Invalid property descriptor.\nObject.defineProperty({}, 'prop', {\n  get() {\n    return 1\n  },\n\n  value: 2\n});\n```\n\n## 更聪明的getter/setter\n\nGetter/setter 可以用作“真实”属性值的包装器，以便对它们进行更多的控制。\n\n例如，如果我们想禁止太短的 `user` 的 name，我们可以创建一个 setter `name`，并将值存储在一个单独的属性 `_name` 中：\n\n```js\nlet user = {\n  get name() {\n    return this._name;\n  },\n\n  set name(value) {\n    if (value.length < 4) {\n      alert(\"Name is too short, need at least 4 characters\");\n      return;\n    }\n    this._name = value;\n  }\n};\n\nuser.name = \"Pete\";\nalert(user.name); // Pete\n\nuser.name = \"\"; // Name 太短了……\n```\n\n所以，name 被存储在 `_name` 属性中，并通过 getter 和 setter 进行访问。\n\n从技术上讲，外部代码可以使用 `user._name` 直接访问 name。但是，这儿有一个众所周知的约定，即以下划线 `\"_\"` 开头的属性是内部属性，不应该从对象外部进行访问。\n","slug":"对象属性描述符和访问器属性","published":1,"updated":"2021-07-27T10:17:35.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr8ldbm0005moun8em7foug","content":"<p>本笔记基于：<a href=\"https://zh.javascript.info/property-descriptors\">https://zh.javascript.info/property-descriptors</a></p>\n<h1 id=\"属性标识与属性描述符\"><a href=\"#属性标识与属性描述符\" class=\"headerlink\" title=\"属性标识与属性描述符\"></a>属性标识与属性描述符</h1><p>对象可以存储属性，对象的属性不仅仅只是简单的“键值”对。</p>\n<h2 id=\"属性标识\"><a href=\"#属性标识\" class=\"headerlink\" title=\"属性标识\"></a>属性标识</h2><p>对象属性（properties），除 <strong><code>value</code></strong> 外，还有三个特殊的特性（attributes），也就是所谓的“标志”：</p>\n<ul>\n<li><strong><code>writable</code></strong> — 如果为 <code>true</code>，则值可以被修改，否则它是只可读的。</li>\n<li><strong><code>enumerable</code></strong> — 如果为 <code>true</code>，则会被在循环中列出，否则不会被列出。</li>\n<li><strong><code>configurable</code></strong> — 如果为 <code>true</code>，则此特性可以被删除，这些属性也可以被修改，否则不可以。</li>\n</ul>\n<p>当我们用“常用的方式”创建一个属性时，它们都为 <code>true</code>，但我们也可以随时更改它们。</p>\n<p><a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\">Object.getOwnPropertyDescriptor</a> 方法允许查询有关属性的 <strong>完整</strong> 信息。</p>\n<blockquote>\n<p>语法：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> descriptor = <span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptor(obj, propertyName);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>obj</p>\n<p>需要从中获取信息的对象</p>\n</li>\n<li><p>propertyName</p>\n<p>属性的名称</p>\n</li>\n</ul>\n<blockquote>\n<p>举例</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;John&#x27;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> descriptor=<span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptor(user,<span class=\"hljs-string\">&#x27;name&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(descriptor);<br><span class=\"hljs-comment\">// &#123; value: &#x27;John&#x27;, writable: true, enumerable: true, configurable: true &#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>为了修改标志，我们可以使用 <a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty</a>。</p>\n<blockquote>\n<p>语法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.defineProperty(obj, propertyName, descriptor)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>obj</code>，<code>propertyName</code></p>\n<p>要应用描述符的对象及其属性。</p>\n</li>\n<li><p><code>descriptor</code></p>\n<p>  要应用的属性描述符对象。</p>\n</li>\n</ul>\n<p>如果<code>descriptor</code>属性存在，<code>defineProperty</code> 会更新其标志。否则，它会使用给定的值和标志创建属性；在这种情况下，如果没有提供标志，则会假定它是 <code>false</code>。</p>\n<p>例如，这里创建了一个属性 <code>name</code>，该属性的所有标志都为 <code>false</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;name&quot;</span>, &#123;<br>  <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;John&quot;</span><br>&#125;);<br><br><span class=\"hljs-keyword\">let</span> descriptor = <span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptor(user, <span class=\"hljs-string\">&#x27;name&#x27;</span>);<br><br>alert( <span class=\"hljs-built_in\">JSON</span>.stringify(descriptor, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span> ) );<br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">&#123;</span><br><span class=\"hljs-comment\">  &quot;value&quot;: &quot;John&quot;,</span><br><span class=\"hljs-comment\">  &quot;writable&quot;: false,</span><br><span class=\"hljs-comment\">  &quot;enumerable&quot;: false,</span><br><span class=\"hljs-comment\">  &quot;configurable&quot;: false</span><br><span class=\"hljs-comment\">&#125;</span><br><span class=\"hljs-comment\"> */</span><br></code></pre></td></tr></table></figure>\n\n<p>将它与上面的“以常用方式创建的” <code>user.name</code> 进行比较：现在所有标志都为 <code>false</code>。如果这不是我们想要的，那么我们最好在 <code>descriptor</code> 中将它们设置为 <code>true</code>。</p>\n<h2 id=\"只读\"><a href=\"#只读\" class=\"headerlink\" title=\"只读\"></a>只读</h2><p>通过更改 <code>writable</code> 标志来把 <code>user.name</code> 设置为只读（<code>user.name</code> 不能被重新赋值）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span><br>&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;name&quot;</span>, &#123;<br>  <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span><br>&#125;);<br><br>user.name = <span class=\"hljs-string\">&quot;Pete&quot;</span>; <span class=\"hljs-comment\">// Error: Cannot assign to read only property &#x27;name&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>只在严格模式下会出现 Errors</strong></p>\n</blockquote>\n<h2 id=\"不可枚举\"><a href=\"#不可枚举\" class=\"headerlink\" title=\"不可枚举\"></a>不可枚举</h2><p>如果在 <code>user</code>中 添加一个自定义的 <code>toString</code>。</p>\n<p>通常，对象的内置 <code>toString</code> 是不可枚举的，它不会显示在 <code>for..in</code> 中。但是如果我们添加我们自己的 <code>toString</code>，那么默认情况下它将显示在 <code>for..in</code> 中，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>  &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">// 默认情况下，我们的两个属性都会被列出：</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> user) alert(key); <span class=\"hljs-comment\">// name, toString</span><br></code></pre></td></tr></table></figure>\n\n<p>如果我们不喜欢它，那么我们可以设置 <code>enumerable:false</code>。之后它就不会出现在 <code>for..in</code> 循环中了，就像内建的 <code>toString</code> 一样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>  &#125;<br>&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;toString&quot;</span>, &#123;<br>  <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">false</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 现在我们的 toString 消失了：</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> user) alert(key); <span class=\"hljs-comment\">// name</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"不可配置\"><a href=\"#不可配置\" class=\"headerlink\" title=\"不可配置\"></a>不可配置</h2><p>不可配置标志（<code>configurable:false</code>）有时会预设在内建对象和属性中。不可配置的属性不能被删除。</p>\n<p>因此，开发人员无法修改 <code>Math.PI</code> 的值或覆盖它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Math</span>.PI = <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// Error</span><br><br><span class=\"hljs-comment\">// 删除 Math.PI 也不会起作用</span><br></code></pre></td></tr></table></figure>\n\n<p>使属性变成不可配置是一条单行道。我们无法使用 <code>defineProperty</code> 把它改回去。</p>\n<p>确切地说，不可配置性对 <code>defineProperty</code> 施加了一些限制：</p>\n<ol>\n<li>不能修改 <code>configurable</code> 标志。</li>\n<li>不能修改 <code>enumerable</code> 标志。</li>\n<li>不能将 <code>writable: false</code> 修改为 <code>true</code>（反过来则可以）。</li>\n<li>不能修改访问者属性的 <code>get/set</code>（但是如果没有可以分配它们）。</li>\n</ol>\n<hr>\n<p><strong>“configurable: false” 的用途是防止更改和删除属性标志，但是允许更改对象的值。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span><br>&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;name&quot;</span>, &#123;<br>  <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">false</span><br>&#125;);<br><br>user.name = <span class=\"hljs-string\">&quot;Pete&quot;</span>; <span class=\"hljs-comment\">// 正常工作</span><br><span class=\"hljs-keyword\">delete</span> user.name; <span class=\"hljs-comment\">// Error</span><br></code></pre></td></tr></table></figure>\n\n<p>现在，我们将 <code>user.name</code> 设置为一个“永不可改”的常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span><br>&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;name&quot;</span>, &#123;<br>  <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span>,<br>  <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">false</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 不能修改 user.name 或它的标志</span><br><span class=\"hljs-comment\">// 下面的所有操作都不起作用：</span><br>user.name = <span class=\"hljs-string\">&quot;Pete&quot;</span>;<br><span class=\"hljs-keyword\">delete</span> user.name;<br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;name&quot;</span>, &#123; <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;Pete&quot;</span> &#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Object-defineProperties\"><a href=\"#Object-defineProperties\" class=\"headerlink\" title=\"Object.defineProperties\"></a><a href=\"https://zh.javascript.info/property-descriptors#objectdefineproperties\">Object.defineProperties</a></h2><p>有一个方法 <a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\">Object.defineProperties(obj, descriptors)</a>，允许一次定义多个属性。</p>\n<blockquote>\n<p>语法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.defineProperties(obj, &#123;<br>  <span class=\"hljs-attr\">prop1</span>: descriptor1,<br>  <span class=\"hljs-attr\">prop2</span>: descriptor2<br>  <span class=\"hljs-comment\">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.defineProperties(user, &#123;<br>  <span class=\"hljs-attr\">name</span>: &#123; <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;John&quot;</span>, <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span> &#125;,<br>  <span class=\"hljs-attr\">surname</span>: &#123; <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;Smith&quot;</span>, <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span> &#125;,<br>  <span class=\"hljs-comment\">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Object-getOwnPropertyDescriptors\"><a href=\"#Object-getOwnPropertyDescriptors\" class=\"headerlink\" title=\"Object.getOwnPropertyDescriptors\"></a><a href=\"https://zh.javascript.info/property-descriptors#objectgetownpropertydescriptors\">Object.getOwnPropertyDescriptors</a></h2><p>要一次获取所有属性描述符，我们可以使用 <a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\">Object.getOwnPropertyDescriptors(obj)</a> 方法。</p>\n<p>它与 <code>Object.defineProperties</code> 一起可以用作克隆对象的“标志感知”方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> clone = <span class=\"hljs-built_in\">Object</span>.defineProperties(&#123;&#125;, <span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptors(obj));<br><br></code></pre></td></tr></table></figure>\n\n<p>通常，当我们克隆一个对象时，我们使用赋值的方式来复制属性，像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> user) &#123;<br>  clone[key] = user[key]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>……但是，这并不能复制标志。所以如果我们想要一个“更好”的克隆，那么 <code>Object.defineProperties</code> 是首选。</p>\n<p>另一个区别是 <code>for..in</code> 会忽略 symbol 类型的属性，但是 <code>Object.getOwnPropertyDescriptors</code> 返回包含 symbol 类型的属性在内的 <strong>所有</strong> 属性描述符。</p>\n<h1 id=\"属性的getter和setter\"><a href=\"#属性的getter和setter\" class=\"headerlink\" title=\"属性的getter和setter\"></a>属性的getter和setter</h1><p>有两种类型的对象属性。</p>\n<p>第一种是 <strong>数据属性</strong>。我们已经知道如何使用它们了。到目前为止，我们使用过的所有属性都是数据属性。</p>\n<p>第二种类型的属性是新东西。它是 <strong>访问器属性（accessor properties）</strong>。它们本质上是用于获取和设置值的函数，但从外部代码来看就像常规属性。</p>\n<h2 id=\"访问器属性-getter和setter\"><a href=\"#访问器属性-getter和setter\" class=\"headerlink\" title=\"访问器属性(getter和setter)\"></a>访问器属性(getter和setter)</h2><p>访问器属性由 “getter” 和 “setter” 方法表示。在对象字面量中，它们用 <code>get</code> 和 <code>set</code> 表示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> obj = &#123;<br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">propName</span>() &#123;<br>    <span class=\"hljs-comment\">// 当读取 obj.propName 时，getter 起作用</span><br>  &#125;,<br><br>  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title\">propName</span>(<span class=\"hljs-params\">value</span>) &#123;<br>    <span class=\"hljs-comment\">// 当执行 obj.propName = value 操作时，setter 起作用</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>当读取 <code>obj.propName</code> 时，getter 起作用，当 <code>obj.propName</code> 被赋值时，setter 起作用。</p>\n<p>例如，我们有一个具有 <code>name</code> 和 <code>surname</code> 属性的对象 <code>user</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,<br>  <span class=\"hljs-attr\">surname</span>: <span class=\"hljs-string\">&quot;Smith&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>现在我们想添加一个 <code>fullName</code> 属性，该属性值应该为 <code>&quot;John Smith&quot;</code>。当然，我们不想复制粘贴已有的信息，因此我们可以使用访问器来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,<br>  <span class=\"hljs-attr\">surname</span>: <span class=\"hljs-string\">&quot;Smith&quot;</span>,<br><br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">fullName</span>() &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.surname&#125;</span>`</span>;<br>  &#125;<br>&#125;;<br>alert(user.fullName); <span class=\"hljs-comment\">// John Smith</span><br></code></pre></td></tr></table></figure>\n\n<p>从外表看，访问器属性看起来就像一个普通属性。这就是访问器属性的设计思想。我们不以函数的方式 <strong>调用</strong> <code>user.fullName</code>，我们正常 <strong>读取</strong> 它：getter 在幕后运行。</p>\n<p>截至目前，<code>fullName</code> 只有一个 getter。如果我们尝试赋值操作 <code>user.fullName=</code>，将会出现错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">fullName</span>() &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`...`</span>;<br>  &#125;<br>&#125;;<br><br>user.fullName = <span class=\"hljs-string\">&quot;Test&quot;</span>; <span class=\"hljs-comment\">// Error（属性只有一个 getter）</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;John&#x27;</span>,<br>    <span class=\"hljs-attr\">surname</span>:<span class=\"hljs-string\">&#x27;Smith&#x27;</span>,<br>    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">fullname</span>()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.surname&#125;</span>`</span>;<br>    &#125;,<br>    <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title\">fullname</span>(<span class=\"hljs-params\">value</span>)&#123;<br>        <span class=\"hljs-comment\">// 将获取的值解构赋值给对象的name和surname属性</span><br>        [<span class=\"hljs-built_in\">this</span>.name,<span class=\"hljs-built_in\">this</span>.surname]=value.split(<span class=\"hljs-string\">&#x27; &#x27;</span>);<br>    &#125;<br>&#125;<br><br>user.fullname=<span class=\"hljs-string\">&#x27;alice cooper&#x27;</span>;<br><span class=\"hljs-built_in\">console</span>.log(user.name);<br><span class=\"hljs-built_in\">console</span>.log(user.fullname);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"访问器描述符\"><a href=\"#访问器描述符\" class=\"headerlink\" title=\"访问器描述符\"></a>访问器描述符</h2><p>访问器属性的描述符与数据属性的不同。</p>\n<p>所以访问器描述符可能有：</p>\n<ul>\n<li><strong><code>get</code></strong> —— 一个没有参数的函数，在读取属性时工作，</li>\n<li><strong><code>set</code></strong> —— 带有一个参数的函数，当属性被设置时调用，</li>\n<li><strong><code>enumerable</code></strong> —— 与数据属性的相同，</li>\n<li><strong><code>configurable</code></strong> —— 与数据属性的相同。</li>\n</ul>\n<p>例如，要使用 <code>defineProperty</code> 创建一个 <code>fullName</code> 访问器，我们可以使用 <code>get</code> 和 <code>set</code> 来传递描述符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,<br>  <span class=\"hljs-attr\">surname</span>: <span class=\"hljs-string\">&quot;Smith&quot;</span><br>&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&#x27;fullName&#x27;</span>, &#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.surname&#125;</span>`</span>;<br>  &#125;,<br><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">value</span>)</span> &#123;<br>    [<span class=\"hljs-built_in\">this</span>.name, <span class=\"hljs-built_in\">this</span>.surname] = value.split(<span class=\"hljs-string\">&quot; &quot;</span>);<br>  &#125;<br>&#125;);<br><br>alert(user.fullName); <span class=\"hljs-comment\">// John Smith</span><br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> user) alert(key); <span class=\"hljs-comment\">// name, surname</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>请注意，一个属性要么是访问器（具有 <code>get/set</code> 方法），要么是数据属性（具有 <code>value</code>），但不能两者都是。</strong></p>\n<p>如果我们试图在同一个描述符中同时提供 <code>get</code> 和 <code>value</code>，则会出现错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Error: Invalid property descriptor.</span><br><span class=\"hljs-built_in\">Object</span>.defineProperty(&#123;&#125;, <span class=\"hljs-string\">&#x27;prop&#x27;</span>, &#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>  &#125;,<br><br>  <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">2</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"更聪明的getter-setter\"><a href=\"#更聪明的getter-setter\" class=\"headerlink\" title=\"更聪明的getter/setter\"></a>更聪明的getter/setter</h2><p>Getter/setter 可以用作“真实”属性值的包装器，以便对它们进行更多的控制。</p>\n<p>例如，如果我们想禁止太短的 <code>user</code> 的 name，我们可以创建一个 setter <code>name</code>，并将值存储在一个单独的属性 <code>_name</code> 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">name</span>() &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._name;<br>  &#125;,<br><br>  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title\">name</span>(<span class=\"hljs-params\">value</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (value.length &lt; <span class=\"hljs-number\">4</span>) &#123;<br>      alert(<span class=\"hljs-string\">&quot;Name is too short, need at least 4 characters&quot;</span>);<br>      <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">this</span>._name = value;<br>  &#125;<br>&#125;;<br><br>user.name = <span class=\"hljs-string\">&quot;Pete&quot;</span>;<br>alert(user.name); <span class=\"hljs-comment\">// Pete</span><br><br>user.name = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">// Name 太短了……</span><br></code></pre></td></tr></table></figure>\n\n<p>所以，name 被存储在 <code>_name</code> 属性中，并通过 getter 和 setter 进行访问。</p>\n<p>从技术上讲，外部代码可以使用 <code>user._name</code> 直接访问 name。但是，这儿有一个众所周知的约定，即以下划线 <code>&quot;_&quot;</code> 开头的属性是内部属性，不应该从对象外部进行访问。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本笔记基于：<a href=\"https://zh.javascript.info/property-descriptors\">https://zh.javascript.info/property-descriptors</a></p>\n<h1 id=\"属性标识与属性描述符\"><a href=\"#属性标识与属性描述符\" class=\"headerlink\" title=\"属性标识与属性描述符\"></a>属性标识与属性描述符</h1><p>对象可以存储属性，对象的属性不仅仅只是简单的“键值”对。</p>\n<h2 id=\"属性标识\"><a href=\"#属性标识\" class=\"headerlink\" title=\"属性标识\"></a>属性标识</h2><p>对象属性（properties），除 <strong><code>value</code></strong> 外，还有三个特殊的特性（attributes），也就是所谓的“标志”：</p>\n<ul>\n<li><strong><code>writable</code></strong> — 如果为 <code>true</code>，则值可以被修改，否则它是只可读的。</li>\n<li><strong><code>enumerable</code></strong> — 如果为 <code>true</code>，则会被在循环中列出，否则不会被列出。</li>\n<li><strong><code>configurable</code></strong> — 如果为 <code>true</code>，则此特性可以被删除，这些属性也可以被修改，否则不可以。</li>\n</ul>\n<p>当我们用“常用的方式”创建一个属性时，它们都为 <code>true</code>，但我们也可以随时更改它们。</p>\n<p><a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\">Object.getOwnPropertyDescriptor</a> 方法允许查询有关属性的 <strong>完整</strong> 信息。</p>\n<blockquote>\n<p>语法：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> descriptor = <span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptor(obj, propertyName);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>obj</p>\n<p>需要从中获取信息的对象</p>\n</li>\n<li><p>propertyName</p>\n<p>属性的名称</p>\n</li>\n</ul>\n<blockquote>\n<p>举例</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;John&#x27;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> descriptor=<span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptor(user,<span class=\"hljs-string\">&#x27;name&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(descriptor);<br><span class=\"hljs-comment\">// &#123; value: &#x27;John&#x27;, writable: true, enumerable: true, configurable: true &#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>为了修改标志，我们可以使用 <a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty</a>。</p>\n<blockquote>\n<p>语法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.defineProperty(obj, propertyName, descriptor)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>obj</code>，<code>propertyName</code></p>\n<p>要应用描述符的对象及其属性。</p>\n</li>\n<li><p><code>descriptor</code></p>\n<p>  要应用的属性描述符对象。</p>\n</li>\n</ul>\n<p>如果<code>descriptor</code>属性存在，<code>defineProperty</code> 会更新其标志。否则，它会使用给定的值和标志创建属性；在这种情况下，如果没有提供标志，则会假定它是 <code>false</code>。</p>\n<p>例如，这里创建了一个属性 <code>name</code>，该属性的所有标志都为 <code>false</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;name&quot;</span>, &#123;<br>  <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;John&quot;</span><br>&#125;);<br><br><span class=\"hljs-keyword\">let</span> descriptor = <span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptor(user, <span class=\"hljs-string\">&#x27;name&#x27;</span>);<br><br>alert( <span class=\"hljs-built_in\">JSON</span>.stringify(descriptor, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span> ) );<br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">&#123;</span><br><span class=\"hljs-comment\">  &quot;value&quot;: &quot;John&quot;,</span><br><span class=\"hljs-comment\">  &quot;writable&quot;: false,</span><br><span class=\"hljs-comment\">  &quot;enumerable&quot;: false,</span><br><span class=\"hljs-comment\">  &quot;configurable&quot;: false</span><br><span class=\"hljs-comment\">&#125;</span><br><span class=\"hljs-comment\"> */</span><br></code></pre></td></tr></table></figure>\n\n<p>将它与上面的“以常用方式创建的” <code>user.name</code> 进行比较：现在所有标志都为 <code>false</code>。如果这不是我们想要的，那么我们最好在 <code>descriptor</code> 中将它们设置为 <code>true</code>。</p>\n<h2 id=\"只读\"><a href=\"#只读\" class=\"headerlink\" title=\"只读\"></a>只读</h2><p>通过更改 <code>writable</code> 标志来把 <code>user.name</code> 设置为只读（<code>user.name</code> 不能被重新赋值）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span><br>&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;name&quot;</span>, &#123;<br>  <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span><br>&#125;);<br><br>user.name = <span class=\"hljs-string\">&quot;Pete&quot;</span>; <span class=\"hljs-comment\">// Error: Cannot assign to read only property &#x27;name&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>只在严格模式下会出现 Errors</strong></p>\n</blockquote>\n<h2 id=\"不可枚举\"><a href=\"#不可枚举\" class=\"headerlink\" title=\"不可枚举\"></a>不可枚举</h2><p>如果在 <code>user</code>中 添加一个自定义的 <code>toString</code>。</p>\n<p>通常，对象的内置 <code>toString</code> 是不可枚举的，它不会显示在 <code>for..in</code> 中。但是如果我们添加我们自己的 <code>toString</code>，那么默认情况下它将显示在 <code>for..in</code> 中，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>  &#125;<br>&#125;;<br><br><span class=\"hljs-comment\">// 默认情况下，我们的两个属性都会被列出：</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> user) alert(key); <span class=\"hljs-comment\">// name, toString</span><br></code></pre></td></tr></table></figure>\n\n<p>如果我们不喜欢它，那么我们可以设置 <code>enumerable:false</code>。之后它就不会出现在 <code>for..in</code> 循环中了，就像内建的 <code>toString</code> 一样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>  &#125;<br>&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;toString&quot;</span>, &#123;<br>  <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">false</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 现在我们的 toString 消失了：</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> user) alert(key); <span class=\"hljs-comment\">// name</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"不可配置\"><a href=\"#不可配置\" class=\"headerlink\" title=\"不可配置\"></a>不可配置</h2><p>不可配置标志（<code>configurable:false</code>）有时会预设在内建对象和属性中。不可配置的属性不能被删除。</p>\n<p>因此，开发人员无法修改 <code>Math.PI</code> 的值或覆盖它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Math</span>.PI = <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// Error</span><br><br><span class=\"hljs-comment\">// 删除 Math.PI 也不会起作用</span><br></code></pre></td></tr></table></figure>\n\n<p>使属性变成不可配置是一条单行道。我们无法使用 <code>defineProperty</code> 把它改回去。</p>\n<p>确切地说，不可配置性对 <code>defineProperty</code> 施加了一些限制：</p>\n<ol>\n<li>不能修改 <code>configurable</code> 标志。</li>\n<li>不能修改 <code>enumerable</code> 标志。</li>\n<li>不能将 <code>writable: false</code> 修改为 <code>true</code>（反过来则可以）。</li>\n<li>不能修改访问者属性的 <code>get/set</code>（但是如果没有可以分配它们）。</li>\n</ol>\n<hr>\n<p><strong>“configurable: false” 的用途是防止更改和删除属性标志，但是允许更改对象的值。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span><br>&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;name&quot;</span>, &#123;<br>  <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">false</span><br>&#125;);<br><br>user.name = <span class=\"hljs-string\">&quot;Pete&quot;</span>; <span class=\"hljs-comment\">// 正常工作</span><br><span class=\"hljs-keyword\">delete</span> user.name; <span class=\"hljs-comment\">// Error</span><br></code></pre></td></tr></table></figure>\n\n<p>现在，我们将 <code>user.name</code> 设置为一个“永不可改”的常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span><br>&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;name&quot;</span>, &#123;<br>  <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span>,<br>  <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">false</span><br>&#125;);<br><br><span class=\"hljs-comment\">// 不能修改 user.name 或它的标志</span><br><span class=\"hljs-comment\">// 下面的所有操作都不起作用：</span><br>user.name = <span class=\"hljs-string\">&quot;Pete&quot;</span>;<br><span class=\"hljs-keyword\">delete</span> user.name;<br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&quot;name&quot;</span>, &#123; <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;Pete&quot;</span> &#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Object-defineProperties\"><a href=\"#Object-defineProperties\" class=\"headerlink\" title=\"Object.defineProperties\"></a><a href=\"https://zh.javascript.info/property-descriptors#objectdefineproperties\">Object.defineProperties</a></h2><p>有一个方法 <a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\">Object.defineProperties(obj, descriptors)</a>，允许一次定义多个属性。</p>\n<blockquote>\n<p>语法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.defineProperties(obj, &#123;<br>  <span class=\"hljs-attr\">prop1</span>: descriptor1,<br>  <span class=\"hljs-attr\">prop2</span>: descriptor2<br>  <span class=\"hljs-comment\">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Object</span>.defineProperties(user, &#123;<br>  <span class=\"hljs-attr\">name</span>: &#123; <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;John&quot;</span>, <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span> &#125;,<br>  <span class=\"hljs-attr\">surname</span>: &#123; <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;Smith&quot;</span>, <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span> &#125;,<br>  <span class=\"hljs-comment\">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Object-getOwnPropertyDescriptors\"><a href=\"#Object-getOwnPropertyDescriptors\" class=\"headerlink\" title=\"Object.getOwnPropertyDescriptors\"></a><a href=\"https://zh.javascript.info/property-descriptors#objectgetownpropertydescriptors\">Object.getOwnPropertyDescriptors</a></h2><p>要一次获取所有属性描述符，我们可以使用 <a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\">Object.getOwnPropertyDescriptors(obj)</a> 方法。</p>\n<p>它与 <code>Object.defineProperties</code> 一起可以用作克隆对象的“标志感知”方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> clone = <span class=\"hljs-built_in\">Object</span>.defineProperties(&#123;&#125;, <span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptors(obj));<br><br></code></pre></td></tr></table></figure>\n\n<p>通常，当我们克隆一个对象时，我们使用赋值的方式来复制属性，像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> user) &#123;<br>  clone[key] = user[key]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>……但是，这并不能复制标志。所以如果我们想要一个“更好”的克隆，那么 <code>Object.defineProperties</code> 是首选。</p>\n<p>另一个区别是 <code>for..in</code> 会忽略 symbol 类型的属性，但是 <code>Object.getOwnPropertyDescriptors</code> 返回包含 symbol 类型的属性在内的 <strong>所有</strong> 属性描述符。</p>\n<h1 id=\"属性的getter和setter\"><a href=\"#属性的getter和setter\" class=\"headerlink\" title=\"属性的getter和setter\"></a>属性的getter和setter</h1><p>有两种类型的对象属性。</p>\n<p>第一种是 <strong>数据属性</strong>。我们已经知道如何使用它们了。到目前为止，我们使用过的所有属性都是数据属性。</p>\n<p>第二种类型的属性是新东西。它是 <strong>访问器属性（accessor properties）</strong>。它们本质上是用于获取和设置值的函数，但从外部代码来看就像常规属性。</p>\n<h2 id=\"访问器属性-getter和setter\"><a href=\"#访问器属性-getter和setter\" class=\"headerlink\" title=\"访问器属性(getter和setter)\"></a>访问器属性(getter和setter)</h2><p>访问器属性由 “getter” 和 “setter” 方法表示。在对象字面量中，它们用 <code>get</code> 和 <code>set</code> 表示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> obj = &#123;<br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">propName</span>() &#123;<br>    <span class=\"hljs-comment\">// 当读取 obj.propName 时，getter 起作用</span><br>  &#125;,<br><br>  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title\">propName</span>(<span class=\"hljs-params\">value</span>) &#123;<br>    <span class=\"hljs-comment\">// 当执行 obj.propName = value 操作时，setter 起作用</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>当读取 <code>obj.propName</code> 时，getter 起作用，当 <code>obj.propName</code> 被赋值时，setter 起作用。</p>\n<p>例如，我们有一个具有 <code>name</code> 和 <code>surname</code> 属性的对象 <code>user</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,<br>  <span class=\"hljs-attr\">surname</span>: <span class=\"hljs-string\">&quot;Smith&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>现在我们想添加一个 <code>fullName</code> 属性，该属性值应该为 <code>&quot;John Smith&quot;</code>。当然，我们不想复制粘贴已有的信息，因此我们可以使用访问器来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,<br>  <span class=\"hljs-attr\">surname</span>: <span class=\"hljs-string\">&quot;Smith&quot;</span>,<br><br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">fullName</span>() &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.surname&#125;</span>`</span>;<br>  &#125;<br>&#125;;<br>alert(user.fullName); <span class=\"hljs-comment\">// John Smith</span><br></code></pre></td></tr></table></figure>\n\n<p>从外表看，访问器属性看起来就像一个普通属性。这就是访问器属性的设计思想。我们不以函数的方式 <strong>调用</strong> <code>user.fullName</code>，我们正常 <strong>读取</strong> 它：getter 在幕后运行。</p>\n<p>截至目前，<code>fullName</code> 只有一个 getter。如果我们尝试赋值操作 <code>user.fullName=</code>，将会出现错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">fullName</span>() &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`...`</span>;<br>  &#125;<br>&#125;;<br><br>user.fullName = <span class=\"hljs-string\">&quot;Test&quot;</span>; <span class=\"hljs-comment\">// Error（属性只有一个 getter）</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user=&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;John&#x27;</span>,<br>    <span class=\"hljs-attr\">surname</span>:<span class=\"hljs-string\">&#x27;Smith&#x27;</span>,<br>    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">fullname</span>()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.surname&#125;</span>`</span>;<br>    &#125;,<br>    <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title\">fullname</span>(<span class=\"hljs-params\">value</span>)&#123;<br>        <span class=\"hljs-comment\">// 将获取的值解构赋值给对象的name和surname属性</span><br>        [<span class=\"hljs-built_in\">this</span>.name,<span class=\"hljs-built_in\">this</span>.surname]=value.split(<span class=\"hljs-string\">&#x27; &#x27;</span>);<br>    &#125;<br>&#125;<br><br>user.fullname=<span class=\"hljs-string\">&#x27;alice cooper&#x27;</span>;<br><span class=\"hljs-built_in\">console</span>.log(user.name);<br><span class=\"hljs-built_in\">console</span>.log(user.fullname);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"访问器描述符\"><a href=\"#访问器描述符\" class=\"headerlink\" title=\"访问器描述符\"></a>访问器描述符</h2><p>访问器属性的描述符与数据属性的不同。</p>\n<p>所以访问器描述符可能有：</p>\n<ul>\n<li><strong><code>get</code></strong> —— 一个没有参数的函数，在读取属性时工作，</li>\n<li><strong><code>set</code></strong> —— 带有一个参数的函数，当属性被设置时调用，</li>\n<li><strong><code>enumerable</code></strong> —— 与数据属性的相同，</li>\n<li><strong><code>configurable</code></strong> —— 与数据属性的相同。</li>\n</ul>\n<p>例如，要使用 <code>defineProperty</code> 创建一个 <code>fullName</code> 访问器，我们可以使用 <code>get</code> 和 <code>set</code> 来传递描述符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;John&quot;</span>,<br>  <span class=\"hljs-attr\">surname</span>: <span class=\"hljs-string\">&quot;Smith&quot;</span><br>&#125;;<br><br><span class=\"hljs-built_in\">Object</span>.defineProperty(user, <span class=\"hljs-string\">&#x27;fullName&#x27;</span>, &#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.surname&#125;</span>`</span>;<br>  &#125;,<br><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">value</span>)</span> &#123;<br>    [<span class=\"hljs-built_in\">this</span>.name, <span class=\"hljs-built_in\">this</span>.surname] = value.split(<span class=\"hljs-string\">&quot; &quot;</span>);<br>  &#125;<br>&#125;);<br><br>alert(user.fullName); <span class=\"hljs-comment\">// John Smith</span><br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> user) alert(key); <span class=\"hljs-comment\">// name, surname</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>请注意，一个属性要么是访问器（具有 <code>get/set</code> 方法），要么是数据属性（具有 <code>value</code>），但不能两者都是。</strong></p>\n<p>如果我们试图在同一个描述符中同时提供 <code>get</code> 和 <code>value</code>，则会出现错误：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Error: Invalid property descriptor.</span><br><span class=\"hljs-built_in\">Object</span>.defineProperty(&#123;&#125;, <span class=\"hljs-string\">&#x27;prop&#x27;</span>, &#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span><br>  &#125;,<br><br>  <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">2</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"更聪明的getter-setter\"><a href=\"#更聪明的getter-setter\" class=\"headerlink\" title=\"更聪明的getter/setter\"></a>更聪明的getter/setter</h2><p>Getter/setter 可以用作“真实”属性值的包装器，以便对它们进行更多的控制。</p>\n<p>例如，如果我们想禁止太短的 <code>user</code> 的 name，我们可以创建一个 setter <code>name</code>，并将值存储在一个单独的属性 <code>_name</code> 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> user = &#123;<br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">name</span>() &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._name;<br>  &#125;,<br><br>  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title\">name</span>(<span class=\"hljs-params\">value</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (value.length &lt; <span class=\"hljs-number\">4</span>) &#123;<br>      alert(<span class=\"hljs-string\">&quot;Name is too short, need at least 4 characters&quot;</span>);<br>      <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">this</span>._name = value;<br>  &#125;<br>&#125;;<br><br>user.name = <span class=\"hljs-string\">&quot;Pete&quot;</span>;<br>alert(user.name); <span class=\"hljs-comment\">// Pete</span><br><br>user.name = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">// Name 太短了……</span><br></code></pre></td></tr></table></figure>\n\n<p>所以，name 被存储在 <code>_name</code> 属性中，并通过 getter 和 setter 进行访问。</p>\n<p>从技术上讲，外部代码可以使用 <code>user._name</code> 直接访问 name。但是，这儿有一个众所周知的约定，即以下划线 <code>&quot;_&quot;</code> 开头的属性是内部属性，不应该从对象外部进行访问。</p>\n"},{"title":"Git学习","date":"2021-07-31T04:19:35.000Z","_content":"\n\n## 1. Git基础\n\n### 1.1 版本管理\n\n#### 1.1.1 什么是版本管理\n\n版本管理是一种记录文件变化的方式，以便将来查阅特定版本的文件内容。\n\n![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151949.png)\n\n#### 1.1.2 人为维护文档版本的问题\n\n1. 文档数量多且命名不清晰导致文档版本混乱\n\n2. 每次编辑文档需要复制，不方便\n\n3. 多人同时编辑同一个文档，容易产生覆盖\n\n\n\n\n   ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151953.png)\n\n   \n\n   ### 1.2 Git 是什么\n\n   Git是一个版本管理控制系统（缩写VCS），它可以在任何时间点，将文档的状态作为更新记录保存起来，也可以在任何时间点，将更新记录恢复回来。\n\n   \n\n   ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152128.png)\n\n   ### 1.3 Git 安装\n\n   [下载地址](https://git-scm.com/downloads) \n\n   在安装的过程中，所有选项使用默认值即可。\n\n   \n\n   ### 1.4 Git 基本工作流程\n\n   | git仓库          | 暂存区             | 工作目录            |\n   | ---------------- | ------------------ | ------------------- |\n   | 用于存放提交记录 | 临时存放被修改文件 | 被Git管理的项目目录 |\n\n   ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151946.png)\n\n   ### 1.5 Git 的使用\n\n   #### 1.5.1 Git 使用前配置\n\n   在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。\n\n   1. 配置提交人姓名：`git config --global user.name 提交人姓名`\n   2. 配置提交人姓名：`git config --global user.email 提交人邮箱` \n   3. 查看git配置信息：`git config --list`   \n\n   **注意**\n\n   1. 如果要对配置信息进行修改，重复上述命令即可。\n\n   2. 配置只需要执行一次。\n\n   #### 1.5.2 提交步骤\n\n   1. `git init` 初始化git仓库\n   2. `git status` 查看文件状态\n   3. `git add 文件列表` 追踪文件\n   4. `git commit -m 提交信息`  向仓库中提交代码\n   5. `git log` 查看提交记录\n\n   #### 1.5.3 撤销\n\n   - 用暂存区中的文件覆盖工作目录中的文件： `git checkout 文件`\n\n   - 将文件从暂存区中删除： `git rm --cached 文件`\n   - 将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：`git rest --hard commitID` \n\n   ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151943.png)\n\n   ## 2. Git进阶\n\n   ### 2.1 分支\n\n   为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。\n\n   使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。\n\n   ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151941.png)\n\n   \n\n   #### 2.1.1 分支细分\n\n   1. 主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。\n\n      \n\n      ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152137.png)\n\n      \n\n   2. 、开发分支（develop）：作为开发的分支，基于 master 分支创建。\n\n      \n\n      ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152139.png)\n\n   3. 功能分支（feature）：作为开发具体功能的分支，基于开发分支创建\n\n      \n\n      ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152144.png)\n\n   **功能分支 -> 开发分支 -> 主分支**\n\n   #### 2.1.2 分支命令\n\n   - `git branch` 查看分支\n   - `git branch 分支名称` 创建分支\n   - `git checkout 分支名称` 切换分支 (切换分支之前需要提交)\n   - `git merge 来源分支` 合并分支（如果存在两个分支，dev和master，如果想要将dev分支的内容合并到master分支上，此时首先要回到master分支，然后再使用命令 git merge dev，而且dev分支依旧存在）\n   - `git branch -d 分支名称` 删除分支（分支被合并后才允许删除）（-D 强制删除）\n\n\n   ### 2.2 暂时保存更改\n\n   在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。\n\n   使用场景：分支临时切换\n\n   - 存储临时改动：`git stash` \n\n     使用git add后将文件添加到暂存区后，还没有commit提交。此时使用git stash，将当前分支所有改动剪切到git的剪切板中，文件会回到之前的状态。如果使用git status，会发现显示的是noting to commit，因此便可以切换分支。\n\n     ![image-20210731224217165](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731224217.png)\n\n   - 恢复改动：`git stash pop`\n\n     ![image-20210731224359238](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731224421.png)\n\n","source":"_posts/Git学习.md","raw":"---\ntitle: Git学习\ndate: 2021-07-31 12:19:35\ntags: Git\n---\n\n\n## 1. Git基础\n\n### 1.1 版本管理\n\n#### 1.1.1 什么是版本管理\n\n版本管理是一种记录文件变化的方式，以便将来查阅特定版本的文件内容。\n\n![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151949.png)\n\n#### 1.1.2 人为维护文档版本的问题\n\n1. 文档数量多且命名不清晰导致文档版本混乱\n\n2. 每次编辑文档需要复制，不方便\n\n3. 多人同时编辑同一个文档，容易产生覆盖\n\n\n\n\n   ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151953.png)\n\n   \n\n   ### 1.2 Git 是什么\n\n   Git是一个版本管理控制系统（缩写VCS），它可以在任何时间点，将文档的状态作为更新记录保存起来，也可以在任何时间点，将更新记录恢复回来。\n\n   \n\n   ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152128.png)\n\n   ### 1.3 Git 安装\n\n   [下载地址](https://git-scm.com/downloads) \n\n   在安装的过程中，所有选项使用默认值即可。\n\n   \n\n   ### 1.4 Git 基本工作流程\n\n   | git仓库          | 暂存区             | 工作目录            |\n   | ---------------- | ------------------ | ------------------- |\n   | 用于存放提交记录 | 临时存放被修改文件 | 被Git管理的项目目录 |\n\n   ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151946.png)\n\n   ### 1.5 Git 的使用\n\n   #### 1.5.1 Git 使用前配置\n\n   在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。\n\n   1. 配置提交人姓名：`git config --global user.name 提交人姓名`\n   2. 配置提交人姓名：`git config --global user.email 提交人邮箱` \n   3. 查看git配置信息：`git config --list`   \n\n   **注意**\n\n   1. 如果要对配置信息进行修改，重复上述命令即可。\n\n   2. 配置只需要执行一次。\n\n   #### 1.5.2 提交步骤\n\n   1. `git init` 初始化git仓库\n   2. `git status` 查看文件状态\n   3. `git add 文件列表` 追踪文件\n   4. `git commit -m 提交信息`  向仓库中提交代码\n   5. `git log` 查看提交记录\n\n   #### 1.5.3 撤销\n\n   - 用暂存区中的文件覆盖工作目录中的文件： `git checkout 文件`\n\n   - 将文件从暂存区中删除： `git rm --cached 文件`\n   - 将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：`git rest --hard commitID` \n\n   ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151943.png)\n\n   ## 2. Git进阶\n\n   ### 2.1 分支\n\n   为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。\n\n   使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。\n\n   ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151941.png)\n\n   \n\n   #### 2.1.1 分支细分\n\n   1. 主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。\n\n      \n\n      ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152137.png)\n\n      \n\n   2. 、开发分支（develop）：作为开发的分支，基于 master 分支创建。\n\n      \n\n      ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152139.png)\n\n   3. 功能分支（feature）：作为开发具体功能的分支，基于开发分支创建\n\n      \n\n      ![](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152144.png)\n\n   **功能分支 -> 开发分支 -> 主分支**\n\n   #### 2.1.2 分支命令\n\n   - `git branch` 查看分支\n   - `git branch 分支名称` 创建分支\n   - `git checkout 分支名称` 切换分支 (切换分支之前需要提交)\n   - `git merge 来源分支` 合并分支（如果存在两个分支，dev和master，如果想要将dev分支的内容合并到master分支上，此时首先要回到master分支，然后再使用命令 git merge dev，而且dev分支依旧存在）\n   - `git branch -d 分支名称` 删除分支（分支被合并后才允许删除）（-D 强制删除）\n\n\n   ### 2.2 暂时保存更改\n\n   在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。\n\n   使用场景：分支临时切换\n\n   - 存储临时改动：`git stash` \n\n     使用git add后将文件添加到暂存区后，还没有commit提交。此时使用git stash，将当前分支所有改动剪切到git的剪切板中，文件会回到之前的状态。如果使用git status，会发现显示的是noting to commit，因此便可以切换分支。\n\n     ![image-20210731224217165](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731224217.png)\n\n   - 恢复改动：`git stash pop`\n\n     ![image-20210731224359238](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731224421.png)\n\n","slug":"Git学习","published":1,"updated":"2021-07-31T15:02:50.779Z","_id":"ckrrwibqe0000m4unf9tr5e4g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-Git基础\"><a href=\"#1-Git基础\" class=\"headerlink\" title=\"1. Git基础\"></a>1. Git基础</h2><h3 id=\"1-1-版本管理\"><a href=\"#1-1-版本管理\" class=\"headerlink\" title=\"1.1 版本管理\"></a>1.1 版本管理</h3><h4 id=\"1-1-1-什么是版本管理\"><a href=\"#1-1-1-什么是版本管理\" class=\"headerlink\" title=\"1.1.1 什么是版本管理\"></a>1.1.1 什么是版本管理</h4><p>版本管理是一种记录文件变化的方式，以便将来查阅特定版本的文件内容。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151949.png\"></p>\n<h4 id=\"1-1-2-人为维护文档版本的问题\"><a href=\"#1-1-2-人为维护文档版本的问题\" class=\"headerlink\" title=\"1.1.2 人为维护文档版本的问题\"></a>1.1.2 人为维护文档版本的问题</h4><ol>\n<li><p>文档数量多且命名不清晰导致文档版本混乱</p>\n</li>\n<li><p>每次编辑文档需要复制，不方便</p>\n</li>\n<li><p>多人同时编辑同一个文档，容易产生覆盖</p>\n</li>\n</ol>\n<p>   <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151953.png\"></p>\n<h3 id=\"1-2-Git-是什么\"><a href=\"#1-2-Git-是什么\" class=\"headerlink\" title=\"1.2 Git 是什么\"></a>1.2 Git 是什么</h3><p>   Git是一个版本管理控制系统（缩写VCS），它可以在任何时间点，将文档的状态作为更新记录保存起来，也可以在任何时间点，将更新记录恢复回来。</p>\n<p>   <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152128.png\"></p>\n<h3 id=\"1-3-Git-安装\"><a href=\"#1-3-Git-安装\" class=\"headerlink\" title=\"1.3 Git 安装\"></a>1.3 Git 安装</h3><p>   <a href=\"https://git-scm.com/downloads\">下载地址</a> </p>\n<p>   在安装的过程中，所有选项使用默认值即可。</p>\n<h3 id=\"1-4-Git-基本工作流程\"><a href=\"#1-4-Git-基本工作流程\" class=\"headerlink\" title=\"1.4 Git 基本工作流程\"></a>1.4 Git 基本工作流程</h3><table>\n<thead>\n<tr>\n<th>git仓库</th>\n<th>暂存区</th>\n<th>工作目录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>用于存放提交记录</td>\n<td>临时存放被修改文件</td>\n<td>被Git管理的项目目录</td>\n</tr>\n</tbody></table>\n<p>   <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151946.png\"></p>\n<h3 id=\"1-5-Git-的使用\"><a href=\"#1-5-Git-的使用\" class=\"headerlink\" title=\"1.5 Git 的使用\"></a>1.5 Git 的使用</h3><h4 id=\"1-5-1-Git-使用前配置\"><a href=\"#1-5-1-Git-使用前配置\" class=\"headerlink\" title=\"1.5.1 Git 使用前配置\"></a>1.5.1 Git 使用前配置</h4><p>   在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。</p>\n<ol>\n<li>配置提交人姓名：<code>git config --global user.name 提交人姓名</code></li>\n<li>配置提交人姓名：<code>git config --global user.email 提交人邮箱</code> </li>\n<li>查看git配置信息：<code>git config --list</code>   </li>\n</ol>\n<p>   <strong>注意</strong></p>\n<ol>\n<li><p>如果要对配置信息进行修改，重复上述命令即可。</p>\n</li>\n<li><p>配置只需要执行一次。</p>\n</li>\n</ol>\n<h4 id=\"1-5-2-提交步骤\"><a href=\"#1-5-2-提交步骤\" class=\"headerlink\" title=\"1.5.2 提交步骤\"></a>1.5.2 提交步骤</h4><ol>\n<li><code>git init</code> 初始化git仓库</li>\n<li><code>git status</code> 查看文件状态</li>\n<li><code>git add 文件列表</code> 追踪文件</li>\n<li><code>git commit -m 提交信息</code>  向仓库中提交代码</li>\n<li><code>git log</code> 查看提交记录</li>\n</ol>\n<h4 id=\"1-5-3-撤销\"><a href=\"#1-5-3-撤销\" class=\"headerlink\" title=\"1.5.3 撤销\"></a>1.5.3 撤销</h4><ul>\n<li><p>用暂存区中的文件覆盖工作目录中的文件： <code>git checkout 文件</code></p>\n</li>\n<li><p>将文件从暂存区中删除： <code>git rm --cached 文件</code></p>\n</li>\n<li><p>将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git rest --hard commitID</code> </p>\n</li>\n</ul>\n<p>   <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151943.png\"></p>\n<h2 id=\"2-Git进阶\"><a href=\"#2-Git进阶\" class=\"headerlink\" title=\"2. Git进阶\"></a>2. Git进阶</h2><h3 id=\"2-1-分支\"><a href=\"#2-1-分支\" class=\"headerlink\" title=\"2.1 分支\"></a>2.1 分支</h3><p>   为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。</p>\n<p>   使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。</p>\n<p>   <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151941.png\"></p>\n<h4 id=\"2-1-1-分支细分\"><a href=\"#2-1-1-分支细分\" class=\"headerlink\" title=\"2.1.1 分支细分\"></a>2.1.1 分支细分</h4><ol>\n<li><p>主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152137.png\"></p>\n</li>\n<li><p>、开发分支（develop）：作为开发的分支，基于 master 分支创建。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152139.png\"></p>\n</li>\n<li><p>功能分支（feature）：作为开发具体功能的分支，基于开发分支创建</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152144.png\"></p>\n</li>\n</ol>\n<p>   <strong>功能分支 -&gt; 开发分支 -&gt; 主分支</strong></p>\n<h4 id=\"2-1-2-分支命令\"><a href=\"#2-1-2-分支命令\" class=\"headerlink\" title=\"2.1.2 分支命令\"></a>2.1.2 分支命令</h4><ul>\n<li><code>git branch</code> 查看分支</li>\n<li><code>git branch 分支名称</code> 创建分支</li>\n<li><code>git checkout 分支名称</code> 切换分支 (切换分支之前需要提交)</li>\n<li><code>git merge 来源分支</code> 合并分支（如果存在两个分支，dev和master，如果想要将dev分支的内容合并到master分支上，此时首先要回到master分支，然后再使用命令 git merge dev，而且dev分支依旧存在）</li>\n<li><code>git branch -d 分支名称</code> 删除分支（分支被合并后才允许删除）（-D 强制删除）</li>\n</ul>\n<h3 id=\"2-2-暂时保存更改\"><a href=\"#2-2-暂时保存更改\" class=\"headerlink\" title=\"2.2 暂时保存更改\"></a>2.2 暂时保存更改</h3><p>   在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</p>\n<p>   使用场景：分支临时切换</p>\n<ul>\n<li><p>存储临时改动：<code>git stash</code> </p>\n<p>使用git add后将文件添加到暂存区后，还没有commit提交。此时使用git stash，将当前分支所有改动剪切到git的剪切板中，文件会回到之前的状态。如果使用git status，会发现显示的是noting to commit，因此便可以切换分支。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731224217.png\" alt=\"image-20210731224217165\"></p>\n</li>\n<li><p>恢复改动：<code>git stash pop</code></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731224421.png\" alt=\"image-20210731224359238\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Git基础\"><a href=\"#1-Git基础\" class=\"headerlink\" title=\"1. Git基础\"></a>1. Git基础</h2><h3 id=\"1-1-版本管理\"><a href=\"#1-1-版本管理\" class=\"headerlink\" title=\"1.1 版本管理\"></a>1.1 版本管理</h3><h4 id=\"1-1-1-什么是版本管理\"><a href=\"#1-1-1-什么是版本管理\" class=\"headerlink\" title=\"1.1.1 什么是版本管理\"></a>1.1.1 什么是版本管理</h4><p>版本管理是一种记录文件变化的方式，以便将来查阅特定版本的文件内容。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151949.png\"></p>\n<h4 id=\"1-1-2-人为维护文档版本的问题\"><a href=\"#1-1-2-人为维护文档版本的问题\" class=\"headerlink\" title=\"1.1.2 人为维护文档版本的问题\"></a>1.1.2 人为维护文档版本的问题</h4><ol>\n<li><p>文档数量多且命名不清晰导致文档版本混乱</p>\n</li>\n<li><p>每次编辑文档需要复制，不方便</p>\n</li>\n<li><p>多人同时编辑同一个文档，容易产生覆盖</p>\n</li>\n</ol>\n<p>   <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151953.png\"></p>\n<h3 id=\"1-2-Git-是什么\"><a href=\"#1-2-Git-是什么\" class=\"headerlink\" title=\"1.2 Git 是什么\"></a>1.2 Git 是什么</h3><p>   Git是一个版本管理控制系统（缩写VCS），它可以在任何时间点，将文档的状态作为更新记录保存起来，也可以在任何时间点，将更新记录恢复回来。</p>\n<p>   <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152128.png\"></p>\n<h3 id=\"1-3-Git-安装\"><a href=\"#1-3-Git-安装\" class=\"headerlink\" title=\"1.3 Git 安装\"></a>1.3 Git 安装</h3><p>   <a href=\"https://git-scm.com/downloads\">下载地址</a> </p>\n<p>   在安装的过程中，所有选项使用默认值即可。</p>\n<h3 id=\"1-4-Git-基本工作流程\"><a href=\"#1-4-Git-基本工作流程\" class=\"headerlink\" title=\"1.4 Git 基本工作流程\"></a>1.4 Git 基本工作流程</h3><table>\n<thead>\n<tr>\n<th>git仓库</th>\n<th>暂存区</th>\n<th>工作目录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>用于存放提交记录</td>\n<td>临时存放被修改文件</td>\n<td>被Git管理的项目目录</td>\n</tr>\n</tbody></table>\n<p>   <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151946.png\"></p>\n<h3 id=\"1-5-Git-的使用\"><a href=\"#1-5-Git-的使用\" class=\"headerlink\" title=\"1.5 Git 的使用\"></a>1.5 Git 的使用</h3><h4 id=\"1-5-1-Git-使用前配置\"><a href=\"#1-5-1-Git-使用前配置\" class=\"headerlink\" title=\"1.5.1 Git 使用前配置\"></a>1.5.1 Git 使用前配置</h4><p>   在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。</p>\n<ol>\n<li>配置提交人姓名：<code>git config --global user.name 提交人姓名</code></li>\n<li>配置提交人姓名：<code>git config --global user.email 提交人邮箱</code> </li>\n<li>查看git配置信息：<code>git config --list</code>   </li>\n</ol>\n<p>   <strong>注意</strong></p>\n<ol>\n<li><p>如果要对配置信息进行修改，重复上述命令即可。</p>\n</li>\n<li><p>配置只需要执行一次。</p>\n</li>\n</ol>\n<h4 id=\"1-5-2-提交步骤\"><a href=\"#1-5-2-提交步骤\" class=\"headerlink\" title=\"1.5.2 提交步骤\"></a>1.5.2 提交步骤</h4><ol>\n<li><code>git init</code> 初始化git仓库</li>\n<li><code>git status</code> 查看文件状态</li>\n<li><code>git add 文件列表</code> 追踪文件</li>\n<li><code>git commit -m 提交信息</code>  向仓库中提交代码</li>\n<li><code>git log</code> 查看提交记录</li>\n</ol>\n<h4 id=\"1-5-3-撤销\"><a href=\"#1-5-3-撤销\" class=\"headerlink\" title=\"1.5.3 撤销\"></a>1.5.3 撤销</h4><ul>\n<li><p>用暂存区中的文件覆盖工作目录中的文件： <code>git checkout 文件</code></p>\n</li>\n<li><p>将文件从暂存区中删除： <code>git rm --cached 文件</code></p>\n</li>\n<li><p>将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git rest --hard commitID</code> </p>\n</li>\n</ul>\n<p>   <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151943.png\"></p>\n<h2 id=\"2-Git进阶\"><a href=\"#2-Git进阶\" class=\"headerlink\" title=\"2. Git进阶\"></a>2. Git进阶</h2><h3 id=\"2-1-分支\"><a href=\"#2-1-分支\" class=\"headerlink\" title=\"2.1 分支\"></a>2.1 分支</h3><p>   为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。</p>\n<p>   使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。</p>\n<p>   <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731151941.png\"></p>\n<h4 id=\"2-1-1-分支细分\"><a href=\"#2-1-1-分支细分\" class=\"headerlink\" title=\"2.1.1 分支细分\"></a>2.1.1 分支细分</h4><ol>\n<li><p>主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152137.png\"></p>\n</li>\n<li><p>、开发分支（develop）：作为开发的分支，基于 master 分支创建。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152139.png\"></p>\n</li>\n<li><p>功能分支（feature）：作为开发具体功能的分支，基于开发分支创建</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731152144.png\"></p>\n</li>\n</ol>\n<p>   <strong>功能分支 -&gt; 开发分支 -&gt; 主分支</strong></p>\n<h4 id=\"2-1-2-分支命令\"><a href=\"#2-1-2-分支命令\" class=\"headerlink\" title=\"2.1.2 分支命令\"></a>2.1.2 分支命令</h4><ul>\n<li><code>git branch</code> 查看分支</li>\n<li><code>git branch 分支名称</code> 创建分支</li>\n<li><code>git checkout 分支名称</code> 切换分支 (切换分支之前需要提交)</li>\n<li><code>git merge 来源分支</code> 合并分支（如果存在两个分支，dev和master，如果想要将dev分支的内容合并到master分支上，此时首先要回到master分支，然后再使用命令 git merge dev，而且dev分支依旧存在）</li>\n<li><code>git branch -d 分支名称</code> 删除分支（分支被合并后才允许删除）（-D 强制删除）</li>\n</ul>\n<h3 id=\"2-2-暂时保存更改\"><a href=\"#2-2-暂时保存更改\" class=\"headerlink\" title=\"2.2 暂时保存更改\"></a>2.2 暂时保存更改</h3><p>   在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</p>\n<p>   使用场景：分支临时切换</p>\n<ul>\n<li><p>存储临时改动：<code>git stash</code> </p>\n<p>使用git add后将文件添加到暂存区后，还没有commit提交。此时使用git stash，将当前分支所有改动剪切到git的剪切板中，文件会回到之前的状态。如果使用git status，会发现显示的是noting to commit，因此便可以切换分支。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731224217.png\" alt=\"image-20210731224217165\"></p>\n</li>\n<li><p>恢复改动：<code>git stash pop</code></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210731224421.png\" alt=\"image-20210731224359238\"></p>\n</li>\n</ul>\n"},{"title":"YAML学习笔记","date":"2021-07-31T11:15:43.000Z","_content":"\n笔记基于 [YAML 语言教程 - 阮一峰的网络日志 (ruanyifeng.com)](https://www.ruanyifeng.com/blog/2016/07/yaml.html)\n\nYAML转JS对象：[YAML parser for JavaScript - JS-YAML (nodeca.github.io)](https://nodeca.github.io/js-yaml/)\n\nYAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。\n\n## 基本语法规则\n\n- 大小写敏感\n- 使用缩进表示层级关系\n- 缩进时不允许使用Tab键，只允许使用空格。\n- 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可\n\n`#` 表示注释，从这个字符一直到行尾，都会被解析器忽略。\n\nYAML 支持的数据结构有三种。\n\n- 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n- 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）\n- 纯量（scalars）：单个的、不可再分的值\n\n## 对象\n\n对象的一组键值对，使用冒号结构表示。\n\n```yaml\nanimal: pets\n```\n\n转为 JavaScript 如下。\n\n ```javascript\n { animal: 'pets' }\n ```\n\nYaml 也允许另一种写法，将所有键值对写成一个行内对象。\n\n```yaml\nhash: {name: Steve, foo: bar}\n```\n\n转为 JavaScript 如下。\n\n```javascript\n{ hash: { name: 'Steve', foo: 'bar' } }\n```\n\n## 数组\n\n一组连词线开头的行，构成一个数组。\n\n```yaml\n- cat\n- dog\n- fish\n```\n\n转为 JavaScript 如下。\n\n```javascript\n[ 'Cat', 'Dog', 'Goldfish' ]\n```\n\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。\n\n```yaml\n- \n - cat\n - dog\n - goldfish\n```\n\n转为 JavaScript 如下。\n\n```javascript\n[ [ 'Cat', 'Dog', 'Goldfish' ] ]\n```\n\n数组也可以采用行内表示法。\n\n```javascript\nanimal: [cat, dog]\n```\n\n转为 JavaScript 如下。\n\n```javascript\n{ animal: [ 'Cat', 'Dog' ] }\n```\n\n## 复合结构\n\n对象和数组可以结合使用，形成复合结构。\n\n```yaml\nlanguages:\n - ruby\n - perl\n - java\nwebsites:\n yaml: yaml.org\n ruby: ruby-lang.org\n python: python.org\n```\n\n转为 JavaScript 如下。\n\n```javascript\n{\n    languages: ['ruby', 'perl', 'java'],\n    websites: { yaml: 'yaml.org', ruby: 'ruby-lang.org', python: 'python.org' }\n}\n```\n\n## 纯量\n\n纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量。\n\n- 字符串\n- 布尔值\n- 整数\n- 浮点数\n- Null\n- 时间\n- 日期\n\n数值直接以字面量的形式表示。\n\n```yaml\nnumber: 12.30\n```\n\n转为JavaScript如下：\n\n```javascript\n{ number: 12.30 }\n```\n\n布尔值用`true`和`false`表示。\n\n```yaml\nisSet: true\n```\n\n转为 JavaScript 如下。\n\n```javascript\n{ isSet: true }\n```\n\n`null`用`~`表示。\n\n```yaml\nparent: ~ \n```\n\n转为 JavaScript 如下。\n\n```javascript\n { parent: null }\n```\n\n时间采用 ISO8601 格式。\n\n```yaml\niso8601: 2001-12-14t21:59:43.10-05:00 \n```\n\n转为 JavaScript 如下。\n\n```js\n{ iso8601: new Date('2001-12-14t21:59:43.10-05:00') }\n```\n\n日期采用复合 iso8601 格式的年、月、日表示。\n\n```yaml\ndate: 1976-07-31\n```\n\n转为 JavaScript 如下。\n\n```js\n{ date: new Date('1976-07-31') }\n```\n\nYAML 允许使用两个感叹号，强制转换数据类型。\n\n```yaml\ne: !!str 123\nf: !!str true\n```\n\n转为 JavaScript 如下。\n\n```js\n{ e: '123', f: 'true' }\n```\n\n## 字符串\n\n字符串是最常见，也是最复杂的一种数据类型。**字符串默认不使用引号表示。**\n\n```yaml\nstr: 这是一行字符串\n```\n\n转为 JavaScript 如下。\n\n ```javascript\n { str: '这是一行字符串' }\n ```\n\n如果字符串之中包含空格或特殊字符，需要放在引号之中。\n\n```yaml\nstr: '内容： 字符串'\n```\n\n转为 JavaScript 如下。\n\n ```javascript\n { str: '内容: 字符串' }\n ```\n\n单引号和双引号都可以使用，**双引号不会对特殊字符转义**。\n\n```yaml\ns1: '内容\\n字符串'\ns2: \"内容\\n字符串\"\n```\n\n转为 JavaScript 如下。\n\n ```javascript\n { s1: '内容\\\\n字符串', s2: '内容\\n字符串' }\n ```\n\n单引号之中如果还有单引号，必须连续使用两个单引号转义。\n\n```yaml\nstr: 'labor''s day'\n```\n\n转为 JavaScript 如下。\n\n```javascript\n{str: 'labor\\'s day'}\n```\n\n字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。\n\n```yaml\nstr: 这是一段\n 多行\n 字符串\n```\n\n转为 JavaScript 如下。\n\n```js\n{ str: '这是一段 多行 字符串' }\n```\n\n多行字符串可以使用`|`保留换行符，也可以使用`>`折叠换行。\n\n```yaml\nthis: |\n Foo\n Bar\nthat: >\n Foo\n Bar\n```\n\n转为 JavaScript 代码如下。\n\n```js\n{ this: 'Foo\\nBar\\n', that: 'Foo Bar\\n' }\n```\n\n`+`表示保留文字块末尾的换行，`-`表示删除字符串末尾的换行。\n\n```yaml\ns1: |\n Foo\nS2: |+\n Foo\n \nS3: |-\n Foo\ns4: |+\n Foo\n```\n\n转为 JavaScript 代码如下。\n\n```js\n{ s1: 'Foo\\n', s2: 'Foo\\n\\n', s3: 'Foo', s4:'Foo\\n' }\n```\n\n字符串之中可以插入 HTML 标记。\n\n```yaml\nmessage: |\n  <p style=\"color: red\">\n    段落\n  </p>\n```\n\n转为JavaScript如下。\n\n```js\n{ message: '\\n<p style=\"color: red\">\\n  段落\\n</p>\\n' }\n```\n\n## 引用\n\n锚点`&`和别名`*`，可以用来引用。\n\n ```javascript\n defaults: &defaults\n   adapter:  postgres\n   host:     localhost\n \n development:\n   database: myapp_development\n   <<: *defaults\n \n test:\n   database: myapp_test\n   <<: *defaults\n ```\n\n等同于下面的代码。\n\n ```javascript\n defaults:\n   adapter:  postgres\n   host:     localhost\n \n development:\n   database: myapp_development\n   adapter:  postgres\n   host:     localhost\n \n test:\n   database: myapp_test\n   adapter:  postgres\n   host:     localhost\n ```\n\n`&`用来建立锚点（`defaults`），`<<`表示合并到当前数据，`*`用来引用锚点。\n\n下面是另一个例子。\n\n ```javascript\n - &showell Steve \n - Clark \n - Brian \n - Oren \n - *showell \n ```\n\n转为 JavaScript 代码如下。\n\n ```javascript\n [ 'Steve', 'Clark', 'Brian', 'Oren', 'Steve' ]\n ```\n","source":"_posts/YAML学习笔记.md","raw":"---\ntitle: YAML学习笔记\ndate: 2021-07-31 19:15:43\ntags: YAML\n---\n\n笔记基于 [YAML 语言教程 - 阮一峰的网络日志 (ruanyifeng.com)](https://www.ruanyifeng.com/blog/2016/07/yaml.html)\n\nYAML转JS对象：[YAML parser for JavaScript - JS-YAML (nodeca.github.io)](https://nodeca.github.io/js-yaml/)\n\nYAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。\n\n## 基本语法规则\n\n- 大小写敏感\n- 使用缩进表示层级关系\n- 缩进时不允许使用Tab键，只允许使用空格。\n- 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可\n\n`#` 表示注释，从这个字符一直到行尾，都会被解析器忽略。\n\nYAML 支持的数据结构有三种。\n\n- 对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n- 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）\n- 纯量（scalars）：单个的、不可再分的值\n\n## 对象\n\n对象的一组键值对，使用冒号结构表示。\n\n```yaml\nanimal: pets\n```\n\n转为 JavaScript 如下。\n\n ```javascript\n { animal: 'pets' }\n ```\n\nYaml 也允许另一种写法，将所有键值对写成一个行内对象。\n\n```yaml\nhash: {name: Steve, foo: bar}\n```\n\n转为 JavaScript 如下。\n\n```javascript\n{ hash: { name: 'Steve', foo: 'bar' } }\n```\n\n## 数组\n\n一组连词线开头的行，构成一个数组。\n\n```yaml\n- cat\n- dog\n- fish\n```\n\n转为 JavaScript 如下。\n\n```javascript\n[ 'Cat', 'Dog', 'Goldfish' ]\n```\n\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。\n\n```yaml\n- \n - cat\n - dog\n - goldfish\n```\n\n转为 JavaScript 如下。\n\n```javascript\n[ [ 'Cat', 'Dog', 'Goldfish' ] ]\n```\n\n数组也可以采用行内表示法。\n\n```javascript\nanimal: [cat, dog]\n```\n\n转为 JavaScript 如下。\n\n```javascript\n{ animal: [ 'Cat', 'Dog' ] }\n```\n\n## 复合结构\n\n对象和数组可以结合使用，形成复合结构。\n\n```yaml\nlanguages:\n - ruby\n - perl\n - java\nwebsites:\n yaml: yaml.org\n ruby: ruby-lang.org\n python: python.org\n```\n\n转为 JavaScript 如下。\n\n```javascript\n{\n    languages: ['ruby', 'perl', 'java'],\n    websites: { yaml: 'yaml.org', ruby: 'ruby-lang.org', python: 'python.org' }\n}\n```\n\n## 纯量\n\n纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量。\n\n- 字符串\n- 布尔值\n- 整数\n- 浮点数\n- Null\n- 时间\n- 日期\n\n数值直接以字面量的形式表示。\n\n```yaml\nnumber: 12.30\n```\n\n转为JavaScript如下：\n\n```javascript\n{ number: 12.30 }\n```\n\n布尔值用`true`和`false`表示。\n\n```yaml\nisSet: true\n```\n\n转为 JavaScript 如下。\n\n```javascript\n{ isSet: true }\n```\n\n`null`用`~`表示。\n\n```yaml\nparent: ~ \n```\n\n转为 JavaScript 如下。\n\n```javascript\n { parent: null }\n```\n\n时间采用 ISO8601 格式。\n\n```yaml\niso8601: 2001-12-14t21:59:43.10-05:00 \n```\n\n转为 JavaScript 如下。\n\n```js\n{ iso8601: new Date('2001-12-14t21:59:43.10-05:00') }\n```\n\n日期采用复合 iso8601 格式的年、月、日表示。\n\n```yaml\ndate: 1976-07-31\n```\n\n转为 JavaScript 如下。\n\n```js\n{ date: new Date('1976-07-31') }\n```\n\nYAML 允许使用两个感叹号，强制转换数据类型。\n\n```yaml\ne: !!str 123\nf: !!str true\n```\n\n转为 JavaScript 如下。\n\n```js\n{ e: '123', f: 'true' }\n```\n\n## 字符串\n\n字符串是最常见，也是最复杂的一种数据类型。**字符串默认不使用引号表示。**\n\n```yaml\nstr: 这是一行字符串\n```\n\n转为 JavaScript 如下。\n\n ```javascript\n { str: '这是一行字符串' }\n ```\n\n如果字符串之中包含空格或特殊字符，需要放在引号之中。\n\n```yaml\nstr: '内容： 字符串'\n```\n\n转为 JavaScript 如下。\n\n ```javascript\n { str: '内容: 字符串' }\n ```\n\n单引号和双引号都可以使用，**双引号不会对特殊字符转义**。\n\n```yaml\ns1: '内容\\n字符串'\ns2: \"内容\\n字符串\"\n```\n\n转为 JavaScript 如下。\n\n ```javascript\n { s1: '内容\\\\n字符串', s2: '内容\\n字符串' }\n ```\n\n单引号之中如果还有单引号，必须连续使用两个单引号转义。\n\n```yaml\nstr: 'labor''s day'\n```\n\n转为 JavaScript 如下。\n\n```javascript\n{str: 'labor\\'s day'}\n```\n\n字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。\n\n```yaml\nstr: 这是一段\n 多行\n 字符串\n```\n\n转为 JavaScript 如下。\n\n```js\n{ str: '这是一段 多行 字符串' }\n```\n\n多行字符串可以使用`|`保留换行符，也可以使用`>`折叠换行。\n\n```yaml\nthis: |\n Foo\n Bar\nthat: >\n Foo\n Bar\n```\n\n转为 JavaScript 代码如下。\n\n```js\n{ this: 'Foo\\nBar\\n', that: 'Foo Bar\\n' }\n```\n\n`+`表示保留文字块末尾的换行，`-`表示删除字符串末尾的换行。\n\n```yaml\ns1: |\n Foo\nS2: |+\n Foo\n \nS3: |-\n Foo\ns4: |+\n Foo\n```\n\n转为 JavaScript 代码如下。\n\n```js\n{ s1: 'Foo\\n', s2: 'Foo\\n\\n', s3: 'Foo', s4:'Foo\\n' }\n```\n\n字符串之中可以插入 HTML 标记。\n\n```yaml\nmessage: |\n  <p style=\"color: red\">\n    段落\n  </p>\n```\n\n转为JavaScript如下。\n\n```js\n{ message: '\\n<p style=\"color: red\">\\n  段落\\n</p>\\n' }\n```\n\n## 引用\n\n锚点`&`和别名`*`，可以用来引用。\n\n ```javascript\n defaults: &defaults\n   adapter:  postgres\n   host:     localhost\n \n development:\n   database: myapp_development\n   <<: *defaults\n \n test:\n   database: myapp_test\n   <<: *defaults\n ```\n\n等同于下面的代码。\n\n ```javascript\n defaults:\n   adapter:  postgres\n   host:     localhost\n \n development:\n   database: myapp_development\n   adapter:  postgres\n   host:     localhost\n \n test:\n   database: myapp_test\n   adapter:  postgres\n   host:     localhost\n ```\n\n`&`用来建立锚点（`defaults`），`<<`表示合并到当前数据，`*`用来引用锚点。\n\n下面是另一个例子。\n\n ```javascript\n - &showell Steve \n - Clark \n - Brian \n - Oren \n - *showell \n ```\n\n转为 JavaScript 代码如下。\n\n ```javascript\n [ 'Steve', 'Clark', 'Brian', 'Oren', 'Steve' ]\n ```\n","slug":"YAML学习笔记","published":1,"updated":"2021-07-31T13:56:46.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrrwibqj0001m4unaysnaa6p","content":"<p>笔记基于 <a href=\"https://www.ruanyifeng.com/blog/2016/07/yaml.html\">YAML 语言教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>\n<p>YAML转JS对象：<a href=\"https://nodeca.github.io/js-yaml/\">YAML parser for JavaScript - JS-YAML (nodeca.github.io)</a></p>\n<p>YAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。</p>\n<h2 id=\"基本语法规则\"><a href=\"#基本语法规则\" class=\"headerlink\" title=\"基本语法规则\"></a>基本语法规则</h2><ul>\n<li>大小写敏感</li>\n<li>使用缩进表示层级关系</li>\n<li>缩进时不允许使用Tab键，只允许使用空格。</li>\n<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>\n</ul>\n<p><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p>\n<p>YAML 支持的数据结构有三种。</p>\n<ul>\n<li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li>\n<li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li>\n<li>纯量（scalars）：单个的、不可再分的值</li>\n</ul>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>对象的一组键值对，使用冒号结构表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">animal:</span> <span class=\"hljs-string\">pets</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">animal</span>: <span class=\"hljs-string\">&#x27;pets&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>Yaml 也允许另一种写法，将所有键值对写成一个行内对象。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">hash:</span> &#123;<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Steve</span>, <span class=\"hljs-attr\">foo:</span> <span class=\"hljs-string\">bar</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">hash</span>: &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Steve&#x27;</span>, <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span> &#125; &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>一组连词线开头的行，构成一个数组。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cat</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dog</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">fish</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">[ <span class=\"hljs-string\">&#x27;Cat&#x27;</span>, <span class=\"hljs-string\">&#x27;Dog&#x27;</span>, <span class=\"hljs-string\">&#x27;Goldfish&#x27;</span> ]<br></code></pre></td></tr></table></figure>\n\n<p>数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-bullet\">-</span> <br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cat</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dog</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">goldfish</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">[ [ <span class=\"hljs-string\">&#x27;Cat&#x27;</span>, <span class=\"hljs-string\">&#x27;Dog&#x27;</span>, <span class=\"hljs-string\">&#x27;Goldfish&#x27;</span> ] ]<br></code></pre></td></tr></table></figure>\n\n<p>数组也可以采用行内表示法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">animal: [cat, dog]<br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">animal</span>: [ <span class=\"hljs-string\">&#x27;Cat&#x27;</span>, <span class=\"hljs-string\">&#x27;Dog&#x27;</span> ] &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"复合结构\"><a href=\"#复合结构\" class=\"headerlink\" title=\"复合结构\"></a>复合结构</h2><p>对象和数组可以结合使用，形成复合结构。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">languages:</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ruby</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">perl</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">java</span><br><span class=\"hljs-attr\">websites:</span><br> <span class=\"hljs-attr\">yaml:</span> <span class=\"hljs-string\">yaml.org</span><br> <span class=\"hljs-attr\">ruby:</span> <span class=\"hljs-string\">ruby-lang.org</span><br> <span class=\"hljs-attr\">python:</span> <span class=\"hljs-string\">python.org</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>    <span class=\"hljs-attr\">languages</span>: [<span class=\"hljs-string\">&#x27;ruby&#x27;</span>, <span class=\"hljs-string\">&#x27;perl&#x27;</span>, <span class=\"hljs-string\">&#x27;java&#x27;</span>],<br>    <span class=\"hljs-attr\">websites</span>: &#123; <span class=\"hljs-attr\">yaml</span>: <span class=\"hljs-string\">&#x27;yaml.org&#x27;</span>, <span class=\"hljs-attr\">ruby</span>: <span class=\"hljs-string\">&#x27;ruby-lang.org&#x27;</span>, <span class=\"hljs-attr\">python</span>: <span class=\"hljs-string\">&#x27;python.org&#x27;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"纯量\"><a href=\"#纯量\" class=\"headerlink\" title=\"纯量\"></a>纯量</h2><p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量。</p>\n<ul>\n<li>字符串</li>\n<li>布尔值</li>\n<li>整数</li>\n<li>浮点数</li>\n<li>Null</li>\n<li>时间</li>\n<li>日期</li>\n</ul>\n<p>数值直接以字面量的形式表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">12.30</span><br></code></pre></td></tr></table></figure>\n\n<p>转为JavaScript如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">number</span>: <span class=\"hljs-number\">12.30</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>布尔值用<code>true</code>和<code>false</code>表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">isSet:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">isSet</span>: <span class=\"hljs-literal\">true</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>null</code>用<code>~</code>表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">parent:</span> <span class=\"hljs-string\">~</span> <br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-literal\">null</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>时间采用 ISO8601 格式。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">iso8601:</span> <span class=\"hljs-number\">2001-12-14t21:59:43.10-05:00</span> <br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">iso8601</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2001-12-14t21:59:43.10-05:00&#x27;</span>) &#125;<br></code></pre></td></tr></table></figure>\n\n<p>日期采用复合 iso8601 格式的年、月、日表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">date:</span> <span class=\"hljs-number\">1976-07-31</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">date</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;1976-07-31&#x27;</span>) &#125;<br></code></pre></td></tr></table></figure>\n\n<p>YAML 允许使用两个感叹号，强制转换数据类型。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">e:</span> <span class=\"hljs-type\">!!str</span> <span class=\"hljs-number\">123</span><br><span class=\"hljs-attr\">f:</span> <span class=\"hljs-type\">!!str</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">e</span>: <span class=\"hljs-string\">&#x27;123&#x27;</span>, <span class=\"hljs-attr\">f</span>: <span class=\"hljs-string\">&#x27;true&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>字符串是最常见，也是最复杂的一种数据类型。<strong>字符串默认不使用引号表示。</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">str:</span> <span class=\"hljs-string\">这是一行字符串</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">str</span>: <span class=\"hljs-string\">&#x27;这是一行字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果字符串之中包含空格或特殊字符，需要放在引号之中。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">str:</span> <span class=\"hljs-string\">&#x27;内容： 字符串&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">str</span>: <span class=\"hljs-string\">&#x27;内容: 字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>单引号和双引号都可以使用，<strong>双引号不会对特殊字符转义</strong>。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">s1:</span> <span class=\"hljs-string\">&#x27;内容\\n字符串&#x27;</span><br><span class=\"hljs-attr\">s2:</span> <span class=\"hljs-string\">&quot;内容\\n字符串&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">s1</span>: <span class=\"hljs-string\">&#x27;内容\\\\n字符串&#x27;</span>, <span class=\"hljs-attr\">s2</span>: <span class=\"hljs-string\">&#x27;内容\\n字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>单引号之中如果还有单引号，必须连续使用两个单引号转义。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">str:</span> <span class=\"hljs-string\">&#x27;labor&#x27;</span><span class=\"hljs-string\">&#x27;s day&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<span class=\"hljs-attr\">str</span>: <span class=\"hljs-string\">&#x27;labor\\&#x27;s day&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">str:</span> <span class=\"hljs-string\">这是一段</span><br> <span class=\"hljs-string\">多行</span><br> <span class=\"hljs-string\">字符串</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">str</span>: <span class=\"hljs-string\">&#x27;这是一段 多行 字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>多行字符串可以使用<code>|</code>保留换行符，也可以使用<code>&gt;</code>折叠换行。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">this:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\"> Foo</span><br><span class=\"hljs-string\"> Bar</span><br><span class=\"hljs-string\"></span><span class=\"hljs-attr\">that:</span> <span class=\"hljs-string\">&gt;</span><br><span class=\"hljs-string\"> Foo</span><br><span class=\"hljs-string\"> Bar</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">this</span>: <span class=\"hljs-string\">&#x27;Foo\\nBar\\n&#x27;</span>, <span class=\"hljs-attr\">that</span>: <span class=\"hljs-string\">&#x27;Foo Bar\\n&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>+</code>表示保留文字块末尾的换行，<code>-</code>表示删除字符串末尾的换行。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">s1:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\"> Foo</span><br><span class=\"hljs-string\"></span><span class=\"hljs-attr\">S2:</span> <span class=\"hljs-string\">|+</span><br><span class=\"hljs-string\"> Foo</span><br><span class=\"hljs-string\"></span> <br><span class=\"hljs-attr\">S3:</span> <span class=\"hljs-string\">|-</span><br><span class=\"hljs-string\"> Foo</span><br><span class=\"hljs-string\"></span><span class=\"hljs-attr\">s4:</span> <span class=\"hljs-string\">|+</span><br> <span class=\"hljs-string\">Foo</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">s1</span>: <span class=\"hljs-string\">&#x27;Foo\\n&#x27;</span>, <span class=\"hljs-attr\">s2</span>: <span class=\"hljs-string\">&#x27;Foo\\n\\n&#x27;</span>, <span class=\"hljs-attr\">s3</span>: <span class=\"hljs-string\">&#x27;Foo&#x27;</span>, <span class=\"hljs-attr\">s4</span>:<span class=\"hljs-string\">&#x27;Foo\\n&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>字符串之中可以插入 HTML 标记。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">message:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">  &lt;p style=&quot;color: red&quot;&gt;</span><br><span class=\"hljs-string\">    段落</span><br><span class=\"hljs-string\">  &lt;/p&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>转为JavaScript如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;\\n&lt;p style=&quot;color: red&quot;&gt;\\n  段落\\n&lt;/p&gt;\\n&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>锚点<code>&amp;</code>和别名<code>*</code>，可以用来引用。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">defaults: &amp;defaults<br>  <span class=\"hljs-attr\">adapter</span>:  postgres<br>  <span class=\"hljs-attr\">host</span>:     localhost<br><br><span class=\"hljs-attr\">development</span>:<br>  database: myapp_development<br>  &lt;&lt;: *defaults<br><br><span class=\"hljs-attr\">test</span>:<br>  database: myapp_test<br>  &lt;&lt;: *defaults<br></code></pre></td></tr></table></figure>\n\n<p>等同于下面的代码。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">defaults:<br>  adapter:  postgres<br>  <span class=\"hljs-attr\">host</span>:     localhost<br><br><span class=\"hljs-attr\">development</span>:<br>  database: myapp_development<br>  <span class=\"hljs-attr\">adapter</span>:  postgres<br>  <span class=\"hljs-attr\">host</span>:     localhost<br><br><span class=\"hljs-attr\">test</span>:<br>  database: myapp_test<br>  <span class=\"hljs-attr\">adapter</span>:  postgres<br>  <span class=\"hljs-attr\">host</span>:     localhost<br></code></pre></td></tr></table></figure>\n\n<p><code>&amp;</code>用来建立锚点（<code>defaults</code>），<code>&lt;&lt;</code>表示合并到当前数据，<code>*</code>用来引用锚点。</p>\n<p>下面是另一个例子。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">- &amp;showell Steve <br>- Clark <br>- Brian <br>- Oren <br>- *showell <br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 代码如下。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">[ <span class=\"hljs-string\">&#x27;Steve&#x27;</span>, <span class=\"hljs-string\">&#x27;Clark&#x27;</span>, <span class=\"hljs-string\">&#x27;Brian&#x27;</span>, <span class=\"hljs-string\">&#x27;Oren&#x27;</span>, <span class=\"hljs-string\">&#x27;Steve&#x27;</span> ]<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>笔记基于 <a href=\"https://www.ruanyifeng.com/blog/2016/07/yaml.html\">YAML 语言教程 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>\n<p>YAML转JS对象：<a href=\"https://nodeca.github.io/js-yaml/\">YAML parser for JavaScript - JS-YAML (nodeca.github.io)</a></p>\n<p>YAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。</p>\n<h2 id=\"基本语法规则\"><a href=\"#基本语法规则\" class=\"headerlink\" title=\"基本语法规则\"></a>基本语法规则</h2><ul>\n<li>大小写敏感</li>\n<li>使用缩进表示层级关系</li>\n<li>缩进时不允许使用Tab键，只允许使用空格。</li>\n<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>\n</ul>\n<p><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p>\n<p>YAML 支持的数据结构有三种。</p>\n<ul>\n<li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li>\n<li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li>\n<li>纯量（scalars）：单个的、不可再分的值</li>\n</ul>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>对象的一组键值对，使用冒号结构表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">animal:</span> <span class=\"hljs-string\">pets</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">animal</span>: <span class=\"hljs-string\">&#x27;pets&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>Yaml 也允许另一种写法，将所有键值对写成一个行内对象。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">hash:</span> &#123;<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Steve</span>, <span class=\"hljs-attr\">foo:</span> <span class=\"hljs-string\">bar</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">hash</span>: &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Steve&#x27;</span>, <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">&#x27;bar&#x27;</span> &#125; &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>一组连词线开头的行，构成一个数组。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cat</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dog</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">fish</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">[ <span class=\"hljs-string\">&#x27;Cat&#x27;</span>, <span class=\"hljs-string\">&#x27;Dog&#x27;</span>, <span class=\"hljs-string\">&#x27;Goldfish&#x27;</span> ]<br></code></pre></td></tr></table></figure>\n\n<p>数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-bullet\">-</span> <br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">cat</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dog</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">goldfish</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">[ [ <span class=\"hljs-string\">&#x27;Cat&#x27;</span>, <span class=\"hljs-string\">&#x27;Dog&#x27;</span>, <span class=\"hljs-string\">&#x27;Goldfish&#x27;</span> ] ]<br></code></pre></td></tr></table></figure>\n\n<p>数组也可以采用行内表示法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">animal: [cat, dog]<br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">animal</span>: [ <span class=\"hljs-string\">&#x27;Cat&#x27;</span>, <span class=\"hljs-string\">&#x27;Dog&#x27;</span> ] &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"复合结构\"><a href=\"#复合结构\" class=\"headerlink\" title=\"复合结构\"></a>复合结构</h2><p>对象和数组可以结合使用，形成复合结构。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">languages:</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ruby</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">perl</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">java</span><br><span class=\"hljs-attr\">websites:</span><br> <span class=\"hljs-attr\">yaml:</span> <span class=\"hljs-string\">yaml.org</span><br> <span class=\"hljs-attr\">ruby:</span> <span class=\"hljs-string\">ruby-lang.org</span><br> <span class=\"hljs-attr\">python:</span> <span class=\"hljs-string\">python.org</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>    <span class=\"hljs-attr\">languages</span>: [<span class=\"hljs-string\">&#x27;ruby&#x27;</span>, <span class=\"hljs-string\">&#x27;perl&#x27;</span>, <span class=\"hljs-string\">&#x27;java&#x27;</span>],<br>    <span class=\"hljs-attr\">websites</span>: &#123; <span class=\"hljs-attr\">yaml</span>: <span class=\"hljs-string\">&#x27;yaml.org&#x27;</span>, <span class=\"hljs-attr\">ruby</span>: <span class=\"hljs-string\">&#x27;ruby-lang.org&#x27;</span>, <span class=\"hljs-attr\">python</span>: <span class=\"hljs-string\">&#x27;python.org&#x27;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"纯量\"><a href=\"#纯量\" class=\"headerlink\" title=\"纯量\"></a>纯量</h2><p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量。</p>\n<ul>\n<li>字符串</li>\n<li>布尔值</li>\n<li>整数</li>\n<li>浮点数</li>\n<li>Null</li>\n<li>时间</li>\n<li>日期</li>\n</ul>\n<p>数值直接以字面量的形式表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">number:</span> <span class=\"hljs-number\">12.30</span><br></code></pre></td></tr></table></figure>\n\n<p>转为JavaScript如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">number</span>: <span class=\"hljs-number\">12.30</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>布尔值用<code>true</code>和<code>false</code>表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">isSet:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">isSet</span>: <span class=\"hljs-literal\">true</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>null</code>用<code>~</code>表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">parent:</span> <span class=\"hljs-string\">~</span> <br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-literal\">null</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>时间采用 ISO8601 格式。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">iso8601:</span> <span class=\"hljs-number\">2001-12-14t21:59:43.10-05:00</span> <br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">iso8601</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2001-12-14t21:59:43.10-05:00&#x27;</span>) &#125;<br></code></pre></td></tr></table></figure>\n\n<p>日期采用复合 iso8601 格式的年、月、日表示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">date:</span> <span class=\"hljs-number\">1976-07-31</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">date</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;1976-07-31&#x27;</span>) &#125;<br></code></pre></td></tr></table></figure>\n\n<p>YAML 允许使用两个感叹号，强制转换数据类型。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">e:</span> <span class=\"hljs-type\">!!str</span> <span class=\"hljs-number\">123</span><br><span class=\"hljs-attr\">f:</span> <span class=\"hljs-type\">!!str</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">e</span>: <span class=\"hljs-string\">&#x27;123&#x27;</span>, <span class=\"hljs-attr\">f</span>: <span class=\"hljs-string\">&#x27;true&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>字符串是最常见，也是最复杂的一种数据类型。<strong>字符串默认不使用引号表示。</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">str:</span> <span class=\"hljs-string\">这是一行字符串</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">str</span>: <span class=\"hljs-string\">&#x27;这是一行字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果字符串之中包含空格或特殊字符，需要放在引号之中。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">str:</span> <span class=\"hljs-string\">&#x27;内容： 字符串&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">str</span>: <span class=\"hljs-string\">&#x27;内容: 字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>单引号和双引号都可以使用，<strong>双引号不会对特殊字符转义</strong>。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">s1:</span> <span class=\"hljs-string\">&#x27;内容\\n字符串&#x27;</span><br><span class=\"hljs-attr\">s2:</span> <span class=\"hljs-string\">&quot;内容\\n字符串&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123; <span class=\"hljs-attr\">s1</span>: <span class=\"hljs-string\">&#x27;内容\\\\n字符串&#x27;</span>, <span class=\"hljs-attr\">s2</span>: <span class=\"hljs-string\">&#x27;内容\\n字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>单引号之中如果还有单引号，必须连续使用两个单引号转义。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">str:</span> <span class=\"hljs-string\">&#x27;labor&#x27;</span><span class=\"hljs-string\">&#x27;s day&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<span class=\"hljs-attr\">str</span>: <span class=\"hljs-string\">&#x27;labor\\&#x27;s day&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">str:</span> <span class=\"hljs-string\">这是一段</span><br> <span class=\"hljs-string\">多行</span><br> <span class=\"hljs-string\">字符串</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">str</span>: <span class=\"hljs-string\">&#x27;这是一段 多行 字符串&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>多行字符串可以使用<code>|</code>保留换行符，也可以使用<code>&gt;</code>折叠换行。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">this:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\"> Foo</span><br><span class=\"hljs-string\"> Bar</span><br><span class=\"hljs-string\"></span><span class=\"hljs-attr\">that:</span> <span class=\"hljs-string\">&gt;</span><br><span class=\"hljs-string\"> Foo</span><br><span class=\"hljs-string\"> Bar</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">this</span>: <span class=\"hljs-string\">&#x27;Foo\\nBar\\n&#x27;</span>, <span class=\"hljs-attr\">that</span>: <span class=\"hljs-string\">&#x27;Foo Bar\\n&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>+</code>表示保留文字块末尾的换行，<code>-</code>表示删除字符串末尾的换行。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">s1:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\"> Foo</span><br><span class=\"hljs-string\"></span><span class=\"hljs-attr\">S2:</span> <span class=\"hljs-string\">|+</span><br><span class=\"hljs-string\"> Foo</span><br><span class=\"hljs-string\"></span> <br><span class=\"hljs-attr\">S3:</span> <span class=\"hljs-string\">|-</span><br><span class=\"hljs-string\"> Foo</span><br><span class=\"hljs-string\"></span><span class=\"hljs-attr\">s4:</span> <span class=\"hljs-string\">|+</span><br> <span class=\"hljs-string\">Foo</span><br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">s1</span>: <span class=\"hljs-string\">&#x27;Foo\\n&#x27;</span>, <span class=\"hljs-attr\">s2</span>: <span class=\"hljs-string\">&#x27;Foo\\n\\n&#x27;</span>, <span class=\"hljs-attr\">s3</span>: <span class=\"hljs-string\">&#x27;Foo&#x27;</span>, <span class=\"hljs-attr\">s4</span>:<span class=\"hljs-string\">&#x27;Foo\\n&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<p>字符串之中可以插入 HTML 标记。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">message:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">  &lt;p style=&quot;color: red&quot;&gt;</span><br><span class=\"hljs-string\">    段落</span><br><span class=\"hljs-string\">  &lt;/p&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>转为JavaScript如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123; <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;\\n&lt;p style=&quot;color: red&quot;&gt;\\n  段落\\n&lt;/p&gt;\\n&#x27;</span> &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>锚点<code>&amp;</code>和别名<code>*</code>，可以用来引用。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">defaults: &amp;defaults<br>  <span class=\"hljs-attr\">adapter</span>:  postgres<br>  <span class=\"hljs-attr\">host</span>:     localhost<br><br><span class=\"hljs-attr\">development</span>:<br>  database: myapp_development<br>  &lt;&lt;: *defaults<br><br><span class=\"hljs-attr\">test</span>:<br>  database: myapp_test<br>  &lt;&lt;: *defaults<br></code></pre></td></tr></table></figure>\n\n<p>等同于下面的代码。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">defaults:<br>  adapter:  postgres<br>  <span class=\"hljs-attr\">host</span>:     localhost<br><br><span class=\"hljs-attr\">development</span>:<br>  database: myapp_development<br>  <span class=\"hljs-attr\">adapter</span>:  postgres<br>  <span class=\"hljs-attr\">host</span>:     localhost<br><br><span class=\"hljs-attr\">test</span>:<br>  database: myapp_test<br>  <span class=\"hljs-attr\">adapter</span>:  postgres<br>  <span class=\"hljs-attr\">host</span>:     localhost<br></code></pre></td></tr></table></figure>\n\n<p><code>&amp;</code>用来建立锚点（<code>defaults</code>），<code>&lt;&lt;</code>表示合并到当前数据，<code>*</code>用来引用锚点。</p>\n<p>下面是另一个例子。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">- &amp;showell Steve <br>- Clark <br>- Brian <br>- Oren <br>- *showell <br></code></pre></td></tr></table></figure>\n\n<p>转为 JavaScript 代码如下。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">[ <span class=\"hljs-string\">&#x27;Steve&#x27;</span>, <span class=\"hljs-string\">&#x27;Clark&#x27;</span>, <span class=\"hljs-string\">&#x27;Brian&#x27;</span>, <span class=\"hljs-string\">&#x27;Oren&#x27;</span>, <span class=\"hljs-string\">&#x27;Steve&#x27;</span> ]<br></code></pre></td></tr></table></figure>\n"},{"title":"axios学习","date":"2021-08-01T03:56:47.000Z","_content":"\n笔记基于axios中文网：https://axios-http.com/zh/docs/intro\n\ngithub地址：https://github.com/axios/axios\n\nAxios 是一个基于 *[promise](https://javascript.info/promise-basics)* 网络请求库，作用于[`node.js`](https://nodejs.org/) 和浏览器中。在服务端它使用原生 node.js `http` 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。\n\n它具有一下特征：\n\n- 从浏览器创建 [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)\n- 从 node.js 创建 [http](http://nodejs.org/api/http.html) 请求\n- 支持 [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- 拦截请求和响应\n- 转换请求和响应数据\n- 取消请求\n- 自动转换JSON数据\n- 客户端支持防御[XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n## 用法举例\n\n发起多个并发请求\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });\n```\n\n支持async/await语法，如发送多个异步请求，第一个请求的结果作为第二个请求的参数。\n\n```js\naxios.defaults.baseURL='http://localhost'\nasync function queryData(){\n    let info=await axios.get('async1');\n    let res=await axios.get('async2?info='+info.data);\n    return res;\n}\n// async 函数的返回值是promise对象！\nqueryData().then(response=>{\n    console.log(response.data);//hello async1\n});\n```\n\n> 接口配置\n\n```js\napp.get('/async1',(req,res)=>{\n    res.send('async1');\n})\napp.get('/async2',(req,res)=>{\n    // 如果请求地址存在参数\n    if(req.query){\n        return res.send('hello '+req.query.info)\n    }\n    res.send('hello');\n})\n```\n\n\n\n\n\n\n\n## 常用API\n\n### GET请求\n\n可以通过url或者params选项传递参数。\n\n- 通过url传递参数\n\n  ```js\n  axios.get('http://localhost/axios?id=12').then(response=>{\n      console.log(response.data);\n  });\n  axios.get('http://localhost/axios/45').then(response=>{\n      console.log(response.data);\n  });\n  ```\n\n  上述请求分别调用第一个和第二接口\n\n  ```js\n  app.get('/axios',(req,res)=>{\n      res.send('axios get '+req.query.id);\n  })\n  app.get('/axios/:id',(req,res)=>{\n      res.send('restful get '+req.params.id);\n  })\n  ```\n\n- 通过params传递参数\n\n  ```js\n  axios.get('http://localhost/axios',{\n      params:{id:67}\n  }).then(response=>{\n      console.log(response.data);\n  })\n  ```\n\t\n  此时会调用第一个接口。\n  \n  最后的结果为：\n  \n  ![image-20210801150053066](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801150100.png)\n\n\n\n### DELETE传递参数\n\n参数传递与GET方式类似，支持通过url或者axios的params传递参数。\n\n以下示例通过axios的params进行传参：\n\n```js\naxios.delete('http://localhost/axios',{\n    params:{\n        name:'jiaqi'\n    }\n}).then(response=>{\n    console.log(response.data);\n})\n```\n\n> 接口\n\n```js\napp.delete('/axios',(req,res)=>{\n    res.send('axios delete name: '+req.query.name)\n})\n```\n\n### POST 请求\n\n- 通过选项传递参数（默认传递的是json格式的数据）\n\n  ```js\n  axios.post('axios',{\n      uname:'tom',\n      pwd:123\n  }).then(response=>{\n      console.log(response.data);\n  })\n  ```\n\n  > 后台接口\n\n  ```js\n  const bodyParser = require('body-parser')\n  app.use(bodyParser.urlencoded({extended:false}));\n  app.use(bodyParser.json());\n  \n  //需要使用bodyParser来解析post传递的参数\n  \n  app.post('/axios',(req,res)=>{\n      res.send('axios post '+req.body.name+'---'+req.body.pwd);\n  })\n  ```\n\n- 传递表单类型的数据\n\n  通过[URLSearchParams](https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams)传递参数（application/x-www-urlencoded）\n\n  > **`URLSearchParams`** 接口定义了一些实用的方法来处理 URL 的查询字符串。\n\n  ```js\n  var params=new URLSearchParams();\n  params.append('name','zhangsan');\n  params.append('pwd','12345');\n  axios.post('http://localhost/axios',params).then(response=>{\n      console.log(response.data);\n  })\n  ```\n\n  使用的接口与前面的一样，故不赘述。\n\n- 除了URLSearchParams，还可以通过其他方式编码，具体详见https://axios-http.com/zh/docs/urlencoded。\n\n  ![image-20210801153632594](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801153639.png)\n\n### PUT请求\n\n参数传递与POST请求相似。\n\n```js\n// PUT 请求\naxios.put('http://localhost/axios/494',{\n    name:'王五',\n    pwd:903\n}).then(response=>{\n    console.log(response.data);\n})\n```\n\n> 接口\n\n```js\napp.put('/axios/:id',(req,res)=>{\n    res.send('axios put '+req.params.id+'-----'+req.body.name+'---'+req.body.pwd);\n})\n```\n\n\n\n## 响应结构\n\n```js\n{\n  // `data` 由服务器提供的响应\n  data: {},\n\n  // `status` 来自服务器响应的 HTTP 状态码\n  status: 200,\n\n  // `statusText` 来自服务器响应的 HTTP 状态信息\n  statusText: 'OK',\n\n  // `headers` 是服务器响应头\n  // 所有的 header 名称都是小写，而且可以使用方括号语法访问\n  // 例如: `response.headers['content-type']`\n  headers: {},\n\n  // `config` 是 `axios` 请求的配置信息\n  config: {},\n\n  // `request` 是生成此响应的请求\n  // 在node.js中它是最后一个ClientRequest实例 (in redirects)，\n  // 在浏览器中则是 XMLHttpRequest 实例\n  request: {}\n}\n\n```\n\n当使用 then 时，将接收如下响应:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\n## 默认配置\n\n可以指定默认配置，它将作用于每个请求。\n\n### 全局 axios 默认值\n\n```js\n//配置公共的请求头\naxios.defaults.baseURL = 'https://api.example.com';\n// 配置 超时时间\naxios.defaults.timeout = 2500;\n// 配置公共的请求头\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n// 配置公共的 post 的 Content-Type\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n// 设置请求头\naxios.defaults.headers['mytoken']='alsjffsfjslkk';\n\n```\n\n使用举例\n\n\n```js\n// 设置请求头信息\n// 需要服务器允许传递mytoken这个header\naxios.defaults.headers['mytoken']='hello';\n// 设置基准url地址\naxios.defaults.baseURL='http://localhost/';\naxios.get('/axios-json').then(response=>{\n    console.log(response.data.name);\n})\n```\n\n关于请求头的设置，服务器端需要允许设置某个header才行。必须要在服务器中允许名为mytoken的请求头，`    res.header(\"Access-Control-Allow-Headers\", \"mytoken\");`\n\n此时的服务器设置如下：\n\n```js\n//设置跨域请求\napp.all('*', function (req, res, next) {\n    //设置请求头\n    //允许所有来源访问\n    res.header('Access-Control-Allow-Origin', '*')\n    \n    res.header(\"Access-Control-Allow-Headers\", \" Origin, X-Requested-With, Content-Type, Accept\");\n    res.header(\"Access-Control-Allow-Headers\", \"mytoken\");\n    //允许访问的方式\n    res.header('Access-Control-Allow-Methods', 'PUT,POST,GET,DELETE,OPTIONS')\n    //修改程序信息与版本\n    res.header('X-Powered-By', ' 3.2.1')\n    //内容类型：如果是post请求必须指定这个属性\n    res.header('Content-Type', 'application/json;charset=utf-8')\n    next()\n});\n```\n\n## axios拦截器\n\n在请求或响应被 then 或 catch 处理前拦截它们。一定要记得把config或者response返回出去。\n\n### 请求拦截器\n\n在请求发出前的设置的一些信息。\n\n![image-20210801163129933](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801163129.png)\n\n```js\n// 添加请求拦截器\naxios.interceptors.request.use(function (config) {\n    // 在发送请求之前做些什么\n    return config;\n  }, function (error) {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n  });\n```\n\n使用举例：\n\n```js\naxios.interceptors.request.use(function(config){\n    // 比如可以根据不同的url，进行不同的配置\n    console.log(config.url);\n    // 在请求发出前做些什么\n    config.headers.mytoken='hello';\n    return config;\n},function(err){\n    console.log(err);\n});\n\naxios.get('http://localhost/axios-json').then(function(response){\n    console.log(response.data);\n})\n```\n\n### 响应拦截器\n\n在获取数据之前，对数据进行加工处理。\n\n![image-20210801163941747](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801163941.png)\n\n```js\n// 添加响应拦截器\naxios.interceptors.response.use(function (response) {\n    // 2xx 范围内的状态码都会触发该函数。\n    // 对响应数据做点什么\n    return response;\n  }, function (error) {\n    // 超出 2xx 范围的状态码都会触发该函数。\n    // 对响应错误做点什么\n    return Promise.reject(error);\n  });\n```\n\n使用举例：\n\n```js\naxios.interceptors.response.use(function(response){\n    console.log(response);\n    return response.data;\n},function (error){\n    return Promise.reject(error);\n});\naxios.get('http://localhost/axios-json').then(function (response) {\n    console.log(response);\n})\n```\n\n### 移除拦截器\n\n```js\nconst myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\n","source":"_posts/axios学习.md","raw":"---\ntitle: axios学习\ndate: 2021-08-01 11:56:47\ntags: axios\n\n---\n\n笔记基于axios中文网：https://axios-http.com/zh/docs/intro\n\ngithub地址：https://github.com/axios/axios\n\nAxios 是一个基于 *[promise](https://javascript.info/promise-basics)* 网络请求库，作用于[`node.js`](https://nodejs.org/) 和浏览器中。在服务端它使用原生 node.js `http` 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。\n\n它具有一下特征：\n\n- 从浏览器创建 [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)\n- 从 node.js 创建 [http](http://nodejs.org/api/http.html) 请求\n- 支持 [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- 拦截请求和响应\n- 转换请求和响应数据\n- 取消请求\n- 自动转换JSON数据\n- 客户端支持防御[XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n## 用法举例\n\n发起多个并发请求\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });\n```\n\n支持async/await语法，如发送多个异步请求，第一个请求的结果作为第二个请求的参数。\n\n```js\naxios.defaults.baseURL='http://localhost'\nasync function queryData(){\n    let info=await axios.get('async1');\n    let res=await axios.get('async2?info='+info.data);\n    return res;\n}\n// async 函数的返回值是promise对象！\nqueryData().then(response=>{\n    console.log(response.data);//hello async1\n});\n```\n\n> 接口配置\n\n```js\napp.get('/async1',(req,res)=>{\n    res.send('async1');\n})\napp.get('/async2',(req,res)=>{\n    // 如果请求地址存在参数\n    if(req.query){\n        return res.send('hello '+req.query.info)\n    }\n    res.send('hello');\n})\n```\n\n\n\n\n\n\n\n## 常用API\n\n### GET请求\n\n可以通过url或者params选项传递参数。\n\n- 通过url传递参数\n\n  ```js\n  axios.get('http://localhost/axios?id=12').then(response=>{\n      console.log(response.data);\n  });\n  axios.get('http://localhost/axios/45').then(response=>{\n      console.log(response.data);\n  });\n  ```\n\n  上述请求分别调用第一个和第二接口\n\n  ```js\n  app.get('/axios',(req,res)=>{\n      res.send('axios get '+req.query.id);\n  })\n  app.get('/axios/:id',(req,res)=>{\n      res.send('restful get '+req.params.id);\n  })\n  ```\n\n- 通过params传递参数\n\n  ```js\n  axios.get('http://localhost/axios',{\n      params:{id:67}\n  }).then(response=>{\n      console.log(response.data);\n  })\n  ```\n\t\n  此时会调用第一个接口。\n  \n  最后的结果为：\n  \n  ![image-20210801150053066](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801150100.png)\n\n\n\n### DELETE传递参数\n\n参数传递与GET方式类似，支持通过url或者axios的params传递参数。\n\n以下示例通过axios的params进行传参：\n\n```js\naxios.delete('http://localhost/axios',{\n    params:{\n        name:'jiaqi'\n    }\n}).then(response=>{\n    console.log(response.data);\n})\n```\n\n> 接口\n\n```js\napp.delete('/axios',(req,res)=>{\n    res.send('axios delete name: '+req.query.name)\n})\n```\n\n### POST 请求\n\n- 通过选项传递参数（默认传递的是json格式的数据）\n\n  ```js\n  axios.post('axios',{\n      uname:'tom',\n      pwd:123\n  }).then(response=>{\n      console.log(response.data);\n  })\n  ```\n\n  > 后台接口\n\n  ```js\n  const bodyParser = require('body-parser')\n  app.use(bodyParser.urlencoded({extended:false}));\n  app.use(bodyParser.json());\n  \n  //需要使用bodyParser来解析post传递的参数\n  \n  app.post('/axios',(req,res)=>{\n      res.send('axios post '+req.body.name+'---'+req.body.pwd);\n  })\n  ```\n\n- 传递表单类型的数据\n\n  通过[URLSearchParams](https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams)传递参数（application/x-www-urlencoded）\n\n  > **`URLSearchParams`** 接口定义了一些实用的方法来处理 URL 的查询字符串。\n\n  ```js\n  var params=new URLSearchParams();\n  params.append('name','zhangsan');\n  params.append('pwd','12345');\n  axios.post('http://localhost/axios',params).then(response=>{\n      console.log(response.data);\n  })\n  ```\n\n  使用的接口与前面的一样，故不赘述。\n\n- 除了URLSearchParams，还可以通过其他方式编码，具体详见https://axios-http.com/zh/docs/urlencoded。\n\n  ![image-20210801153632594](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801153639.png)\n\n### PUT请求\n\n参数传递与POST请求相似。\n\n```js\n// PUT 请求\naxios.put('http://localhost/axios/494',{\n    name:'王五',\n    pwd:903\n}).then(response=>{\n    console.log(response.data);\n})\n```\n\n> 接口\n\n```js\napp.put('/axios/:id',(req,res)=>{\n    res.send('axios put '+req.params.id+'-----'+req.body.name+'---'+req.body.pwd);\n})\n```\n\n\n\n## 响应结构\n\n```js\n{\n  // `data` 由服务器提供的响应\n  data: {},\n\n  // `status` 来自服务器响应的 HTTP 状态码\n  status: 200,\n\n  // `statusText` 来自服务器响应的 HTTP 状态信息\n  statusText: 'OK',\n\n  // `headers` 是服务器响应头\n  // 所有的 header 名称都是小写，而且可以使用方括号语法访问\n  // 例如: `response.headers['content-type']`\n  headers: {},\n\n  // `config` 是 `axios` 请求的配置信息\n  config: {},\n\n  // `request` 是生成此响应的请求\n  // 在node.js中它是最后一个ClientRequest实例 (in redirects)，\n  // 在浏览器中则是 XMLHttpRequest 实例\n  request: {}\n}\n\n```\n\n当使用 then 时，将接收如下响应:\n\n```js\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\n## 默认配置\n\n可以指定默认配置，它将作用于每个请求。\n\n### 全局 axios 默认值\n\n```js\n//配置公共的请求头\naxios.defaults.baseURL = 'https://api.example.com';\n// 配置 超时时间\naxios.defaults.timeout = 2500;\n// 配置公共的请求头\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n// 配置公共的 post 的 Content-Type\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n// 设置请求头\naxios.defaults.headers['mytoken']='alsjffsfjslkk';\n\n```\n\n使用举例\n\n\n```js\n// 设置请求头信息\n// 需要服务器允许传递mytoken这个header\naxios.defaults.headers['mytoken']='hello';\n// 设置基准url地址\naxios.defaults.baseURL='http://localhost/';\naxios.get('/axios-json').then(response=>{\n    console.log(response.data.name);\n})\n```\n\n关于请求头的设置，服务器端需要允许设置某个header才行。必须要在服务器中允许名为mytoken的请求头，`    res.header(\"Access-Control-Allow-Headers\", \"mytoken\");`\n\n此时的服务器设置如下：\n\n```js\n//设置跨域请求\napp.all('*', function (req, res, next) {\n    //设置请求头\n    //允许所有来源访问\n    res.header('Access-Control-Allow-Origin', '*')\n    \n    res.header(\"Access-Control-Allow-Headers\", \" Origin, X-Requested-With, Content-Type, Accept\");\n    res.header(\"Access-Control-Allow-Headers\", \"mytoken\");\n    //允许访问的方式\n    res.header('Access-Control-Allow-Methods', 'PUT,POST,GET,DELETE,OPTIONS')\n    //修改程序信息与版本\n    res.header('X-Powered-By', ' 3.2.1')\n    //内容类型：如果是post请求必须指定这个属性\n    res.header('Content-Type', 'application/json;charset=utf-8')\n    next()\n});\n```\n\n## axios拦截器\n\n在请求或响应被 then 或 catch 处理前拦截它们。一定要记得把config或者response返回出去。\n\n### 请求拦截器\n\n在请求发出前的设置的一些信息。\n\n![image-20210801163129933](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801163129.png)\n\n```js\n// 添加请求拦截器\naxios.interceptors.request.use(function (config) {\n    // 在发送请求之前做些什么\n    return config;\n  }, function (error) {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n  });\n```\n\n使用举例：\n\n```js\naxios.interceptors.request.use(function(config){\n    // 比如可以根据不同的url，进行不同的配置\n    console.log(config.url);\n    // 在请求发出前做些什么\n    config.headers.mytoken='hello';\n    return config;\n},function(err){\n    console.log(err);\n});\n\naxios.get('http://localhost/axios-json').then(function(response){\n    console.log(response.data);\n})\n```\n\n### 响应拦截器\n\n在获取数据之前，对数据进行加工处理。\n\n![image-20210801163941747](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801163941.png)\n\n```js\n// 添加响应拦截器\naxios.interceptors.response.use(function (response) {\n    // 2xx 范围内的状态码都会触发该函数。\n    // 对响应数据做点什么\n    return response;\n  }, function (error) {\n    // 超出 2xx 范围的状态码都会触发该函数。\n    // 对响应错误做点什么\n    return Promise.reject(error);\n  });\n```\n\n使用举例：\n\n```js\naxios.interceptors.response.use(function(response){\n    console.log(response);\n    return response.data;\n},function (error){\n    return Promise.reject(error);\n});\naxios.get('http://localhost/axios-json').then(function (response) {\n    console.log(response);\n})\n```\n\n### 移除拦截器\n\n```js\nconst myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\n","slug":"axios学习","published":1,"updated":"2021-08-01T09:28:30.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrt09f3s0002ywunbke8cix2","content":"<p>笔记基于axios中文网：<a href=\"https://axios-http.com/zh/docs/intro\">https://axios-http.com/zh/docs/intro</a></p>\n<p>github地址：<a href=\"https://github.com/axios/axios\">https://github.com/axios/axios</a></p>\n<p>Axios 是一个基于 <em><a href=\"https://javascript.info/promise-basics\">promise</a></em> 网络请求库，作用于<a href=\"https://nodejs.org/\"><code>node.js</code></a> 和浏览器中。在服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</p>\n<p>它具有一下特征：</p>\n<ul>\n<li>从浏览器创建 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequests</a></li>\n<li>从 node.js 创建 <a href=\"http://nodejs.org/api/http.html\">http</a> 请求</li>\n<li>支持 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> API</li>\n<li>拦截请求和响应</li>\n<li>转换请求和响应数据</li>\n<li>取消请求</li>\n<li>自动转换JSON数据</li>\n<li>客户端支持防御<a href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\">XSRF</a></li>\n</ul>\n<h2 id=\"用法举例\"><a href=\"#用法举例\" class=\"headerlink\" title=\"用法举例\"></a>用法举例</h2><p>发起多个并发请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUserAccount</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUserPermissions</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">&#x27;/user/12345/permissions&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-built_in\">Promise</span>.all([getUserAccount(), getUserPermissions()])<br>  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">results</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">const</span> acct = results[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">const</span> perm = results[<span class=\"hljs-number\">1</span>];<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>支持async/await语法，如发送多个异步请求，第一个请求的结果作为第二个请求的参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.defaults.baseURL=<span class=\"hljs-string\">&#x27;http://localhost&#x27;</span><br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">queryData</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> info=<span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">&#x27;async1&#x27;</span>);<br>    <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">&#x27;async2?info=&#x27;</span>+info.data);<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br><span class=\"hljs-comment\">// async 函数的返回值是promise对象！</span><br>queryData().then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<span class=\"hljs-comment\">//hello async1</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>接口配置</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">app.get(<span class=\"hljs-string\">&#x27;/async1&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;async1&#x27;</span>);<br>&#125;)<br>app.get(<span class=\"hljs-string\">&#x27;/async2&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// 如果请求地址存在参数</span><br>    <span class=\"hljs-keyword\">if</span>(req.query)&#123;<br>        <span class=\"hljs-keyword\">return</span> res.send(<span class=\"hljs-string\">&#x27;hello &#x27;</span>+req.query.info)<br>    &#125;<br>    res.send(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h2><h3 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h3><p>可以通过url或者params选项传递参数。</p>\n<ul>\n<li><p>通过url传递参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.get(<span class=\"hljs-string\">&#x27;http://localhost/axios?id=12&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;);<br>axios.get(<span class=\"hljs-string\">&#x27;http://localhost/axios/45&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>上述请求分别调用第一个和第二接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">app.get(<span class=\"hljs-string\">&#x27;/axios&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;axios get &#x27;</span>+req.query.id);<br>&#125;)<br>app.get(<span class=\"hljs-string\">&#x27;/axios/:id&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;restful get &#x27;</span>+req.params.id);<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n<li><p>通过params传递参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.get(<span class=\"hljs-string\">&#x27;http://localhost/axios&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">params</span>:&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">67</span>&#125;<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>此时会调用第一个接口。</p>\n<p>最后的结果为：</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801150100.png\" alt=\"image-20210801150053066\"></p>\n</li>\n</ul>\n<h3 id=\"DELETE传递参数\"><a href=\"#DELETE传递参数\" class=\"headerlink\" title=\"DELETE传递参数\"></a>DELETE传递参数</h3><p>参数传递与GET方式类似，支持通过url或者axios的params传递参数。</p>\n<p>以下示例通过axios的params进行传参：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.delete(<span class=\"hljs-string\">&#x27;http://localhost/axios&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">params</span>:&#123;<br>        <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;jiaqi&#x27;</span><br>    &#125;<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>接口</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">app.delete(<span class=\"hljs-string\">&#x27;/axios&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;axios delete name: &#x27;</span>+req.query.name)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"POST-请求\"><a href=\"#POST-请求\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h3><ul>\n<li><p>通过选项传递参数（默认传递的是json格式的数据）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.post(<span class=\"hljs-string\">&#x27;axios&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">uname</span>:<span class=\"hljs-string\">&#x27;tom&#x27;</span>,<br>    <span class=\"hljs-attr\">pwd</span>:<span class=\"hljs-number\">123</span><br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>后台接口</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;body-parser&#x27;</span>)<br>app.use(bodyParser.urlencoded(&#123;<span class=\"hljs-attr\">extended</span>:<span class=\"hljs-literal\">false</span>&#125;));<br>app.use(bodyParser.json());<br><br><span class=\"hljs-comment\">//需要使用bodyParser来解析post传递的参数</span><br><br>app.post(<span class=\"hljs-string\">&#x27;/axios&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;axios post &#x27;</span>+req.body.name+<span class=\"hljs-string\">&#x27;---&#x27;</span>+req.body.pwd);<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n<li><p>传递表单类型的数据</p>\n<p>通过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams\">URLSearchParams</a>传递参数（application/x-www-urlencoded）</p>\n<blockquote>\n<p><strong><code>URLSearchParams</code></strong> 接口定义了一些实用的方法来处理 URL 的查询字符串。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> params=<span class=\"hljs-keyword\">new</span> URLSearchParams();<br>params.append(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;zhangsan&#x27;</span>);<br>params.append(<span class=\"hljs-string\">&#x27;pwd&#x27;</span>,<span class=\"hljs-string\">&#x27;12345&#x27;</span>);<br>axios.post(<span class=\"hljs-string\">&#x27;http://localhost/axios&#x27;</span>,params).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>使用的接口与前面的一样，故不赘述。</p>\n</li>\n<li><p>除了URLSearchParams，还可以通过其他方式编码，具体详见<a href=\"https://axios-http.com/zh/docs/urlencoded%E3%80%82\">https://axios-http.com/zh/docs/urlencoded。</a></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801153639.png\" alt=\"image-20210801153632594\"></p>\n</li>\n</ul>\n<h3 id=\"PUT请求\"><a href=\"#PUT请求\" class=\"headerlink\" title=\"PUT请求\"></a>PUT请求</h3><p>参数传递与POST请求相似。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// PUT 请求</span><br>axios.put(<span class=\"hljs-string\">&#x27;http://localhost/axios/494&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;王五&#x27;</span>,<br>    <span class=\"hljs-attr\">pwd</span>:<span class=\"hljs-number\">903</span><br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>接口</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">app.put(<span class=\"hljs-string\">&#x27;/axios/:id&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;axios put &#x27;</span>+req.params.id+<span class=\"hljs-string\">&#x27;-----&#x27;</span>+req.body.name+<span class=\"hljs-string\">&#x27;---&#x27;</span>+req.body.pwd);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"响应结构\"><a href=\"#响应结构\" class=\"headerlink\" title=\"响应结构\"></a>响应结构</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-comment\">// `data` 由服务器提供的响应</span><br>  <span class=\"hljs-attr\">data</span>: &#123;&#125;,<br><br>  <span class=\"hljs-comment\">// `status` 来自服务器响应的 HTTP 状态码</span><br>  <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">200</span>,<br><br>  <span class=\"hljs-comment\">// `statusText` 来自服务器响应的 HTTP 状态信息</span><br>  <span class=\"hljs-attr\">statusText</span>: <span class=\"hljs-string\">&#x27;OK&#x27;</span>,<br><br>  <span class=\"hljs-comment\">// `headers` 是服务器响应头</span><br>  <span class=\"hljs-comment\">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span><br>  <span class=\"hljs-comment\">// 例如: `response.headers[&#x27;content-type&#x27;]`</span><br>  <span class=\"hljs-attr\">headers</span>: &#123;&#125;,<br><br>  <span class=\"hljs-comment\">// `config` 是 `axios` 请求的配置信息</span><br>  <span class=\"hljs-attr\">config</span>: &#123;&#125;,<br><br>  <span class=\"hljs-comment\">// `request` 是生成此响应的请求</span><br>  <span class=\"hljs-comment\">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span><br>  <span class=\"hljs-comment\">// 在浏览器中则是 XMLHttpRequest 实例</span><br>  <span class=\"hljs-attr\">request</span>: &#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>当使用 then 时，将接收如下响应:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.get(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>)<br>  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>    <span class=\"hljs-built_in\">console</span>.log(response.status);<br>    <span class=\"hljs-built_in\">console</span>.log(response.statusText);<br>    <span class=\"hljs-built_in\">console</span>.log(response.headers);<br>    <span class=\"hljs-built_in\">console</span>.log(response.config);<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h2><p>可以指定默认配置，它将作用于每个请求。</p>\n<h3 id=\"全局-axios-默认值\"><a href=\"#全局-axios-默认值\" class=\"headerlink\" title=\"全局 axios 默认值\"></a>全局 axios 默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//配置公共的请求头</span><br>axios.defaults.baseURL = <span class=\"hljs-string\">&#x27;https://api.example.com&#x27;</span>;<br><span class=\"hljs-comment\">// 配置 超时时间</span><br>axios.defaults.timeout = <span class=\"hljs-number\">2500</span>;<br><span class=\"hljs-comment\">// 配置公共的请求头</span><br>axios.defaults.headers.common[<span class=\"hljs-string\">&#x27;Authorization&#x27;</span>] = AUTH_TOKEN;<br><span class=\"hljs-comment\">// 配置公共的 post 的 Content-Type</span><br>axios.defaults.headers.post[<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>] = <span class=\"hljs-string\">&#x27;application/x-www-form-urlencoded&#x27;</span>;<br><span class=\"hljs-comment\">// 设置请求头</span><br>axios.defaults.headers[<span class=\"hljs-string\">&#x27;mytoken&#x27;</span>]=<span class=\"hljs-string\">&#x27;alsjffsfjslkk&#x27;</span>;<br><br></code></pre></td></tr></table></figure>\n\n<p>使用举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 设置请求头信息</span><br><span class=\"hljs-comment\">// 需要服务器允许传递mytoken这个header</span><br>axios.defaults.headers[<span class=\"hljs-string\">&#x27;mytoken&#x27;</span>]=<span class=\"hljs-string\">&#x27;hello&#x27;</span>;<br><span class=\"hljs-comment\">// 设置基准url地址</span><br>axios.defaults.baseURL=<span class=\"hljs-string\">&#x27;http://localhost/&#x27;</span>;<br>axios.get(<span class=\"hljs-string\">&#x27;/axios-json&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data.name);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>关于请求头的设置，服务器端需要允许设置某个header才行。必须要在服务器中允许名为mytoken的请求头，<code>    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;mytoken&quot;);</code></p>\n<p>此时的服务器设置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//设置跨域请求</span><br>app.all(<span class=\"hljs-string\">&#x27;*&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res, next</span>) </span>&#123;<br>    <span class=\"hljs-comment\">//设置请求头</span><br>    <span class=\"hljs-comment\">//允许所有来源访问</span><br>    res.header(<span class=\"hljs-string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"hljs-string\">&#x27;*&#x27;</span>)<br>    <br>    res.header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"hljs-string\">&quot; Origin, X-Requested-With, Content-Type, Accept&quot;</span>);<br>    res.header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"hljs-string\">&quot;mytoken&quot;</span>);<br>    <span class=\"hljs-comment\">//允许访问的方式</span><br>    res.header(<span class=\"hljs-string\">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class=\"hljs-string\">&#x27;PUT,POST,GET,DELETE,OPTIONS&#x27;</span>)<br>    <span class=\"hljs-comment\">//修改程序信息与版本</span><br>    res.header(<span class=\"hljs-string\">&#x27;X-Powered-By&#x27;</span>, <span class=\"hljs-string\">&#x27; 3.2.1&#x27;</span>)<br>    <span class=\"hljs-comment\">//内容类型：如果是post请求必须指定这个属性</span><br>    res.header(<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>, <span class=\"hljs-string\">&#x27;application/json;charset=utf-8&#x27;</span>)<br>    next()<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"axios拦截器\"><a href=\"#axios拦截器\" class=\"headerlink\" title=\"axios拦截器\"></a>axios拦截器</h2><p>在请求或响应被 then 或 catch 处理前拦截它们。一定要记得把config或者response返回出去。</p>\n<h3 id=\"请求拦截器\"><a href=\"#请求拦截器\" class=\"headerlink\" title=\"请求拦截器\"></a>请求拦截器</h3><p>在请求发出前的设置的一些信息。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801163129.png\" alt=\"image-20210801163129933\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 添加请求拦截器</span><br>axios.interceptors.request.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">config</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 在发送请求之前做些什么</span><br>    <span class=\"hljs-keyword\">return</span> config;<br>  &#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 对请求错误做些什么</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error);<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>使用举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.interceptors.request.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">config</span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 比如可以根据不同的url，进行不同的配置</span><br>    <span class=\"hljs-built_in\">console</span>.log(config.url);<br>    <span class=\"hljs-comment\">// 在请求发出前做些什么</span><br>    config.headers.mytoken=<span class=\"hljs-string\">&#x27;hello&#x27;</span>;<br>    <span class=\"hljs-keyword\">return</span> config;<br>&#125;,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>&#125;);<br><br>axios.get(<span class=\"hljs-string\">&#x27;http://localhost/axios-json&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"响应拦截器\"><a href=\"#响应拦截器\" class=\"headerlink\" title=\"响应拦截器\"></a>响应拦截器</h3><p>在获取数据之前，对数据进行加工处理。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801163941.png\" alt=\"image-20210801163941747\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 添加响应拦截器</span><br>axios.interceptors.response.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 2xx 范围内的状态码都会触发该函数。</span><br>    <span class=\"hljs-comment\">// 对响应数据做点什么</span><br>    <span class=\"hljs-keyword\">return</span> response;<br>  &#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 超出 2xx 范围的状态码都会触发该函数。</span><br>    <span class=\"hljs-comment\">// 对响应错误做点什么</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error);<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>使用举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.interceptors.response.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>    <span class=\"hljs-keyword\">return</span> response.data;<br>&#125;,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error);<br>&#125;);<br>axios.get(<span class=\"hljs-string\">&#x27;http://localhost/axios-json&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"移除拦截器\"><a href=\"#移除拦截器\" class=\"headerlink\" title=\"移除拦截器\"></a>移除拦截器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myInterceptor = axios.interceptors.request.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<span class=\"hljs-comment\">/*...*/</span>&#125;);<br>axios.interceptors.request.eject(myInterceptor);<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>笔记基于axios中文网：<a href=\"https://axios-http.com/zh/docs/intro\">https://axios-http.com/zh/docs/intro</a></p>\n<p>github地址：<a href=\"https://github.com/axios/axios\">https://github.com/axios/axios</a></p>\n<p>Axios 是一个基于 <em><a href=\"https://javascript.info/promise-basics\">promise</a></em> 网络请求库，作用于<a href=\"https://nodejs.org/\"><code>node.js</code></a> 和浏览器中。在服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</p>\n<p>它具有一下特征：</p>\n<ul>\n<li>从浏览器创建 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequests</a></li>\n<li>从 node.js 创建 <a href=\"http://nodejs.org/api/http.html\">http</a> 请求</li>\n<li>支持 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> API</li>\n<li>拦截请求和响应</li>\n<li>转换请求和响应数据</li>\n<li>取消请求</li>\n<li>自动转换JSON数据</li>\n<li>客户端支持防御<a href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\">XSRF</a></li>\n</ul>\n<h2 id=\"用法举例\"><a href=\"#用法举例\" class=\"headerlink\" title=\"用法举例\"></a>用法举例</h2><p>发起多个并发请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUserAccount</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getUserPermissions</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">&#x27;/user/12345/permissions&#x27;</span>);<br>&#125;<br><br><span class=\"hljs-built_in\">Promise</span>.all([getUserAccount(), getUserPermissions()])<br>  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">results</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">const</span> acct = results[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">const</span> perm = results[<span class=\"hljs-number\">1</span>];<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>支持async/await语法，如发送多个异步请求，第一个请求的结果作为第二个请求的参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.defaults.baseURL=<span class=\"hljs-string\">&#x27;http://localhost&#x27;</span><br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">queryData</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> info=<span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">&#x27;async1&#x27;</span>);<br>    <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">&#x27;async2?info=&#x27;</span>+info.data);<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br><span class=\"hljs-comment\">// async 函数的返回值是promise对象！</span><br>queryData().then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<span class=\"hljs-comment\">//hello async1</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>接口配置</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">app.get(<span class=\"hljs-string\">&#x27;/async1&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;async1&#x27;</span>);<br>&#125;)<br>app.get(<span class=\"hljs-string\">&#x27;/async2&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-comment\">// 如果请求地址存在参数</span><br>    <span class=\"hljs-keyword\">if</span>(req.query)&#123;<br>        <span class=\"hljs-keyword\">return</span> res.send(<span class=\"hljs-string\">&#x27;hello &#x27;</span>+req.query.info)<br>    &#125;<br>    res.send(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h2><h3 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h3><p>可以通过url或者params选项传递参数。</p>\n<ul>\n<li><p>通过url传递参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.get(<span class=\"hljs-string\">&#x27;http://localhost/axios?id=12&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;);<br>axios.get(<span class=\"hljs-string\">&#x27;http://localhost/axios/45&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>上述请求分别调用第一个和第二接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">app.get(<span class=\"hljs-string\">&#x27;/axios&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;axios get &#x27;</span>+req.query.id);<br>&#125;)<br>app.get(<span class=\"hljs-string\">&#x27;/axios/:id&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;restful get &#x27;</span>+req.params.id);<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n<li><p>通过params传递参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.get(<span class=\"hljs-string\">&#x27;http://localhost/axios&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">params</span>:&#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">67</span>&#125;<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>此时会调用第一个接口。</p>\n<p>最后的结果为：</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801150100.png\" alt=\"image-20210801150053066\"></p>\n</li>\n</ul>\n<h3 id=\"DELETE传递参数\"><a href=\"#DELETE传递参数\" class=\"headerlink\" title=\"DELETE传递参数\"></a>DELETE传递参数</h3><p>参数传递与GET方式类似，支持通过url或者axios的params传递参数。</p>\n<p>以下示例通过axios的params进行传参：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.delete(<span class=\"hljs-string\">&#x27;http://localhost/axios&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">params</span>:&#123;<br>        <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;jiaqi&#x27;</span><br>    &#125;<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>接口</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">app.delete(<span class=\"hljs-string\">&#x27;/axios&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;axios delete name: &#x27;</span>+req.query.name)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"POST-请求\"><a href=\"#POST-请求\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h3><ul>\n<li><p>通过选项传递参数（默认传递的是json格式的数据）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.post(<span class=\"hljs-string\">&#x27;axios&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">uname</span>:<span class=\"hljs-string\">&#x27;tom&#x27;</span>,<br>    <span class=\"hljs-attr\">pwd</span>:<span class=\"hljs-number\">123</span><br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>后台接口</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;body-parser&#x27;</span>)<br>app.use(bodyParser.urlencoded(&#123;<span class=\"hljs-attr\">extended</span>:<span class=\"hljs-literal\">false</span>&#125;));<br>app.use(bodyParser.json());<br><br><span class=\"hljs-comment\">//需要使用bodyParser来解析post传递的参数</span><br><br>app.post(<span class=\"hljs-string\">&#x27;/axios&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;axios post &#x27;</span>+req.body.name+<span class=\"hljs-string\">&#x27;---&#x27;</span>+req.body.pwd);<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n<li><p>传递表单类型的数据</p>\n<p>通过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams\">URLSearchParams</a>传递参数（application/x-www-urlencoded）</p>\n<blockquote>\n<p><strong><code>URLSearchParams</code></strong> 接口定义了一些实用的方法来处理 URL 的查询字符串。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> params=<span class=\"hljs-keyword\">new</span> URLSearchParams();<br>params.append(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;zhangsan&#x27;</span>);<br>params.append(<span class=\"hljs-string\">&#x27;pwd&#x27;</span>,<span class=\"hljs-string\">&#x27;12345&#x27;</span>);<br>axios.post(<span class=\"hljs-string\">&#x27;http://localhost/axios&#x27;</span>,params).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>使用的接口与前面的一样，故不赘述。</p>\n</li>\n<li><p>除了URLSearchParams，还可以通过其他方式编码，具体详见<a href=\"https://axios-http.com/zh/docs/urlencoded%E3%80%82\">https://axios-http.com/zh/docs/urlencoded。</a></p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801153639.png\" alt=\"image-20210801153632594\"></p>\n</li>\n</ul>\n<h3 id=\"PUT请求\"><a href=\"#PUT请求\" class=\"headerlink\" title=\"PUT请求\"></a>PUT请求</h3><p>参数传递与POST请求相似。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// PUT 请求</span><br>axios.put(<span class=\"hljs-string\">&#x27;http://localhost/axios/494&#x27;</span>,&#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;王五&#x27;</span>,<br>    <span class=\"hljs-attr\">pwd</span>:<span class=\"hljs-number\">903</span><br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>接口</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">app.put(<span class=\"hljs-string\">&#x27;/axios/:id&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class=\"hljs-string\">&#x27;axios put &#x27;</span>+req.params.id+<span class=\"hljs-string\">&#x27;-----&#x27;</span>+req.body.name+<span class=\"hljs-string\">&#x27;---&#x27;</span>+req.body.pwd);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"响应结构\"><a href=\"#响应结构\" class=\"headerlink\" title=\"响应结构\"></a>响应结构</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-comment\">// `data` 由服务器提供的响应</span><br>  <span class=\"hljs-attr\">data</span>: &#123;&#125;,<br><br>  <span class=\"hljs-comment\">// `status` 来自服务器响应的 HTTP 状态码</span><br>  <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">200</span>,<br><br>  <span class=\"hljs-comment\">// `statusText` 来自服务器响应的 HTTP 状态信息</span><br>  <span class=\"hljs-attr\">statusText</span>: <span class=\"hljs-string\">&#x27;OK&#x27;</span>,<br><br>  <span class=\"hljs-comment\">// `headers` 是服务器响应头</span><br>  <span class=\"hljs-comment\">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span><br>  <span class=\"hljs-comment\">// 例如: `response.headers[&#x27;content-type&#x27;]`</span><br>  <span class=\"hljs-attr\">headers</span>: &#123;&#125;,<br><br>  <span class=\"hljs-comment\">// `config` 是 `axios` 请求的配置信息</span><br>  <span class=\"hljs-attr\">config</span>: &#123;&#125;,<br><br>  <span class=\"hljs-comment\">// `request` 是生成此响应的请求</span><br>  <span class=\"hljs-comment\">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span><br>  <span class=\"hljs-comment\">// 在浏览器中则是 XMLHttpRequest 实例</span><br>  <span class=\"hljs-attr\">request</span>: &#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>当使用 then 时，将接收如下响应:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.get(<span class=\"hljs-string\">&#x27;/user/12345&#x27;</span>)<br>  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>    <span class=\"hljs-built_in\">console</span>.log(response.status);<br>    <span class=\"hljs-built_in\">console</span>.log(response.statusText);<br>    <span class=\"hljs-built_in\">console</span>.log(response.headers);<br>    <span class=\"hljs-built_in\">console</span>.log(response.config);<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h2><p>可以指定默认配置，它将作用于每个请求。</p>\n<h3 id=\"全局-axios-默认值\"><a href=\"#全局-axios-默认值\" class=\"headerlink\" title=\"全局 axios 默认值\"></a>全局 axios 默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//配置公共的请求头</span><br>axios.defaults.baseURL = <span class=\"hljs-string\">&#x27;https://api.example.com&#x27;</span>;<br><span class=\"hljs-comment\">// 配置 超时时间</span><br>axios.defaults.timeout = <span class=\"hljs-number\">2500</span>;<br><span class=\"hljs-comment\">// 配置公共的请求头</span><br>axios.defaults.headers.common[<span class=\"hljs-string\">&#x27;Authorization&#x27;</span>] = AUTH_TOKEN;<br><span class=\"hljs-comment\">// 配置公共的 post 的 Content-Type</span><br>axios.defaults.headers.post[<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>] = <span class=\"hljs-string\">&#x27;application/x-www-form-urlencoded&#x27;</span>;<br><span class=\"hljs-comment\">// 设置请求头</span><br>axios.defaults.headers[<span class=\"hljs-string\">&#x27;mytoken&#x27;</span>]=<span class=\"hljs-string\">&#x27;alsjffsfjslkk&#x27;</span>;<br><br></code></pre></td></tr></table></figure>\n\n<p>使用举例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 设置请求头信息</span><br><span class=\"hljs-comment\">// 需要服务器允许传递mytoken这个header</span><br>axios.defaults.headers[<span class=\"hljs-string\">&#x27;mytoken&#x27;</span>]=<span class=\"hljs-string\">&#x27;hello&#x27;</span>;<br><span class=\"hljs-comment\">// 设置基准url地址</span><br>axios.defaults.baseURL=<span class=\"hljs-string\">&#x27;http://localhost/&#x27;</span>;<br>axios.get(<span class=\"hljs-string\">&#x27;/axios-json&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data.name);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>关于请求头的设置，服务器端需要允许设置某个header才行。必须要在服务器中允许名为mytoken的请求头，<code>    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;mytoken&quot;);</code></p>\n<p>此时的服务器设置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//设置跨域请求</span><br>app.all(<span class=\"hljs-string\">&#x27;*&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res, next</span>) </span>&#123;<br>    <span class=\"hljs-comment\">//设置请求头</span><br>    <span class=\"hljs-comment\">//允许所有来源访问</span><br>    res.header(<span class=\"hljs-string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"hljs-string\">&#x27;*&#x27;</span>)<br>    <br>    res.header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"hljs-string\">&quot; Origin, X-Requested-With, Content-Type, Accept&quot;</span>);<br>    res.header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"hljs-string\">&quot;mytoken&quot;</span>);<br>    <span class=\"hljs-comment\">//允许访问的方式</span><br>    res.header(<span class=\"hljs-string\">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class=\"hljs-string\">&#x27;PUT,POST,GET,DELETE,OPTIONS&#x27;</span>)<br>    <span class=\"hljs-comment\">//修改程序信息与版本</span><br>    res.header(<span class=\"hljs-string\">&#x27;X-Powered-By&#x27;</span>, <span class=\"hljs-string\">&#x27; 3.2.1&#x27;</span>)<br>    <span class=\"hljs-comment\">//内容类型：如果是post请求必须指定这个属性</span><br>    res.header(<span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>, <span class=\"hljs-string\">&#x27;application/json;charset=utf-8&#x27;</span>)<br>    next()<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"axios拦截器\"><a href=\"#axios拦截器\" class=\"headerlink\" title=\"axios拦截器\"></a>axios拦截器</h2><p>在请求或响应被 then 或 catch 处理前拦截它们。一定要记得把config或者response返回出去。</p>\n<h3 id=\"请求拦截器\"><a href=\"#请求拦截器\" class=\"headerlink\" title=\"请求拦截器\"></a>请求拦截器</h3><p>在请求发出前的设置的一些信息。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801163129.png\" alt=\"image-20210801163129933\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 添加请求拦截器</span><br>axios.interceptors.request.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">config</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 在发送请求之前做些什么</span><br>    <span class=\"hljs-keyword\">return</span> config;<br>  &#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 对请求错误做些什么</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error);<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>使用举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.interceptors.request.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">config</span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 比如可以根据不同的url，进行不同的配置</span><br>    <span class=\"hljs-built_in\">console</span>.log(config.url);<br>    <span class=\"hljs-comment\">// 在请求发出前做些什么</span><br>    config.headers.mytoken=<span class=\"hljs-string\">&#x27;hello&#x27;</span>;<br>    <span class=\"hljs-keyword\">return</span> config;<br>&#125;,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err);<br>&#125;);<br><br>axios.get(<span class=\"hljs-string\">&#x27;http://localhost/axios-json&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response.data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"响应拦截器\"><a href=\"#响应拦截器\" class=\"headerlink\" title=\"响应拦截器\"></a>响应拦截器</h3><p>在获取数据之前，对数据进行加工处理。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210801163941.png\" alt=\"image-20210801163941747\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 添加响应拦截器</span><br>axios.interceptors.response.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 2xx 范围内的状态码都会触发该函数。</span><br>    <span class=\"hljs-comment\">// 对响应数据做点什么</span><br>    <span class=\"hljs-keyword\">return</span> response;<br>  &#125;, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 超出 2xx 范围的状态码都会触发该函数。</span><br>    <span class=\"hljs-comment\">// 对响应错误做点什么</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error);<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n<p>使用举例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">axios.interceptors.response.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>    <span class=\"hljs-keyword\">return</span> response.data;<br>&#125;,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error);<br>&#125;);<br>axios.get(<span class=\"hljs-string\">&#x27;http://localhost/axios-json&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(response);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"移除拦截器\"><a href=\"#移除拦截器\" class=\"headerlink\" title=\"移除拦截器\"></a>移除拦截器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myInterceptor = axios.interceptors.request.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<span class=\"hljs-comment\">/*...*/</span>&#125;);<br>axios.interceptors.request.eject(myInterceptor);<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Vue路由学习笔记","date":"2021-08-02T04:03:51.000Z","_content":"\n笔记基于：https://router.vuejs.org/zh/ 和黑马视频\n\n# 路由的基本概念与原理\n\n## 路由\n\n### 后端路由\n\n- 概念：根据不同的用户URL请求，返回不同的内容\n- 本质：URL**请求地址**与**服务器资源**之问的对应关系\n\n![image-20210802121213464](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802121213.png)\n\n### SPA\n\n- 后端渲染（存在性能问题，假如用户频繁地提交表单，则会造成页面频繁刷新）。\n- Ajax前端渲染（前端渲染提高性能，但是不支持浏览器的前进后退操作）。\n- SPA（ Single Page Application）单页面应用程序：整个网站只有一个页面，内容的变化通过Ajax局部更新实现、同时支持浏览器地址栏的前进和后退操作。\n- SPA实现原理之一：基于URL地址的hash（hash的变化会导致浏览器记录访问历史的变化、但是hash的变化不会触发新的URL请求）。\n- 在实现SPA过程中，最核心的技术点就是**前端路由**。\n\n### 前端路由\n\n- 概念：根据不同的**用户事件**，显示不同的页面内容。\n- 本质：**用户事件**与**事件处理函数**之间的对应关系。\n\n![image-20210802122059780](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802122059.png)\n\n## 实现简单的前端路由\n\n基于URL中的hash实现（点击菜单的时候改变URL的hash，根据hash的变化控制组件的切换）\n\n```js\n// 监听window的onhashchange事件，根据最新的hash值，切换要显示的组件名称\nwindow.onhashchange=function(){\n    //通过location.hash 获取到最新的hash值\n}\n```\n\n实现的效果：\n\n根据`location.hash`的值切换页面显示的内容\n\n![动1](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802135422.gif)\n\n```html\n<div id=\"app\">\n    <!-- 切换组件的超链接 -->\n    <a href=\"#/zhuye\">主页</a>\n    <a href=\"#/keji\">科技</a>\n    <a href=\"#/caijing\">财经</a>\n    <a href=\"#/yule\">娱乐</a>\n    <!-- 根据is属性的指定的组件名称，把对应的组件渲染到component标签所在的位置 -->\n    <!-- 可以把component标签看做为组件的占位符 -->\n    <component :is=\"comName\"></component>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\"></script>\n<script>\n    const vm = new Vue({\n        el: '#app',\n        data: {\n            comName: 'zhuye'\n        },\n        // 注册私有组件\n        components: {\n            zhuye: {\n                template: `<h1>主页信息</h1>`,\n            },\n            keji: {\n                template: `<h1>科技信息</h1>`\n            },\n            caijing: {\n                template: `<h1>财经信息</h1>`\n            },\n            yule: {\n                template: `<h1>娱乐信息</h1>`\n            }\n        }\n    });\n    window.onhashchange = function () {\n        // 通过location.hash 获取到最新的hash值\n        console.log(location.hash);\n        let list = ['zhuye', 'keji', 'caijing', 'yule'];\n        list.some(item => {\n            if (location.hash.includes(item)) {\n                vm.comName = item;\n                return true;\n            }\n        })\n    }\n</script>\n```\n\n### 补充知识点\n\n1. `location.hash`\n\n   [`Location`](https://developer.mozilla.org/zh-CN/docs/Web/API/Location) 接口的 **`hash`** 属性返回一个 [`USVString`](https://developer.mozilla.org/zh-CN/docs/Web/API/USVString)，其中会包含URL标识中的 `'#'` 和 后面URL片段标识符。\n\n   ```html\n   <a id=\"myAnchor\" href=\"/en-US/docs/Location.href#Examples\">Examples</a>\n   <script>\n     var anchor = document.getElementById(\"myAnchor\");\n     console.log(anchor.hash); // 返回'#Examples'\n   </script>\n   ```\n\n2. 关于url对象，[在这篇里](https://jiaqicoder.com/2021/08/02/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#URL%E5%AF%B9%E8%B1%A1)写了很多。\n\n\n\n# VUE Router\n\nVue Router 是 [Vue.js (opens new window)](http://cn.vuejs.org/)官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：\n\n- 嵌套的路由/视图表\n- 模块化的、基于组件的路由配置\n- 路由参数、查询、通配符\n- 基于 Vue.js 过渡系统的视图过渡效果\n- 细粒度的导航控制\n- 带有自动激活的 CSS class 的链接\n- HTML5 历史模式或 hash 模式，在 IE9 中自动降级\n- 自定义的滚动条行为\n\n官网地址：https://router.vuejs.org/zh/\n\n## 使用步骤\n\n1. 引入相关的库文件\n\n   ```js\n   // 先导入vue再导入vue router\n   <script src=\"/path/to/vue.js\"></script>\n   <script src=\"/path/to/vue-router.js\"></script>\n   ```\n\n2. 添加路由链接\n\n   ```html\n   \n   <div id=\"app\">\n       <!-- router-link 是vue中提供的标签，默认会被渲染为 a 标签 -->\n       <!-- to 属性默认会被渲染为 href属性 -->\n       <!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 -->\n       <router-link to='/user'>User</router-link>\n       <router-link to='/register'>Register</router-link>\n   </div>\n   ```\n\n3. 添加路由填充位\n\n   ```html\n   <!-- 路由填充位（也叫路由占位符） -->\n   <!-- 通过路由规则匹配到的组件，会被渲染到router-view所在的位置 -->\n   <router-view></router-view>\n   ```\n\n4. 定义路由组件\n\n   ```js\n   const User={\n       template:`<h1>user 组件</h1>`\n   }\n   const Register={\n       template:`<h1>register</h1>`\n   }\n   ```\n\n5. 创建路由实例并配置路由规则\n\n   ```js\n   // 创建路由实例对象\n   const router = new VueRouter({\n       // routes是路由规则数组\n       routes:[\n           // 每一个路由规则都是一个配置对象，其中至少包括 path 和 component 两个属性：\n           // path 表示当前路由规则匹配到的hash地址\n           // component 表示当前路由规则要展示的组件\n           {path:'/user',component:User},\n           {path:'/register',component:Register},\n       ]\n   })\n   ```\n\n6. 把路由挂载到Vue根实例中\n\n   ```js\n   new Vue({\n       el: \"#app\",\n       data: {},\n       // 挂载路由实例对象\n       router\n   })\n   ```\n\n最终代码：\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   \n   <head>\n       <meta charset=\"UTF-8\">\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n       <script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\"></script>\n       <script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n       <title>Document</title>\n   </head>\n   \n   <body>\n       <div id=\"app\">\n           <!-- router-link 是vue中提供的标签，默认会被渲染为 a 标签 -->\n           <!-- to 属性默认会被渲染为 href属性 -->\n           <!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 -->\n           <router-link to='/user'>User</router-link>\n           <router-link to='/register'>Register</router-link>\n           <!-- 路由填充位（也叫路由占位符） -->\n           <!-- 通过路由规则匹配到的组件，会被渲染到router-view所在的位置 -->\n           <router-view></router-view>\n   \n       </div>\n   \n       <script>\n           const User = {\n               template: `<h1>user 组件</h1>`\n           }\n           const Register = {\n               template: `<h1>register</h1>`\n           }\n   \n           // 创建路由实例对象\n           const router = new VueRouter({\n               // routes是路由规则数组\n               routes: [\n                   // 每一个路由规则都是一个配置对象，其中至少包括 path 和 component 两个属性：\n                   // path 表示当前路由规则匹配到的hash地址\n                   // component 表示当前路由规则要展示的组件\n                   { path: '/user', component: User },\n                   { path: '/register', component: Register },\n               ]\n           })\n           new Vue({\n               el: \"#app\",\n               data: {},\n               // 挂载路由实例对象\n               router\n           })\n   \n       </script>\n   </body>\n   \n   </html>\n   ```\n\n ![动](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803112827.gif)\n\n## 路由重定向\n\n路由重定向：用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面。\n\n通过路由规则的 redirect属性，指定个新的路由地址，可以很方便地设置路由的重定向。\n\n基于先前的代码，实现当用户打开页面时，页面就跳转到'/user'。\n\n```js\nconst router = new VueRouter({\n    // routes是路由规则数组\n    routes: [\n        // path 表示需要被重定向的原地址， redirect表示将要被重定向的新地址\n        {path:'/',redirect:'/user'},\n        { path: '/user', component: User },\n        { path: '/register', component: Register },\n    ]\n})\n```\n\n## 嵌套路由\n\n### 嵌套路由功能分析\n\n- 点击父级路由链接显示模板内容\n- 模板内容中又有子级路由链接\n- 点击子级路由链接显示子级模板内容\n\n![image-20210803120119722](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803120119.png)\n\n### 具体实现\n\n1.父路由组件模板\n\n```html\n<div id=\"app\">\n    <router-link to='/user'>用户</router-link>\n    <router-link to='/register'>注册</router-link>\n    <!-- 路由填充位 -->\n    <router-view></router-view>\n</div>\n```\n\n2.子路由模板\n\n- 子路由链接\n- 子路由填充位置\n\n```js\nconst Register = {\n    template: `\n    <div>\n        <h1>登录</h1>\n        <hr/>\n\t<!--子路由链接-->\n        <router-link to='/register/tab1'>tab1</router-link>\n        <router-link to='/register/tab2'>tab2</router-link>\n        <!-- 子路由填充位置 -->\n        <router-view></router-view>\n    </div>\n    `\n};\n```\n\n3.父路由通过children属性配置子级路由，children**数组**表示子路由规则。\n\n```js\nconst router = new VueRouter({\n    // 定义路由规则\n    routes: [\n        // 重定向 当用户打开页面时，定位到user组件\n        { path: '/', redirect: '/user' },\n        { path: '/user', component: User },\n        {\n            path: '/register',\n            component: Register,\n            // 通过children属性，为/register添加子路由规则\n            children:[\n                {path:'/register/tab1',component:Tab1},\n                {path:'/register/tab2',component:Tab2}\n            ]\n        }\n    ]\n})\n```\n\n![动2](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803123419.gif)\n\n全部代码见：http://jsrun.net/PU8Kp/edit\n\n## 动态路由匹配\n\n通过动态路由参数的模式进行路由匹配\n\n在路由规则中，要配置以冒号开头的动态参数\n\n```js\nconst router = new VueRouter({\n    // routes是路由规则数组\n    routes: [\n        // 动态路径参数，以冒号开头\n        { path: '/user/:id', component: User }\n\n    ]\n})\n```\n\n### 直接通过params获取参数\n\n在路由组件中，可以通过`$route.params`获取路由参数。\n\n```js\nconst User = {\n    // 路由组件中通过$route.params获取路由参数\n    template: `<h1>user 组件---{{$route.params.id}}</h1>`\n}\n```\n\n### 通过props传参\n\n`$route`与对应路由形成高度耦合，不够灵活。所以，可以使用 `props`将组件和路由解耦。\n\n1. 路由规则中`props`的值为布尔值\n\n   ```js\n   const router = new VueRouter({\n               // routes是路由规则数组\n               routes: [\n                   // 如果props设置为true，route.params将会被设置为组件的属性\n                   { path: '/user/:id', component: User,props:true},\n               ]\n           })\n   ```\n\n   ```js\n   const User = {\n       props:['id'], \n       // 使用 props 接收路由参数\n       // 当然也可以继续使用$route.params.id\n       template: `<h1>user 组件---{{id}}--{{$route.params.id}}</h1>`\n   }\n   ```\n\n2. 路由规则中`props`的值是对象类型\n\n   如果 props是一个对象，它会被按原样设置为组件属性，此时路径中的id已经不能访问了。（如果props设置为true，`route.params`才会被设置为组件的属性）\n\n   ```js\n   // 创建路由实例对象\n   const router = new VueRouter({\n       // routes是路由规则数组\n       routes: [\n           // 如果 props是一个对象，它会被按原样设置为组件属性\n           { path: '/user/:id', component: User,props:{uname:'lisi',age:20}},\n       ]\n   })\n   ```\n\n   ```js\n   const User = {\n       props: ['id', 'uname', 'age'],\n       // 此时的id并没有传值，需要使用$route.params.id才行\n       template: `<h1>user 组件---Id：{{id}}--id：{{$route.params.id}}--{{uname}}--{{age}}</h1>`\n   }\n   ```\n\n   最终效果：\n\n   ![image-20210803134627526](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803134627.png)\n\n3. `props`的值为函数类型\n\n   形参route的值等于 `route.params`，即path中的动态参数。\n\n   ![image-20210803214818700](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214818.png)\n\n   ```js\n   const User = {\n       props: ['id', 'uname', 'age'],\n       template: `<h1>user 组件---Id：{{id}}--id：{{$route.params.id}}--{{uname}}--{{age}}</h1>`\n   }\n   ```\n\n   ```js\n   // 创建路由实例对象\n   const router = new VueRouter({\n       // routes是路由规则数组\n       routes: [\n           // 如果 props是一个对象，它会被按原样设置为组件属性\n           {\n               path: '/user/:id',\n               component: User,\n               props: (route) => { return {uname:'zhangsan',age:20,id:route.params.id} }\n           },\n       ]\n   })\n   ```\n\n![image-20210803214603161](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214603.png)\n\n## 命名路由\n\n为了更方便的表示路由的路径，可以给路由规则起一个别名，即为“命名路由”。\n\n注意：在to前面需要加上冒号:\n\n```js\nconst router = new VueRouter({\n    // routes是路由规则数组\n    routes: [\n        {\n            // 命名路由\n            name:'user',\n            path: '/user/:id',\n            component: User,\n        },\n    ]\n})\n```\n\n```html\n<div id=\"app\">\n    <router-link :to=\"{name:'user',params:{id:123}}\">User1</router-link>\n    <!-- 就相当于 -->\n    <router-link to=\"/user/123\">User2</router-link>\n    <router-view></router-view>\n</div>\n```\n\n## 编程式导航\n\n声明式导航：通过点击链接实现导航的方式，叫做声明式导航\n例如:普通网页中的`<a> </a>`链接或`vue`中的`<router-link> </router-link>`\n\n编程式导航:通过调用JavaScript形式的API实现导航的方式，叫做编程式导航\n例如:普通网页中的`location.href`。\n\n`vue`中常见的编程式导航：\n\n- `this.$route.push('hash地址')`\n\n  **注意：在 `Vue` 实例内部，你可以通过 `$router` 访问路由实例。因此你可以调用 `this.$router.push`。**\n\n  想要导航到不同的 URL，则使用 `router.push` 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。\n\n  **注意：如果提供了 `path`，`params` 会被忽略，上述例子中的 `query` 并不属于这种情况。**\n\n  ```js\n  // 字符串\n  router.push('/home')\n  \n  // 对象\n  router.push({ path: '/home' })\n  \n  // 命名的路由\n  router.push({ name: 'user', params: { userId: '123' }})\n  \n  // 带查询参数，变成 /register?plan=private\n  router.push({ path: 'register', query: { plan: 'private' }})\n  ```\n\n- `this.$router.go(n)`\n\n  这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 `window.history.go(n)`。\n\n```js\nconst User = {\n    props: ['id', 'uname', 'age'],\n    template: `<div>\n        <h1>user组件-- 用户id为：{{id}}--姓名：{{uname}}--年龄为:{{age}}</h1>\n        <button @click='goRegister'>跳转到register页面</button>\n        </div>`,\n    methods: {\n        goRegister(){\n            //跳转到注册页面\n            this.$router.push('/register');\n        }\n    },\n}\nconst Register = {\n    template: `<div>\n        <h1>register</h1>\n        <button @click='goback'>回退</button>\n        </div>`,\n    methods: {\n        goback(){\n            this.$router.go(-1);\n        }\n    },\n}\n\n// 创建路由实例对象\nconst router = new VueRouter({\n    // routes是路由规则数组\n    routes: [\n        { path: '/user/:id', component: User, props: route => ({ id: route.params.id, uname: 'jiaqicoder', age: 22 }) },\n        { path: '/register', component: Register },\n    ]\n})\n```\n\n# Vue-Router小案例\n\n根据项目的整体布局划分好组件结构，通过路由导航控制组件的显示。\n\n1.抽离并渲染 App根组件\n\n2.将左侧菜单改造为路由链接\n\n3.创建左侧菜 单对应的路由组件\n\n4.在右侧主体区 域添加路由占位符\n\n5.添加子路由规则\n\n6.通过路由重定向默认渲染用户组件\n\n7.渲染用户列表数据\n\n8.编程式导航跳转到用户详情页\n\n9.实现后退功能\n\n素材代码：\n\nhttp://jsrun.net/t98Kp/edit\n\n最终效果：\n\n![动23](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210804125047.gif)\n\n实现的代码：(省略了css)\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>基于vue-router的案例</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\"></script>\n  <script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n</head>\n\n<body>\n  <!-- 被vue实例所控制的区域 -->\n  <div id=\"app\">\n    <!-- 路由占位符 -->\n    <router-view></router-view>\n  </div>\n  <table>\n    <tr>\n      <th>id</th>\n      <th>name</th>\n      <th>age</th>\n    </tr>\n  </table>\n  <script>\n    // 定义app根组件\n    const App = {\n      template: `\n          <div>\n      <!-- 头部区域 -->\n      <header class=\"header\">后台管理系统</header>\n      <!-- 中间主体区域 -->\n      <div class=\"main\">\n        <!-- 左侧菜单栏 -->\n        <div class=\"content left\">\n          <ul>\n            <li><router-link to='/users'>用户管理</router-link></li>\n            <li><router-link to='/rights'>权限管理</router-link></li>\n            <li><router-link to='/goods'>商品管理</router-link></li>\n            <li><router-link to='/orders'>订单管理</router-link></li>\n            <li><router-link to='/settings'>系统设置</router-link></li>\n          </ul>\n        </div>\n        <!-- 右侧内容区域 -->\n        <div class=\"content right\"><div class=\"main-content\"><router-view></router-view>\n</div></div>\n      </div>\n      <!-- 尾部区域 -->\n      <footer class=\"footer\">版权信息</footer>\n    </div>\n          `,\n    };\n    const UserInfo={\n      template:`<div>\n        <h5>用户详情页--id:{{id}}---{{$route.params.id}}</h5>\n        <button @click='goBack'>后退</button>\n      </div>`,\n      props:['id'],\n      methods: {\n        goBack(){\n          this.$router.go(-1);\n        }\n      },\n    }\n    \n    const Users = {\n      template: `\n      <div>\n        <h3>用户管理</h3>\n        <table>\n          <tr>\n              <th>id</th>\n              <th>name</th>\n              <th>age</th>\n              <th>操作</th>\n          </tr>\n          <tr v-for='item in userlist ':key=\"item.id\">\n            <td>{{item.id}}</td>\n            <td>{{item.name}}</td>\n            <td>{{item.age}}</td>\n            <td>\n              <a href='javascript:;' @click='goDetail(item.id)'>详情</a>\n            </td>\n          </tr>\n        </table>\n      </div>`,\n      methods: {\n        goDetail(id){\n          this.$router.push('/userinfo/'+id)\n        }\n      },\n      data() {\n        return {\n          userlist: [\n            { id: 1, name: '张三', age: 30 },\n            { id: 2, name: '张四', age: 25 },\n            { id: 3, name: '张五', age: 47 },\n            { id: 4, name: '张六', age: 87 }\n          ]\n        }\n      }\n    };\n    const Rights = {\n      template: `<div><h3>权限管理</h3></div>`,\n    };\n    const Goods = {\n      template: `<div><h3>商品管理</h3></div>`,\n    };\n    const Orders = {\n      template: `<div><h3>订单管理</h3></div>`,\n    };\n    const Settings = {\n      template: `<div><h3>系统设置</h3></div>`,\n    };\n    //  创建路由对象\n    const router = new VueRouter({\n      routes: [{\n        path: '/', component: App,\n        redirect: '/users',\n        children: [\n          { path: '/users', component: Users },\n          { path: '/userinfo/:id', component: UserInfo ,props:true},\n          { path: '/rights', component: Rights },\n          { path: '/goods', component: Goods },\n          { path: '/orders', component: Orders },\n          { path: '/settings', component: Settings },\n        ]\n      },\n      ],\n\n    })\n\n    const vm = new Vue({\n      el: '#app',\n      router\n    });\n  </script>\n</body>\n\n</html>\n```\n\n案例思路：\n1).先将素材文件夹中的11.基于vue-router的案例.html复制到我们自己的文件夹中。\n看一下这个文件中的代码编写了一些什么内容，\n这个页面已经把后台管理页面的基本布局实现了\n2).在页面中引入vue，vue-router\n3).创建Vue实例对象，准备开始编写代码实现功能\n4).希望是通过组件的形式展示页面的主体内容，而不是写死页面结构，所以我们可以定义一个根组件：\n\n```js\n//只需要把原本页面中的html代码设置为组件中的模板内容即可\nconst app = {\n    template:`<div>\n        <!-- 头部区域 -->\n        <header class=\"header\">传智后台管理系统</header>\n        <!-- 中间主体区域 -->\n        <div class=\"main\">\n          <!-- 左侧菜单栏 -->\n          <div class=\"content left\">\n            <ul>\n              <li>用户管理</li>\n              <li>权限管理</li>\n              <li>商品管理</li>\n              <li>订单管理</li>\n              <li>系统设置</li>\n            </ul>\n          </div>\n          <!-- 右侧内容区域 -->\n          <div class=\"content right\">\n            <div class=\"main-content\">添加用户表单</div>\n          </div>\n        </div>\n        <!-- 尾部区域 -->\n        <footer class=\"footer\">版权信息</footer>\n      </div>`\n  }\n```\n5).当我们访问页面的时候，默认需要展示刚刚创建的app根组件，我们可以\n创建一个路由对象来完成这个事情,然后将路由挂载到Vue实例对象中即可\n```js\nconst myRouter = new VueRouter({\n    routes:[\n        {path:\"/\",component:app}\n    ]\n})\n\nconst vm = new Vue({\n    el:\"#app\",\n    data:{},\n    methods:{},\n    router:myRouter\n})\n```\n补充：到此为止，基本的js代码都处理完毕了，我们还需要设置一个路由占位符\n```js\n<body>\n  <div id=\"app\">\n    <router-view></router-view>\n  </div>\n</body>\n```\n6).此时我们打开页面应该就可以得到一个VueRouter路由出来的根组件了\n我们需要在这个根组件中继续路由实现其他的功能子组件\n先让我们更改根组件中的模板：更改左侧li为子级路由链接，并在右侧内容区域添加子级组件占位符\n```js\nconst app = {\n    template:`<div>\n        ........\n        <div class=\"main\">\n          <!-- 左侧菜单栏 -->\n          <div class=\"content left\">\n            <ul>\n              <!-- 注意：我们把所有li都修改为了路由链接 -->\n              <li><router-link to=\"/users\">用户管理</router-link></li>\n              <li><router-link to=\"/accesses\">权限管理</router-link></li>\n              <li><router-link to=\"/goods\">商品管理</router-link></li>\n              <li><router-link to=\"/orders\">订单管理</router-link></li>\n              <li><router-link to=\"/systems\">系统设置</router-link></li>\n            </ul>\n          </div>\n          <!-- 右侧内容区域 -->\n          <div class=\"content right\">\n            <div class=\"main-content\">\n                <!-- 在 -->\n                <router-view></router-view> \n            </div>\n          </div>\n        </div>\n        .......\n      </div>`\n  }\n```\n然后，我们要为子级路由创建并设置需要显示的子级组件\n```js\n//建议创建的组件首字母大写，和其他内容区分\nconst Users = {template:`<div>\n    <h3>用户管理</h3>\n</div>`}\nconst Access = {template:`<div>\n    <h3>权限管理</h3>\n</div>`}\nconst Goods = {template:`<div>\n    <h3>商品管理</h3>\n</div>`}\nconst Orders = {template:`<div>\n    <h3>订单管理</h3>\n</div>`}\nconst Systems = {template:`<div>\n    <h3>系统管理</h3>\n</div>`}\n\n//添加子组件的路由规则\nconst myRouter = new VueRouter({\n    routes:[\n        {path:\"/\",component:app , children:[\n            { path:\"/users\",component:Users },\n            { path:\"/accesses\",component:Access },\n            { path:\"/goods\",component:Goods },\n            { path:\"/orders\",component:Orders },\n            { path:\"/systems\",component:Systems },\n        ]}\n    ]\n})\n\nconst vm = new Vue({\n    el:\"#app\",\n    data:{},\n    methods:{},\n    router:myRouter\n})\n```\n\n7).展示用户信息列表：\n    A.为Users组件添加私有数据,并在模板中循环展示私有数据\n\n```js\nconst Users = {\n  data() {\n    return {\n      userList: [\n        { id: 1, name: \"zs\", age: 18 },\n        { id: 2, name: \"ls\", age: 19 },\n        { id: 3, name: \"wang\", age: 20 },\n        { id: 4, name: \"jack\", age: 21 },\n      ]\n    }\n  },\n  template: `<div>\n    <h3>用户管理</h3>\n    <table>\n        <thead>\n            <tr>\n                <th>编号</th>\n                <th>姓名</th>\n                <th>年龄</th>\n                <th>操作</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr :key=\"item.id\" v-for=\"item in userList\">\n                <td>{{item.id}}</td>\n                <td>{{item.name}}</td>\n                <td>{{item.age}}</td>\n                <td><a href=\"javascript:;\">详情</a></td>\n            </tr>\n        </tbody>\n    </table>\n</div>`}\n```\n\n8.当用户列表展示完毕之后，我们可以点击列表中的详情来显示用户详情信息，首先我们需要创建一个组件，用来展示详情信息\n```js\nconst UserInfo = {\n    props:[\"id\"],\n    template:`<div>\n      <h5>用户详情</h5>\n      <p>查看 {{id}} 号用户信息</p>\n      <button @click=\"goBack\">返回用户详情页</button>\n    </div> `,\n    methods:{\n      goBack(){\n        //当用户点击按钮，后退一页\n        this.$router.go(-1);\n      }\n    }\n  }\n```\n然后我们需要设置这个组件的路由规则\n```js\nconst myRouter = new VueRouter({\n    routes:[\n        {path:\"/\",component:app , children:[\n            { path:\"/users\",component:Users },\n            //添加一个/userinfo的路由规则\n            { path:\"/userinfo/:id\",component:UserInfo,props:true},\n            { path:\"/accesses\",component:Access },\n            { path:\"/goods\",component:Goods },\n            { path:\"/orders\",component:Orders },\n            { path:\"/systems\",component:Systems },\n        ]}\n    ]\n})\n\nconst vm = new Vue({\n    el:\"#app\",\n    data:{},\n    methods:{},\n    router:myRouter\n})\n```\n再接着给用户列表中的详情a链接添加事件\n```js\nconst Users = {\n    data(){\n        return {\n            userList:[\n                {id:1,name:\"zs\",age:18},\n                {id:2,name:\"ls\",age:19},\n                {id:3,name:\"wang\",age:20},\n                {id:4,name:\"jack\",age:21},\n            ]\n        }\n    },\n    template:`<div>\n        <h3>用户管理</h3>\n        <table>\n            <thead>\n                <tr>\n                    <th>编号</th>\n                    <th>姓名</th>\n                    <th>年龄</th>\n                    <th>操作</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr :key=\"item.id\" v-for=\"item in userList\">\n                    <td>{{item.id}}</td>\n                    <td>{{item.name}}</td>\n                    <td>{{item.age}}</td>\n                    <td><a href=\"javascript:;\" @click=\"goDetail(item.id)\">详情</a></td>\n                </tr>\n            </tbody>\n        </table>\n    </div>`,\n    methods:{\n        goDetail(id){\n            this.$router.push(\"/userinfo/\"+id);\n        }\n    }\n}\n```\n\n","source":"_posts/Vue路由学习笔记.md","raw":"---\ntitle: Vue路由学习笔记\ndate: 2021-08-02 12:03:51\ntags: [Vue,Vue路由]\n---\n\n笔记基于：https://router.vuejs.org/zh/ 和黑马视频\n\n# 路由的基本概念与原理\n\n## 路由\n\n### 后端路由\n\n- 概念：根据不同的用户URL请求，返回不同的内容\n- 本质：URL**请求地址**与**服务器资源**之问的对应关系\n\n![image-20210802121213464](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802121213.png)\n\n### SPA\n\n- 后端渲染（存在性能问题，假如用户频繁地提交表单，则会造成页面频繁刷新）。\n- Ajax前端渲染（前端渲染提高性能，但是不支持浏览器的前进后退操作）。\n- SPA（ Single Page Application）单页面应用程序：整个网站只有一个页面，内容的变化通过Ajax局部更新实现、同时支持浏览器地址栏的前进和后退操作。\n- SPA实现原理之一：基于URL地址的hash（hash的变化会导致浏览器记录访问历史的变化、但是hash的变化不会触发新的URL请求）。\n- 在实现SPA过程中，最核心的技术点就是**前端路由**。\n\n### 前端路由\n\n- 概念：根据不同的**用户事件**，显示不同的页面内容。\n- 本质：**用户事件**与**事件处理函数**之间的对应关系。\n\n![image-20210802122059780](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802122059.png)\n\n## 实现简单的前端路由\n\n基于URL中的hash实现（点击菜单的时候改变URL的hash，根据hash的变化控制组件的切换）\n\n```js\n// 监听window的onhashchange事件，根据最新的hash值，切换要显示的组件名称\nwindow.onhashchange=function(){\n    //通过location.hash 获取到最新的hash值\n}\n```\n\n实现的效果：\n\n根据`location.hash`的值切换页面显示的内容\n\n![动1](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802135422.gif)\n\n```html\n<div id=\"app\">\n    <!-- 切换组件的超链接 -->\n    <a href=\"#/zhuye\">主页</a>\n    <a href=\"#/keji\">科技</a>\n    <a href=\"#/caijing\">财经</a>\n    <a href=\"#/yule\">娱乐</a>\n    <!-- 根据is属性的指定的组件名称，把对应的组件渲染到component标签所在的位置 -->\n    <!-- 可以把component标签看做为组件的占位符 -->\n    <component :is=\"comName\"></component>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\"></script>\n<script>\n    const vm = new Vue({\n        el: '#app',\n        data: {\n            comName: 'zhuye'\n        },\n        // 注册私有组件\n        components: {\n            zhuye: {\n                template: `<h1>主页信息</h1>`,\n            },\n            keji: {\n                template: `<h1>科技信息</h1>`\n            },\n            caijing: {\n                template: `<h1>财经信息</h1>`\n            },\n            yule: {\n                template: `<h1>娱乐信息</h1>`\n            }\n        }\n    });\n    window.onhashchange = function () {\n        // 通过location.hash 获取到最新的hash值\n        console.log(location.hash);\n        let list = ['zhuye', 'keji', 'caijing', 'yule'];\n        list.some(item => {\n            if (location.hash.includes(item)) {\n                vm.comName = item;\n                return true;\n            }\n        })\n    }\n</script>\n```\n\n### 补充知识点\n\n1. `location.hash`\n\n   [`Location`](https://developer.mozilla.org/zh-CN/docs/Web/API/Location) 接口的 **`hash`** 属性返回一个 [`USVString`](https://developer.mozilla.org/zh-CN/docs/Web/API/USVString)，其中会包含URL标识中的 `'#'` 和 后面URL片段标识符。\n\n   ```html\n   <a id=\"myAnchor\" href=\"/en-US/docs/Location.href#Examples\">Examples</a>\n   <script>\n     var anchor = document.getElementById(\"myAnchor\");\n     console.log(anchor.hash); // 返回'#Examples'\n   </script>\n   ```\n\n2. 关于url对象，[在这篇里](https://jiaqicoder.com/2021/08/02/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#URL%E5%AF%B9%E8%B1%A1)写了很多。\n\n\n\n# VUE Router\n\nVue Router 是 [Vue.js (opens new window)](http://cn.vuejs.org/)官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：\n\n- 嵌套的路由/视图表\n- 模块化的、基于组件的路由配置\n- 路由参数、查询、通配符\n- 基于 Vue.js 过渡系统的视图过渡效果\n- 细粒度的导航控制\n- 带有自动激活的 CSS class 的链接\n- HTML5 历史模式或 hash 模式，在 IE9 中自动降级\n- 自定义的滚动条行为\n\n官网地址：https://router.vuejs.org/zh/\n\n## 使用步骤\n\n1. 引入相关的库文件\n\n   ```js\n   // 先导入vue再导入vue router\n   <script src=\"/path/to/vue.js\"></script>\n   <script src=\"/path/to/vue-router.js\"></script>\n   ```\n\n2. 添加路由链接\n\n   ```html\n   \n   <div id=\"app\">\n       <!-- router-link 是vue中提供的标签，默认会被渲染为 a 标签 -->\n       <!-- to 属性默认会被渲染为 href属性 -->\n       <!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 -->\n       <router-link to='/user'>User</router-link>\n       <router-link to='/register'>Register</router-link>\n   </div>\n   ```\n\n3. 添加路由填充位\n\n   ```html\n   <!-- 路由填充位（也叫路由占位符） -->\n   <!-- 通过路由规则匹配到的组件，会被渲染到router-view所在的位置 -->\n   <router-view></router-view>\n   ```\n\n4. 定义路由组件\n\n   ```js\n   const User={\n       template:`<h1>user 组件</h1>`\n   }\n   const Register={\n       template:`<h1>register</h1>`\n   }\n   ```\n\n5. 创建路由实例并配置路由规则\n\n   ```js\n   // 创建路由实例对象\n   const router = new VueRouter({\n       // routes是路由规则数组\n       routes:[\n           // 每一个路由规则都是一个配置对象，其中至少包括 path 和 component 两个属性：\n           // path 表示当前路由规则匹配到的hash地址\n           // component 表示当前路由规则要展示的组件\n           {path:'/user',component:User},\n           {path:'/register',component:Register},\n       ]\n   })\n   ```\n\n6. 把路由挂载到Vue根实例中\n\n   ```js\n   new Vue({\n       el: \"#app\",\n       data: {},\n       // 挂载路由实例对象\n       router\n   })\n   ```\n\n最终代码：\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   \n   <head>\n       <meta charset=\"UTF-8\">\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n       <script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\"></script>\n       <script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n       <title>Document</title>\n   </head>\n   \n   <body>\n       <div id=\"app\">\n           <!-- router-link 是vue中提供的标签，默认会被渲染为 a 标签 -->\n           <!-- to 属性默认会被渲染为 href属性 -->\n           <!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 -->\n           <router-link to='/user'>User</router-link>\n           <router-link to='/register'>Register</router-link>\n           <!-- 路由填充位（也叫路由占位符） -->\n           <!-- 通过路由规则匹配到的组件，会被渲染到router-view所在的位置 -->\n           <router-view></router-view>\n   \n       </div>\n   \n       <script>\n           const User = {\n               template: `<h1>user 组件</h1>`\n           }\n           const Register = {\n               template: `<h1>register</h1>`\n           }\n   \n           // 创建路由实例对象\n           const router = new VueRouter({\n               // routes是路由规则数组\n               routes: [\n                   // 每一个路由规则都是一个配置对象，其中至少包括 path 和 component 两个属性：\n                   // path 表示当前路由规则匹配到的hash地址\n                   // component 表示当前路由规则要展示的组件\n                   { path: '/user', component: User },\n                   { path: '/register', component: Register },\n               ]\n           })\n           new Vue({\n               el: \"#app\",\n               data: {},\n               // 挂载路由实例对象\n               router\n           })\n   \n       </script>\n   </body>\n   \n   </html>\n   ```\n\n ![动](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803112827.gif)\n\n## 路由重定向\n\n路由重定向：用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面。\n\n通过路由规则的 redirect属性，指定个新的路由地址，可以很方便地设置路由的重定向。\n\n基于先前的代码，实现当用户打开页面时，页面就跳转到'/user'。\n\n```js\nconst router = new VueRouter({\n    // routes是路由规则数组\n    routes: [\n        // path 表示需要被重定向的原地址， redirect表示将要被重定向的新地址\n        {path:'/',redirect:'/user'},\n        { path: '/user', component: User },\n        { path: '/register', component: Register },\n    ]\n})\n```\n\n## 嵌套路由\n\n### 嵌套路由功能分析\n\n- 点击父级路由链接显示模板内容\n- 模板内容中又有子级路由链接\n- 点击子级路由链接显示子级模板内容\n\n![image-20210803120119722](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803120119.png)\n\n### 具体实现\n\n1.父路由组件模板\n\n```html\n<div id=\"app\">\n    <router-link to='/user'>用户</router-link>\n    <router-link to='/register'>注册</router-link>\n    <!-- 路由填充位 -->\n    <router-view></router-view>\n</div>\n```\n\n2.子路由模板\n\n- 子路由链接\n- 子路由填充位置\n\n```js\nconst Register = {\n    template: `\n    <div>\n        <h1>登录</h1>\n        <hr/>\n\t<!--子路由链接-->\n        <router-link to='/register/tab1'>tab1</router-link>\n        <router-link to='/register/tab2'>tab2</router-link>\n        <!-- 子路由填充位置 -->\n        <router-view></router-view>\n    </div>\n    `\n};\n```\n\n3.父路由通过children属性配置子级路由，children**数组**表示子路由规则。\n\n```js\nconst router = new VueRouter({\n    // 定义路由规则\n    routes: [\n        // 重定向 当用户打开页面时，定位到user组件\n        { path: '/', redirect: '/user' },\n        { path: '/user', component: User },\n        {\n            path: '/register',\n            component: Register,\n            // 通过children属性，为/register添加子路由规则\n            children:[\n                {path:'/register/tab1',component:Tab1},\n                {path:'/register/tab2',component:Tab2}\n            ]\n        }\n    ]\n})\n```\n\n![动2](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803123419.gif)\n\n全部代码见：http://jsrun.net/PU8Kp/edit\n\n## 动态路由匹配\n\n通过动态路由参数的模式进行路由匹配\n\n在路由规则中，要配置以冒号开头的动态参数\n\n```js\nconst router = new VueRouter({\n    // routes是路由规则数组\n    routes: [\n        // 动态路径参数，以冒号开头\n        { path: '/user/:id', component: User }\n\n    ]\n})\n```\n\n### 直接通过params获取参数\n\n在路由组件中，可以通过`$route.params`获取路由参数。\n\n```js\nconst User = {\n    // 路由组件中通过$route.params获取路由参数\n    template: `<h1>user 组件---{{$route.params.id}}</h1>`\n}\n```\n\n### 通过props传参\n\n`$route`与对应路由形成高度耦合，不够灵活。所以，可以使用 `props`将组件和路由解耦。\n\n1. 路由规则中`props`的值为布尔值\n\n   ```js\n   const router = new VueRouter({\n               // routes是路由规则数组\n               routes: [\n                   // 如果props设置为true，route.params将会被设置为组件的属性\n                   { path: '/user/:id', component: User,props:true},\n               ]\n           })\n   ```\n\n   ```js\n   const User = {\n       props:['id'], \n       // 使用 props 接收路由参数\n       // 当然也可以继续使用$route.params.id\n       template: `<h1>user 组件---{{id}}--{{$route.params.id}}</h1>`\n   }\n   ```\n\n2. 路由规则中`props`的值是对象类型\n\n   如果 props是一个对象，它会被按原样设置为组件属性，此时路径中的id已经不能访问了。（如果props设置为true，`route.params`才会被设置为组件的属性）\n\n   ```js\n   // 创建路由实例对象\n   const router = new VueRouter({\n       // routes是路由规则数组\n       routes: [\n           // 如果 props是一个对象，它会被按原样设置为组件属性\n           { path: '/user/:id', component: User,props:{uname:'lisi',age:20}},\n       ]\n   })\n   ```\n\n   ```js\n   const User = {\n       props: ['id', 'uname', 'age'],\n       // 此时的id并没有传值，需要使用$route.params.id才行\n       template: `<h1>user 组件---Id：{{id}}--id：{{$route.params.id}}--{{uname}}--{{age}}</h1>`\n   }\n   ```\n\n   最终效果：\n\n   ![image-20210803134627526](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803134627.png)\n\n3. `props`的值为函数类型\n\n   形参route的值等于 `route.params`，即path中的动态参数。\n\n   ![image-20210803214818700](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214818.png)\n\n   ```js\n   const User = {\n       props: ['id', 'uname', 'age'],\n       template: `<h1>user 组件---Id：{{id}}--id：{{$route.params.id}}--{{uname}}--{{age}}</h1>`\n   }\n   ```\n\n   ```js\n   // 创建路由实例对象\n   const router = new VueRouter({\n       // routes是路由规则数组\n       routes: [\n           // 如果 props是一个对象，它会被按原样设置为组件属性\n           {\n               path: '/user/:id',\n               component: User,\n               props: (route) => { return {uname:'zhangsan',age:20,id:route.params.id} }\n           },\n       ]\n   })\n   ```\n\n![image-20210803214603161](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214603.png)\n\n## 命名路由\n\n为了更方便的表示路由的路径，可以给路由规则起一个别名，即为“命名路由”。\n\n注意：在to前面需要加上冒号:\n\n```js\nconst router = new VueRouter({\n    // routes是路由规则数组\n    routes: [\n        {\n            // 命名路由\n            name:'user',\n            path: '/user/:id',\n            component: User,\n        },\n    ]\n})\n```\n\n```html\n<div id=\"app\">\n    <router-link :to=\"{name:'user',params:{id:123}}\">User1</router-link>\n    <!-- 就相当于 -->\n    <router-link to=\"/user/123\">User2</router-link>\n    <router-view></router-view>\n</div>\n```\n\n## 编程式导航\n\n声明式导航：通过点击链接实现导航的方式，叫做声明式导航\n例如:普通网页中的`<a> </a>`链接或`vue`中的`<router-link> </router-link>`\n\n编程式导航:通过调用JavaScript形式的API实现导航的方式，叫做编程式导航\n例如:普通网页中的`location.href`。\n\n`vue`中常见的编程式导航：\n\n- `this.$route.push('hash地址')`\n\n  **注意：在 `Vue` 实例内部，你可以通过 `$router` 访问路由实例。因此你可以调用 `this.$router.push`。**\n\n  想要导航到不同的 URL，则使用 `router.push` 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。\n\n  **注意：如果提供了 `path`，`params` 会被忽略，上述例子中的 `query` 并不属于这种情况。**\n\n  ```js\n  // 字符串\n  router.push('/home')\n  \n  // 对象\n  router.push({ path: '/home' })\n  \n  // 命名的路由\n  router.push({ name: 'user', params: { userId: '123' }})\n  \n  // 带查询参数，变成 /register?plan=private\n  router.push({ path: 'register', query: { plan: 'private' }})\n  ```\n\n- `this.$router.go(n)`\n\n  这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 `window.history.go(n)`。\n\n```js\nconst User = {\n    props: ['id', 'uname', 'age'],\n    template: `<div>\n        <h1>user组件-- 用户id为：{{id}}--姓名：{{uname}}--年龄为:{{age}}</h1>\n        <button @click='goRegister'>跳转到register页面</button>\n        </div>`,\n    methods: {\n        goRegister(){\n            //跳转到注册页面\n            this.$router.push('/register');\n        }\n    },\n}\nconst Register = {\n    template: `<div>\n        <h1>register</h1>\n        <button @click='goback'>回退</button>\n        </div>`,\n    methods: {\n        goback(){\n            this.$router.go(-1);\n        }\n    },\n}\n\n// 创建路由实例对象\nconst router = new VueRouter({\n    // routes是路由规则数组\n    routes: [\n        { path: '/user/:id', component: User, props: route => ({ id: route.params.id, uname: 'jiaqicoder', age: 22 }) },\n        { path: '/register', component: Register },\n    ]\n})\n```\n\n# Vue-Router小案例\n\n根据项目的整体布局划分好组件结构，通过路由导航控制组件的显示。\n\n1.抽离并渲染 App根组件\n\n2.将左侧菜单改造为路由链接\n\n3.创建左侧菜 单对应的路由组件\n\n4.在右侧主体区 域添加路由占位符\n\n5.添加子路由规则\n\n6.通过路由重定向默认渲染用户组件\n\n7.渲染用户列表数据\n\n8.编程式导航跳转到用户详情页\n\n9.实现后退功能\n\n素材代码：\n\nhttp://jsrun.net/t98Kp/edit\n\n最终效果：\n\n![动23](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210804125047.gif)\n\n实现的代码：(省略了css)\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>基于vue-router的案例</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\"></script>\n  <script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>\n</head>\n\n<body>\n  <!-- 被vue实例所控制的区域 -->\n  <div id=\"app\">\n    <!-- 路由占位符 -->\n    <router-view></router-view>\n  </div>\n  <table>\n    <tr>\n      <th>id</th>\n      <th>name</th>\n      <th>age</th>\n    </tr>\n  </table>\n  <script>\n    // 定义app根组件\n    const App = {\n      template: `\n          <div>\n      <!-- 头部区域 -->\n      <header class=\"header\">后台管理系统</header>\n      <!-- 中间主体区域 -->\n      <div class=\"main\">\n        <!-- 左侧菜单栏 -->\n        <div class=\"content left\">\n          <ul>\n            <li><router-link to='/users'>用户管理</router-link></li>\n            <li><router-link to='/rights'>权限管理</router-link></li>\n            <li><router-link to='/goods'>商品管理</router-link></li>\n            <li><router-link to='/orders'>订单管理</router-link></li>\n            <li><router-link to='/settings'>系统设置</router-link></li>\n          </ul>\n        </div>\n        <!-- 右侧内容区域 -->\n        <div class=\"content right\"><div class=\"main-content\"><router-view></router-view>\n</div></div>\n      </div>\n      <!-- 尾部区域 -->\n      <footer class=\"footer\">版权信息</footer>\n    </div>\n          `,\n    };\n    const UserInfo={\n      template:`<div>\n        <h5>用户详情页--id:{{id}}---{{$route.params.id}}</h5>\n        <button @click='goBack'>后退</button>\n      </div>`,\n      props:['id'],\n      methods: {\n        goBack(){\n          this.$router.go(-1);\n        }\n      },\n    }\n    \n    const Users = {\n      template: `\n      <div>\n        <h3>用户管理</h3>\n        <table>\n          <tr>\n              <th>id</th>\n              <th>name</th>\n              <th>age</th>\n              <th>操作</th>\n          </tr>\n          <tr v-for='item in userlist ':key=\"item.id\">\n            <td>{{item.id}}</td>\n            <td>{{item.name}}</td>\n            <td>{{item.age}}</td>\n            <td>\n              <a href='javascript:;' @click='goDetail(item.id)'>详情</a>\n            </td>\n          </tr>\n        </table>\n      </div>`,\n      methods: {\n        goDetail(id){\n          this.$router.push('/userinfo/'+id)\n        }\n      },\n      data() {\n        return {\n          userlist: [\n            { id: 1, name: '张三', age: 30 },\n            { id: 2, name: '张四', age: 25 },\n            { id: 3, name: '张五', age: 47 },\n            { id: 4, name: '张六', age: 87 }\n          ]\n        }\n      }\n    };\n    const Rights = {\n      template: `<div><h3>权限管理</h3></div>`,\n    };\n    const Goods = {\n      template: `<div><h3>商品管理</h3></div>`,\n    };\n    const Orders = {\n      template: `<div><h3>订单管理</h3></div>`,\n    };\n    const Settings = {\n      template: `<div><h3>系统设置</h3></div>`,\n    };\n    //  创建路由对象\n    const router = new VueRouter({\n      routes: [{\n        path: '/', component: App,\n        redirect: '/users',\n        children: [\n          { path: '/users', component: Users },\n          { path: '/userinfo/:id', component: UserInfo ,props:true},\n          { path: '/rights', component: Rights },\n          { path: '/goods', component: Goods },\n          { path: '/orders', component: Orders },\n          { path: '/settings', component: Settings },\n        ]\n      },\n      ],\n\n    })\n\n    const vm = new Vue({\n      el: '#app',\n      router\n    });\n  </script>\n</body>\n\n</html>\n```\n\n案例思路：\n1).先将素材文件夹中的11.基于vue-router的案例.html复制到我们自己的文件夹中。\n看一下这个文件中的代码编写了一些什么内容，\n这个页面已经把后台管理页面的基本布局实现了\n2).在页面中引入vue，vue-router\n3).创建Vue实例对象，准备开始编写代码实现功能\n4).希望是通过组件的形式展示页面的主体内容，而不是写死页面结构，所以我们可以定义一个根组件：\n\n```js\n//只需要把原本页面中的html代码设置为组件中的模板内容即可\nconst app = {\n    template:`<div>\n        <!-- 头部区域 -->\n        <header class=\"header\">传智后台管理系统</header>\n        <!-- 中间主体区域 -->\n        <div class=\"main\">\n          <!-- 左侧菜单栏 -->\n          <div class=\"content left\">\n            <ul>\n              <li>用户管理</li>\n              <li>权限管理</li>\n              <li>商品管理</li>\n              <li>订单管理</li>\n              <li>系统设置</li>\n            </ul>\n          </div>\n          <!-- 右侧内容区域 -->\n          <div class=\"content right\">\n            <div class=\"main-content\">添加用户表单</div>\n          </div>\n        </div>\n        <!-- 尾部区域 -->\n        <footer class=\"footer\">版权信息</footer>\n      </div>`\n  }\n```\n5).当我们访问页面的时候，默认需要展示刚刚创建的app根组件，我们可以\n创建一个路由对象来完成这个事情,然后将路由挂载到Vue实例对象中即可\n```js\nconst myRouter = new VueRouter({\n    routes:[\n        {path:\"/\",component:app}\n    ]\n})\n\nconst vm = new Vue({\n    el:\"#app\",\n    data:{},\n    methods:{},\n    router:myRouter\n})\n```\n补充：到此为止，基本的js代码都处理完毕了，我们还需要设置一个路由占位符\n```js\n<body>\n  <div id=\"app\">\n    <router-view></router-view>\n  </div>\n</body>\n```\n6).此时我们打开页面应该就可以得到一个VueRouter路由出来的根组件了\n我们需要在这个根组件中继续路由实现其他的功能子组件\n先让我们更改根组件中的模板：更改左侧li为子级路由链接，并在右侧内容区域添加子级组件占位符\n```js\nconst app = {\n    template:`<div>\n        ........\n        <div class=\"main\">\n          <!-- 左侧菜单栏 -->\n          <div class=\"content left\">\n            <ul>\n              <!-- 注意：我们把所有li都修改为了路由链接 -->\n              <li><router-link to=\"/users\">用户管理</router-link></li>\n              <li><router-link to=\"/accesses\">权限管理</router-link></li>\n              <li><router-link to=\"/goods\">商品管理</router-link></li>\n              <li><router-link to=\"/orders\">订单管理</router-link></li>\n              <li><router-link to=\"/systems\">系统设置</router-link></li>\n            </ul>\n          </div>\n          <!-- 右侧内容区域 -->\n          <div class=\"content right\">\n            <div class=\"main-content\">\n                <!-- 在 -->\n                <router-view></router-view> \n            </div>\n          </div>\n        </div>\n        .......\n      </div>`\n  }\n```\n然后，我们要为子级路由创建并设置需要显示的子级组件\n```js\n//建议创建的组件首字母大写，和其他内容区分\nconst Users = {template:`<div>\n    <h3>用户管理</h3>\n</div>`}\nconst Access = {template:`<div>\n    <h3>权限管理</h3>\n</div>`}\nconst Goods = {template:`<div>\n    <h3>商品管理</h3>\n</div>`}\nconst Orders = {template:`<div>\n    <h3>订单管理</h3>\n</div>`}\nconst Systems = {template:`<div>\n    <h3>系统管理</h3>\n</div>`}\n\n//添加子组件的路由规则\nconst myRouter = new VueRouter({\n    routes:[\n        {path:\"/\",component:app , children:[\n            { path:\"/users\",component:Users },\n            { path:\"/accesses\",component:Access },\n            { path:\"/goods\",component:Goods },\n            { path:\"/orders\",component:Orders },\n            { path:\"/systems\",component:Systems },\n        ]}\n    ]\n})\n\nconst vm = new Vue({\n    el:\"#app\",\n    data:{},\n    methods:{},\n    router:myRouter\n})\n```\n\n7).展示用户信息列表：\n    A.为Users组件添加私有数据,并在模板中循环展示私有数据\n\n```js\nconst Users = {\n  data() {\n    return {\n      userList: [\n        { id: 1, name: \"zs\", age: 18 },\n        { id: 2, name: \"ls\", age: 19 },\n        { id: 3, name: \"wang\", age: 20 },\n        { id: 4, name: \"jack\", age: 21 },\n      ]\n    }\n  },\n  template: `<div>\n    <h3>用户管理</h3>\n    <table>\n        <thead>\n            <tr>\n                <th>编号</th>\n                <th>姓名</th>\n                <th>年龄</th>\n                <th>操作</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr :key=\"item.id\" v-for=\"item in userList\">\n                <td>{{item.id}}</td>\n                <td>{{item.name}}</td>\n                <td>{{item.age}}</td>\n                <td><a href=\"javascript:;\">详情</a></td>\n            </tr>\n        </tbody>\n    </table>\n</div>`}\n```\n\n8.当用户列表展示完毕之后，我们可以点击列表中的详情来显示用户详情信息，首先我们需要创建一个组件，用来展示详情信息\n```js\nconst UserInfo = {\n    props:[\"id\"],\n    template:`<div>\n      <h5>用户详情</h5>\n      <p>查看 {{id}} 号用户信息</p>\n      <button @click=\"goBack\">返回用户详情页</button>\n    </div> `,\n    methods:{\n      goBack(){\n        //当用户点击按钮，后退一页\n        this.$router.go(-1);\n      }\n    }\n  }\n```\n然后我们需要设置这个组件的路由规则\n```js\nconst myRouter = new VueRouter({\n    routes:[\n        {path:\"/\",component:app , children:[\n            { path:\"/users\",component:Users },\n            //添加一个/userinfo的路由规则\n            { path:\"/userinfo/:id\",component:UserInfo,props:true},\n            { path:\"/accesses\",component:Access },\n            { path:\"/goods\",component:Goods },\n            { path:\"/orders\",component:Orders },\n            { path:\"/systems\",component:Systems },\n        ]}\n    ]\n})\n\nconst vm = new Vue({\n    el:\"#app\",\n    data:{},\n    methods:{},\n    router:myRouter\n})\n```\n再接着给用户列表中的详情a链接添加事件\n```js\nconst Users = {\n    data(){\n        return {\n            userList:[\n                {id:1,name:\"zs\",age:18},\n                {id:2,name:\"ls\",age:19},\n                {id:3,name:\"wang\",age:20},\n                {id:4,name:\"jack\",age:21},\n            ]\n        }\n    },\n    template:`<div>\n        <h3>用户管理</h3>\n        <table>\n            <thead>\n                <tr>\n                    <th>编号</th>\n                    <th>姓名</th>\n                    <th>年龄</th>\n                    <th>操作</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr :key=\"item.id\" v-for=\"item in userList\">\n                    <td>{{item.id}}</td>\n                    <td>{{item.name}}</td>\n                    <td>{{item.age}}</td>\n                    <td><a href=\"javascript:;\" @click=\"goDetail(item.id)\">详情</a></td>\n                </tr>\n            </tbody>\n        </table>\n    </div>`,\n    methods:{\n        goDetail(id){\n            this.$router.push(\"/userinfo/\"+id);\n        }\n    }\n}\n```\n\n","slug":"Vue路由学习笔记","published":1,"updated":"2021-08-04T05:11:47.516Z","_id":"ckrub5z0l00006sun90eycsua","comments":1,"layout":"post","photos":[],"link":"","content":"<p>笔记基于：<a href=\"https://router.vuejs.org/zh/\">https://router.vuejs.org/zh/</a> 和黑马视频</p>\n<h1 id=\"路由的基本概念与原理\"><a href=\"#路由的基本概念与原理\" class=\"headerlink\" title=\"路由的基本概念与原理\"></a>路由的基本概念与原理</h1><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><h3 id=\"后端路由\"><a href=\"#后端路由\" class=\"headerlink\" title=\"后端路由\"></a>后端路由</h3><ul>\n<li>概念：根据不同的用户URL请求，返回不同的内容</li>\n<li>本质：URL<strong>请求地址</strong>与<strong>服务器资源</strong>之问的对应关系</li>\n</ul>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802121213.png\" alt=\"image-20210802121213464\"></p>\n<h3 id=\"SPA\"><a href=\"#SPA\" class=\"headerlink\" title=\"SPA\"></a>SPA</h3><ul>\n<li>后端渲染（存在性能问题，假如用户频繁地提交表单，则会造成页面频繁刷新）。</li>\n<li>Ajax前端渲染（前端渲染提高性能，但是不支持浏览器的前进后退操作）。</li>\n<li>SPA（ Single Page Application）单页面应用程序：整个网站只有一个页面，内容的变化通过Ajax局部更新实现、同时支持浏览器地址栏的前进和后退操作。</li>\n<li>SPA实现原理之一：基于URL地址的hash（hash的变化会导致浏览器记录访问历史的变化、但是hash的变化不会触发新的URL请求）。</li>\n<li>在实现SPA过程中，最核心的技术点就是<strong>前端路由</strong>。</li>\n</ul>\n<h3 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h3><ul>\n<li>概念：根据不同的<strong>用户事件</strong>，显示不同的页面内容。</li>\n<li>本质：<strong>用户事件</strong>与<strong>事件处理函数</strong>之间的对应关系。</li>\n</ul>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802122059.png\" alt=\"image-20210802122059780\"></p>\n<h2 id=\"实现简单的前端路由\"><a href=\"#实现简单的前端路由\" class=\"headerlink\" title=\"实现简单的前端路由\"></a>实现简单的前端路由</h2><p>基于URL中的hash实现（点击菜单的时候改变URL的hash，根据hash的变化控制组件的切换）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 监听window的onhashchange事件，根据最新的hash值，切换要显示的组件名称</span><br><span class=\"hljs-built_in\">window</span>.onhashchange=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">//通过location.hash 获取到最新的hash值</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>实现的效果：</p>\n<p>根据<code>location.hash</code>的值切换页面显示的内容</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802135422.gif\" alt=\"动1\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 切换组件的超链接 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#/zhuye&quot;</span>&gt;</span>主页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#/keji&quot;</span>&gt;</span>科技<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#/caijing&quot;</span>&gt;</span>财经<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#/yule&quot;</span>&gt;</span>娱乐<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 根据is属性的指定的组件名称，把对应的组件渲染到component标签所在的位置 --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 可以把component标签看做为组件的占位符 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">&quot;comName&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">comName</span>: <span class=\"hljs-string\">&#x27;zhuye&#x27;</span></span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 注册私有组件</span></span><br><span class=\"javascript\">        <span class=\"hljs-attr\">components</span>: &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">zhuye</span>: &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;主页信息&lt;/h1&gt;`</span>,</span><br><span class=\"javascript\">            &#125;,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">keji</span>: &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;科技信息&lt;/h1&gt;`</span></span><br><span class=\"javascript\">            &#125;,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">caijing</span>: &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;财经信息&lt;/h1&gt;`</span></span><br><span class=\"javascript\">            &#125;,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">yule</span>: &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;娱乐信息&lt;/h1&gt;`</span></span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">    &#125;);</span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">window</span>.onhashchange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 通过location.hash 获取到最新的hash值</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(location.hash);</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> list = [<span class=\"hljs-string\">&#x27;zhuye&#x27;</span>, <span class=\"hljs-string\">&#x27;keji&#x27;</span>, <span class=\"hljs-string\">&#x27;caijing&#x27;</span>, <span class=\"hljs-string\">&#x27;yule&#x27;</span>];</span><br><span class=\"javascript\">        list.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (location.hash.includes(item)) &#123;</span><br><span class=\"javascript\">                vm.comName = item;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">        &#125;)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"补充知识点\"><a href=\"#补充知识点\" class=\"headerlink\" title=\"补充知识点\"></a>补充知识点</h3><ol>\n<li><p><code>location.hash</code></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Location\"><code>Location</code></a> 接口的 <strong><code>hash</code></strong> 属性返回一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/USVString\"><code>USVString</code></a>，其中会包含URL标识中的 <code>&#39;#&#39;</code> 和 后面URL片段标识符。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myAnchor&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/en-US/docs/Location.href#Examples&quot;</span>&gt;</span>Examples<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">var</span> anchor = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;myAnchor&quot;</span>);</span><br><span class=\"javascript\">  <span class=\"hljs-built_in\">console</span>.log(anchor.hash); <span class=\"hljs-comment\">// 返回&#x27;#Examples&#x27;</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>关于url对象，<a href=\"https://jiaqicoder.com/2021/08/02/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#URL%E5%AF%B9%E8%B1%A1\">在这篇里</a>写了很多。</p>\n</li>\n</ol>\n<h1 id=\"VUE-Router\"><a href=\"#VUE-Router\" class=\"headerlink\" title=\"VUE Router\"></a>VUE Router</h1><p>Vue Router 是 <a href=\"http://cn.vuejs.org/\">Vue.js (opens new window)</a>官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p>\n<ul>\n<li>嵌套的路由/视图表</li>\n<li>模块化的、基于组件的路由配置</li>\n<li>路由参数、查询、通配符</li>\n<li>基于 Vue.js 过渡系统的视图过渡效果</li>\n<li>细粒度的导航控制</li>\n<li>带有自动激活的 CSS class 的链接</li>\n<li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li>\n<li>自定义的滚动条行为</li>\n</ul>\n<p>官网地址：<a href=\"https://router.vuejs.org/zh/\">https://router.vuejs.org/zh/</a></p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><ol>\n<li><p>引入相关的库文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 先导入vue再导入vue router</span><br>&lt;script src=<span class=\"hljs-string\">&quot;/path/to/vue.js&quot;</span>&gt;&lt;/script&gt;<br><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/path/to/vue-router.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li>\n<li><p>添加路由链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- router-link 是vue中提供的标签，默认会被渲染为 a 标签 --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- to 属性默认会被渲染为 href属性 --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/user&#x27;</span>&gt;</span>User<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/register&#x27;</span>&gt;</span>Register<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>添加路由填充位</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 路由填充位（也叫路由占位符） --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 通过路由规则匹配到的组件，会被渲染到router-view所在的位置 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>定义路由组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User=&#123;<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;h1&gt;user 组件&lt;/h1&gt;`</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> Register=&#123;<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;h1&gt;register&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>创建路由实例并配置路由规则</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建路由实例对象</span><br><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>:[<br>        <span class=\"hljs-comment\">// 每一个路由规则都是一个配置对象，其中至少包括 path 和 component 两个属性：</span><br>        <span class=\"hljs-comment\">// path 表示当前路由规则匹配到的hash地址</span><br>        <span class=\"hljs-comment\">// component 表示当前路由规则要展示的组件</span><br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/user&#x27;</span>,<span class=\"hljs-attr\">component</span>:User&#125;,<br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/register&#x27;</span>,<span class=\"hljs-attr\">component</span>:Register&#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n<li><p>把路由挂载到Vue根实例中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> Vue(&#123;<br>    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,<br>    <span class=\"hljs-attr\">data</span>: &#123;&#125;,<br>    <span class=\"hljs-comment\">// 挂载路由实例对象</span><br>    router<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>最终代码：</p>\n   <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- router-link 是vue中提供的标签，默认会被渲染为 a 标签 --&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- to 属性默认会被渲染为 href属性 --&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/user&#x27;</span>&gt;</span>User<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/register&#x27;</span>&gt;</span>Register<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 路由填充位（也叫路由占位符） --&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 通过路由规则匹配到的组件，会被渲染到router-view所在的位置 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> User = &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;user 组件&lt;/h1&gt;`</span></span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> Register = &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;register&lt;/h1&gt;`</span></span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 创建路由实例对象</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// routes是路由规则数组</span></span><br><span class=\"javascript\">            <span class=\"hljs-attr\">routes</span>: [</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 每一个路由规则都是一个配置对象，其中至少包括 path 和 component 两个属性：</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// path 表示当前路由规则匹配到的hash地址</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// component 表示当前路由规则要展示的组件</span></span><br><span class=\"javascript\">                &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user&#x27;</span>, <span class=\"hljs-attr\">component</span>: User &#125;,</span><br><span class=\"javascript\">                &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/register&#x27;</span>, <span class=\"hljs-attr\">component</span>: Register &#125;,</span><br><span class=\"javascript\">            ]</span><br><span class=\"javascript\">        &#125;)</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">data</span>: &#123;&#125;,</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 挂载路由实例对象</span></span><br><span class=\"javascript\">            router</span><br><span class=\"javascript\">        &#125;)</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p> <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803112827.gif\" alt=\"动\"></p>\n<h2 id=\"路由重定向\"><a href=\"#路由重定向\" class=\"headerlink\" title=\"路由重定向\"></a>路由重定向</h2><p>路由重定向：用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面。</p>\n<p>通过路由规则的 redirect属性，指定个新的路由地址，可以很方便地设置路由的重定向。</p>\n<p>基于先前的代码，实现当用户打开页面时，页面就跳转到’/user’。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        <span class=\"hljs-comment\">// path 表示需要被重定向的原地址， redirect表示将要被重定向的新地址</span><br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/&#x27;</span>,<span class=\"hljs-attr\">redirect</span>:<span class=\"hljs-string\">&#x27;/user&#x27;</span>&#125;,<br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user&#x27;</span>, <span class=\"hljs-attr\">component</span>: User &#125;,<br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/register&#x27;</span>, <span class=\"hljs-attr\">component</span>: Register &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h2><h3 id=\"嵌套路由功能分析\"><a href=\"#嵌套路由功能分析\" class=\"headerlink\" title=\"嵌套路由功能分析\"></a>嵌套路由功能分析</h3><ul>\n<li>点击父级路由链接显示模板内容</li>\n<li>模板内容中又有子级路由链接</li>\n<li>点击子级路由链接显示子级模板内容</li>\n</ul>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803120119.png\" alt=\"image-20210803120119722\"></p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>1.父路由组件模板</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/user&#x27;</span>&gt;</span>用户<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/register&#x27;</span>&gt;</span>注册<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 路由填充位 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>2.子路由模板</p>\n<ul>\n<li>子路由链接</li>\n<li>子路由填充位置</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Register = &#123;<br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`</span><br><span class=\"hljs-string\">    &lt;div&gt;</span><br><span class=\"hljs-string\">        &lt;h1&gt;登录&lt;/h1&gt;</span><br><span class=\"hljs-string\">        &lt;hr/&gt;</span><br><span class=\"hljs-string\">\t&lt;!--子路由链接--&gt;</span><br><span class=\"hljs-string\">        &lt;router-link to=&#x27;/register/tab1&#x27;&gt;tab1&lt;/router-link&gt;</span><br><span class=\"hljs-string\">        &lt;router-link to=&#x27;/register/tab2&#x27;&gt;tab2&lt;/router-link&gt;</span><br><span class=\"hljs-string\">        &lt;!-- 子路由填充位置 --&gt;</span><br><span class=\"hljs-string\">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"hljs-string\">    &lt;/div&gt;</span><br><span class=\"hljs-string\">    `</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>3.父路由通过children属性配置子级路由，children<strong>数组</strong>表示子路由规则。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// 定义路由规则</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        <span class=\"hljs-comment\">// 重定向 当用户打开页面时，定位到user组件</span><br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-attr\">redirect</span>: <span class=\"hljs-string\">&#x27;/user&#x27;</span> &#125;,<br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user&#x27;</span>, <span class=\"hljs-attr\">component</span>: User &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/register&#x27;</span>,<br>            <span class=\"hljs-attr\">component</span>: Register,<br>            <span class=\"hljs-comment\">// 通过children属性，为/register添加子路由规则</span><br>            <span class=\"hljs-attr\">children</span>:[<br>                &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/register/tab1&#x27;</span>,<span class=\"hljs-attr\">component</span>:Tab1&#125;,<br>                &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/register/tab2&#x27;</span>,<span class=\"hljs-attr\">component</span>:Tab2&#125;<br>            ]<br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803123419.gif\" alt=\"动2\"></p>\n<p>全部代码见：<a href=\"http://jsrun.net/PU8Kp/edit\">http://jsrun.net/PU8Kp/edit</a></p>\n<h2 id=\"动态路由匹配\"><a href=\"#动态路由匹配\" class=\"headerlink\" title=\"动态路由匹配\"></a>动态路由匹配</h2><p>通过动态路由参数的模式进行路由匹配</p>\n<p>在路由规则中，要配置以冒号开头的动态参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        <span class=\"hljs-comment\">// 动态路径参数，以冒号开头</span><br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>, <span class=\"hljs-attr\">component</span>: User &#125;<br><br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"直接通过params获取参数\"><a href=\"#直接通过params获取参数\" class=\"headerlink\" title=\"直接通过params获取参数\"></a>直接通过params获取参数</h3><p>在路由组件中，可以通过<code>$route.params</code>获取路由参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User = &#123;<br>    <span class=\"hljs-comment\">// 路由组件中通过$route.params获取路由参数</span><br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;user 组件---&#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"通过props传参\"><a href=\"#通过props传参\" class=\"headerlink\" title=\"通过props传参\"></a>通过props传参</h3><p><code>$route</code>与对应路由形成高度耦合，不够灵活。所以，可以使用 <code>props</code>将组件和路由解耦。</p>\n<ol>\n<li><p>路由规则中<code>props</code>的值为布尔值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>            <span class=\"hljs-comment\">// routes是路由规则数组</span><br>            <span class=\"hljs-attr\">routes</span>: [<br>                <span class=\"hljs-comment\">// 如果props设置为true，route.params将会被设置为组件的属性</span><br>                &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>, <span class=\"hljs-attr\">component</span>: User,<span class=\"hljs-attr\">props</span>:<span class=\"hljs-literal\">true</span>&#125;,<br>            ]<br>        &#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User = &#123;<br>    <span class=\"hljs-attr\">props</span>:[<span class=\"hljs-string\">&#x27;id&#x27;</span>], <br>    <span class=\"hljs-comment\">// 使用 props 接收路由参数</span><br>    <span class=\"hljs-comment\">// 当然也可以继续使用$route.params.id</span><br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;user 组件---&#123;&#123;id&#125;&#125;--&#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>路由规则中<code>props</code>的值是对象类型</p>\n<p>如果 props是一个对象，它会被按原样设置为组件属性，此时路径中的id已经不能访问了。（如果props设置为true，<code>route.params</code>才会被设置为组件的属性）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建路由实例对象</span><br><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        <span class=\"hljs-comment\">// 如果 props是一个对象，它会被按原样设置为组件属性</span><br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>, <span class=\"hljs-attr\">component</span>: User,<span class=\"hljs-attr\">props</span>:&#123;<span class=\"hljs-attr\">uname</span>:<span class=\"hljs-string\">&#x27;lisi&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">20</span>&#125;&#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User = &#123;<br>    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;uname&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>],<br>    <span class=\"hljs-comment\">// 此时的id并没有传值，需要使用$route.params.id才行</span><br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;user 组件---Id：&#123;&#123;id&#125;&#125;--id：&#123;&#123;$route.params.id&#125;&#125;--&#123;&#123;uname&#125;&#125;--&#123;&#123;age&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>最终效果：</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803134627.png\" alt=\"image-20210803134627526\"></p>\n</li>\n<li><p><code>props</code>的值为函数类型</p>\n<p>形参route的值等于 <code>route.params</code>，即path中的动态参数。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214818.png\" alt=\"image-20210803214818700\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User = &#123;<br>    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;uname&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>],<br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;user 组件---Id：&#123;&#123;id&#125;&#125;--id：&#123;&#123;$route.params.id&#125;&#125;--&#123;&#123;uname&#125;&#125;--&#123;&#123;age&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建路由实例对象</span><br><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        <span class=\"hljs-comment\">// 如果 props是一个对象，它会被按原样设置为组件属性</span><br>        &#123;<br>            <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>,<br>            <span class=\"hljs-attr\">component</span>: User,<br>            <span class=\"hljs-attr\">props</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">route</span>) =&gt;</span> &#123; <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">uname</span>:<span class=\"hljs-string\">&#x27;zhangsan&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">20</span>,<span class=\"hljs-attr\">id</span>:route.params.id&#125; &#125;<br>        &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214603.png\" alt=\"image-20210803214603161\"></p>\n<h2 id=\"命名路由\"><a href=\"#命名路由\" class=\"headerlink\" title=\"命名路由\"></a>命名路由</h2><p>为了更方便的表示路由的路径，可以给路由规则起一个别名，即为“命名路由”。</p>\n<p>注意：在to前面需要加上冒号:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        &#123;<br>            <span class=\"hljs-comment\">// 命名路由</span><br>            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;user&#x27;</span>,<br>            <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>,<br>            <span class=\"hljs-attr\">component</span>: User,<br>        &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&quot;&#123;name:&#x27;user&#x27;,params:&#123;id:123&#125;&#125;&quot;</span>&gt;</span>User1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 就相当于 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/user/123&quot;</span>&gt;</span>User2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h2><p>声明式导航：通过点击链接实现导航的方式，叫做声明式导航<br>例如:普通网页中的<code>&lt;a&gt; &lt;/a&gt;</code>链接或<code>vue</code>中的<code>&lt;router-link&gt; &lt;/router-link&gt;</code></p>\n<p>编程式导航:通过调用JavaScript形式的API实现导航的方式，叫做编程式导航<br>例如:普通网页中的<code>location.href</code>。</p>\n<p><code>vue</code>中常见的编程式导航：</p>\n<ul>\n<li><p><code>this.$route.push(&#39;hash地址&#39;)</code></p>\n<p><strong>注意：在 <code>Vue</code> 实例内部，你可以通过 <code>$router</code> 访问路由实例。因此你可以调用 <code>this.$router.push</code>。</strong></p>\n<p>想要导航到不同的 URL，则使用 <code>router.push</code> 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p>\n<p><strong>注意：如果提供了 <code>path</code>，<code>params</code> 会被忽略，上述例子中的 <code>query</code> 并不属于这种情况。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 字符串</span><br>router.push(<span class=\"hljs-string\">&#x27;/home&#x27;</span>)<br><br><span class=\"hljs-comment\">// 对象</span><br>router.push(&#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/home&#x27;</span> &#125;)<br><br><span class=\"hljs-comment\">// 命名的路由</span><br>router.push(&#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;user&#x27;</span>, <span class=\"hljs-attr\">params</span>: &#123; <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-string\">&#x27;123&#x27;</span> &#125;&#125;)<br><br><span class=\"hljs-comment\">// 带查询参数，变成 /register?plan=private</span><br>router.push(&#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;register&#x27;</span>, <span class=\"hljs-attr\">query</span>: &#123; <span class=\"hljs-attr\">plan</span>: <span class=\"hljs-string\">&#x27;private&#x27;</span> &#125;&#125;)<br></code></pre></td></tr></table></figure></li>\n<li><p><code>this.$router.go(n)</code></p>\n<p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 <code>window.history.go(n)</code>。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User = &#123;<br>    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;uname&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>],<br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">        &lt;h1&gt;user组件-- 用户id为：&#123;&#123;id&#125;&#125;--姓名：&#123;&#123;uname&#125;&#125;--年龄为:&#123;&#123;age&#125;&#125;&lt;/h1&gt;</span><br><span class=\"hljs-string\">        &lt;button @click=&#x27;goRegister&#x27;&gt;跳转到register页面&lt;/button&gt;</span><br><span class=\"hljs-string\">        &lt;/div&gt;`</span>,<br>    <span class=\"hljs-attr\">methods</span>: &#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">goRegister</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>            <span class=\"hljs-comment\">//跳转到注册页面</span><br>            <span class=\"hljs-built_in\">this</span>.$router.push(<span class=\"hljs-string\">&#x27;/register&#x27;</span>);<br>        &#125;<br>    &#125;,<br>&#125;<br><span class=\"hljs-keyword\">const</span> Register = &#123;<br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">        &lt;h1&gt;register&lt;/h1&gt;</span><br><span class=\"hljs-string\">        &lt;button @click=&#x27;goback&#x27;&gt;回退&lt;/button&gt;</span><br><span class=\"hljs-string\">        &lt;/div&gt;`</span>,<br>    <span class=\"hljs-attr\">methods</span>: &#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">goback</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.$router.go(-<span class=\"hljs-number\">1</span>);<br>        &#125;<br>    &#125;,<br>&#125;<br><br><span class=\"hljs-comment\">// 创建路由实例对象</span><br><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>, <span class=\"hljs-attr\">component</span>: User, <span class=\"hljs-attr\">props</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">route</span> =&gt;</span> (&#123; <span class=\"hljs-attr\">id</span>: route.params.id, <span class=\"hljs-attr\">uname</span>: <span class=\"hljs-string\">&#x27;jiaqicoder&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">22</span> &#125;) &#125;,<br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/register&#x27;</span>, <span class=\"hljs-attr\">component</span>: Register &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-Router小案例\"><a href=\"#Vue-Router小案例\" class=\"headerlink\" title=\"Vue-Router小案例\"></a>Vue-Router小案例</h1><p>根据项目的整体布局划分好组件结构，通过路由导航控制组件的显示。</p>\n<p>1.抽离并渲染 App根组件</p>\n<p>2.将左侧菜单改造为路由链接</p>\n<p>3.创建左侧菜 单对应的路由组件</p>\n<p>4.在右侧主体区 域添加路由占位符</p>\n<p>5.添加子路由规则</p>\n<p>6.通过路由重定向默认渲染用户组件</p>\n<p>7.渲染用户列表数据</p>\n<p>8.编程式导航跳转到用户详情页</p>\n<p>9.实现后退功能</p>\n<p>素材代码：</p>\n<p><a href=\"http://jsrun.net/t98Kp/edit\">http://jsrun.net/t98Kp/edit</a></p>\n<p>最终效果：</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210804125047.gif\" alt=\"动23\"></p>\n<p>实现的代码：(省略了css)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>基于vue-router的案例<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- 被vue实例所控制的区域 --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 路由占位符 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>id<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>age<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\"></span></span><br><span class=\"xml\"><span class=\"handlebars\">    // 定义app根组件</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const App = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `</span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-comment\">&lt;!-- 头部区域 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>后台管理系统<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-comment\">&lt;!-- 中间主体区域 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;main&quot;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-comment\">&lt;!-- 左侧菜单栏 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content left&quot;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/users&#x27;</span>&gt;</span>用户管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/rights&#x27;</span>&gt;</span>权限管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/goods&#x27;</span>&gt;</span>商品管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/orders&#x27;</span>&gt;</span>订单管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/settings&#x27;</span>&gt;</span>系统设置<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-comment\">&lt;!-- 右侧内容区域 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content right&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;main-content&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-comment\">&lt;!-- 尾部区域 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span>版权信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          `,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const UserInfo=&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template:`<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span>&gt;</span>用户详情页--id:</span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">id</span>&#125;&#125;</span><span class=\"xml\">---</span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">$route.params.id</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;goBack&#x27;</span>&gt;</span>后退<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">      props:[&#x27;id&#x27;],</span></span><br><span class=\"xml\"><span class=\"handlebars\">      methods: &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">        goBack()&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">          this.$router.go(-1);</span></span><br><span class=\"xml\"><span class=\"handlebars\">        &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    </span></span><br><span class=\"xml\"><span class=\"handlebars\">    const Users = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `</span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>用户管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>id<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>age<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;item in userlist &#x27;</span><span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;item.id&quot;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">item.id</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">item.name</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">item.age</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&#x27;javascript:;&#x27;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;goDetail(item.id)&#x27;</span>&gt;</span>详情<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">      methods: &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">        goDetail(id)&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">          this.$router.push(&#x27;/userinfo/&#x27;+id)</span></span><br><span class=\"xml\"><span class=\"handlebars\">        &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">      data() &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">        return &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">          userlist: [</span></span><br><span class=\"xml\"><span class=\"handlebars\">            &#123; id: 1, name: &#x27;张三&#x27;, age: 30 &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">            &#123; id: 2, name: &#x27;张四&#x27;, age: 25 &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">            &#123; id: 3, name: &#x27;张五&#x27;, age: 47 &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">            &#123; id: 4, name: &#x27;张六&#x27;, age: 87 &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">          ]</span></span><br><span class=\"xml\"><span class=\"handlebars\">        &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const Rights = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>权限管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const Goods = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>商品管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const Orders = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>订单管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const Settings = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>系统设置<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    //  创建路由对象</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const router = new VueRouter(&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      routes: [&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">        path: &#x27;/&#x27;, component: App,</span></span><br><span class=\"xml\"><span class=\"handlebars\">        redirect: &#x27;/users&#x27;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">        children: [</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/users&#x27;, component: Users &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/userinfo/:id&#x27;, component: UserInfo ,props:true&#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/rights&#x27;, component: Rights &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/goods&#x27;, component: Goods &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/orders&#x27;, component: Orders &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/settings&#x27;, component: Settings &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">        ]</span></span><br><span class=\"xml\"><span class=\"handlebars\">      &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">      ],</span></span><br><span class=\"xml\"><span class=\"handlebars\"></span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;)</span></span><br><span class=\"xml\"><span class=\"handlebars\"></span></span><br><span class=\"xml\"><span class=\"handlebars\">    const vm = new Vue(&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      el: &#x27;#app&#x27;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">      router</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;);</span></span><br><span class=\"xml\"><span class=\"handlebars\">  </span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>案例思路：<br>1).先将素材文件夹中的11.基于vue-router的案例.html复制到我们自己的文件夹中。<br>看一下这个文件中的代码编写了一些什么内容，<br>这个页面已经把后台管理页面的基本布局实现了<br>2).在页面中引入vue，vue-router<br>3).创建Vue实例对象，准备开始编写代码实现功能<br>4).希望是通过组件的形式展示页面的主体内容，而不是写死页面结构，所以我们可以定义一个根组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//只需要把原本页面中的html代码设置为组件中的模板内容即可</span><br><span class=\"hljs-keyword\">const</span> app = &#123;<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">        &lt;!-- 头部区域 --&gt;</span><br><span class=\"hljs-string\">        &lt;header class=&quot;header&quot;&gt;传智后台管理系统&lt;/header&gt;</span><br><span class=\"hljs-string\">        &lt;!-- 中间主体区域 --&gt;</span><br><span class=\"hljs-string\">        &lt;div class=&quot;main&quot;&gt;</span><br><span class=\"hljs-string\">          &lt;!-- 左侧菜单栏 --&gt;</span><br><span class=\"hljs-string\">          &lt;div class=&quot;content left&quot;&gt;</span><br><span class=\"hljs-string\">            &lt;ul&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;用户管理&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;权限管理&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;商品管理&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;订单管理&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;系统设置&lt;/li&gt;</span><br><span class=\"hljs-string\">            &lt;/ul&gt;</span><br><span class=\"hljs-string\">          &lt;/div&gt;</span><br><span class=\"hljs-string\">          &lt;!-- 右侧内容区域 --&gt;</span><br><span class=\"hljs-string\">          &lt;div class=&quot;content right&quot;&gt;</span><br><span class=\"hljs-string\">            &lt;div class=&quot;main-content&quot;&gt;添加用户表单&lt;/div&gt;</span><br><span class=\"hljs-string\">          &lt;/div&gt;</span><br><span class=\"hljs-string\">        &lt;/div&gt;</span><br><span class=\"hljs-string\">        &lt;!-- 尾部区域 --&gt;</span><br><span class=\"hljs-string\">        &lt;footer class=&quot;footer&quot;&gt;版权信息&lt;/footer&gt;</span><br><span class=\"hljs-string\">      &lt;/div&gt;`</span><br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>5).当我们访问页面的时候，默认需要展示刚刚创建的app根组件，我们可以<br>创建一个路由对象来完成这个事情,然后将路由挂载到Vue实例对象中即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myRouter = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-attr\">routes</span>:[<br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/&quot;</span>,<span class=\"hljs-attr\">component</span>:app&#125;<br>    ]<br>&#125;)<br><br><span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,<br>    <span class=\"hljs-attr\">data</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">methods</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">router</span>:myRouter<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>补充：到此为止，基本的js代码都处理完毕了，我们还需要设置一个路由占位符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;body&gt;<br>  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span></span><br><span class=\"xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>\n<p>6).此时我们打开页面应该就可以得到一个VueRouter路由出来的根组件了<br>我们需要在这个根组件中继续路由实现其他的功能子组件<br>先让我们更改根组件中的模板：更改左侧li为子级路由链接，并在右侧内容区域添加子级组件占位符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> app = &#123;<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">        ........</span><br><span class=\"hljs-string\">        &lt;div class=&quot;main&quot;&gt;</span><br><span class=\"hljs-string\">          &lt;!-- 左侧菜单栏 --&gt;</span><br><span class=\"hljs-string\">          &lt;div class=&quot;content left&quot;&gt;</span><br><span class=\"hljs-string\">            &lt;ul&gt;</span><br><span class=\"hljs-string\">              &lt;!-- 注意：我们把所有li都修改为了路由链接 --&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;&lt;router-link to=&quot;/users&quot;&gt;用户管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;&lt;router-link to=&quot;/accesses&quot;&gt;权限管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;&lt;router-link to=&quot;/goods&quot;&gt;商品管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;&lt;router-link to=&quot;/orders&quot;&gt;订单管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;&lt;router-link to=&quot;/systems&quot;&gt;系统设置&lt;/router-link&gt;&lt;/li&gt;</span><br><span class=\"hljs-string\">            &lt;/ul&gt;</span><br><span class=\"hljs-string\">          &lt;/div&gt;</span><br><span class=\"hljs-string\">          &lt;!-- 右侧内容区域 --&gt;</span><br><span class=\"hljs-string\">          &lt;div class=&quot;content right&quot;&gt;</span><br><span class=\"hljs-string\">            &lt;div class=&quot;main-content&quot;&gt;</span><br><span class=\"hljs-string\">                &lt;!-- 在 --&gt;</span><br><span class=\"hljs-string\">                &lt;router-view&gt;&lt;/router-view&gt; </span><br><span class=\"hljs-string\">            &lt;/div&gt;</span><br><span class=\"hljs-string\">          &lt;/div&gt;</span><br><span class=\"hljs-string\">        &lt;/div&gt;</span><br><span class=\"hljs-string\">        .......</span><br><span class=\"hljs-string\">      &lt;/div&gt;`</span><br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>然后，我们要为子级路由创建并设置需要显示的子级组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//建议创建的组件首字母大写，和其他内容区分</span><br><span class=\"hljs-keyword\">const</span> Users = &#123;<span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br><span class=\"hljs-keyword\">const</span> Access = &#123;<span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;权限管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br><span class=\"hljs-keyword\">const</span> Goods = &#123;<span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;商品管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br><span class=\"hljs-keyword\">const</span> Orders = &#123;<span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;订单管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br><span class=\"hljs-keyword\">const</span> Systems = &#123;<span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;系统管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br><br><span class=\"hljs-comment\">//添加子组件的路由规则</span><br><span class=\"hljs-keyword\">const</span> myRouter = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-attr\">routes</span>:[<br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/&quot;</span>,<span class=\"hljs-attr\">component</span>:app , <span class=\"hljs-attr\">children</span>:[<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/users&quot;</span>,<span class=\"hljs-attr\">component</span>:Users &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/accesses&quot;</span>,<span class=\"hljs-attr\">component</span>:Access &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/goods&quot;</span>,<span class=\"hljs-attr\">component</span>:Goods &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/orders&quot;</span>,<span class=\"hljs-attr\">component</span>:Orders &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/systems&quot;</span>,<span class=\"hljs-attr\">component</span>:Systems &#125;,<br>        ]&#125;<br>    ]<br>&#125;)<br><br><span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,<br>    <span class=\"hljs-attr\">data</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">methods</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">router</span>:myRouter<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>7).展示用户信息列表：<br>    A.为Users组件添加私有数据,并在模板中循环展示私有数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Users = &#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">userList</span>: [<br>        &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;zs&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span> &#125;,<br>        &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;ls&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span> &#125;,<br>        &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;wang&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span> &#125;,<br>        &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;jack&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">21</span> &#125;,<br>      ]<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">    &lt;table&gt;</span><br><span class=\"hljs-string\">        &lt;thead&gt;</span><br><span class=\"hljs-string\">            &lt;tr&gt;</span><br><span class=\"hljs-string\">                &lt;th&gt;编号&lt;/th&gt;</span><br><span class=\"hljs-string\">                &lt;th&gt;姓名&lt;/th&gt;</span><br><span class=\"hljs-string\">                &lt;th&gt;年龄&lt;/th&gt;</span><br><span class=\"hljs-string\">                &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"hljs-string\">            &lt;/tr&gt;</span><br><span class=\"hljs-string\">        &lt;/thead&gt;</span><br><span class=\"hljs-string\">        &lt;tbody&gt;</span><br><span class=\"hljs-string\">            &lt;tr :key=&quot;item.id&quot; v-for=&quot;item in userList&quot;&gt;</span><br><span class=\"hljs-string\">                &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                &lt;td&gt;&lt;a href=&quot;javascript:;&quot;&gt;详情&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"hljs-string\">            &lt;/tr&gt;</span><br><span class=\"hljs-string\">        &lt;/tbody&gt;</span><br><span class=\"hljs-string\">    &lt;/table&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>8.当用户列表展示完毕之后，我们可以点击列表中的详情来显示用户详情信息，首先我们需要创建一个组件，用来展示详情信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> UserInfo = &#123;<br>    <span class=\"hljs-attr\">props</span>:[<span class=\"hljs-string\">&quot;id&quot;</span>],<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">      &lt;h5&gt;用户详情&lt;/h5&gt;</span><br><span class=\"hljs-string\">      &lt;p&gt;查看 &#123;&#123;id&#125;&#125; 号用户信息&lt;/p&gt;</span><br><span class=\"hljs-string\">      &lt;button @click=&quot;goBack&quot;&gt;返回用户详情页&lt;/button&gt;</span><br><span class=\"hljs-string\">    &lt;/div&gt; `</span>,<br>    <span class=\"hljs-attr\">methods</span>:&#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-title\">goBack</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-comment\">//当用户点击按钮，后退一页</span><br>        <span class=\"hljs-built_in\">this</span>.$router.go(-<span class=\"hljs-number\">1</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们需要设置这个组件的路由规则</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myRouter = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-attr\">routes</span>:[<br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/&quot;</span>,<span class=\"hljs-attr\">component</span>:app , <span class=\"hljs-attr\">children</span>:[<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/users&quot;</span>,<span class=\"hljs-attr\">component</span>:Users &#125;,<br>            <span class=\"hljs-comment\">//添加一个/userinfo的路由规则</span><br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/userinfo/:id&quot;</span>,<span class=\"hljs-attr\">component</span>:UserInfo,<span class=\"hljs-attr\">props</span>:<span class=\"hljs-literal\">true</span>&#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/accesses&quot;</span>,<span class=\"hljs-attr\">component</span>:Access &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/goods&quot;</span>,<span class=\"hljs-attr\">component</span>:Goods &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/orders&quot;</span>,<span class=\"hljs-attr\">component</span>:Orders &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/systems&quot;</span>,<span class=\"hljs-attr\">component</span>:Systems &#125;,<br>        ]&#125;<br>    ]<br>&#125;)<br><br><span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,<br>    <span class=\"hljs-attr\">data</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">methods</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">router</span>:myRouter<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>再接着给用户列表中的详情a链接添加事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Users = &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            <span class=\"hljs-attr\">userList</span>:[<br>                &#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;zs&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;,<br>                &#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;ls&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">19</span>&#125;,<br>                &#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;wang&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">20</span>&#125;,<br>                &#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;jack&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">21</span>&#125;,<br>            ]<br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">        &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">        &lt;table&gt;</span><br><span class=\"hljs-string\">            &lt;thead&gt;</span><br><span class=\"hljs-string\">                &lt;tr&gt;</span><br><span class=\"hljs-string\">                    &lt;th&gt;编号&lt;/th&gt;</span><br><span class=\"hljs-string\">                    &lt;th&gt;姓名&lt;/th&gt;</span><br><span class=\"hljs-string\">                    &lt;th&gt;年龄&lt;/th&gt;</span><br><span class=\"hljs-string\">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"hljs-string\">                &lt;/tr&gt;</span><br><span class=\"hljs-string\">            &lt;/thead&gt;</span><br><span class=\"hljs-string\">            &lt;tbody&gt;</span><br><span class=\"hljs-string\">                &lt;tr :key=&quot;item.id&quot; v-for=&quot;item in userList&quot;&gt;</span><br><span class=\"hljs-string\">                    &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                    &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                    &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                    &lt;td&gt;&lt;a href=&quot;javascript:;&quot; @click=&quot;goDetail(item.id)&quot;&gt;详情&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"hljs-string\">                &lt;/tr&gt;</span><br><span class=\"hljs-string\">            &lt;/tbody&gt;</span><br><span class=\"hljs-string\">        &lt;/table&gt;</span><br><span class=\"hljs-string\">    &lt;/div&gt;`</span>,<br>    <span class=\"hljs-attr\">methods</span>:&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">goDetail</span>(<span class=\"hljs-params\">id</span>)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.$router.push(<span class=\"hljs-string\">&quot;/userinfo/&quot;</span>+id);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>笔记基于：<a href=\"https://router.vuejs.org/zh/\">https://router.vuejs.org/zh/</a> 和黑马视频</p>\n<h1 id=\"路由的基本概念与原理\"><a href=\"#路由的基本概念与原理\" class=\"headerlink\" title=\"路由的基本概念与原理\"></a>路由的基本概念与原理</h1><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><h3 id=\"后端路由\"><a href=\"#后端路由\" class=\"headerlink\" title=\"后端路由\"></a>后端路由</h3><ul>\n<li>概念：根据不同的用户URL请求，返回不同的内容</li>\n<li>本质：URL<strong>请求地址</strong>与<strong>服务器资源</strong>之问的对应关系</li>\n</ul>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802121213.png\" alt=\"image-20210802121213464\"></p>\n<h3 id=\"SPA\"><a href=\"#SPA\" class=\"headerlink\" title=\"SPA\"></a>SPA</h3><ul>\n<li>后端渲染（存在性能问题，假如用户频繁地提交表单，则会造成页面频繁刷新）。</li>\n<li>Ajax前端渲染（前端渲染提高性能，但是不支持浏览器的前进后退操作）。</li>\n<li>SPA（ Single Page Application）单页面应用程序：整个网站只有一个页面，内容的变化通过Ajax局部更新实现、同时支持浏览器地址栏的前进和后退操作。</li>\n<li>SPA实现原理之一：基于URL地址的hash（hash的变化会导致浏览器记录访问历史的变化、但是hash的变化不会触发新的URL请求）。</li>\n<li>在实现SPA过程中，最核心的技术点就是<strong>前端路由</strong>。</li>\n</ul>\n<h3 id=\"前端路由\"><a href=\"#前端路由\" class=\"headerlink\" title=\"前端路由\"></a>前端路由</h3><ul>\n<li>概念：根据不同的<strong>用户事件</strong>，显示不同的页面内容。</li>\n<li>本质：<strong>用户事件</strong>与<strong>事件处理函数</strong>之间的对应关系。</li>\n</ul>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802122059.png\" alt=\"image-20210802122059780\"></p>\n<h2 id=\"实现简单的前端路由\"><a href=\"#实现简单的前端路由\" class=\"headerlink\" title=\"实现简单的前端路由\"></a>实现简单的前端路由</h2><p>基于URL中的hash实现（点击菜单的时候改变URL的hash，根据hash的变化控制组件的切换）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 监听window的onhashchange事件，根据最新的hash值，切换要显示的组件名称</span><br><span class=\"hljs-built_in\">window</span>.onhashchange=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">//通过location.hash 获取到最新的hash值</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>实现的效果：</p>\n<p>根据<code>location.hash</code>的值切换页面显示的内容</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802135422.gif\" alt=\"动1\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 切换组件的超链接 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#/zhuye&quot;</span>&gt;</span>主页<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#/keji&quot;</span>&gt;</span>科技<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#/caijing&quot;</span>&gt;</span>财经<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#/yule&quot;</span>&gt;</span>娱乐<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 根据is属性的指定的组件名称，把对应的组件渲染到component标签所在的位置 --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 可以把component标签看做为组件的占位符 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">component</span> <span class=\"hljs-attr\">:is</span>=<span class=\"hljs-string\">&quot;comName&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">component</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-attr\">data</span>: &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">comName</span>: <span class=\"hljs-string\">&#x27;zhuye&#x27;</span></span><br><span class=\"javascript\">        &#125;,</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 注册私有组件</span></span><br><span class=\"javascript\">        <span class=\"hljs-attr\">components</span>: &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">zhuye</span>: &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;主页信息&lt;/h1&gt;`</span>,</span><br><span class=\"javascript\">            &#125;,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">keji</span>: &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;科技信息&lt;/h1&gt;`</span></span><br><span class=\"javascript\">            &#125;,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">caijing</span>: &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;财经信息&lt;/h1&gt;`</span></span><br><span class=\"javascript\">            &#125;,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">yule</span>: &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;娱乐信息&lt;/h1&gt;`</span></span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">    &#125;);</span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">window</span>.onhashchange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 通过location.hash 获取到最新的hash值</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(location.hash);</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> list = [<span class=\"hljs-string\">&#x27;zhuye&#x27;</span>, <span class=\"hljs-string\">&#x27;keji&#x27;</span>, <span class=\"hljs-string\">&#x27;caijing&#x27;</span>, <span class=\"hljs-string\">&#x27;yule&#x27;</span>];</span><br><span class=\"javascript\">        list.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">if</span> (location.hash.includes(item)) &#123;</span><br><span class=\"javascript\">                vm.comName = item;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span><br><span class=\"javascript\">            &#125;</span><br><span class=\"javascript\">        &#125;)</span><br><span class=\"javascript\">    &#125;</span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"补充知识点\"><a href=\"#补充知识点\" class=\"headerlink\" title=\"补充知识点\"></a>补充知识点</h3><ol>\n<li><p><code>location.hash</code></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Location\"><code>Location</code></a> 接口的 <strong><code>hash</code></strong> 属性返回一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/USVString\"><code>USVString</code></a>，其中会包含URL标识中的 <code>&#39;#&#39;</code> 和 后面URL片段标识符。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myAnchor&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/en-US/docs/Location.href#Examples&quot;</span>&gt;</span>Examples<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">var</span> anchor = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&quot;myAnchor&quot;</span>);</span><br><span class=\"javascript\">  <span class=\"hljs-built_in\">console</span>.log(anchor.hash); <span class=\"hljs-comment\">// 返回&#x27;#Examples&#x27;</span></span><br><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>关于url对象，<a href=\"https://jiaqicoder.com/2021/08/02/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#URL%E5%AF%B9%E8%B1%A1\">在这篇里</a>写了很多。</p>\n</li>\n</ol>\n<h1 id=\"VUE-Router\"><a href=\"#VUE-Router\" class=\"headerlink\" title=\"VUE Router\"></a>VUE Router</h1><p>Vue Router 是 <a href=\"http://cn.vuejs.org/\">Vue.js (opens new window)</a>官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p>\n<ul>\n<li>嵌套的路由/视图表</li>\n<li>模块化的、基于组件的路由配置</li>\n<li>路由参数、查询、通配符</li>\n<li>基于 Vue.js 过渡系统的视图过渡效果</li>\n<li>细粒度的导航控制</li>\n<li>带有自动激活的 CSS class 的链接</li>\n<li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li>\n<li>自定义的滚动条行为</li>\n</ul>\n<p>官网地址：<a href=\"https://router.vuejs.org/zh/\">https://router.vuejs.org/zh/</a></p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><ol>\n<li><p>引入相关的库文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 先导入vue再导入vue router</span><br>&lt;script src=<span class=\"hljs-string\">&quot;/path/to/vue.js&quot;</span>&gt;&lt;/script&gt;<br><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/path/to/vue-router.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li>\n<li><p>添加路由链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- router-link 是vue中提供的标签，默认会被渲染为 a 标签 --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- to 属性默认会被渲染为 href属性 --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/user&#x27;</span>&gt;</span>User<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/register&#x27;</span>&gt;</span>Register<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>添加路由填充位</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 路由填充位（也叫路由占位符） --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 通过路由规则匹配到的组件，会被渲染到router-view所在的位置 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li><p>定义路由组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User=&#123;<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;h1&gt;user 组件&lt;/h1&gt;`</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> Register=&#123;<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;h1&gt;register&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>创建路由实例并配置路由规则</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建路由实例对象</span><br><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>:[<br>        <span class=\"hljs-comment\">// 每一个路由规则都是一个配置对象，其中至少包括 path 和 component 两个属性：</span><br>        <span class=\"hljs-comment\">// path 表示当前路由规则匹配到的hash地址</span><br>        <span class=\"hljs-comment\">// component 表示当前路由规则要展示的组件</span><br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/user&#x27;</span>,<span class=\"hljs-attr\">component</span>:User&#125;,<br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/register&#x27;</span>,<span class=\"hljs-attr\">component</span>:Register&#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n<li><p>把路由挂载到Vue根实例中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> Vue(&#123;<br>    <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,<br>    <span class=\"hljs-attr\">data</span>: &#123;&#125;,<br>    <span class=\"hljs-comment\">// 挂载路由实例对象</span><br>    router<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>最终代码：</p>\n   <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- router-link 是vue中提供的标签，默认会被渲染为 a 标签 --&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- to 属性默认会被渲染为 href属性 --&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/user&#x27;</span>&gt;</span>User<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/register&#x27;</span>&gt;</span>Register<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 路由填充位（也叫路由占位符） --&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 通过路由规则匹配到的组件，会被渲染到router-view所在的位置 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> User = &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;user 组件&lt;/h1&gt;`</span></span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> Register = &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;register&lt;/h1&gt;`</span></span><br><span class=\"javascript\">        &#125;</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 创建路由实例对象</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// routes是路由规则数组</span></span><br><span class=\"javascript\">            <span class=\"hljs-attr\">routes</span>: [</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 每一个路由规则都是一个配置对象，其中至少包括 path 和 component 两个属性：</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// path 表示当前路由规则匹配到的hash地址</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// component 表示当前路由规则要展示的组件</span></span><br><span class=\"javascript\">                &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user&#x27;</span>, <span class=\"hljs-attr\">component</span>: User &#125;,</span><br><span class=\"javascript\">                &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/register&#x27;</span>, <span class=\"hljs-attr\">component</span>: Register &#125;,</span><br><span class=\"javascript\">            ]</span><br><span class=\"javascript\">        &#125;)</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-attr\">data</span>: &#123;&#125;,</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 挂载路由实例对象</span></span><br><span class=\"javascript\">            router</span><br><span class=\"javascript\">        &#125;)</span><br><span class=\"javascript\"></span><br><span class=\"javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p> <img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803112827.gif\" alt=\"动\"></p>\n<h2 id=\"路由重定向\"><a href=\"#路由重定向\" class=\"headerlink\" title=\"路由重定向\"></a>路由重定向</h2><p>路由重定向：用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面。</p>\n<p>通过路由规则的 redirect属性，指定个新的路由地址，可以很方便地设置路由的重定向。</p>\n<p>基于先前的代码，实现当用户打开页面时，页面就跳转到’/user’。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        <span class=\"hljs-comment\">// path 表示需要被重定向的原地址， redirect表示将要被重定向的新地址</span><br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/&#x27;</span>,<span class=\"hljs-attr\">redirect</span>:<span class=\"hljs-string\">&#x27;/user&#x27;</span>&#125;,<br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user&#x27;</span>, <span class=\"hljs-attr\">component</span>: User &#125;,<br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/register&#x27;</span>, <span class=\"hljs-attr\">component</span>: Register &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h2><h3 id=\"嵌套路由功能分析\"><a href=\"#嵌套路由功能分析\" class=\"headerlink\" title=\"嵌套路由功能分析\"></a>嵌套路由功能分析</h3><ul>\n<li>点击父级路由链接显示模板内容</li>\n<li>模板内容中又有子级路由链接</li>\n<li>点击子级路由链接显示子级模板内容</li>\n</ul>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803120119.png\" alt=\"image-20210803120119722\"></p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>1.父路由组件模板</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/user&#x27;</span>&gt;</span>用户<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/register&#x27;</span>&gt;</span>注册<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 路由填充位 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>2.子路由模板</p>\n<ul>\n<li>子路由链接</li>\n<li>子路由填充位置</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Register = &#123;<br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`</span><br><span class=\"hljs-string\">    &lt;div&gt;</span><br><span class=\"hljs-string\">        &lt;h1&gt;登录&lt;/h1&gt;</span><br><span class=\"hljs-string\">        &lt;hr/&gt;</span><br><span class=\"hljs-string\">\t&lt;!--子路由链接--&gt;</span><br><span class=\"hljs-string\">        &lt;router-link to=&#x27;/register/tab1&#x27;&gt;tab1&lt;/router-link&gt;</span><br><span class=\"hljs-string\">        &lt;router-link to=&#x27;/register/tab2&#x27;&gt;tab2&lt;/router-link&gt;</span><br><span class=\"hljs-string\">        &lt;!-- 子路由填充位置 --&gt;</span><br><span class=\"hljs-string\">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"hljs-string\">    &lt;/div&gt;</span><br><span class=\"hljs-string\">    `</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>3.父路由通过children属性配置子级路由，children<strong>数组</strong>表示子路由规则。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// 定义路由规则</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        <span class=\"hljs-comment\">// 重定向 当用户打开页面时，定位到user组件</span><br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-attr\">redirect</span>: <span class=\"hljs-string\">&#x27;/user&#x27;</span> &#125;,<br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user&#x27;</span>, <span class=\"hljs-attr\">component</span>: User &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/register&#x27;</span>,<br>            <span class=\"hljs-attr\">component</span>: Register,<br>            <span class=\"hljs-comment\">// 通过children属性，为/register添加子路由规则</span><br>            <span class=\"hljs-attr\">children</span>:[<br>                &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/register/tab1&#x27;</span>,<span class=\"hljs-attr\">component</span>:Tab1&#125;,<br>                &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&#x27;/register/tab2&#x27;</span>,<span class=\"hljs-attr\">component</span>:Tab2&#125;<br>            ]<br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803123419.gif\" alt=\"动2\"></p>\n<p>全部代码见：<a href=\"http://jsrun.net/PU8Kp/edit\">http://jsrun.net/PU8Kp/edit</a></p>\n<h2 id=\"动态路由匹配\"><a href=\"#动态路由匹配\" class=\"headerlink\" title=\"动态路由匹配\"></a>动态路由匹配</h2><p>通过动态路由参数的模式进行路由匹配</p>\n<p>在路由规则中，要配置以冒号开头的动态参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        <span class=\"hljs-comment\">// 动态路径参数，以冒号开头</span><br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>, <span class=\"hljs-attr\">component</span>: User &#125;<br><br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"直接通过params获取参数\"><a href=\"#直接通过params获取参数\" class=\"headerlink\" title=\"直接通过params获取参数\"></a>直接通过params获取参数</h3><p>在路由组件中，可以通过<code>$route.params</code>获取路由参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User = &#123;<br>    <span class=\"hljs-comment\">// 路由组件中通过$route.params获取路由参数</span><br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;user 组件---&#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"通过props传参\"><a href=\"#通过props传参\" class=\"headerlink\" title=\"通过props传参\"></a>通过props传参</h3><p><code>$route</code>与对应路由形成高度耦合，不够灵活。所以，可以使用 <code>props</code>将组件和路由解耦。</p>\n<ol>\n<li><p>路由规则中<code>props</code>的值为布尔值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>            <span class=\"hljs-comment\">// routes是路由规则数组</span><br>            <span class=\"hljs-attr\">routes</span>: [<br>                <span class=\"hljs-comment\">// 如果props设置为true，route.params将会被设置为组件的属性</span><br>                &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>, <span class=\"hljs-attr\">component</span>: User,<span class=\"hljs-attr\">props</span>:<span class=\"hljs-literal\">true</span>&#125;,<br>            ]<br>        &#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User = &#123;<br>    <span class=\"hljs-attr\">props</span>:[<span class=\"hljs-string\">&#x27;id&#x27;</span>], <br>    <span class=\"hljs-comment\">// 使用 props 接收路由参数</span><br>    <span class=\"hljs-comment\">// 当然也可以继续使用$route.params.id</span><br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;user 组件---&#123;&#123;id&#125;&#125;--&#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>路由规则中<code>props</code>的值是对象类型</p>\n<p>如果 props是一个对象，它会被按原样设置为组件属性，此时路径中的id已经不能访问了。（如果props设置为true，<code>route.params</code>才会被设置为组件的属性）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建路由实例对象</span><br><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        <span class=\"hljs-comment\">// 如果 props是一个对象，它会被按原样设置为组件属性</span><br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>, <span class=\"hljs-attr\">component</span>: User,<span class=\"hljs-attr\">props</span>:&#123;<span class=\"hljs-attr\">uname</span>:<span class=\"hljs-string\">&#x27;lisi&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">20</span>&#125;&#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User = &#123;<br>    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;uname&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>],<br>    <span class=\"hljs-comment\">// 此时的id并没有传值，需要使用$route.params.id才行</span><br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;user 组件---Id：&#123;&#123;id&#125;&#125;--id：&#123;&#123;$route.params.id&#125;&#125;--&#123;&#123;uname&#125;&#125;--&#123;&#123;age&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>最终效果：</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803134627.png\" alt=\"image-20210803134627526\"></p>\n</li>\n<li><p><code>props</code>的值为函数类型</p>\n<p>形参route的值等于 <code>route.params</code>，即path中的动态参数。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214818.png\" alt=\"image-20210803214818700\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User = &#123;<br>    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;uname&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>],<br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;h1&gt;user 组件---Id：&#123;&#123;id&#125;&#125;--id：&#123;&#123;$route.params.id&#125;&#125;--&#123;&#123;uname&#125;&#125;--&#123;&#123;age&#125;&#125;&lt;/h1&gt;`</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建路由实例对象</span><br><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        <span class=\"hljs-comment\">// 如果 props是一个对象，它会被按原样设置为组件属性</span><br>        &#123;<br>            <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>,<br>            <span class=\"hljs-attr\">component</span>: User,<br>            <span class=\"hljs-attr\">props</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">route</span>) =&gt;</span> &#123; <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">uname</span>:<span class=\"hljs-string\">&#x27;zhangsan&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">20</span>,<span class=\"hljs-attr\">id</span>:route.params.id&#125; &#125;<br>        &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n</ol>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210803214603.png\" alt=\"image-20210803214603161\"></p>\n<h2 id=\"命名路由\"><a href=\"#命名路由\" class=\"headerlink\" title=\"命名路由\"></a>命名路由</h2><p>为了更方便的表示路由的路径，可以给路由规则起一个别名，即为“命名路由”。</p>\n<p>注意：在to前面需要加上冒号:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        &#123;<br>            <span class=\"hljs-comment\">// 命名路由</span><br>            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;user&#x27;</span>,<br>            <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>,<br>            <span class=\"hljs-attr\">component</span>: User,<br>        &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&quot;&#123;name:&#x27;user&#x27;,params:&#123;id:123&#125;&#125;&quot;</span>&gt;</span>User1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 就相当于 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/user/123&quot;</span>&gt;</span>User2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h2><p>声明式导航：通过点击链接实现导航的方式，叫做声明式导航<br>例如:普通网页中的<code>&lt;a&gt; &lt;/a&gt;</code>链接或<code>vue</code>中的<code>&lt;router-link&gt; &lt;/router-link&gt;</code></p>\n<p>编程式导航:通过调用JavaScript形式的API实现导航的方式，叫做编程式导航<br>例如:普通网页中的<code>location.href</code>。</p>\n<p><code>vue</code>中常见的编程式导航：</p>\n<ul>\n<li><p><code>this.$route.push(&#39;hash地址&#39;)</code></p>\n<p><strong>注意：在 <code>Vue</code> 实例内部，你可以通过 <code>$router</code> 访问路由实例。因此你可以调用 <code>this.$router.push</code>。</strong></p>\n<p>想要导航到不同的 URL，则使用 <code>router.push</code> 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p>\n<p><strong>注意：如果提供了 <code>path</code>，<code>params</code> 会被忽略，上述例子中的 <code>query</code> 并不属于这种情况。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 字符串</span><br>router.push(<span class=\"hljs-string\">&#x27;/home&#x27;</span>)<br><br><span class=\"hljs-comment\">// 对象</span><br>router.push(&#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/home&#x27;</span> &#125;)<br><br><span class=\"hljs-comment\">// 命名的路由</span><br>router.push(&#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;user&#x27;</span>, <span class=\"hljs-attr\">params</span>: &#123; <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-string\">&#x27;123&#x27;</span> &#125;&#125;)<br><br><span class=\"hljs-comment\">// 带查询参数，变成 /register?plan=private</span><br>router.push(&#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;register&#x27;</span>, <span class=\"hljs-attr\">query</span>: &#123; <span class=\"hljs-attr\">plan</span>: <span class=\"hljs-string\">&#x27;private&#x27;</span> &#125;&#125;)<br></code></pre></td></tr></table></figure></li>\n<li><p><code>this.$router.go(n)</code></p>\n<p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 <code>window.history.go(n)</code>。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> User = &#123;<br>    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;uname&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>],<br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">        &lt;h1&gt;user组件-- 用户id为：&#123;&#123;id&#125;&#125;--姓名：&#123;&#123;uname&#125;&#125;--年龄为:&#123;&#123;age&#125;&#125;&lt;/h1&gt;</span><br><span class=\"hljs-string\">        &lt;button @click=&#x27;goRegister&#x27;&gt;跳转到register页面&lt;/button&gt;</span><br><span class=\"hljs-string\">        &lt;/div&gt;`</span>,<br>    <span class=\"hljs-attr\">methods</span>: &#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">goRegister</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>            <span class=\"hljs-comment\">//跳转到注册页面</span><br>            <span class=\"hljs-built_in\">this</span>.$router.push(<span class=\"hljs-string\">&#x27;/register&#x27;</span>);<br>        &#125;<br>    &#125;,<br>&#125;<br><span class=\"hljs-keyword\">const</span> Register = &#123;<br>    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">        &lt;h1&gt;register&lt;/h1&gt;</span><br><span class=\"hljs-string\">        &lt;button @click=&#x27;goback&#x27;&gt;回退&lt;/button&gt;</span><br><span class=\"hljs-string\">        &lt;/div&gt;`</span>,<br>    <span class=\"hljs-attr\">methods</span>: &#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">goback</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.$router.go(-<span class=\"hljs-number\">1</span>);<br>        &#125;<br>    &#125;,<br>&#125;<br><br><span class=\"hljs-comment\">// 创建路由实例对象</span><br><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-comment\">// routes是路由规则数组</span><br>    <span class=\"hljs-attr\">routes</span>: [<br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/user/:id&#x27;</span>, <span class=\"hljs-attr\">component</span>: User, <span class=\"hljs-attr\">props</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">route</span> =&gt;</span> (&#123; <span class=\"hljs-attr\">id</span>: route.params.id, <span class=\"hljs-attr\">uname</span>: <span class=\"hljs-string\">&#x27;jiaqicoder&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">22</span> &#125;) &#125;,<br>        &#123; <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;/register&#x27;</span>, <span class=\"hljs-attr\">component</span>: Register &#125;,<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Vue-Router小案例\"><a href=\"#Vue-Router小案例\" class=\"headerlink\" title=\"Vue-Router小案例\"></a>Vue-Router小案例</h1><p>根据项目的整体布局划分好组件结构，通过路由导航控制组件的显示。</p>\n<p>1.抽离并渲染 App根组件</p>\n<p>2.将左侧菜单改造为路由链接</p>\n<p>3.创建左侧菜 单对应的路由组件</p>\n<p>4.在右侧主体区 域添加路由占位符</p>\n<p>5.添加子路由规则</p>\n<p>6.通过路由重定向默认渲染用户组件</p>\n<p>7.渲染用户列表数据</p>\n<p>8.编程式导航跳转到用户详情页</p>\n<p>9.实现后退功能</p>\n<p>素材代码：</p>\n<p><a href=\"http://jsrun.net/t98Kp/edit\">http://jsrun.net/t98Kp/edit</a></p>\n<p>最终效果：</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210804125047.gif\" alt=\"动23\"></p>\n<p>实现的代码：(省略了css)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>基于vue-router的案例<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- 被vue实例所控制的区域 --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 路由占位符 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>id<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>age<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\"></span></span><br><span class=\"xml\"><span class=\"handlebars\">    // 定义app根组件</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const App = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `</span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-comment\">&lt;!-- 头部区域 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>后台管理系统<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-comment\">&lt;!-- 中间主体区域 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;main&quot;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-comment\">&lt;!-- 左侧菜单栏 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content left&quot;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/users&#x27;</span>&gt;</span>用户管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/rights&#x27;</span>&gt;</span>权限管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/goods&#x27;</span>&gt;</span>商品管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/orders&#x27;</span>&gt;</span>订单管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&#x27;/settings&#x27;</span>&gt;</span>系统设置<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-comment\">&lt;!-- 右侧内容区域 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content right&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;main-content&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-comment\">&lt;!-- 尾部区域 --&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span>版权信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          `,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const UserInfo=&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template:`<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h5</span>&gt;</span>用户详情页--id:</span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">id</span>&#125;&#125;</span><span class=\"xml\">---</span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">$route.params.id</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h5</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;goBack&#x27;</span>&gt;</span>后退<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">      props:[&#x27;id&#x27;],</span></span><br><span class=\"xml\"><span class=\"handlebars\">      methods: &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">        goBack()&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">          this.$router.go(-1);</span></span><br><span class=\"xml\"><span class=\"handlebars\">        &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    </span></span><br><span class=\"xml\"><span class=\"handlebars\">    const Users = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `</span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>用户管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>id<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>age<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&#x27;item in userlist &#x27;</span><span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;item.id&quot;</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">item.id</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">item.name</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">item.age</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&#x27;javascript:;&#x27;</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;goDetail(item.id)&#x27;</span>&gt;</span>详情<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span></span></span><br><span class=\"xml\"><span class=\"handlebars\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">      methods: &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">        goDetail(id)&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">          this.$router.push(&#x27;/userinfo/&#x27;+id)</span></span><br><span class=\"xml\"><span class=\"handlebars\">        &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">      data() &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">        return &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">          userlist: [</span></span><br><span class=\"xml\"><span class=\"handlebars\">            &#123; id: 1, name: &#x27;张三&#x27;, age: 30 &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">            &#123; id: 2, name: &#x27;张四&#x27;, age: 25 &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">            &#123; id: 3, name: &#x27;张五&#x27;, age: 47 &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">            &#123; id: 4, name: &#x27;张六&#x27;, age: 87 &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">          ]</span></span><br><span class=\"xml\"><span class=\"handlebars\">        &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      &#125;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const Rights = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>权限管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const Goods = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>商品管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const Orders = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>订单管理<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const Settings = &#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      template: `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>系统设置<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>`,</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;;</span></span><br><span class=\"xml\"><span class=\"handlebars\">    //  创建路由对象</span></span><br><span class=\"xml\"><span class=\"handlebars\">    const router = new VueRouter(&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      routes: [&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">        path: &#x27;/&#x27;, component: App,</span></span><br><span class=\"xml\"><span class=\"handlebars\">        redirect: &#x27;/users&#x27;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">        children: [</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/users&#x27;, component: Users &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/userinfo/:id&#x27;, component: UserInfo ,props:true&#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/rights&#x27;, component: Rights &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/goods&#x27;, component: Goods &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/orders&#x27;, component: Orders &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">          &#123; path: &#x27;/settings&#x27;, component: Settings &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">        ]</span></span><br><span class=\"xml\"><span class=\"handlebars\">      &#125;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">      ],</span></span><br><span class=\"xml\"><span class=\"handlebars\"></span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;)</span></span><br><span class=\"xml\"><span class=\"handlebars\"></span></span><br><span class=\"xml\"><span class=\"handlebars\">    const vm = new Vue(&#123;</span></span><br><span class=\"xml\"><span class=\"handlebars\">      el: &#x27;#app&#x27;,</span></span><br><span class=\"xml\"><span class=\"handlebars\">      router</span></span><br><span class=\"xml\"><span class=\"handlebars\">    &#125;);</span></span><br><span class=\"xml\"><span class=\"handlebars\">  </span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>案例思路：<br>1).先将素材文件夹中的11.基于vue-router的案例.html复制到我们自己的文件夹中。<br>看一下这个文件中的代码编写了一些什么内容，<br>这个页面已经把后台管理页面的基本布局实现了<br>2).在页面中引入vue，vue-router<br>3).创建Vue实例对象，准备开始编写代码实现功能<br>4).希望是通过组件的形式展示页面的主体内容，而不是写死页面结构，所以我们可以定义一个根组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//只需要把原本页面中的html代码设置为组件中的模板内容即可</span><br><span class=\"hljs-keyword\">const</span> app = &#123;<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">        &lt;!-- 头部区域 --&gt;</span><br><span class=\"hljs-string\">        &lt;header class=&quot;header&quot;&gt;传智后台管理系统&lt;/header&gt;</span><br><span class=\"hljs-string\">        &lt;!-- 中间主体区域 --&gt;</span><br><span class=\"hljs-string\">        &lt;div class=&quot;main&quot;&gt;</span><br><span class=\"hljs-string\">          &lt;!-- 左侧菜单栏 --&gt;</span><br><span class=\"hljs-string\">          &lt;div class=&quot;content left&quot;&gt;</span><br><span class=\"hljs-string\">            &lt;ul&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;用户管理&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;权限管理&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;商品管理&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;订单管理&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;系统设置&lt;/li&gt;</span><br><span class=\"hljs-string\">            &lt;/ul&gt;</span><br><span class=\"hljs-string\">          &lt;/div&gt;</span><br><span class=\"hljs-string\">          &lt;!-- 右侧内容区域 --&gt;</span><br><span class=\"hljs-string\">          &lt;div class=&quot;content right&quot;&gt;</span><br><span class=\"hljs-string\">            &lt;div class=&quot;main-content&quot;&gt;添加用户表单&lt;/div&gt;</span><br><span class=\"hljs-string\">          &lt;/div&gt;</span><br><span class=\"hljs-string\">        &lt;/div&gt;</span><br><span class=\"hljs-string\">        &lt;!-- 尾部区域 --&gt;</span><br><span class=\"hljs-string\">        &lt;footer class=&quot;footer&quot;&gt;版权信息&lt;/footer&gt;</span><br><span class=\"hljs-string\">      &lt;/div&gt;`</span><br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>5).当我们访问页面的时候，默认需要展示刚刚创建的app根组件，我们可以<br>创建一个路由对象来完成这个事情,然后将路由挂载到Vue实例对象中即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myRouter = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-attr\">routes</span>:[<br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/&quot;</span>,<span class=\"hljs-attr\">component</span>:app&#125;<br>    ]<br>&#125;)<br><br><span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,<br>    <span class=\"hljs-attr\">data</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">methods</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">router</span>:myRouter<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>补充：到此为止，基本的js代码都处理完毕了，我们还需要设置一个路由占位符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;body&gt;<br>  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span></span><br><span class=\"xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>\n<p>6).此时我们打开页面应该就可以得到一个VueRouter路由出来的根组件了<br>我们需要在这个根组件中继续路由实现其他的功能子组件<br>先让我们更改根组件中的模板：更改左侧li为子级路由链接，并在右侧内容区域添加子级组件占位符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> app = &#123;<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">        ........</span><br><span class=\"hljs-string\">        &lt;div class=&quot;main&quot;&gt;</span><br><span class=\"hljs-string\">          &lt;!-- 左侧菜单栏 --&gt;</span><br><span class=\"hljs-string\">          &lt;div class=&quot;content left&quot;&gt;</span><br><span class=\"hljs-string\">            &lt;ul&gt;</span><br><span class=\"hljs-string\">              &lt;!-- 注意：我们把所有li都修改为了路由链接 --&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;&lt;router-link to=&quot;/users&quot;&gt;用户管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;&lt;router-link to=&quot;/accesses&quot;&gt;权限管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;&lt;router-link to=&quot;/goods&quot;&gt;商品管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;&lt;router-link to=&quot;/orders&quot;&gt;订单管理&lt;/router-link&gt;&lt;/li&gt;</span><br><span class=\"hljs-string\">              &lt;li&gt;&lt;router-link to=&quot;/systems&quot;&gt;系统设置&lt;/router-link&gt;&lt;/li&gt;</span><br><span class=\"hljs-string\">            &lt;/ul&gt;</span><br><span class=\"hljs-string\">          &lt;/div&gt;</span><br><span class=\"hljs-string\">          &lt;!-- 右侧内容区域 --&gt;</span><br><span class=\"hljs-string\">          &lt;div class=&quot;content right&quot;&gt;</span><br><span class=\"hljs-string\">            &lt;div class=&quot;main-content&quot;&gt;</span><br><span class=\"hljs-string\">                &lt;!-- 在 --&gt;</span><br><span class=\"hljs-string\">                &lt;router-view&gt;&lt;/router-view&gt; </span><br><span class=\"hljs-string\">            &lt;/div&gt;</span><br><span class=\"hljs-string\">          &lt;/div&gt;</span><br><span class=\"hljs-string\">        &lt;/div&gt;</span><br><span class=\"hljs-string\">        .......</span><br><span class=\"hljs-string\">      &lt;/div&gt;`</span><br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>然后，我们要为子级路由创建并设置需要显示的子级组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//建议创建的组件首字母大写，和其他内容区分</span><br><span class=\"hljs-keyword\">const</span> Users = &#123;<span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br><span class=\"hljs-keyword\">const</span> Access = &#123;<span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;权限管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br><span class=\"hljs-keyword\">const</span> Goods = &#123;<span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;商品管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br><span class=\"hljs-keyword\">const</span> Orders = &#123;<span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;订单管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br><span class=\"hljs-keyword\">const</span> Systems = &#123;<span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;系统管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br><br><span class=\"hljs-comment\">//添加子组件的路由规则</span><br><span class=\"hljs-keyword\">const</span> myRouter = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-attr\">routes</span>:[<br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/&quot;</span>,<span class=\"hljs-attr\">component</span>:app , <span class=\"hljs-attr\">children</span>:[<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/users&quot;</span>,<span class=\"hljs-attr\">component</span>:Users &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/accesses&quot;</span>,<span class=\"hljs-attr\">component</span>:Access &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/goods&quot;</span>,<span class=\"hljs-attr\">component</span>:Goods &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/orders&quot;</span>,<span class=\"hljs-attr\">component</span>:Orders &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/systems&quot;</span>,<span class=\"hljs-attr\">component</span>:Systems &#125;,<br>        ]&#125;<br>    ]<br>&#125;)<br><br><span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,<br>    <span class=\"hljs-attr\">data</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">methods</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">router</span>:myRouter<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>7).展示用户信息列表：<br>    A.为Users组件添加私有数据,并在模板中循环展示私有数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Users = &#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">userList</span>: [<br>        &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;zs&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span> &#125;,<br>        &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;ls&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span> &#125;,<br>        &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;wang&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span> &#125;,<br>        &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;jack&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">21</span> &#125;,<br>      ]<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">    &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">    &lt;table&gt;</span><br><span class=\"hljs-string\">        &lt;thead&gt;</span><br><span class=\"hljs-string\">            &lt;tr&gt;</span><br><span class=\"hljs-string\">                &lt;th&gt;编号&lt;/th&gt;</span><br><span class=\"hljs-string\">                &lt;th&gt;姓名&lt;/th&gt;</span><br><span class=\"hljs-string\">                &lt;th&gt;年龄&lt;/th&gt;</span><br><span class=\"hljs-string\">                &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"hljs-string\">            &lt;/tr&gt;</span><br><span class=\"hljs-string\">        &lt;/thead&gt;</span><br><span class=\"hljs-string\">        &lt;tbody&gt;</span><br><span class=\"hljs-string\">            &lt;tr :key=&quot;item.id&quot; v-for=&quot;item in userList&quot;&gt;</span><br><span class=\"hljs-string\">                &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                &lt;td&gt;&lt;a href=&quot;javascript:;&quot;&gt;详情&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"hljs-string\">            &lt;/tr&gt;</span><br><span class=\"hljs-string\">        &lt;/tbody&gt;</span><br><span class=\"hljs-string\">    &lt;/table&gt;</span><br><span class=\"hljs-string\">&lt;/div&gt;`</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>8.当用户列表展示完毕之后，我们可以点击列表中的详情来显示用户详情信息，首先我们需要创建一个组件，用来展示详情信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> UserInfo = &#123;<br>    <span class=\"hljs-attr\">props</span>:[<span class=\"hljs-string\">&quot;id&quot;</span>],<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">      &lt;h5&gt;用户详情&lt;/h5&gt;</span><br><span class=\"hljs-string\">      &lt;p&gt;查看 &#123;&#123;id&#125;&#125; 号用户信息&lt;/p&gt;</span><br><span class=\"hljs-string\">      &lt;button @click=&quot;goBack&quot;&gt;返回用户详情页&lt;/button&gt;</span><br><span class=\"hljs-string\">    &lt;/div&gt; `</span>,<br>    <span class=\"hljs-attr\">methods</span>:&#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-title\">goBack</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-comment\">//当用户点击按钮，后退一页</span><br>        <span class=\"hljs-built_in\">this</span>.$router.go(-<span class=\"hljs-number\">1</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们需要设置这个组件的路由规则</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> myRouter = <span class=\"hljs-keyword\">new</span> VueRouter(&#123;<br>    <span class=\"hljs-attr\">routes</span>:[<br>        &#123;<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/&quot;</span>,<span class=\"hljs-attr\">component</span>:app , <span class=\"hljs-attr\">children</span>:[<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/users&quot;</span>,<span class=\"hljs-attr\">component</span>:Users &#125;,<br>            <span class=\"hljs-comment\">//添加一个/userinfo的路由规则</span><br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/userinfo/:id&quot;</span>,<span class=\"hljs-attr\">component</span>:UserInfo,<span class=\"hljs-attr\">props</span>:<span class=\"hljs-literal\">true</span>&#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/accesses&quot;</span>,<span class=\"hljs-attr\">component</span>:Access &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/goods&quot;</span>,<span class=\"hljs-attr\">component</span>:Goods &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/orders&quot;</span>,<span class=\"hljs-attr\">component</span>:Orders &#125;,<br>            &#123; <span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">&quot;/systems&quot;</span>,<span class=\"hljs-attr\">component</span>:Systems &#125;,<br>        ]&#125;<br>    ]<br>&#125;)<br><br><span class=\"hljs-keyword\">const</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,<br>    <span class=\"hljs-attr\">data</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">methods</span>:&#123;&#125;,<br>    <span class=\"hljs-attr\">router</span>:myRouter<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>再接着给用户列表中的详情a链接添加事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Users = &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">data</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            <span class=\"hljs-attr\">userList</span>:[<br>                &#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;zs&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;,<br>                &#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;ls&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">19</span>&#125;,<br>                &#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;wang&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">20</span>&#125;,<br>                &#123;<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;jack&quot;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">21</span>&#125;,<br>            ]<br>        &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">`&lt;div&gt;</span><br><span class=\"hljs-string\">        &lt;h3&gt;用户管理&lt;/h3&gt;</span><br><span class=\"hljs-string\">        &lt;table&gt;</span><br><span class=\"hljs-string\">            &lt;thead&gt;</span><br><span class=\"hljs-string\">                &lt;tr&gt;</span><br><span class=\"hljs-string\">                    &lt;th&gt;编号&lt;/th&gt;</span><br><span class=\"hljs-string\">                    &lt;th&gt;姓名&lt;/th&gt;</span><br><span class=\"hljs-string\">                    &lt;th&gt;年龄&lt;/th&gt;</span><br><span class=\"hljs-string\">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"hljs-string\">                &lt;/tr&gt;</span><br><span class=\"hljs-string\">            &lt;/thead&gt;</span><br><span class=\"hljs-string\">            &lt;tbody&gt;</span><br><span class=\"hljs-string\">                &lt;tr :key=&quot;item.id&quot; v-for=&quot;item in userList&quot;&gt;</span><br><span class=\"hljs-string\">                    &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                    &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                    &lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class=\"hljs-string\">                    &lt;td&gt;&lt;a href=&quot;javascript:;&quot; @click=&quot;goDetail(item.id)&quot;&gt;详情&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"hljs-string\">                &lt;/tr&gt;</span><br><span class=\"hljs-string\">            &lt;/tbody&gt;</span><br><span class=\"hljs-string\">        &lt;/table&gt;</span><br><span class=\"hljs-string\">    &lt;/div&gt;`</span>,<br>    <span class=\"hljs-attr\">methods</span>:&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-title\">goDetail</span>(<span class=\"hljs-params\">id</span>)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.$router.push(<span class=\"hljs-string\">&quot;/userinfo/&quot;</span>+id);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"基于接口的图书管理系统","date":"2021-08-01T09:55:56.000Z","_content":"\n前面已经做了一个[图书管理系统](https://jiaqicoder.com/2021/07/30/Vue%E5%B0%8F%E6%A1%88%E4%BE%8B-%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/)，不过当时用的是假数据，因此这次将用express写接口，从而对图书的相关操作能基于后台接口。\n\n# 前端实现\n\n## 需要创建的接口\n\n| 功能                     | 请求方式 | 请求路由          |\n| ------------------------ | -------- | ----------------- |\n| 图书列表数据加载         | GET      | /books            |\n| 添加图书                 | POST     | /books            |\n| 验证图书名称是否存在     | GET      | /books/book/:name |\n| 编辑图书（根据id查询）   | GET      | /books/:id        |\n| 编辑图书（提交修改后的） | PUT      | /books/:id        |\n| 删除图书                 | DELETE   | /books/:id        |\n\n路由素材中已经提供了，最后看实际情况，尽可能自己实现路由。\n\n## 图书列表数据加载\n\n以下仅仅写出新增的代码：\n\n````js\n// 指定基准路径\naxios.defaults.baseURL = 'http://localhost';\n// 响应拦截器，将响应结果的data属性返回\naxios.interceptors.response.use(function(res){\n  return res.data;\n},function(err){\n  throw new Promise().reject(err);\n})\n\nlet vm = new Vue({\n  el: '#app',\n  methods: {\n    // 调用后台接口\n    queryData: async function () {\n      this.books = await axios.get('/books');\n    }\n  },\n  // 该生命周期钩子函数被触发的时候\n  // 一般此时用于获取后台数据，然后把数据填充在模板\n  mounted() {\n    this.queryData();\n  },\n});\n````\n\n## 添加图书\n\n- 路径：books\n- 请求参数\n    + name : 图书名称\n- 响应结果\n\n```json\n{\n    \"status\": 200  // (200表示成功；500表示失败)\n}\n```\n\n此时由于编号是在后台生成的，因此将其禁用输入。\n\n![image-20210802102141735](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802102148.png)\n\n```js\nlet vm = new Vue({\n  el: '#app',\n  methods: {\n      async  handle() {\n      if (this.flag) {\n        this.books.some(item => {\n          // 如果表单中的id与数据中的id相同\n          if (item.id == this.id) {\n            item.name = this.name;\n            // 允许输入\n            this.flag = false;\n            console.log(item.id);\n            return true;\n          }\n        })\n      } else {\n        // 添加图书\n        let res= await axios.post('/books',{\n          name:this.name\n        })\n        // 此时通过拦截器返回的是data，而服务器端的data值刚好又是status\n        if(res.status===200){\n          // 重新加载图书列表\n          this.queryData();\n        }\n      }\n      // 清空input输入域\n      this.id = '';\n      this.name = '';\n    },\n});\n```\n\n## 验证图书名称验证\n\n- 路径：books/book/:name\n- 请求参数:无\n- 响应结果\n\n```json\n{\n    \"status\": 1  // (1表示存在；2表示不存在)\n}\n```\n\n```js\nwatch: {\n  name: async function (value) {\n    // 验证图书名称是否存在\n    let response = await axios.get('/books/book/' + this.name);\n    if (response.status === 1) {\n      // 图书已经存在，禁用提交按钮\n      this.submitFlag = true;\n      this.err = true;\n      this.errMessage = '图书名称已存在'\n    }else{\n            this.submitFlag = false;\n}\n  },\n},\n```\n\n## 编辑图书\n\n### 根据id查询图书信息\n\n- 路径：books/:id\n- 请求参数：无\n- 响应结果\n\n```json\n{\n    \"name\":\"西游记\",\n    \"date\":2525609975000,\n    \"id\":7\n}\n```\n\n```js\nmethods:{\n    async edit(id) {\n      // 修改的时候将状态位设置为true\n      this.flag = true;\n      // 根据id查询对应的图书信息\n      let res=await axios.get('books/'+id);\n      this.id=res.id;\n      this.name=res.name;\n\t}\n}\n```\n\n### 提交编辑后的图书信息\n\n- 路径：books/:id\n- 请求参数\n    + name : 图书名称\n- 响应结果\n\n```json\n{\n    \"status\": 200  // (200表示成功；500表示失败)\n}\n```\n\n```js\nmethods:{\n\tasync handle() {\n\t    if (this.flag) {\n\t      let res=await axios.put('/books/'+this.id,{\n\t        name:this.name\n\t      });\n\t      if(res.status===200){\n\t      //  刷新列表\n\t      this.queryData();\n\t      }\n\t      this.flag = false;\n\t    } else {\n\t      // 添加图书\n\t      let res = await axios.post('/books', {\n\t        name: this.name\n\t      })\n\t      // 此时通过拦截器返回的是data，而服务器端的data值刚好又是status\n\t      if (res.status === 200) {\n\t        // 重新加载图书列表\n\t        this.queryData();\n\t      }\n\t    }\n\t}\n}\n```\n\n## 删除图书\n- 路径：books/:id\n- 请求参数: 无\n- 响应结果\n\n```json\n{\n    \"status\": 200  // (200表示成功；500表示失败)\n}\n```\n\n```js\nmethods:{\n    async del(id) {\n    let res= await axios.delete('books/'+id);\n    if(res.status===200){\n      this.queryData();\n    }\n  },\n}\n```\n\n","source":"_posts/基于接口的图书管理系统.md","raw":"---\ntitle: 基于接口的图书管理系统\ndate: 2021-08-01 17:55:56\ntags: [axios,express,Vue]\n---\n\n前面已经做了一个[图书管理系统](https://jiaqicoder.com/2021/07/30/Vue%E5%B0%8F%E6%A1%88%E4%BE%8B-%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/)，不过当时用的是假数据，因此这次将用express写接口，从而对图书的相关操作能基于后台接口。\n\n# 前端实现\n\n## 需要创建的接口\n\n| 功能                     | 请求方式 | 请求路由          |\n| ------------------------ | -------- | ----------------- |\n| 图书列表数据加载         | GET      | /books            |\n| 添加图书                 | POST     | /books            |\n| 验证图书名称是否存在     | GET      | /books/book/:name |\n| 编辑图书（根据id查询）   | GET      | /books/:id        |\n| 编辑图书（提交修改后的） | PUT      | /books/:id        |\n| 删除图书                 | DELETE   | /books/:id        |\n\n路由素材中已经提供了，最后看实际情况，尽可能自己实现路由。\n\n## 图书列表数据加载\n\n以下仅仅写出新增的代码：\n\n````js\n// 指定基准路径\naxios.defaults.baseURL = 'http://localhost';\n// 响应拦截器，将响应结果的data属性返回\naxios.interceptors.response.use(function(res){\n  return res.data;\n},function(err){\n  throw new Promise().reject(err);\n})\n\nlet vm = new Vue({\n  el: '#app',\n  methods: {\n    // 调用后台接口\n    queryData: async function () {\n      this.books = await axios.get('/books');\n    }\n  },\n  // 该生命周期钩子函数被触发的时候\n  // 一般此时用于获取后台数据，然后把数据填充在模板\n  mounted() {\n    this.queryData();\n  },\n});\n````\n\n## 添加图书\n\n- 路径：books\n- 请求参数\n    + name : 图书名称\n- 响应结果\n\n```json\n{\n    \"status\": 200  // (200表示成功；500表示失败)\n}\n```\n\n此时由于编号是在后台生成的，因此将其禁用输入。\n\n![image-20210802102141735](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802102148.png)\n\n```js\nlet vm = new Vue({\n  el: '#app',\n  methods: {\n      async  handle() {\n      if (this.flag) {\n        this.books.some(item => {\n          // 如果表单中的id与数据中的id相同\n          if (item.id == this.id) {\n            item.name = this.name;\n            // 允许输入\n            this.flag = false;\n            console.log(item.id);\n            return true;\n          }\n        })\n      } else {\n        // 添加图书\n        let res= await axios.post('/books',{\n          name:this.name\n        })\n        // 此时通过拦截器返回的是data，而服务器端的data值刚好又是status\n        if(res.status===200){\n          // 重新加载图书列表\n          this.queryData();\n        }\n      }\n      // 清空input输入域\n      this.id = '';\n      this.name = '';\n    },\n});\n```\n\n## 验证图书名称验证\n\n- 路径：books/book/:name\n- 请求参数:无\n- 响应结果\n\n```json\n{\n    \"status\": 1  // (1表示存在；2表示不存在)\n}\n```\n\n```js\nwatch: {\n  name: async function (value) {\n    // 验证图书名称是否存在\n    let response = await axios.get('/books/book/' + this.name);\n    if (response.status === 1) {\n      // 图书已经存在，禁用提交按钮\n      this.submitFlag = true;\n      this.err = true;\n      this.errMessage = '图书名称已存在'\n    }else{\n            this.submitFlag = false;\n}\n  },\n},\n```\n\n## 编辑图书\n\n### 根据id查询图书信息\n\n- 路径：books/:id\n- 请求参数：无\n- 响应结果\n\n```json\n{\n    \"name\":\"西游记\",\n    \"date\":2525609975000,\n    \"id\":7\n}\n```\n\n```js\nmethods:{\n    async edit(id) {\n      // 修改的时候将状态位设置为true\n      this.flag = true;\n      // 根据id查询对应的图书信息\n      let res=await axios.get('books/'+id);\n      this.id=res.id;\n      this.name=res.name;\n\t}\n}\n```\n\n### 提交编辑后的图书信息\n\n- 路径：books/:id\n- 请求参数\n    + name : 图书名称\n- 响应结果\n\n```json\n{\n    \"status\": 200  // (200表示成功；500表示失败)\n}\n```\n\n```js\nmethods:{\n\tasync handle() {\n\t    if (this.flag) {\n\t      let res=await axios.put('/books/'+this.id,{\n\t        name:this.name\n\t      });\n\t      if(res.status===200){\n\t      //  刷新列表\n\t      this.queryData();\n\t      }\n\t      this.flag = false;\n\t    } else {\n\t      // 添加图书\n\t      let res = await axios.post('/books', {\n\t        name: this.name\n\t      })\n\t      // 此时通过拦截器返回的是data，而服务器端的data值刚好又是status\n\t      if (res.status === 200) {\n\t        // 重新加载图书列表\n\t        this.queryData();\n\t      }\n\t    }\n\t}\n}\n```\n\n## 删除图书\n- 路径：books/:id\n- 请求参数: 无\n- 响应结果\n\n```json\n{\n    \"status\": 200  // (200表示成功；500表示失败)\n}\n```\n\n```js\nmethods:{\n    async del(id) {\n    let res= await axios.delete('books/'+id);\n    if(res.status===200){\n      this.queryData();\n    }\n  },\n}\n```\n\n","slug":"基于接口的图书管理系统","published":1,"updated":"2021-08-02T03:58:52.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrub5z0p00016sun02hub3dq","content":"<p>前面已经做了一个<a href=\"https://jiaqicoder.com/2021/07/30/Vue%E5%B0%8F%E6%A1%88%E4%BE%8B-%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/\">图书管理系统</a>，不过当时用的是假数据，因此这次将用express写接口，从而对图书的相关操作能基于后台接口。</p>\n<h1 id=\"前端实现\"><a href=\"#前端实现\" class=\"headerlink\" title=\"前端实现\"></a>前端实现</h1><h2 id=\"需要创建的接口\"><a href=\"#需要创建的接口\" class=\"headerlink\" title=\"需要创建的接口\"></a>需要创建的接口</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>请求方式</th>\n<th>请求路由</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>图书列表数据加载</td>\n<td>GET</td>\n<td>/books</td>\n</tr>\n<tr>\n<td>添加图书</td>\n<td>POST</td>\n<td>/books</td>\n</tr>\n<tr>\n<td>验证图书名称是否存在</td>\n<td>GET</td>\n<td>/books/book/:name</td>\n</tr>\n<tr>\n<td>编辑图书（根据id查询）</td>\n<td>GET</td>\n<td>/books/:id</td>\n</tr>\n<tr>\n<td>编辑图书（提交修改后的）</td>\n<td>PUT</td>\n<td>/books/:id</td>\n</tr>\n<tr>\n<td>删除图书</td>\n<td>DELETE</td>\n<td>/books/:id</td>\n</tr>\n</tbody></table>\n<p>路由素材中已经提供了，最后看实际情况，尽可能自己实现路由。</p>\n<h2 id=\"图书列表数据加载\"><a href=\"#图书列表数据加载\" class=\"headerlink\" title=\"图书列表数据加载\"></a>图书列表数据加载</h2><p>以下仅仅写出新增的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 指定基准路径</span><br>axios.defaults.baseURL = <span class=\"hljs-string\">&#x27;http://localhost&#x27;</span>;<br><span class=\"hljs-comment\">// 响应拦截器，将响应结果的data属性返回</span><br>axios.interceptors.response.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> res.data;<br>&#125;,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>().reject(err);<br>&#125;)<br><br><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>    <span class=\"hljs-comment\">// 调用后台接口</span><br>    <span class=\"hljs-attr\">queryData</span>: <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-built_in\">this</span>.books = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">&#x27;/books&#x27;</span>);<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-comment\">// 该生命周期钩子函数被触发的时候</span><br>  <span class=\"hljs-comment\">// 一般此时用于获取后台数据，然后把数据填充在模板</span><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.queryData();<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"添加图书\"><a href=\"#添加图书\" class=\"headerlink\" title=\"添加图书\"></a>添加图书</h2><ul>\n<li>路径：books</li>\n<li>请求参数<ul>\n<li>name : 图书名称</li>\n</ul>\n</li>\n<li>响应结果</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;status&quot;</span>: <span class=\"hljs-number\">200</span>  <span class=\"hljs-comment\">// (200表示成功；500表示失败)</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此时由于编号是在后台生成的，因此将其禁用输入。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802102148.png\" alt=\"image-20210802102141735\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>      <span class=\"hljs-keyword\">async</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.flag) &#123;<br>        <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;<br>          <span class=\"hljs-comment\">// 如果表单中的id与数据中的id相同</span><br>          <span class=\"hljs-keyword\">if</span> (item.id == <span class=\"hljs-built_in\">this</span>.id) &#123;<br>            item.name = <span class=\"hljs-built_in\">this</span>.name;<br>            <span class=\"hljs-comment\">// 允许输入</span><br>            <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-built_in\">console</span>.log(item.id);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>          &#125;<br>        &#125;)<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 添加图书</span><br>        <span class=\"hljs-keyword\">let</span> res= <span class=\"hljs-keyword\">await</span> axios.post(<span class=\"hljs-string\">&#x27;/books&#x27;</span>,&#123;<br>          <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">this</span>.name<br>        &#125;)<br>        <span class=\"hljs-comment\">// 此时通过拦截器返回的是data，而服务器端的data值刚好又是status</span><br>        <span class=\"hljs-keyword\">if</span>(res.status===<span class=\"hljs-number\">200</span>)&#123;<br>          <span class=\"hljs-comment\">// 重新加载图书列表</span><br>          <span class=\"hljs-built_in\">this</span>.queryData();<br>        &#125;<br>      &#125;<br>      <span class=\"hljs-comment\">// 清空input输入域</span><br>      <span class=\"hljs-built_in\">this</span>.id = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>      <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"验证图书名称验证\"><a href=\"#验证图书名称验证\" class=\"headerlink\" title=\"验证图书名称验证\"></a>验证图书名称验证</h2><ul>\n<li>路径：books/book/:name</li>\n<li>请求参数:无</li>\n<li>响应结果</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;status&quot;</span>: <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\">// (1表示存在；2表示不存在)</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">watch: &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 验证图书名称是否存在</span><br>    <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">&#x27;/books/book/&#x27;</span> + <span class=\"hljs-built_in\">this</span>.name);<br>    <span class=\"hljs-keyword\">if</span> (response.status === <span class=\"hljs-number\">1</span>) &#123;<br>      <span class=\"hljs-comment\">// 图书已经存在，禁用提交按钮</span><br>      <span class=\"hljs-built_in\">this</span>.submitFlag = <span class=\"hljs-literal\">true</span>;<br>      <span class=\"hljs-built_in\">this</span>.err = <span class=\"hljs-literal\">true</span>;<br>      <span class=\"hljs-built_in\">this</span>.errMessage = <span class=\"hljs-string\">&#x27;图书名称已存在&#x27;</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.submitFlag = <span class=\"hljs-literal\">false</span>;<br>&#125;<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编辑图书\"><a href=\"#编辑图书\" class=\"headerlink\" title=\"编辑图书\"></a>编辑图书</h2><h3 id=\"根据id查询图书信息\"><a href=\"#根据id查询图书信息\" class=\"headerlink\" title=\"根据id查询图书信息\"></a>根据id查询图书信息</h3><ul>\n<li>路径：books/:id</li>\n<li>请求参数：无</li>\n<li>响应结果</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;西游记&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;date&quot;</span>:<span class=\"hljs-number\">2525609975000</span>,<br>    <span class=\"hljs-attr\">&quot;id&quot;</span>:<span class=\"hljs-number\">7</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">methods:&#123;<br>    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">edit</span>(<span class=\"hljs-params\">id</span>)</span> &#123;<br>      <span class=\"hljs-comment\">// 修改的时候将状态位设置为true</span><br>      <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">true</span>;<br>      <span class=\"hljs-comment\">// 根据id查询对应的图书信息</span><br>      <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">&#x27;books/&#x27;</span>+id);<br>      <span class=\"hljs-built_in\">this</span>.id=res.id;<br>      <span class=\"hljs-built_in\">this</span>.name=res.name;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"提交编辑后的图书信息\"><a href=\"#提交编辑后的图书信息\" class=\"headerlink\" title=\"提交编辑后的图书信息\"></a>提交编辑后的图书信息</h3><ul>\n<li>路径：books/:id</li>\n<li>请求参数<ul>\n<li>name : 图书名称</li>\n</ul>\n</li>\n<li>响应结果</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;status&quot;</span>: <span class=\"hljs-number\">200</span>  <span class=\"hljs-comment\">// (200表示成功；500表示失败)</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">methods:&#123;<br>\t<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>\t    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.flag) &#123;<br>\t      <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">await</span> axios.put(<span class=\"hljs-string\">&#x27;/books/&#x27;</span>+<span class=\"hljs-built_in\">this</span>.id,&#123;<br>\t        <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">this</span>.name<br>\t      &#125;);<br>\t      <span class=\"hljs-keyword\">if</span>(res.status===<span class=\"hljs-number\">200</span>)&#123;<br>\t      <span class=\"hljs-comment\">//  刷新列表</span><br>\t      <span class=\"hljs-built_in\">this</span>.queryData();<br>\t      &#125;<br>\t      <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">false</span>;<br>\t    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t      <span class=\"hljs-comment\">// 添加图书</span><br>\t      <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> axios.post(<span class=\"hljs-string\">&#x27;/books&#x27;</span>, &#123;<br>\t        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">this</span>.name<br>\t      &#125;)<br>\t      <span class=\"hljs-comment\">// 此时通过拦截器返回的是data，而服务器端的data值刚好又是status</span><br>\t      <span class=\"hljs-keyword\">if</span> (res.status === <span class=\"hljs-number\">200</span>) &#123;<br>\t        <span class=\"hljs-comment\">// 重新加载图书列表</span><br>\t        <span class=\"hljs-built_in\">this</span>.queryData();<br>\t      &#125;<br>\t    &#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"删除图书\"><a href=\"#删除图书\" class=\"headerlink\" title=\"删除图书\"></a>删除图书</h2><ul>\n<li>路径：books/:id</li>\n<li>请求参数: 无</li>\n<li>响应结果</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;status&quot;</span>: <span class=\"hljs-number\">200</span>  <span class=\"hljs-comment\">// (200表示成功；500表示失败)</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">methods:&#123;<br>    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">del</span>(<span class=\"hljs-params\">id</span>)</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> res= <span class=\"hljs-keyword\">await</span> axios.delete(<span class=\"hljs-string\">&#x27;books/&#x27;</span>+id);<br>    <span class=\"hljs-keyword\">if</span>(res.status===<span class=\"hljs-number\">200</span>)&#123;<br>      <span class=\"hljs-built_in\">this</span>.queryData();<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>前面已经做了一个<a href=\"https://jiaqicoder.com/2021/07/30/Vue%E5%B0%8F%E6%A1%88%E4%BE%8B-%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/\">图书管理系统</a>，不过当时用的是假数据，因此这次将用express写接口，从而对图书的相关操作能基于后台接口。</p>\n<h1 id=\"前端实现\"><a href=\"#前端实现\" class=\"headerlink\" title=\"前端实现\"></a>前端实现</h1><h2 id=\"需要创建的接口\"><a href=\"#需要创建的接口\" class=\"headerlink\" title=\"需要创建的接口\"></a>需要创建的接口</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>请求方式</th>\n<th>请求路由</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>图书列表数据加载</td>\n<td>GET</td>\n<td>/books</td>\n</tr>\n<tr>\n<td>添加图书</td>\n<td>POST</td>\n<td>/books</td>\n</tr>\n<tr>\n<td>验证图书名称是否存在</td>\n<td>GET</td>\n<td>/books/book/:name</td>\n</tr>\n<tr>\n<td>编辑图书（根据id查询）</td>\n<td>GET</td>\n<td>/books/:id</td>\n</tr>\n<tr>\n<td>编辑图书（提交修改后的）</td>\n<td>PUT</td>\n<td>/books/:id</td>\n</tr>\n<tr>\n<td>删除图书</td>\n<td>DELETE</td>\n<td>/books/:id</td>\n</tr>\n</tbody></table>\n<p>路由素材中已经提供了，最后看实际情况，尽可能自己实现路由。</p>\n<h2 id=\"图书列表数据加载\"><a href=\"#图书列表数据加载\" class=\"headerlink\" title=\"图书列表数据加载\"></a>图书列表数据加载</h2><p>以下仅仅写出新增的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 指定基准路径</span><br>axios.defaults.baseURL = <span class=\"hljs-string\">&#x27;http://localhost&#x27;</span>;<br><span class=\"hljs-comment\">// 响应拦截器，将响应结果的data属性返回</span><br>axios.interceptors.response.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> res.data;<br>&#125;,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>().reject(err);<br>&#125;)<br><br><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>    <span class=\"hljs-comment\">// 调用后台接口</span><br>    <span class=\"hljs-attr\">queryData</span>: <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-built_in\">this</span>.books = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">&#x27;/books&#x27;</span>);<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-comment\">// 该生命周期钩子函数被触发的时候</span><br>  <span class=\"hljs-comment\">// 一般此时用于获取后台数据，然后把数据填充在模板</span><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">mounted</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.queryData();<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"添加图书\"><a href=\"#添加图书\" class=\"headerlink\" title=\"添加图书\"></a>添加图书</h2><ul>\n<li>路径：books</li>\n<li>请求参数<ul>\n<li>name : 图书名称</li>\n</ul>\n</li>\n<li>响应结果</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;status&quot;</span>: <span class=\"hljs-number\">200</span>  <span class=\"hljs-comment\">// (200表示成功；500表示失败)</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此时由于编号是在后台生成的，因此将其禁用输入。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802102148.png\" alt=\"image-20210802102141735\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> vm = <span class=\"hljs-keyword\">new</span> Vue(&#123;<br>  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>      <span class=\"hljs-keyword\">async</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.flag) &#123;<br>        <span class=\"hljs-built_in\">this</span>.books.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;<br>          <span class=\"hljs-comment\">// 如果表单中的id与数据中的id相同</span><br>          <span class=\"hljs-keyword\">if</span> (item.id == <span class=\"hljs-built_in\">this</span>.id) &#123;<br>            item.name = <span class=\"hljs-built_in\">this</span>.name;<br>            <span class=\"hljs-comment\">// 允许输入</span><br>            <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-built_in\">console</span>.log(item.id);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>          &#125;<br>        &#125;)<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 添加图书</span><br>        <span class=\"hljs-keyword\">let</span> res= <span class=\"hljs-keyword\">await</span> axios.post(<span class=\"hljs-string\">&#x27;/books&#x27;</span>,&#123;<br>          <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">this</span>.name<br>        &#125;)<br>        <span class=\"hljs-comment\">// 此时通过拦截器返回的是data，而服务器端的data值刚好又是status</span><br>        <span class=\"hljs-keyword\">if</span>(res.status===<span class=\"hljs-number\">200</span>)&#123;<br>          <span class=\"hljs-comment\">// 重新加载图书列表</span><br>          <span class=\"hljs-built_in\">this</span>.queryData();<br>        &#125;<br>      &#125;<br>      <span class=\"hljs-comment\">// 清空input输入域</span><br>      <span class=\"hljs-built_in\">this</span>.id = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>      <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"验证图书名称验证\"><a href=\"#验证图书名称验证\" class=\"headerlink\" title=\"验证图书名称验证\"></a>验证图书名称验证</h2><ul>\n<li>路径：books/book/:name</li>\n<li>请求参数:无</li>\n<li>响应结果</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;status&quot;</span>: <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\">// (1表示存在；2表示不存在)</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">watch: &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 验证图书名称是否存在</span><br>    <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">&#x27;/books/book/&#x27;</span> + <span class=\"hljs-built_in\">this</span>.name);<br>    <span class=\"hljs-keyword\">if</span> (response.status === <span class=\"hljs-number\">1</span>) &#123;<br>      <span class=\"hljs-comment\">// 图书已经存在，禁用提交按钮</span><br>      <span class=\"hljs-built_in\">this</span>.submitFlag = <span class=\"hljs-literal\">true</span>;<br>      <span class=\"hljs-built_in\">this</span>.err = <span class=\"hljs-literal\">true</span>;<br>      <span class=\"hljs-built_in\">this</span>.errMessage = <span class=\"hljs-string\">&#x27;图书名称已存在&#x27;</span><br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.submitFlag = <span class=\"hljs-literal\">false</span>;<br>&#125;<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编辑图书\"><a href=\"#编辑图书\" class=\"headerlink\" title=\"编辑图书\"></a>编辑图书</h2><h3 id=\"根据id查询图书信息\"><a href=\"#根据id查询图书信息\" class=\"headerlink\" title=\"根据id查询图书信息\"></a>根据id查询图书信息</h3><ul>\n<li>路径：books/:id</li>\n<li>请求参数：无</li>\n<li>响应结果</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;name&quot;</span>:<span class=\"hljs-string\">&quot;西游记&quot;</span>,<br>    <span class=\"hljs-attr\">&quot;date&quot;</span>:<span class=\"hljs-number\">2525609975000</span>,<br>    <span class=\"hljs-attr\">&quot;id&quot;</span>:<span class=\"hljs-number\">7</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">methods:&#123;<br>    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">edit</span>(<span class=\"hljs-params\">id</span>)</span> &#123;<br>      <span class=\"hljs-comment\">// 修改的时候将状态位设置为true</span><br>      <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">true</span>;<br>      <span class=\"hljs-comment\">// 根据id查询对应的图书信息</span><br>      <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">&#x27;books/&#x27;</span>+id);<br>      <span class=\"hljs-built_in\">this</span>.id=res.id;<br>      <span class=\"hljs-built_in\">this</span>.name=res.name;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"提交编辑后的图书信息\"><a href=\"#提交编辑后的图书信息\" class=\"headerlink\" title=\"提交编辑后的图书信息\"></a>提交编辑后的图书信息</h3><ul>\n<li>路径：books/:id</li>\n<li>请求参数<ul>\n<li>name : 图书名称</li>\n</ul>\n</li>\n<li>响应结果</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;status&quot;</span>: <span class=\"hljs-number\">200</span>  <span class=\"hljs-comment\">// (200表示成功；500表示失败)</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">methods:&#123;<br>\t<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">handle</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>\t    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.flag) &#123;<br>\t      <span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-keyword\">await</span> axios.put(<span class=\"hljs-string\">&#x27;/books/&#x27;</span>+<span class=\"hljs-built_in\">this</span>.id,&#123;<br>\t        <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">this</span>.name<br>\t      &#125;);<br>\t      <span class=\"hljs-keyword\">if</span>(res.status===<span class=\"hljs-number\">200</span>)&#123;<br>\t      <span class=\"hljs-comment\">//  刷新列表</span><br>\t      <span class=\"hljs-built_in\">this</span>.queryData();<br>\t      &#125;<br>\t      <span class=\"hljs-built_in\">this</span>.flag = <span class=\"hljs-literal\">false</span>;<br>\t    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t      <span class=\"hljs-comment\">// 添加图书</span><br>\t      <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> axios.post(<span class=\"hljs-string\">&#x27;/books&#x27;</span>, &#123;<br>\t        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">this</span>.name<br>\t      &#125;)<br>\t      <span class=\"hljs-comment\">// 此时通过拦截器返回的是data，而服务器端的data值刚好又是status</span><br>\t      <span class=\"hljs-keyword\">if</span> (res.status === <span class=\"hljs-number\">200</span>) &#123;<br>\t        <span class=\"hljs-comment\">// 重新加载图书列表</span><br>\t        <span class=\"hljs-built_in\">this</span>.queryData();<br>\t      &#125;<br>\t    &#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"删除图书\"><a href=\"#删除图书\" class=\"headerlink\" title=\"删除图书\"></a>删除图书</h2><ul>\n<li>路径：books/:id</li>\n<li>请求参数: 无</li>\n<li>响应结果</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;status&quot;</span>: <span class=\"hljs-number\">200</span>  <span class=\"hljs-comment\">// (200表示成功；500表示失败)</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">methods:&#123;<br>    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">del</span>(<span class=\"hljs-params\">id</span>)</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> res= <span class=\"hljs-keyword\">await</span> axios.delete(<span class=\"hljs-string\">&#x27;books/&#x27;</span>+id);<br>    <span class=\"hljs-keyword\">if</span>(res.status===<span class=\"hljs-number\">200</span>)&#123;<br>      <span class=\"hljs-built_in\">this</span>.queryData();<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"网络请求学习笔记","date":"2021-08-02T06:01:38.000Z","_content":"\n\n\n笔记基于：https://zh.javascript.info/\n\n# URL对象\n\n## 创建URL对象\n\n创建一个新的 `url` 对象的语法：\n\n```js\nnew URL(url,[base])\n```\n\n- **`url`** —— 完整的 URL，或者仅路径（如果设置了 base），\n- **`base`** —— 可选的 base URL：如果设置了此参数，且参数 `url` 只有路径，则会根据这个 `base` 生成 URL。\n\n例如：\n\n```js\nlet url = new URL('https://jiaqicoder.com/tags?id=Vue&num=1');\nconsole.log(url);\n```\n\n输出的结果如下：\n\n```js\nURL {\n  href: 'https://jiaqicoder.com/tags?id=Vue&num=1',\n  origin: 'https://jiaqicoder.com',\n  protocol: 'https:',\n  username: '',\n  password: '',\n  host: 'jiaqicoder.com',\n  hostname: 'jiaqicoder.com',\n  port: '',\n  pathname: '/tags',\n  search: '?id=Vue&num=1',\n  searchParams: URLSearchParams { 'id' => 'Vue', 'num' => '1' },\n  hash: ''\n}\n```\n\n下面的2个URL结果是一样的：\n\n```js\nlet url1 = new URL('/tag','https://www.jiaqicoder.com');\nlet url2 = new URL('https://www.jiaqicoder.com/tag');\nconsole.log(url1);\nconsole.log(url2);\n```\n\n```js\nURL {\n  href: 'https://www.jiaqicoder.com/tag',\n  origin: 'https://www.jiaqicoder.com',\n  protocol: 'https:',\n  username: '',\n  password: '',\n  host: 'www.jiaqicoder.com',\n  hostname: 'www.jiaqicoder.com',\n  port: '',\n  pathname: '/tag',\n  search: '',\n  searchParams: URLSearchParams {},\n  hash: ''\n}\n```\n\n\n\n`URL` 对象立即允许我们访问其组件，因此这是一个解析 url 的好方法，例如：\n\n```js\nlet url = new URL('https://www.jiaqicoder.com/tag');\nconsole.log(url.protocol); //https\nconsole.log(url.host); //www.jiaqicoder.com\nconsole.log(url.pathname); //tag\n```\n\n### URL 组成\n\n![image-20210802142354919](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802142354.png)\n\n- `href` 是完整的 URL，与 `url.toString()` 相同\n- `protocol` 以冒号字符 `:` 结尾\n- `search` —— 以问号 `?` 开头的一串参数\n- `hash` 以哈希字符 `#` 开头\n- 如果存在 HTTP 身份验证，则这里可能还会有 `user` 和 `password` 属性：`http://login:password@site.com`（图片上没有，很少被用到）。\n\n## SearchParams '?...'\n\n假设，我们想要创建一个具有给定搜索参数的 url，例如：`https://google.com/search?query=JavaScript`。\n\n尽管，可以在url字符串中提供它们：\n\n```js\nnew URL('https://google.com/search?query=JavaScript')\n```\n\n但是，如果参数中包含空格，非拉丁字母等（具体参见下文），参数就需要被编码。\n\n因此，有一个 URL 属性用于解决这个问题：`url.searchParams`，[URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) 类型的对象。\n\n> 关于URLSearchParams的用法例子，[点击查看](https://jiaqicoder.com/2021/08/01/axios%E5%AD%A6%E4%B9%A0/#POST-%E8%AF%B7%E6%B1%82)。\n\n它为搜索参数提供了简便的方法：\n\n- **`append(name, value)`** —— 按照 `name` 添加参数，\n- **`delete(name)`** —— 按照 `name` 移除参数，\n- **`get(name)`** —— 按照 `name` 获取参数，\n- **`getAll(name)`** —— 获取相同 `name` 的所有参数（这是可行的，例如 `?user=John&user=Pete`），\n- **`has(name)`** —— 按照 `name` 检查参数是否存在，\n- **`set(name, value)`** —— set/replace 参数，\n- **`sort()`** —— 按 name 对参数进行排序，很少使用，\n- ……并且它是可迭代的，类似于 `Map`。\n\n```js\nlet url = new URL('https://www.jiaqicoder.com/search');\n\n// 1.1添加一个参数\nurl.searchParams.set('q','test me!');\n\n// 1.1参数会自动被编码 https://www.jiaqicoder.com/search?q=test+me%21\nconsole.log(url.href);\n\n// 1.2再添加一个参数\nurl.searchParams.set('tbs','qdr:y');\n// 再添加一个参数 https://www.jiaqicoder.com/search?q=test+me%21&tbs=qdr%3Ay\nconsole.log(url.href);\n\n// 1.3 url上的参数\n// { 'q' => 'test me!', 'tbs' => 'qdr:y' }\nconsole.log(url.searchParams);\n\n// 1.4 遍历参数\nfor(let [name,value] of url.searchParams){\n    console.log(`${name}=${value}`);\n}\n// q=test me!\n// tbs=qdr:y\n```\n\n此时url对象所有属性如下：\n\n```js\nURL {\n  href: 'https://www.jiaqicoder.com/search?q=test+me%21&tbs=qdr%3Ay',\n  origin: 'https://www.jiaqicoder.com',\n  protocol: 'https:',\n  username: '',\n  password: '',\n  host: 'www.jiaqicoder.com',\n  hostname: 'www.jiaqicoder.com',\n  port: '',\n  pathname: '/search',\n  search: '?q=test+me%21&tbs=qdr%3Ay',\n  searchParams: URLSearchParams { 'q' => 'test me!', 'tbs' => 'qdr:y' },\n  hash: ''\n}\n```\n\n## 编码\n\n[RFC3986](https://tools.ietf.org/html/rfc3986) 标准定义了 URL 中允许哪些字符，不允许哪些字符。\n\n那些不被允许的字符必须被编码，例如非拉丁字母和空格 —— 用其 UTF-8 代码代替，前缀为 `%`，例如 `%20`（由于历史原因，**空格可以用 `+` 编码**，但这是一个例外）。\n\n好消息是 `URL` 对象会自动处理这些。我们仅需提供未编码的参数，然后将 `URL` 转换为字符串：\n\n```js\n// 在此示例中使用一些西里尔字符\n\nlet url = new URL('https://ru.wikipedia.org/wiki/Тест');\n\nurl.searchParams.set('key', 'ъ');\nalert(url); //https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%81%D1%82?key=%D1%8A\n```\n\n正如你所看到的，url 路径中的 `Тест` 和 `ъ` 参数都被编码了。URL 变长了，因为每个西里尔字母用 UTF-8 编码的两个字节表示，因此这里有两个 `%..` 实体（entities）。\n\n## 编码字符串\n\n在过去，在出现 `URL` 对象之前，人们使用字符串作为 URL。\n\n而现在，`URL` 对象通常更方便，但是仍然可以使用字符串。在很多情况下，使用字符串可以使代码更短。\n\n如果使用字符串，则需要手动编码/解码特殊字符。\n\n下面是用于编码/解码 URL 的内建函数：\n\n- [encodeURI](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) —— 编码整个 URL。\n- [decodeURI](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) —— 解码为编码前的状态。\n- [encodeURIComponent](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) —— 编码 URL 组件，例如搜索参数，或者 hash，或者 pathname。\n- [decodeURIComponent](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent) —— 解码为编码前的状态。\n\n一个自然的问题：“`encodeURIComponent` 和 `encodeURI` 之间有什么区别？我们什么时候应该使用哪个？”\n\n如果我们看一个 URL，就容易理解了，它被分解为本文上面图中所示的组件形式：\n\n```js\nhttps://site.com:8080/path/page?p1=v1&p2=v2#hash\n```\n\n正如我们所看到的，在 URL 中 `:`，`?`，`=`，`&`，`#` 这类字符是被允许的。\n\n另一方面，对于 URL 的单个组件，例如一个搜索参数，则必须对这些字符进行编码，以免破坏 URL 的格式。\n\n- `encodeURI` 仅编码 URL 中完全禁止的字符。\n- `encodeURIComponent` 也编码这类字符，此外，还编码 `#`，`$`，`&`，`+`，`,`，`/`，`:`，`;`，`=`，`?` 和 `@` 字符。\n\n所以，对于一个 URL 整体，我们可以使用 `encodeURI`：\n\n```js\n// 在 url 路径中使用西里尔字符\nlet url = encodeURI('http://site.com/привет');\n\nalert(url); // http://site.com/%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\n```\n\n……而对于 URL 参数，我们应该改用 `encodeURIComponent`：\n\n```js\nlet music = encodeURIComponent('Rock&Roll');\n\nlet url = `https://google.com/search?q=${music}`;\nalert(url); // https://google.com/search?q=Rock%26Roll\n```\n\n将其与 `encodeURI` 进行比较：\n\n```javascript\nlet music = encodeURI('Rock&Roll');\n\nlet url = `https://google.com/search?q=${music}`;\nalert(url); // https://google.com/search?q=Rock&Roll\n```\n\n我们可以看到，`encodeURI` 没有对 `&` 进行编码，因为它对于整个 URL 来说是合法的字符。\n\n但是，我们应该编码在搜索参数中的 `&` 字符，否则，我们将得到 `q=Rock&Roll` —— 实际上是 `q=Rock` 加上某个晦涩的参数 `Roll`。不符合预期。\n\n因此，对于每个搜索参数，我们应该使用 `encodeURIComponent`，以将其正确地插入到 URL 字符串中。最安全的方式是对 name 和 value 都进行编码，除非我们能够绝对确保它只包含允许的字符。\n","source":"_posts/网络请求学习笔记.md","raw":"---\ntitle: 网络请求学习笔记\ndate: 2021-08-02 14:01:38\ntags: [fetch,url]\n---\n\n\n\n笔记基于：https://zh.javascript.info/\n\n# URL对象\n\n## 创建URL对象\n\n创建一个新的 `url` 对象的语法：\n\n```js\nnew URL(url,[base])\n```\n\n- **`url`** —— 完整的 URL，或者仅路径（如果设置了 base），\n- **`base`** —— 可选的 base URL：如果设置了此参数，且参数 `url` 只有路径，则会根据这个 `base` 生成 URL。\n\n例如：\n\n```js\nlet url = new URL('https://jiaqicoder.com/tags?id=Vue&num=1');\nconsole.log(url);\n```\n\n输出的结果如下：\n\n```js\nURL {\n  href: 'https://jiaqicoder.com/tags?id=Vue&num=1',\n  origin: 'https://jiaqicoder.com',\n  protocol: 'https:',\n  username: '',\n  password: '',\n  host: 'jiaqicoder.com',\n  hostname: 'jiaqicoder.com',\n  port: '',\n  pathname: '/tags',\n  search: '?id=Vue&num=1',\n  searchParams: URLSearchParams { 'id' => 'Vue', 'num' => '1' },\n  hash: ''\n}\n```\n\n下面的2个URL结果是一样的：\n\n```js\nlet url1 = new URL('/tag','https://www.jiaqicoder.com');\nlet url2 = new URL('https://www.jiaqicoder.com/tag');\nconsole.log(url1);\nconsole.log(url2);\n```\n\n```js\nURL {\n  href: 'https://www.jiaqicoder.com/tag',\n  origin: 'https://www.jiaqicoder.com',\n  protocol: 'https:',\n  username: '',\n  password: '',\n  host: 'www.jiaqicoder.com',\n  hostname: 'www.jiaqicoder.com',\n  port: '',\n  pathname: '/tag',\n  search: '',\n  searchParams: URLSearchParams {},\n  hash: ''\n}\n```\n\n\n\n`URL` 对象立即允许我们访问其组件，因此这是一个解析 url 的好方法，例如：\n\n```js\nlet url = new URL('https://www.jiaqicoder.com/tag');\nconsole.log(url.protocol); //https\nconsole.log(url.host); //www.jiaqicoder.com\nconsole.log(url.pathname); //tag\n```\n\n### URL 组成\n\n![image-20210802142354919](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802142354.png)\n\n- `href` 是完整的 URL，与 `url.toString()` 相同\n- `protocol` 以冒号字符 `:` 结尾\n- `search` —— 以问号 `?` 开头的一串参数\n- `hash` 以哈希字符 `#` 开头\n- 如果存在 HTTP 身份验证，则这里可能还会有 `user` 和 `password` 属性：`http://login:password@site.com`（图片上没有，很少被用到）。\n\n## SearchParams '?...'\n\n假设，我们想要创建一个具有给定搜索参数的 url，例如：`https://google.com/search?query=JavaScript`。\n\n尽管，可以在url字符串中提供它们：\n\n```js\nnew URL('https://google.com/search?query=JavaScript')\n```\n\n但是，如果参数中包含空格，非拉丁字母等（具体参见下文），参数就需要被编码。\n\n因此，有一个 URL 属性用于解决这个问题：`url.searchParams`，[URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) 类型的对象。\n\n> 关于URLSearchParams的用法例子，[点击查看](https://jiaqicoder.com/2021/08/01/axios%E5%AD%A6%E4%B9%A0/#POST-%E8%AF%B7%E6%B1%82)。\n\n它为搜索参数提供了简便的方法：\n\n- **`append(name, value)`** —— 按照 `name` 添加参数，\n- **`delete(name)`** —— 按照 `name` 移除参数，\n- **`get(name)`** —— 按照 `name` 获取参数，\n- **`getAll(name)`** —— 获取相同 `name` 的所有参数（这是可行的，例如 `?user=John&user=Pete`），\n- **`has(name)`** —— 按照 `name` 检查参数是否存在，\n- **`set(name, value)`** —— set/replace 参数，\n- **`sort()`** —— 按 name 对参数进行排序，很少使用，\n- ……并且它是可迭代的，类似于 `Map`。\n\n```js\nlet url = new URL('https://www.jiaqicoder.com/search');\n\n// 1.1添加一个参数\nurl.searchParams.set('q','test me!');\n\n// 1.1参数会自动被编码 https://www.jiaqicoder.com/search?q=test+me%21\nconsole.log(url.href);\n\n// 1.2再添加一个参数\nurl.searchParams.set('tbs','qdr:y');\n// 再添加一个参数 https://www.jiaqicoder.com/search?q=test+me%21&tbs=qdr%3Ay\nconsole.log(url.href);\n\n// 1.3 url上的参数\n// { 'q' => 'test me!', 'tbs' => 'qdr:y' }\nconsole.log(url.searchParams);\n\n// 1.4 遍历参数\nfor(let [name,value] of url.searchParams){\n    console.log(`${name}=${value}`);\n}\n// q=test me!\n// tbs=qdr:y\n```\n\n此时url对象所有属性如下：\n\n```js\nURL {\n  href: 'https://www.jiaqicoder.com/search?q=test+me%21&tbs=qdr%3Ay',\n  origin: 'https://www.jiaqicoder.com',\n  protocol: 'https:',\n  username: '',\n  password: '',\n  host: 'www.jiaqicoder.com',\n  hostname: 'www.jiaqicoder.com',\n  port: '',\n  pathname: '/search',\n  search: '?q=test+me%21&tbs=qdr%3Ay',\n  searchParams: URLSearchParams { 'q' => 'test me!', 'tbs' => 'qdr:y' },\n  hash: ''\n}\n```\n\n## 编码\n\n[RFC3986](https://tools.ietf.org/html/rfc3986) 标准定义了 URL 中允许哪些字符，不允许哪些字符。\n\n那些不被允许的字符必须被编码，例如非拉丁字母和空格 —— 用其 UTF-8 代码代替，前缀为 `%`，例如 `%20`（由于历史原因，**空格可以用 `+` 编码**，但这是一个例外）。\n\n好消息是 `URL` 对象会自动处理这些。我们仅需提供未编码的参数，然后将 `URL` 转换为字符串：\n\n```js\n// 在此示例中使用一些西里尔字符\n\nlet url = new URL('https://ru.wikipedia.org/wiki/Тест');\n\nurl.searchParams.set('key', 'ъ');\nalert(url); //https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%81%D1%82?key=%D1%8A\n```\n\n正如你所看到的，url 路径中的 `Тест` 和 `ъ` 参数都被编码了。URL 变长了，因为每个西里尔字母用 UTF-8 编码的两个字节表示，因此这里有两个 `%..` 实体（entities）。\n\n## 编码字符串\n\n在过去，在出现 `URL` 对象之前，人们使用字符串作为 URL。\n\n而现在，`URL` 对象通常更方便，但是仍然可以使用字符串。在很多情况下，使用字符串可以使代码更短。\n\n如果使用字符串，则需要手动编码/解码特殊字符。\n\n下面是用于编码/解码 URL 的内建函数：\n\n- [encodeURI](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) —— 编码整个 URL。\n- [decodeURI](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) —— 解码为编码前的状态。\n- [encodeURIComponent](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) —— 编码 URL 组件，例如搜索参数，或者 hash，或者 pathname。\n- [decodeURIComponent](https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent) —— 解码为编码前的状态。\n\n一个自然的问题：“`encodeURIComponent` 和 `encodeURI` 之间有什么区别？我们什么时候应该使用哪个？”\n\n如果我们看一个 URL，就容易理解了，它被分解为本文上面图中所示的组件形式：\n\n```js\nhttps://site.com:8080/path/page?p1=v1&p2=v2#hash\n```\n\n正如我们所看到的，在 URL 中 `:`，`?`，`=`，`&`，`#` 这类字符是被允许的。\n\n另一方面，对于 URL 的单个组件，例如一个搜索参数，则必须对这些字符进行编码，以免破坏 URL 的格式。\n\n- `encodeURI` 仅编码 URL 中完全禁止的字符。\n- `encodeURIComponent` 也编码这类字符，此外，还编码 `#`，`$`，`&`，`+`，`,`，`/`，`:`，`;`，`=`，`?` 和 `@` 字符。\n\n所以，对于一个 URL 整体，我们可以使用 `encodeURI`：\n\n```js\n// 在 url 路径中使用西里尔字符\nlet url = encodeURI('http://site.com/привет');\n\nalert(url); // http://site.com/%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\n```\n\n……而对于 URL 参数，我们应该改用 `encodeURIComponent`：\n\n```js\nlet music = encodeURIComponent('Rock&Roll');\n\nlet url = `https://google.com/search?q=${music}`;\nalert(url); // https://google.com/search?q=Rock%26Roll\n```\n\n将其与 `encodeURI` 进行比较：\n\n```javascript\nlet music = encodeURI('Rock&Roll');\n\nlet url = `https://google.com/search?q=${music}`;\nalert(url); // https://google.com/search?q=Rock&Roll\n```\n\n我们可以看到，`encodeURI` 没有对 `&` 进行编码，因为它对于整个 URL 来说是合法的字符。\n\n但是，我们应该编码在搜索参数中的 `&` 字符，否则，我们将得到 `q=Rock&Roll` —— 实际上是 `q=Rock` 加上某个晦涩的参数 `Roll`。不符合预期。\n\n因此，对于每个搜索参数，我们应该使用 `encodeURIComponent`，以将其正确地插入到 URL 字符串中。最安全的方式是对 name 和 value 都进行编码，除非我们能够绝对确保它只包含允许的字符。\n","slug":"网络请求学习笔记","published":1,"updated":"2021-08-02T11:03:14.950Z","_id":"ckrub5z0u00036sun3c665xqo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>笔记基于：<a href=\"https://zh.javascript.info/\">https://zh.javascript.info/</a></p>\n<h1 id=\"URL对象\"><a href=\"#URL对象\" class=\"headerlink\" title=\"URL对象\"></a>URL对象</h1><h2 id=\"创建URL对象\"><a href=\"#创建URL对象\" class=\"headerlink\" title=\"创建URL对象\"></a>创建URL对象</h2><p>创建一个新的 <code>url</code> 对象的语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> URL(url,[base])<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>url</code></strong> —— 完整的 URL，或者仅路径（如果设置了 base），</li>\n<li><strong><code>base</code></strong> —— 可选的 base URL：如果设置了此参数，且参数 <code>url</code> 只有路径，则会根据这个 <code>base</code> 生成 URL。</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://jiaqicoder.com/tags?id=Vue&amp;num=1&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(url);<br></code></pre></td></tr></table></figure>\n\n<p>输出的结果如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">URL &#123;<br>  <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;https://jiaqicoder.com/tags?id=Vue&amp;num=1&#x27;</span>,<br>  <span class=\"hljs-attr\">origin</span>: <span class=\"hljs-string\">&#x27;https://jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">protocol</span>: <span class=\"hljs-string\">&#x27;https:&#x27;</span>,<br>  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">hostname</span>: <span class=\"hljs-string\">&#x27;jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">pathname</span>: <span class=\"hljs-string\">&#x27;/tags&#x27;</span>,<br>  <span class=\"hljs-attr\">search</span>: <span class=\"hljs-string\">&#x27;?id=Vue&amp;num=1&#x27;</span>,<br>  <span class=\"hljs-attr\">searchParams</span>: URLSearchParams &#123; <span class=\"hljs-string\">&#x27;id&#x27;</span> =&gt; <span class=\"hljs-string\">&#x27;Vue&#x27;</span>, <span class=\"hljs-string\">&#x27;num&#x27;</span> =&gt; <span class=\"hljs-string\">&#x27;1&#x27;</span> &#125;,<br>  <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-string\">&#x27;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>下面的2个URL结果是一样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> url1 = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;/tag&#x27;</span>,<span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> url2 = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com/tag&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(url1);<br><span class=\"hljs-built_in\">console</span>.log(url2);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">URL &#123;<br>  <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com/tag&#x27;</span>,<br>  <span class=\"hljs-attr\">origin</span>: <span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">protocol</span>: <span class=\"hljs-string\">&#x27;https:&#x27;</span>,<br>  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">hostname</span>: <span class=\"hljs-string\">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">pathname</span>: <span class=\"hljs-string\">&#x27;/tag&#x27;</span>,<br>  <span class=\"hljs-attr\">search</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">searchParams</span>: URLSearchParams &#123;&#125;,<br>  <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-string\">&#x27;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>URL</code> 对象立即允许我们访问其组件，因此这是一个解析 url 的好方法，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com/tag&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(url.protocol); <span class=\"hljs-comment\">//https</span><br><span class=\"hljs-built_in\">console</span>.log(url.host); <span class=\"hljs-comment\">//www.jiaqicoder.com</span><br><span class=\"hljs-built_in\">console</span>.log(url.pathname); <span class=\"hljs-comment\">//tag</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"URL-组成\"><a href=\"#URL-组成\" class=\"headerlink\" title=\"URL 组成\"></a>URL 组成</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802142354.png\" alt=\"image-20210802142354919\"></p>\n<ul>\n<li><code>href</code> 是完整的 URL，与 <code>url.toString()</code> 相同</li>\n<li><code>protocol</code> 以冒号字符 <code>:</code> 结尾</li>\n<li><code>search</code> —— 以问号 <code>?</code> 开头的一串参数</li>\n<li><code>hash</code> 以哈希字符 <code>#</code> 开头</li>\n<li>如果存在 HTTP 身份验证，则这里可能还会有 <code>user</code> 和 <code>password</code> 属性：<code>http://login:password@site.com</code>（图片上没有，很少被用到）。</li>\n</ul>\n<h2 id=\"SearchParams-‘-…’\"><a href=\"#SearchParams-‘-…’\" class=\"headerlink\" title=\"SearchParams ‘?…’\"></a>SearchParams ‘?…’</h2><p>假设，我们想要创建一个具有给定搜索参数的 url，例如：<code>https://google.com/search?query=JavaScript</code>。</p>\n<p>尽管，可以在url字符串中提供它们：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://google.com/search?query=JavaScript&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>但是，如果参数中包含空格，非拉丁字母等（具体参见下文），参数就需要被编码。</p>\n<p>因此，有一个 URL 属性用于解决这个问题：<code>url.searchParams</code>，<a href=\"https://url.spec.whatwg.org/#urlsearchparams\">URLSearchParams</a> 类型的对象。</p>\n<blockquote>\n<p>关于URLSearchParams的用法例子，<a href=\"https://jiaqicoder.com/2021/08/01/axios%E5%AD%A6%E4%B9%A0/#POST-%E8%AF%B7%E6%B1%82\">点击查看</a>。</p>\n</blockquote>\n<p>它为搜索参数提供了简便的方法：</p>\n<ul>\n<li><strong><code>append(name, value)</code></strong> —— 按照 <code>name</code> 添加参数，</li>\n<li><strong><code>delete(name)</code></strong> —— 按照 <code>name</code> 移除参数，</li>\n<li><strong><code>get(name)</code></strong> —— 按照 <code>name</code> 获取参数，</li>\n<li><strong><code>getAll(name)</code></strong> —— 获取相同 <code>name</code> 的所有参数（这是可行的，例如 <code>?user=John&amp;user=Pete</code>），</li>\n<li><strong><code>has(name)</code></strong> —— 按照 <code>name</code> 检查参数是否存在，</li>\n<li><strong><code>set(name, value)</code></strong> —— set/replace 参数，</li>\n<li><strong><code>sort()</code></strong> —— 按 name 对参数进行排序，很少使用，</li>\n<li>……并且它是可迭代的，类似于 <code>Map</code>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com/search&#x27;</span>);<br><br><span class=\"hljs-comment\">// 1.1添加一个参数</span><br>url.searchParams.set(<span class=\"hljs-string\">&#x27;q&#x27;</span>,<span class=\"hljs-string\">&#x27;test me!&#x27;</span>);<br><br><span class=\"hljs-comment\">// 1.1参数会自动被编码 https://www.jiaqicoder.com/search?q=test+me%21</span><br><span class=\"hljs-built_in\">console</span>.log(url.href);<br><br><span class=\"hljs-comment\">// 1.2再添加一个参数</span><br>url.searchParams.set(<span class=\"hljs-string\">&#x27;tbs&#x27;</span>,<span class=\"hljs-string\">&#x27;qdr:y&#x27;</span>);<br><span class=\"hljs-comment\">// 再添加一个参数 https://www.jiaqicoder.com/search?q=test+me%21&amp;tbs=qdr%3Ay</span><br><span class=\"hljs-built_in\">console</span>.log(url.href);<br><br><span class=\"hljs-comment\">// 1.3 url上的参数</span><br><span class=\"hljs-comment\">// &#123; &#x27;q&#x27; =&gt; &#x27;test me!&#x27;, &#x27;tbs&#x27; =&gt; &#x27;qdr:y&#x27; &#125;</span><br><span class=\"hljs-built_in\">console</span>.log(url.searchParams);<br><br><span class=\"hljs-comment\">// 1.4 遍历参数</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [name,value] <span class=\"hljs-keyword\">of</span> url.searchParams)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;name&#125;</span>=<span class=\"hljs-subst\">$&#123;value&#125;</span>`</span>);<br>&#125;<br><span class=\"hljs-comment\">// q=test me!</span><br><span class=\"hljs-comment\">// tbs=qdr:y</span><br></code></pre></td></tr></table></figure>\n\n<p>此时url对象所有属性如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">URL &#123;<br>  <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com/search?q=test+me%21&amp;tbs=qdr%3Ay&#x27;</span>,<br>  <span class=\"hljs-attr\">origin</span>: <span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">protocol</span>: <span class=\"hljs-string\">&#x27;https:&#x27;</span>,<br>  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">hostname</span>: <span class=\"hljs-string\">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">pathname</span>: <span class=\"hljs-string\">&#x27;/search&#x27;</span>,<br>  <span class=\"hljs-attr\">search</span>: <span class=\"hljs-string\">&#x27;?q=test+me%21&amp;tbs=qdr%3Ay&#x27;</span>,<br>  <span class=\"hljs-attr\">searchParams</span>: URLSearchParams &#123; <span class=\"hljs-string\">&#x27;q&#x27;</span> =&gt; <span class=\"hljs-string\">&#x27;test me!&#x27;</span>, <span class=\"hljs-string\">&#x27;tbs&#x27;</span> =&gt; <span class=\"hljs-string\">&#x27;qdr:y&#x27;</span> &#125;,<br>  <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-string\">&#x27;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p><a href=\"https://tools.ietf.org/html/rfc3986\">RFC3986</a> 标准定义了 URL 中允许哪些字符，不允许哪些字符。</p>\n<p>那些不被允许的字符必须被编码，例如非拉丁字母和空格 —— 用其 UTF-8 代码代替，前缀为 <code>%</code>，例如 <code>%20</code>（由于历史原因，<strong>空格可以用 <code>+</code> 编码</strong>，但这是一个例外）。</p>\n<p>好消息是 <code>URL</code> 对象会自动处理这些。我们仅需提供未编码的参数，然后将 <code>URL</code> 转换为字符串：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在此示例中使用一些西里尔字符</span><br><br><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://ru.wikipedia.org/wiki/Тест&#x27;</span>);<br><br>url.searchParams.set(<span class=\"hljs-string\">&#x27;key&#x27;</span>, <span class=\"hljs-string\">&#x27;ъ&#x27;</span>);<br>alert(url); <span class=\"hljs-comment\">//https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%81%D1%82?key=%D1%8A</span><br></code></pre></td></tr></table></figure>\n\n<p>正如你所看到的，url 路径中的 <code>Тест</code> 和 <code>ъ</code> 参数都被编码了。URL 变长了，因为每个西里尔字母用 UTF-8 编码的两个字节表示，因此这里有两个 <code>%..</code> 实体（entities）。</p>\n<h2 id=\"编码字符串\"><a href=\"#编码字符串\" class=\"headerlink\" title=\"编码字符串\"></a>编码字符串</h2><p>在过去，在出现 <code>URL</code> 对象之前，人们使用字符串作为 URL。</p>\n<p>而现在，<code>URL</code> 对象通常更方便，但是仍然可以使用字符串。在很多情况下，使用字符串可以使代码更短。</p>\n<p>如果使用字符串，则需要手动编码/解码特殊字符。</p>\n<p>下面是用于编码/解码 URL 的内建函数：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI</a> —— 编码整个 URL。</li>\n<li><a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI</a> —— 解码为编码前的状态。</li>\n<li><a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent</a> —— 编码 URL 组件，例如搜索参数，或者 hash，或者 pathname。</li>\n<li><a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent</a> —— 解码为编码前的状态。</li>\n</ul>\n<p>一个自然的问题：“<code>encodeURIComponent</code> 和 <code>encodeURI</code> 之间有什么区别？我们什么时候应该使用哪个？”</p>\n<p>如果我们看一个 URL，就容易理解了，它被分解为本文上面图中所示的组件形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">https:<span class=\"hljs-comment\">//site.com:8080/path/page?p1=v1&amp;p2=v2#hash</span><br></code></pre></td></tr></table></figure>\n\n<p>正如我们所看到的，在 URL 中 <code>:</code>，<code>?</code>，<code>=</code>，<code>&amp;</code>，<code>#</code> 这类字符是被允许的。</p>\n<p>另一方面，对于 URL 的单个组件，例如一个搜索参数，则必须对这些字符进行编码，以免破坏 URL 的格式。</p>\n<ul>\n<li><code>encodeURI</code> 仅编码 URL 中完全禁止的字符。</li>\n<li><code>encodeURIComponent</code> 也编码这类字符，此外，还编码 <code>#</code>，<code>$</code>，<code>&amp;</code>，<code>+</code>，<code>,</code>，<code>/</code>，<code>:</code>，<code>;</code>，<code>=</code>，<code>?</code> 和 <code>@</code> 字符。</li>\n</ul>\n<p>所以，对于一个 URL 整体，我们可以使用 <code>encodeURI</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在 url 路径中使用西里尔字符</span><br><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-built_in\">encodeURI</span>(<span class=\"hljs-string\">&#x27;http://site.com/привет&#x27;</span>);<br><br>alert(url); <span class=\"hljs-comment\">// http://site.com/%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82</span><br></code></pre></td></tr></table></figure>\n\n<p>……而对于 URL 参数，我们应该改用 <code>encodeURIComponent</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> music = <span class=\"hljs-built_in\">encodeURIComponent</span>(<span class=\"hljs-string\">&#x27;Rock&amp;Roll&#x27;</span>);<br><br><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-string\">`https://google.com/search?q=<span class=\"hljs-subst\">$&#123;music&#125;</span>`</span>;<br>alert(url); <span class=\"hljs-comment\">// https://google.com/search?q=Rock%26Roll</span><br></code></pre></td></tr></table></figure>\n\n<p>将其与 <code>encodeURI</code> 进行比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> music = <span class=\"hljs-built_in\">encodeURI</span>(<span class=\"hljs-string\">&#x27;Rock&amp;Roll&#x27;</span>);<br><br><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-string\">`https://google.com/search?q=<span class=\"hljs-subst\">$&#123;music&#125;</span>`</span>;<br>alert(url); <span class=\"hljs-comment\">// https://google.com/search?q=Rock&amp;Roll</span><br></code></pre></td></tr></table></figure>\n\n<p>我们可以看到，<code>encodeURI</code> 没有对 <code>&amp;</code> 进行编码，因为它对于整个 URL 来说是合法的字符。</p>\n<p>但是，我们应该编码在搜索参数中的 <code>&amp;</code> 字符，否则，我们将得到 <code>q=Rock&amp;Roll</code> —— 实际上是 <code>q=Rock</code> 加上某个晦涩的参数 <code>Roll</code>。不符合预期。</p>\n<p>因此，对于每个搜索参数，我们应该使用 <code>encodeURIComponent</code>，以将其正确地插入到 URL 字符串中。最安全的方式是对 name 和 value 都进行编码，除非我们能够绝对确保它只包含允许的字符。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>笔记基于：<a href=\"https://zh.javascript.info/\">https://zh.javascript.info/</a></p>\n<h1 id=\"URL对象\"><a href=\"#URL对象\" class=\"headerlink\" title=\"URL对象\"></a>URL对象</h1><h2 id=\"创建URL对象\"><a href=\"#创建URL对象\" class=\"headerlink\" title=\"创建URL对象\"></a>创建URL对象</h2><p>创建一个新的 <code>url</code> 对象的语法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> URL(url,[base])<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>url</code></strong> —— 完整的 URL，或者仅路径（如果设置了 base），</li>\n<li><strong><code>base</code></strong> —— 可选的 base URL：如果设置了此参数，且参数 <code>url</code> 只有路径，则会根据这个 <code>base</code> 生成 URL。</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://jiaqicoder.com/tags?id=Vue&amp;num=1&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(url);<br></code></pre></td></tr></table></figure>\n\n<p>输出的结果如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">URL &#123;<br>  <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;https://jiaqicoder.com/tags?id=Vue&amp;num=1&#x27;</span>,<br>  <span class=\"hljs-attr\">origin</span>: <span class=\"hljs-string\">&#x27;https://jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">protocol</span>: <span class=\"hljs-string\">&#x27;https:&#x27;</span>,<br>  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">hostname</span>: <span class=\"hljs-string\">&#x27;jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">pathname</span>: <span class=\"hljs-string\">&#x27;/tags&#x27;</span>,<br>  <span class=\"hljs-attr\">search</span>: <span class=\"hljs-string\">&#x27;?id=Vue&amp;num=1&#x27;</span>,<br>  <span class=\"hljs-attr\">searchParams</span>: URLSearchParams &#123; <span class=\"hljs-string\">&#x27;id&#x27;</span> =&gt; <span class=\"hljs-string\">&#x27;Vue&#x27;</span>, <span class=\"hljs-string\">&#x27;num&#x27;</span> =&gt; <span class=\"hljs-string\">&#x27;1&#x27;</span> &#125;,<br>  <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-string\">&#x27;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>下面的2个URL结果是一样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> url1 = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;/tag&#x27;</span>,<span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> url2 = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com/tag&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(url1);<br><span class=\"hljs-built_in\">console</span>.log(url2);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">URL &#123;<br>  <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com/tag&#x27;</span>,<br>  <span class=\"hljs-attr\">origin</span>: <span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">protocol</span>: <span class=\"hljs-string\">&#x27;https:&#x27;</span>,<br>  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">hostname</span>: <span class=\"hljs-string\">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">pathname</span>: <span class=\"hljs-string\">&#x27;/tag&#x27;</span>,<br>  <span class=\"hljs-attr\">search</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">searchParams</span>: URLSearchParams &#123;&#125;,<br>  <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-string\">&#x27;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><code>URL</code> 对象立即允许我们访问其组件，因此这是一个解析 url 的好方法，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com/tag&#x27;</span>);<br><span class=\"hljs-built_in\">console</span>.log(url.protocol); <span class=\"hljs-comment\">//https</span><br><span class=\"hljs-built_in\">console</span>.log(url.host); <span class=\"hljs-comment\">//www.jiaqicoder.com</span><br><span class=\"hljs-built_in\">console</span>.log(url.pathname); <span class=\"hljs-comment\">//tag</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"URL-组成\"><a href=\"#URL-组成\" class=\"headerlink\" title=\"URL 组成\"></a>URL 组成</h3><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/20210802142354.png\" alt=\"image-20210802142354919\"></p>\n<ul>\n<li><code>href</code> 是完整的 URL，与 <code>url.toString()</code> 相同</li>\n<li><code>protocol</code> 以冒号字符 <code>:</code> 结尾</li>\n<li><code>search</code> —— 以问号 <code>?</code> 开头的一串参数</li>\n<li><code>hash</code> 以哈希字符 <code>#</code> 开头</li>\n<li>如果存在 HTTP 身份验证，则这里可能还会有 <code>user</code> 和 <code>password</code> 属性：<code>http://login:password@site.com</code>（图片上没有，很少被用到）。</li>\n</ul>\n<h2 id=\"SearchParams-‘-…’\"><a href=\"#SearchParams-‘-…’\" class=\"headerlink\" title=\"SearchParams ‘?…’\"></a>SearchParams ‘?…’</h2><p>假设，我们想要创建一个具有给定搜索参数的 url，例如：<code>https://google.com/search?query=JavaScript</code>。</p>\n<p>尽管，可以在url字符串中提供它们：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://google.com/search?query=JavaScript&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>但是，如果参数中包含空格，非拉丁字母等（具体参见下文），参数就需要被编码。</p>\n<p>因此，有一个 URL 属性用于解决这个问题：<code>url.searchParams</code>，<a href=\"https://url.spec.whatwg.org/#urlsearchparams\">URLSearchParams</a> 类型的对象。</p>\n<blockquote>\n<p>关于URLSearchParams的用法例子，<a href=\"https://jiaqicoder.com/2021/08/01/axios%E5%AD%A6%E4%B9%A0/#POST-%E8%AF%B7%E6%B1%82\">点击查看</a>。</p>\n</blockquote>\n<p>它为搜索参数提供了简便的方法：</p>\n<ul>\n<li><strong><code>append(name, value)</code></strong> —— 按照 <code>name</code> 添加参数，</li>\n<li><strong><code>delete(name)</code></strong> —— 按照 <code>name</code> 移除参数，</li>\n<li><strong><code>get(name)</code></strong> —— 按照 <code>name</code> 获取参数，</li>\n<li><strong><code>getAll(name)</code></strong> —— 获取相同 <code>name</code> 的所有参数（这是可行的，例如 <code>?user=John&amp;user=Pete</code>），</li>\n<li><strong><code>has(name)</code></strong> —— 按照 <code>name</code> 检查参数是否存在，</li>\n<li><strong><code>set(name, value)</code></strong> —— set/replace 参数，</li>\n<li><strong><code>sort()</code></strong> —— 按 name 对参数进行排序，很少使用，</li>\n<li>……并且它是可迭代的，类似于 <code>Map</code>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com/search&#x27;</span>);<br><br><span class=\"hljs-comment\">// 1.1添加一个参数</span><br>url.searchParams.set(<span class=\"hljs-string\">&#x27;q&#x27;</span>,<span class=\"hljs-string\">&#x27;test me!&#x27;</span>);<br><br><span class=\"hljs-comment\">// 1.1参数会自动被编码 https://www.jiaqicoder.com/search?q=test+me%21</span><br><span class=\"hljs-built_in\">console</span>.log(url.href);<br><br><span class=\"hljs-comment\">// 1.2再添加一个参数</span><br>url.searchParams.set(<span class=\"hljs-string\">&#x27;tbs&#x27;</span>,<span class=\"hljs-string\">&#x27;qdr:y&#x27;</span>);<br><span class=\"hljs-comment\">// 再添加一个参数 https://www.jiaqicoder.com/search?q=test+me%21&amp;tbs=qdr%3Ay</span><br><span class=\"hljs-built_in\">console</span>.log(url.href);<br><br><span class=\"hljs-comment\">// 1.3 url上的参数</span><br><span class=\"hljs-comment\">// &#123; &#x27;q&#x27; =&gt; &#x27;test me!&#x27;, &#x27;tbs&#x27; =&gt; &#x27;qdr:y&#x27; &#125;</span><br><span class=\"hljs-built_in\">console</span>.log(url.searchParams);<br><br><span class=\"hljs-comment\">// 1.4 遍历参数</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [name,value] <span class=\"hljs-keyword\">of</span> url.searchParams)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;name&#125;</span>=<span class=\"hljs-subst\">$&#123;value&#125;</span>`</span>);<br>&#125;<br><span class=\"hljs-comment\">// q=test me!</span><br><span class=\"hljs-comment\">// tbs=qdr:y</span><br></code></pre></td></tr></table></figure>\n\n<p>此时url对象所有属性如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">URL &#123;<br>  <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com/search?q=test+me%21&amp;tbs=qdr%3Ay&#x27;</span>,<br>  <span class=\"hljs-attr\">origin</span>: <span class=\"hljs-string\">&#x27;https://www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">protocol</span>: <span class=\"hljs-string\">&#x27;https:&#x27;</span>,<br>  <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">hostname</span>: <span class=\"hljs-string\">&#x27;www.jiaqicoder.com&#x27;</span>,<br>  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>  <span class=\"hljs-attr\">pathname</span>: <span class=\"hljs-string\">&#x27;/search&#x27;</span>,<br>  <span class=\"hljs-attr\">search</span>: <span class=\"hljs-string\">&#x27;?q=test+me%21&amp;tbs=qdr%3Ay&#x27;</span>,<br>  <span class=\"hljs-attr\">searchParams</span>: URLSearchParams &#123; <span class=\"hljs-string\">&#x27;q&#x27;</span> =&gt; <span class=\"hljs-string\">&#x27;test me!&#x27;</span>, <span class=\"hljs-string\">&#x27;tbs&#x27;</span> =&gt; <span class=\"hljs-string\">&#x27;qdr:y&#x27;</span> &#125;,<br>  <span class=\"hljs-attr\">hash</span>: <span class=\"hljs-string\">&#x27;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p><a href=\"https://tools.ietf.org/html/rfc3986\">RFC3986</a> 标准定义了 URL 中允许哪些字符，不允许哪些字符。</p>\n<p>那些不被允许的字符必须被编码，例如非拉丁字母和空格 —— 用其 UTF-8 代码代替，前缀为 <code>%</code>，例如 <code>%20</code>（由于历史原因，<strong>空格可以用 <code>+</code> 编码</strong>，但这是一个例外）。</p>\n<p>好消息是 <code>URL</code> 对象会自动处理这些。我们仅需提供未编码的参数，然后将 <code>URL</code> 转换为字符串：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在此示例中使用一些西里尔字符</span><br><br><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">&#x27;https://ru.wikipedia.org/wiki/Тест&#x27;</span>);<br><br>url.searchParams.set(<span class=\"hljs-string\">&#x27;key&#x27;</span>, <span class=\"hljs-string\">&#x27;ъ&#x27;</span>);<br>alert(url); <span class=\"hljs-comment\">//https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%81%D1%82?key=%D1%8A</span><br></code></pre></td></tr></table></figure>\n\n<p>正如你所看到的，url 路径中的 <code>Тест</code> 和 <code>ъ</code> 参数都被编码了。URL 变长了，因为每个西里尔字母用 UTF-8 编码的两个字节表示，因此这里有两个 <code>%..</code> 实体（entities）。</p>\n<h2 id=\"编码字符串\"><a href=\"#编码字符串\" class=\"headerlink\" title=\"编码字符串\"></a>编码字符串</h2><p>在过去，在出现 <code>URL</code> 对象之前，人们使用字符串作为 URL。</p>\n<p>而现在，<code>URL</code> 对象通常更方便，但是仍然可以使用字符串。在很多情况下，使用字符串可以使代码更短。</p>\n<p>如果使用字符串，则需要手动编码/解码特殊字符。</p>\n<p>下面是用于编码/解码 URL 的内建函数：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI</a> —— 编码整个 URL。</li>\n<li><a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI</a> —— 解码为编码前的状态。</li>\n<li><a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent</a> —— 编码 URL 组件，例如搜索参数，或者 hash，或者 pathname。</li>\n<li><a href=\"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent</a> —— 解码为编码前的状态。</li>\n</ul>\n<p>一个自然的问题：“<code>encodeURIComponent</code> 和 <code>encodeURI</code> 之间有什么区别？我们什么时候应该使用哪个？”</p>\n<p>如果我们看一个 URL，就容易理解了，它被分解为本文上面图中所示的组件形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">https:<span class=\"hljs-comment\">//site.com:8080/path/page?p1=v1&amp;p2=v2#hash</span><br></code></pre></td></tr></table></figure>\n\n<p>正如我们所看到的，在 URL 中 <code>:</code>，<code>?</code>，<code>=</code>，<code>&amp;</code>，<code>#</code> 这类字符是被允许的。</p>\n<p>另一方面，对于 URL 的单个组件，例如一个搜索参数，则必须对这些字符进行编码，以免破坏 URL 的格式。</p>\n<ul>\n<li><code>encodeURI</code> 仅编码 URL 中完全禁止的字符。</li>\n<li><code>encodeURIComponent</code> 也编码这类字符，此外，还编码 <code>#</code>，<code>$</code>，<code>&amp;</code>，<code>+</code>，<code>,</code>，<code>/</code>，<code>:</code>，<code>;</code>，<code>=</code>，<code>?</code> 和 <code>@</code> 字符。</li>\n</ul>\n<p>所以，对于一个 URL 整体，我们可以使用 <code>encodeURI</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在 url 路径中使用西里尔字符</span><br><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-built_in\">encodeURI</span>(<span class=\"hljs-string\">&#x27;http://site.com/привет&#x27;</span>);<br><br>alert(url); <span class=\"hljs-comment\">// http://site.com/%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82</span><br></code></pre></td></tr></table></figure>\n\n<p>……而对于 URL 参数，我们应该改用 <code>encodeURIComponent</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> music = <span class=\"hljs-built_in\">encodeURIComponent</span>(<span class=\"hljs-string\">&#x27;Rock&amp;Roll&#x27;</span>);<br><br><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-string\">`https://google.com/search?q=<span class=\"hljs-subst\">$&#123;music&#125;</span>`</span>;<br>alert(url); <span class=\"hljs-comment\">// https://google.com/search?q=Rock%26Roll</span><br></code></pre></td></tr></table></figure>\n\n<p>将其与 <code>encodeURI</code> 进行比较：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> music = <span class=\"hljs-built_in\">encodeURI</span>(<span class=\"hljs-string\">&#x27;Rock&amp;Roll&#x27;</span>);<br><br><span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-string\">`https://google.com/search?q=<span class=\"hljs-subst\">$&#123;music&#125;</span>`</span>;<br>alert(url); <span class=\"hljs-comment\">// https://google.com/search?q=Rock&amp;Roll</span><br></code></pre></td></tr></table></figure>\n\n<p>我们可以看到，<code>encodeURI</code> 没有对 <code>&amp;</code> 进行编码，因为它对于整个 URL 来说是合法的字符。</p>\n<p>但是，我们应该编码在搜索参数中的 <code>&amp;</code> 字符，否则，我们将得到 <code>q=Rock&amp;Roll</code> —— 实际上是 <code>q=Rock</code> 加上某个晦涩的参数 <code>Roll</code>。不符合预期。</p>\n<p>因此，对于每个搜索参数，我们应该使用 <code>encodeURIComponent</code>，以将其正确地插入到 URL 字符串中。最安全的方式是对 name 和 value 都进行编码，除非我们能够绝对确保它只包含允许的字符。</p>\n"},{"title":"JS模块化_Promise_EventLoop_宏任务和微任务","date":"2021-08-04T06:20:54.000Z","_content":"\n# ES6模块化\n\n## 1. node中如何实现模块化\n\nnode.js 遵循了 CommonJS 的模块化规范。其中：\n\n- 导入其它模块使用 require() 方法\n\n- 模块对外共享成员使用 module.exports 对象\n\n模块化的好处：\n大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己 。\n\n## 2. 模块化规范分类\n\n在 ES6 模块化规范诞生之前，JavaScript 社区已经尝试并提出了 AMD、CMD、CommonJS 等模块化规范。\n但是，这些由社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块标准，例如：\n\n-  AMD 和 CMD 适用于浏览器端的 Javascript 模块化\n-  CommonJS 适用于服务器端的 Javascript 模块化\n太多的模块化规范给开发者增加了学习的难度与开发的成本。因此，大一统的 ES6 模块化规范诞生了！\n\n## 3. ES6 模块化规范  \n\nES6 模块化规范是浏览器端与服务器端通用的模块化开发规范。它的出现极大的降低了前端开发者的模块化学习成本，开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范。\nES6 模块化规范中定义：\n\n- 每个 js 文件都是一个独立的模块\n-  导入其它模块成员使用 import 关键字\n- 向外共享模块成员使用 export 关键字   \n\n## 4. node.js中体验ES6 模块化\n\nnode.js 中默认仅支持 CommonJS 模块化规范，若想基于 node.js 体验与学习 ES6 的模块化语法，可以按照如下两个步骤进行配置：\n① 确保安装了 v14.15.1 或更高版本的 node.js\n②在终端中输入`npm init -y`生成package.json，然后在  package.json 的根节点中添加 \"type\": \"module\" 节点 。\n\n```json\n{\n  \"type\":\"module\",\n  \"name\": \"8.es6\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n```\n\n## 5. ES6 模块化的基本语法\n\nES6 的模块化主要包含如下 3 种用法：\n① 默认导出与默认导入\n② 按需导出与按需导入\n③ 直接导入并执行模块中的代码  \n\n### 5.1 默认导出\n\n默认导出语法： `export default 需要导出的成员`\n\n```js\nlet n1=10;\nlet n2=20;\n\nfunction show(){\n\n}\n\n// 使用export default 默认导出语法 向外共享n1和show 2个成员\nexport default {\n    n1,\n    show\n}\n```\n\n### 5.1默认导入\n\n默认导入的语法： `import 接收名称 from '模块标识符'  `\n\n```js\nimport  m1 from './01.默认导出.js'\n// m1是自定义的名字\nconsole.log(m1);\n```\n\n### 5.1 默认导出的注意事项  \n\n每个模块中，只允许使用唯一的一次 export default，否则会报错！  \n\n默认导入时的接收名称可以任意名称，只要是合法的成员名称即可 。\n\n### 5.2按需导出\n\n按需导出语法： `export 需要导出的成员` \n\n```js\nexport let s1 = 'aaa';\nexport let s2 = 'ccc';\nexport function say() {\n\n}\n```\n\n### 5.2 按需导入\n\n按需导入的语法：`import {s1} from '模块标识符'`\n\n```js\nimport { s1, s2, say } from './03.按需导出.js'\n\nconsole.log(s1);\nconsole.log(s2);\nconsole.log(say);\n```\n\n### 5.2按需导入和按需导出的注意事项\n\n① 每个模块中可以使用多次**按需导出**\n② **按需导入**的成员名称必须和**按需导出**的名称**保持一致**\n③ 按需导入时，可以使用**as 关键字**进行重命名\n④ 按需导入可以和默认导入一起使用  \n\n```js\nimport info,{ s1, s2 as str2, say } from './03.按需导出.js'\n// info 为默认导入\n\nconsole.log(s1);\nconsole.log(str2);\nconsole.log(say);\nconsole.log(info);\n```\n\n### 5.3 直接导入并执行模块中的代码\n\n如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。此时，可以**直接导入模块**即会执行模块代码，示例代码如下：  \n\n```js\n//05.直接运行模块中的代码\nfor(let i=0; i<3; i++){\n    console.log(i);\n}\n```\n\n```js\nimport './05.直接运行模块中的代码.js'\n// 导入后便会直接执行\n```\n\n# Promise补充\n\n## 1. 基于 then-fs 读取文件内容  \n\n由于 node.js 官方提供的 fs 模块仅支持以回调函数的方式读取文件，不支持 Promise 的调用方式。因此，需要先运行如下的命令，安装 `then-fs` 这个第三方包，从而支持我们基于 Promise 的方式读取文件的内容。\n\n```bash\nnpm install then-fs\n```\n\n调用 then-fs 提供的 readFile() 方法，可以异步地读取文件的内容，它的返回值是 **Promise 的实例对象**。因此可以调用 .then() 方法为每个 Promise 异步操作指定成功和失败之后的回调函数。\n\n```js\n// 默认导入\nimport thenFs from 'then-fs'\n\nthenFs.readFile('./files/1.txt','utf-8').then(data=>{\n    console.log(data);\n})\nthenFs.readFile('./files/2.txt','utf-8').then(data=>{\n    console.log(data);\n})\nthenFs.readFile('./files/3.txt','utf-8').then(data=>{\n    console.log(data);\n})\n```\n\n注意：上述的代码无法保证文件的读取顺序，需要做进一步的改进！  \n\n如果上一个 .then() 方法中返回了一个新的 Promise 实例对象，则可以通过下一个 .then() 继续进行处理。通过 .then() 方法的链式调用，就解决了回调地狱的问题。  \n\nPromise 支持链式调用，从而来解决回调地狱的问题。示例代码如下  :\n\n```js\nimport thenFs from 'then-fs'\n\n\nthenFs.readFile('files/1.txt', 'utf8').then(r1 => {\n    console.log(r1);\n    // 返回一个新的promise对象\n    return thenFs.readFile('./files/2.txt', 'utf8');\n}).then(r2 => {\n    // 获取第2次的读取结果\n    console.log(r2);\n    // 再次返回一个promise对象\n    return thenFs.readFile('./files/3.txt', 'utf8');\n}).then(r3 => {\n    console.log(r3);\n})\n```\n\n## 2.基于promise封装读取文件的方法\n\n方法的封装要求：\n① 方法的名称要定义为 getFile\n② 方法接收一个形参 fpath，表示要读取的文件的路径\n③ 方法的返回值为 Promise 实例对象  \n\n```js\nimport fs from 'fs'\n\nfunction getFile(fpath){\n    return new Promise(function(resolve,reject){\n        fs.readFile(fpath,'utf-8',(err,data)=>{\n            if(err) return reject(err);\n            resolve(data);\n        })\n    })\n}\n\ngetFile('./files/1.txt').then((r1)=>{\n    console.log(r1);\n},(err)=>{\n    console.log(err.message);\n})\n```\n\n# EventLoop\n\n## 1. JavaScript 是单线程的语言\n\nJavaScript 是一门单线程执行的编程语言。也就是说，同一时间只能做一件事情。\n\n![image-20210804175533250](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041755351.png)\n\n单线程执行任务队列的问题：\n如果前一个任务非常耗时，则后续的任务就不得不一直等待，从而导致程序假死的问题。\n\n## 2. 同步任务和异步任务\n\n为了防止某个耗时任务导致程序假死的问题，JavaScript 把待执行的任务分为了两类：\n① 同步任务（synchronous）\n-  又叫做非耗时任务，指的是在主线程上排队执行的那些任务\n-  只有前一个任务执行完毕，才能执行后一个任务\n\n ② 异步任务（asynchronous）\n- 又叫做耗时任务，*异步任务由 JavaScript 委托给**宿主环境**进行执行*\n- 当异步任务执行完成后，会通知 JavaScript 主线程执行异步任务的回调函数 。\n\n## 3.同步任务和异步任务的执行过程\n\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041813594.png\" alt=\"image-20210804181315494\" style=\"zoom:67%;\" />\n\n① 同步任务由 JavaScript 主线程次序执行。\n② 异步任务**委托给**宿主环境执行。\n③ 已完成的异步任务**对应的回调函数**，会被加入到任务队列中等待执行。\n④ JavaScript 主线程的***执行栈***被清空后，会读取任务队列中的回调函数，次序执行。\n⑤ JavaScript 主线程不断重复上面的第 4 步 。\n\n## 4.EventLoop的基本概念\n\nJavaScript 主线程从“任务队列”中读取异步任务的回调函数，放到执行栈中依次执行。这个过程是循环不断的，所以整个的这种运行机制又称为 EventLoop（事件循环）。  \n\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041815433.png\" alt=\"image-20210804181557376\" style=\"zoom:67%;\" />\n\n输出顺序：ADCB\n\n- A 和 D 属于同步任务。会根据代码的先后顺序依次被执行。\n- C 和 B 属于异步任务。它们的回调函数会被加入到任务队列中，等待主线程空闲时再执行 。\n\n# 宏任务和微任务\n\n## 1. 什么是宏任务和微任务\n\nJavaScript 把异步任务又做了进一步的划分，异步任务又分为两类，分别是：\n\n![image-20210804182047617](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041820682.png)\n\n① 宏任务（macrotask）\n- 异步 Ajax 请求、\n- setTimeout、setInterval、\n- 文件操作\n- 其它宏任务\n\n② 微任务（microtask）\n\n- Promise.then、.catch 和 .finally\n- process.nextTick\n- 其它微任务  \n\n## 2.宏任务和微任务的执行顺序\n\n![image-20210804182243122](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041822151.png)\n\n每一个宏任务执行完之后，都会检查**是否存在待执行的微任务**。\n\n如果有，则执行完所有微任务之后，再继续执行下一个宏任务。  \n\n**宏任务和微任务同时存在的情况下，会先执行微任务。**\n\n## 3.生活举例\n\n① 小云和小腾去银行办业务。首先，需要取号之后进行排队\n- 宏任务队列\n\n② 假设当前银行网点只有一个柜员，小云在办理存款业务时，小腾只能等待\n\n- 单线程，宏任务按次序执行\n\n③ 小云办完存款业务后，柜员询问他是否还想办理其它业务？\n\n- 当前宏任务执行完，检查是否有微任务\n\n④ 小云告诉柜员：想要买理财产品、再办个信用卡、最后再兑换点马年纪念币？\n\n- 执行微任务，后续宏任务被推迟\n  \n\n⑤ 小云离开柜台后，柜员开始为小腾办理业务\n\n- 所有微任务执行完毕，开始执行下一个宏任务  \n\n## 4.代码举例\n\n例子1：\n\n```js\n// 宏任务\nsetTimeout(() => {\n    console.log(1);\n}, 0);\n\n// Promise本身是同步的，但它的then方法和catch方法是异步的\nnew Promise(function(resolve){\n    console.log(2);\n    resolve();\n}).then(function(){\n    console.log(3);\n});\n\nconsole.log(4);\n```\n\n值得注意：`Promise()`本身是同步的，尽管它的then方法和catch方法是异步的。\n\n输出顺序：2431\n\n分析：\n\n1.先执行所有的同步任务\n\n- new Promise()和console.log(4)\n\n2.再执行微任务\n\n- .then()\n\n3.接着执行宏任务\n\n- setTimeout()\n\n例子2：\n\n```js\n// 1.同步 \nconsole.log(1);\n\n// 宏任务\nsetTimeout(() => {\n    \n    console.log(2);\n    new Promise(function(resolve){\n        console.log(3);\n        resolve();\n    }).then(function(){\n        console.log(4);\n    })\n}, 0);\n\n\nnew Promise(function(resolve){\n    // 2.Promise()是同步的\n    console.log(5);\n    resolve();\n}).then(function(){\n    // 3.then()方法是异步微任务\n    console.log(6);\n})\n\n// 宏任务\nsetTimeout(() => {\n    console.log(7);\n    new Promise(function(resolve){\n        console.log(8);\n        resolve();\n    }).then(function(){\n        console.log(9);\n    })\n}, 0);\n```\n\n\n\n","source":"_posts/JS模块化及EventLoop语法学习.md","raw":"---\ntitle: JS模块化_Promise_EventLoop_宏任务和微任务\ndate: 2021-08-04 14:20:54\ntags: [es6, 模块化, EventLoop, 宏任务, 微任务]\n---\n\n# ES6模块化\n\n## 1. node中如何实现模块化\n\nnode.js 遵循了 CommonJS 的模块化规范。其中：\n\n- 导入其它模块使用 require() 方法\n\n- 模块对外共享成员使用 module.exports 对象\n\n模块化的好处：\n大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己 。\n\n## 2. 模块化规范分类\n\n在 ES6 模块化规范诞生之前，JavaScript 社区已经尝试并提出了 AMD、CMD、CommonJS 等模块化规范。\n但是，这些由社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块标准，例如：\n\n-  AMD 和 CMD 适用于浏览器端的 Javascript 模块化\n-  CommonJS 适用于服务器端的 Javascript 模块化\n太多的模块化规范给开发者增加了学习的难度与开发的成本。因此，大一统的 ES6 模块化规范诞生了！\n\n## 3. ES6 模块化规范  \n\nES6 模块化规范是浏览器端与服务器端通用的模块化开发规范。它的出现极大的降低了前端开发者的模块化学习成本，开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范。\nES6 模块化规范中定义：\n\n- 每个 js 文件都是一个独立的模块\n-  导入其它模块成员使用 import 关键字\n- 向外共享模块成员使用 export 关键字   \n\n## 4. node.js中体验ES6 模块化\n\nnode.js 中默认仅支持 CommonJS 模块化规范，若想基于 node.js 体验与学习 ES6 的模块化语法，可以按照如下两个步骤进行配置：\n① 确保安装了 v14.15.1 或更高版本的 node.js\n②在终端中输入`npm init -y`生成package.json，然后在  package.json 的根节点中添加 \"type\": \"module\" 节点 。\n\n```json\n{\n  \"type\":\"module\",\n  \"name\": \"8.es6\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n```\n\n## 5. ES6 模块化的基本语法\n\nES6 的模块化主要包含如下 3 种用法：\n① 默认导出与默认导入\n② 按需导出与按需导入\n③ 直接导入并执行模块中的代码  \n\n### 5.1 默认导出\n\n默认导出语法： `export default 需要导出的成员`\n\n```js\nlet n1=10;\nlet n2=20;\n\nfunction show(){\n\n}\n\n// 使用export default 默认导出语法 向外共享n1和show 2个成员\nexport default {\n    n1,\n    show\n}\n```\n\n### 5.1默认导入\n\n默认导入的语法： `import 接收名称 from '模块标识符'  `\n\n```js\nimport  m1 from './01.默认导出.js'\n// m1是自定义的名字\nconsole.log(m1);\n```\n\n### 5.1 默认导出的注意事项  \n\n每个模块中，只允许使用唯一的一次 export default，否则会报错！  \n\n默认导入时的接收名称可以任意名称，只要是合法的成员名称即可 。\n\n### 5.2按需导出\n\n按需导出语法： `export 需要导出的成员` \n\n```js\nexport let s1 = 'aaa';\nexport let s2 = 'ccc';\nexport function say() {\n\n}\n```\n\n### 5.2 按需导入\n\n按需导入的语法：`import {s1} from '模块标识符'`\n\n```js\nimport { s1, s2, say } from './03.按需导出.js'\n\nconsole.log(s1);\nconsole.log(s2);\nconsole.log(say);\n```\n\n### 5.2按需导入和按需导出的注意事项\n\n① 每个模块中可以使用多次**按需导出**\n② **按需导入**的成员名称必须和**按需导出**的名称**保持一致**\n③ 按需导入时，可以使用**as 关键字**进行重命名\n④ 按需导入可以和默认导入一起使用  \n\n```js\nimport info,{ s1, s2 as str2, say } from './03.按需导出.js'\n// info 为默认导入\n\nconsole.log(s1);\nconsole.log(str2);\nconsole.log(say);\nconsole.log(info);\n```\n\n### 5.3 直接导入并执行模块中的代码\n\n如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。此时，可以**直接导入模块**即会执行模块代码，示例代码如下：  \n\n```js\n//05.直接运行模块中的代码\nfor(let i=0; i<3; i++){\n    console.log(i);\n}\n```\n\n```js\nimport './05.直接运行模块中的代码.js'\n// 导入后便会直接执行\n```\n\n# Promise补充\n\n## 1. 基于 then-fs 读取文件内容  \n\n由于 node.js 官方提供的 fs 模块仅支持以回调函数的方式读取文件，不支持 Promise 的调用方式。因此，需要先运行如下的命令，安装 `then-fs` 这个第三方包，从而支持我们基于 Promise 的方式读取文件的内容。\n\n```bash\nnpm install then-fs\n```\n\n调用 then-fs 提供的 readFile() 方法，可以异步地读取文件的内容，它的返回值是 **Promise 的实例对象**。因此可以调用 .then() 方法为每个 Promise 异步操作指定成功和失败之后的回调函数。\n\n```js\n// 默认导入\nimport thenFs from 'then-fs'\n\nthenFs.readFile('./files/1.txt','utf-8').then(data=>{\n    console.log(data);\n})\nthenFs.readFile('./files/2.txt','utf-8').then(data=>{\n    console.log(data);\n})\nthenFs.readFile('./files/3.txt','utf-8').then(data=>{\n    console.log(data);\n})\n```\n\n注意：上述的代码无法保证文件的读取顺序，需要做进一步的改进！  \n\n如果上一个 .then() 方法中返回了一个新的 Promise 实例对象，则可以通过下一个 .then() 继续进行处理。通过 .then() 方法的链式调用，就解决了回调地狱的问题。  \n\nPromise 支持链式调用，从而来解决回调地狱的问题。示例代码如下  :\n\n```js\nimport thenFs from 'then-fs'\n\n\nthenFs.readFile('files/1.txt', 'utf8').then(r1 => {\n    console.log(r1);\n    // 返回一个新的promise对象\n    return thenFs.readFile('./files/2.txt', 'utf8');\n}).then(r2 => {\n    // 获取第2次的读取结果\n    console.log(r2);\n    // 再次返回一个promise对象\n    return thenFs.readFile('./files/3.txt', 'utf8');\n}).then(r3 => {\n    console.log(r3);\n})\n```\n\n## 2.基于promise封装读取文件的方法\n\n方法的封装要求：\n① 方法的名称要定义为 getFile\n② 方法接收一个形参 fpath，表示要读取的文件的路径\n③ 方法的返回值为 Promise 实例对象  \n\n```js\nimport fs from 'fs'\n\nfunction getFile(fpath){\n    return new Promise(function(resolve,reject){\n        fs.readFile(fpath,'utf-8',(err,data)=>{\n            if(err) return reject(err);\n            resolve(data);\n        })\n    })\n}\n\ngetFile('./files/1.txt').then((r1)=>{\n    console.log(r1);\n},(err)=>{\n    console.log(err.message);\n})\n```\n\n# EventLoop\n\n## 1. JavaScript 是单线程的语言\n\nJavaScript 是一门单线程执行的编程语言。也就是说，同一时间只能做一件事情。\n\n![image-20210804175533250](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041755351.png)\n\n单线程执行任务队列的问题：\n如果前一个任务非常耗时，则后续的任务就不得不一直等待，从而导致程序假死的问题。\n\n## 2. 同步任务和异步任务\n\n为了防止某个耗时任务导致程序假死的问题，JavaScript 把待执行的任务分为了两类：\n① 同步任务（synchronous）\n-  又叫做非耗时任务，指的是在主线程上排队执行的那些任务\n-  只有前一个任务执行完毕，才能执行后一个任务\n\n ② 异步任务（asynchronous）\n- 又叫做耗时任务，*异步任务由 JavaScript 委托给**宿主环境**进行执行*\n- 当异步任务执行完成后，会通知 JavaScript 主线程执行异步任务的回调函数 。\n\n## 3.同步任务和异步任务的执行过程\n\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041813594.png\" alt=\"image-20210804181315494\" style=\"zoom:67%;\" />\n\n① 同步任务由 JavaScript 主线程次序执行。\n② 异步任务**委托给**宿主环境执行。\n③ 已完成的异步任务**对应的回调函数**，会被加入到任务队列中等待执行。\n④ JavaScript 主线程的***执行栈***被清空后，会读取任务队列中的回调函数，次序执行。\n⑤ JavaScript 主线程不断重复上面的第 4 步 。\n\n## 4.EventLoop的基本概念\n\nJavaScript 主线程从“任务队列”中读取异步任务的回调函数，放到执行栈中依次执行。这个过程是循环不断的，所以整个的这种运行机制又称为 EventLoop（事件循环）。  \n\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041815433.png\" alt=\"image-20210804181557376\" style=\"zoom:67%;\" />\n\n输出顺序：ADCB\n\n- A 和 D 属于同步任务。会根据代码的先后顺序依次被执行。\n- C 和 B 属于异步任务。它们的回调函数会被加入到任务队列中，等待主线程空闲时再执行 。\n\n# 宏任务和微任务\n\n## 1. 什么是宏任务和微任务\n\nJavaScript 把异步任务又做了进一步的划分，异步任务又分为两类，分别是：\n\n![image-20210804182047617](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041820682.png)\n\n① 宏任务（macrotask）\n- 异步 Ajax 请求、\n- setTimeout、setInterval、\n- 文件操作\n- 其它宏任务\n\n② 微任务（microtask）\n\n- Promise.then、.catch 和 .finally\n- process.nextTick\n- 其它微任务  \n\n## 2.宏任务和微任务的执行顺序\n\n![image-20210804182243122](https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041822151.png)\n\n每一个宏任务执行完之后，都会检查**是否存在待执行的微任务**。\n\n如果有，则执行完所有微任务之后，再继续执行下一个宏任务。  \n\n**宏任务和微任务同时存在的情况下，会先执行微任务。**\n\n## 3.生活举例\n\n① 小云和小腾去银行办业务。首先，需要取号之后进行排队\n- 宏任务队列\n\n② 假设当前银行网点只有一个柜员，小云在办理存款业务时，小腾只能等待\n\n- 单线程，宏任务按次序执行\n\n③ 小云办完存款业务后，柜员询问他是否还想办理其它业务？\n\n- 当前宏任务执行完，检查是否有微任务\n\n④ 小云告诉柜员：想要买理财产品、再办个信用卡、最后再兑换点马年纪念币？\n\n- 执行微任务，后续宏任务被推迟\n  \n\n⑤ 小云离开柜台后，柜员开始为小腾办理业务\n\n- 所有微任务执行完毕，开始执行下一个宏任务  \n\n## 4.代码举例\n\n例子1：\n\n```js\n// 宏任务\nsetTimeout(() => {\n    console.log(1);\n}, 0);\n\n// Promise本身是同步的，但它的then方法和catch方法是异步的\nnew Promise(function(resolve){\n    console.log(2);\n    resolve();\n}).then(function(){\n    console.log(3);\n});\n\nconsole.log(4);\n```\n\n值得注意：`Promise()`本身是同步的，尽管它的then方法和catch方法是异步的。\n\n输出顺序：2431\n\n分析：\n\n1.先执行所有的同步任务\n\n- new Promise()和console.log(4)\n\n2.再执行微任务\n\n- .then()\n\n3.接着执行宏任务\n\n- setTimeout()\n\n例子2：\n\n```js\n// 1.同步 \nconsole.log(1);\n\n// 宏任务\nsetTimeout(() => {\n    \n    console.log(2);\n    new Promise(function(resolve){\n        console.log(3);\n        resolve();\n    }).then(function(){\n        console.log(4);\n    })\n}, 0);\n\n\nnew Promise(function(resolve){\n    // 2.Promise()是同步的\n    console.log(5);\n    resolve();\n}).then(function(){\n    // 3.then()方法是异步微任务\n    console.log(6);\n})\n\n// 宏任务\nsetTimeout(() => {\n    console.log(7);\n    new Promise(function(resolve){\n        console.log(8);\n        resolve();\n    }).then(function(){\n        console.log(9);\n    })\n}, 0);\n```\n\n\n\n","slug":"JS模块化及EventLoop语法学习","published":1,"updated":"2021-08-04T11:34:40.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrxey99k0000x8une07b67me","content":"<h1 id=\"ES6模块化\"><a href=\"#ES6模块化\" class=\"headerlink\" title=\"ES6模块化\"></a>ES6模块化</h1><h2 id=\"1-node中如何实现模块化\"><a href=\"#1-node中如何实现模块化\" class=\"headerlink\" title=\"1. node中如何实现模块化\"></a>1. node中如何实现模块化</h2><p>node.js 遵循了 CommonJS 的模块化规范。其中：</p>\n<ul>\n<li><p>导入其它模块使用 require() 方法</p>\n</li>\n<li><p>模块对外共享成员使用 module.exports 对象</p>\n</li>\n</ul>\n<p>模块化的好处：<br>大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己 。</p>\n<h2 id=\"2-模块化规范分类\"><a href=\"#2-模块化规范分类\" class=\"headerlink\" title=\"2. 模块化规范分类\"></a>2. 模块化规范分类</h2><p>在 ES6 模块化规范诞生之前，JavaScript 社区已经尝试并提出了 AMD、CMD、CommonJS 等模块化规范。<br>但是，这些由社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块标准，例如：</p>\n<ul>\n<li> AMD 和 CMD 适用于浏览器端的 Javascript 模块化</li>\n<li> CommonJS 适用于服务器端的 Javascript 模块化<br>太多的模块化规范给开发者增加了学习的难度与开发的成本。因此，大一统的 ES6 模块化规范诞生了！</li>\n</ul>\n<h2 id=\"3-ES6-模块化规范\"><a href=\"#3-ES6-模块化规范\" class=\"headerlink\" title=\"3. ES6 模块化规范\"></a>3. ES6 模块化规范</h2><p>ES6 模块化规范是浏览器端与服务器端通用的模块化开发规范。它的出现极大的降低了前端开发者的模块化学习成本，开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范。<br>ES6 模块化规范中定义：</p>\n<ul>\n<li>每个 js 文件都是一个独立的模块</li>\n<li> 导入其它模块成员使用 import 关键字</li>\n<li>向外共享模块成员使用 export 关键字   </li>\n</ul>\n<h2 id=\"4-node-js中体验ES6-模块化\"><a href=\"#4-node-js中体验ES6-模块化\" class=\"headerlink\" title=\"4. node.js中体验ES6 模块化\"></a>4. node.js中体验ES6 模块化</h2><p>node.js 中默认仅支持 CommonJS 模块化规范，若想基于 node.js 体验与学习 ES6 的模块化语法，可以按照如下两个步骤进行配置：<br>① 确保安装了 v14.15.1 或更高版本的 node.js<br>②在终端中输入<code>npm init -y</code>生成package.json，然后在  package.json 的根节点中添加 “type”: “module” 节点 。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;type&quot;</span>:<span class=\"hljs-string\">&quot;module&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;8.es6&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;1.0.0&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;main&quot;</span>: <span class=\"hljs-string\">&quot;index.js&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;test&quot;</span>: <span class=\"hljs-string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class=\"hljs-attr\">&quot;keywords&quot;</span>: [],<br>  <span class=\"hljs-attr\">&quot;author&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;license&quot;</span>: <span class=\"hljs-string\">&quot;ISC&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-ES6-模块化的基本语法\"><a href=\"#5-ES6-模块化的基本语法\" class=\"headerlink\" title=\"5. ES6 模块化的基本语法\"></a>5. ES6 模块化的基本语法</h2><p>ES6 的模块化主要包含如下 3 种用法：<br>① 默认导出与默认导入<br>② 按需导出与按需导入<br>③ 直接导入并执行模块中的代码  </p>\n<h3 id=\"5-1-默认导出\"><a href=\"#5-1-默认导出\" class=\"headerlink\" title=\"5.1 默认导出\"></a>5.1 默认导出</h3><p>默认导出语法： <code>export default 需要导出的成员</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> n1=<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-keyword\">let</span> n2=<span class=\"hljs-number\">20</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br><br>&#125;<br><br><span class=\"hljs-comment\">// 使用export default 默认导出语法 向外共享n1和show 2个成员</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>    n1,<br>    show<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-1默认导入\"><a href=\"#5-1默认导入\" class=\"headerlink\" title=\"5.1默认导入\"></a>5.1默认导入</h3><p>默认导入的语法： <code>import 接收名称 from &#39;模块标识符&#39;  </code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span>  m1 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./01.默认导出.js&#x27;</span><br><span class=\"hljs-comment\">// m1是自定义的名字</span><br><span class=\"hljs-built_in\">console</span>.log(m1);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-默认导出的注意事项\"><a href=\"#5-1-默认导出的注意事项\" class=\"headerlink\" title=\"5.1 默认导出的注意事项\"></a>5.1 默认导出的注意事项</h3><p>每个模块中，只允许使用唯一的一次 export default，否则会报错！  </p>\n<p>默认导入时的接收名称可以任意名称，只要是合法的成员名称即可 。</p>\n<h3 id=\"5-2按需导出\"><a href=\"#5-2按需导出\" class=\"headerlink\" title=\"5.2按需导出\"></a>5.2按需导出</h3><p>按需导出语法： <code>export 需要导出的成员</code> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-string\">&#x27;aaa&#x27;</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> s2 = <span class=\"hljs-string\">&#x27;ccc&#x27;</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-按需导入\"><a href=\"#5-2-按需导入\" class=\"headerlink\" title=\"5.2 按需导入\"></a>5.2 按需导入</h3><p>按需导入的语法：<code>import &#123;s1&#125; from &#39;模块标识符&#39;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; s1, s2, say &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./03.按需导出.js&#x27;</span><br><br><span class=\"hljs-built_in\">console</span>.log(s1);<br><span class=\"hljs-built_in\">console</span>.log(s2);<br><span class=\"hljs-built_in\">console</span>.log(say);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-2按需导入和按需导出的注意事项\"><a href=\"#5-2按需导入和按需导出的注意事项\" class=\"headerlink\" title=\"5.2按需导入和按需导出的注意事项\"></a>5.2按需导入和按需导出的注意事项</h3><p>① 每个模块中可以使用多次<strong>按需导出</strong><br>② <strong>按需导入</strong>的成员名称必须和<strong>按需导出</strong>的名称<strong>保持一致</strong><br>③ 按需导入时，可以使用<strong>as 关键字</strong>进行重命名<br>④ 按需导入可以和默认导入一起使用  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> info,&#123; s1, s2 <span class=\"hljs-keyword\">as</span> str2, say &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./03.按需导出.js&#x27;</span><br><span class=\"hljs-comment\">// info 为默认导入</span><br><br><span class=\"hljs-built_in\">console</span>.log(s1);<br><span class=\"hljs-built_in\">console</span>.log(str2);<br><span class=\"hljs-built_in\">console</span>.log(say);<br><span class=\"hljs-built_in\">console</span>.log(info);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-直接导入并执行模块中的代码\"><a href=\"#5-3-直接导入并执行模块中的代码\" class=\"headerlink\" title=\"5.3 直接导入并执行模块中的代码\"></a>5.3 直接导入并执行模块中的代码</h3><p>如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。此时，可以<strong>直接导入模块</strong>即会执行模块代码，示例代码如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//05.直接运行模块中的代码</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">3</span>; i++)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./05.直接运行模块中的代码.js&#x27;</span><br><span class=\"hljs-comment\">// 导入后便会直接执行</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Promise补充\"><a href=\"#Promise补充\" class=\"headerlink\" title=\"Promise补充\"></a>Promise补充</h1><h2 id=\"1-基于-then-fs-读取文件内容\"><a href=\"#1-基于-then-fs-读取文件内容\" class=\"headerlink\" title=\"1. 基于 then-fs 读取文件内容\"></a>1. 基于 then-fs 读取文件内容</h2><p>由于 node.js 官方提供的 fs 模块仅支持以回调函数的方式读取文件，不支持 Promise 的调用方式。因此，需要先运行如下的命令，安装 <code>then-fs</code> 这个第三方包，从而支持我们基于 Promise 的方式读取文件的内容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install then-fs<br></code></pre></td></tr></table></figure>\n\n<p>调用 then-fs 提供的 readFile() 方法，可以异步地读取文件的内容，它的返回值是 <strong>Promise 的实例对象</strong>。因此可以调用 .then() 方法为每个 Promise 异步操作指定成功和失败之后的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 默认导入</span><br><span class=\"hljs-keyword\">import</span> thenFs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;then-fs&#x27;</span><br><br>thenFs.readFile(<span class=\"hljs-string\">&#x27;./files/1.txt&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;)<br>thenFs.readFile(<span class=\"hljs-string\">&#x27;./files/2.txt&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;)<br>thenFs.readFile(<span class=\"hljs-string\">&#x27;./files/3.txt&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>注意：上述的代码无法保证文件的读取顺序，需要做进一步的改进！  </p>\n<p>如果上一个 .then() 方法中返回了一个新的 Promise 实例对象，则可以通过下一个 .then() 继续进行处理。通过 .then() 方法的链式调用，就解决了回调地狱的问题。  </p>\n<p>Promise 支持链式调用，从而来解决回调地狱的问题。示例代码如下  :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> thenFs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;then-fs&#x27;</span><br><br><br>thenFs.readFile(<span class=\"hljs-string\">&#x27;files/1.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">r1</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(r1);<br>    <span class=\"hljs-comment\">// 返回一个新的promise对象</span><br>    <span class=\"hljs-keyword\">return</span> thenFs.readFile(<span class=\"hljs-string\">&#x27;./files/2.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>);<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">r2</span> =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">// 获取第2次的读取结果</span><br>    <span class=\"hljs-built_in\">console</span>.log(r2);<br>    <span class=\"hljs-comment\">// 再次返回一个promise对象</span><br>    <span class=\"hljs-keyword\">return</span> thenFs.readFile(<span class=\"hljs-string\">&#x27;./files/3.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>);<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">r3</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(r3);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-基于promise封装读取文件的方法\"><a href=\"#2-基于promise封装读取文件的方法\" class=\"headerlink\" title=\"2.基于promise封装读取文件的方法\"></a>2.基于promise封装读取文件的方法</h2><p>方法的封装要求：<br>① 方法的名称要定义为 getFile<br>② 方法接收一个形参 fpath，表示要读取的文件的路径<br>③ 方法的返回值为 Promise 实例对象  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fs&#x27;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFile</span>(<span class=\"hljs-params\">fpath</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve,reject</span>)</span>&#123;<br>        fs.readFile(fpath,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,data</span>)=&gt;</span>&#123;<br>            <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">return</span> reject(err);<br>            resolve(data);<br>        &#125;)<br>    &#125;)<br>&#125;<br><br>getFile(<span class=\"hljs-string\">&#x27;./files/1.txt&#x27;</span>).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">r1</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(r1);<br>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err.message);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"EventLoop\"><a href=\"#EventLoop\" class=\"headerlink\" title=\"EventLoop\"></a>EventLoop</h1><h2 id=\"1-JavaScript-是单线程的语言\"><a href=\"#1-JavaScript-是单线程的语言\" class=\"headerlink\" title=\"1. JavaScript 是单线程的语言\"></a>1. JavaScript 是单线程的语言</h2><p>JavaScript 是一门单线程执行的编程语言。也就是说，同一时间只能做一件事情。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041755351.png\" alt=\"image-20210804175533250\"></p>\n<p>单线程执行任务队列的问题：<br>如果前一个任务非常耗时，则后续的任务就不得不一直等待，从而导致程序假死的问题。</p>\n<h2 id=\"2-同步任务和异步任务\"><a href=\"#2-同步任务和异步任务\" class=\"headerlink\" title=\"2. 同步任务和异步任务\"></a>2. 同步任务和异步任务</h2><p>为了防止某个耗时任务导致程序假死的问题，JavaScript 把待执行的任务分为了两类：<br>① 同步任务（synchronous）</p>\n<ul>\n<li> 又叫做非耗时任务，指的是在主线程上排队执行的那些任务</li>\n<li> 只有前一个任务执行完毕，才能执行后一个任务</li>\n</ul>\n<p> ② 异步任务（asynchronous）</p>\n<ul>\n<li>又叫做耗时任务，<em>异步任务由 JavaScript 委托给<strong>宿主环境</strong>进行执行</em></li>\n<li>当异步任务执行完成后，会通知 JavaScript 主线程执行异步任务的回调函数 。</li>\n</ul>\n<h2 id=\"3-同步任务和异步任务的执行过程\"><a href=\"#3-同步任务和异步任务的执行过程\" class=\"headerlink\" title=\"3.同步任务和异步任务的执行过程\"></a>3.同步任务和异步任务的执行过程</h2><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041813594.png\" alt=\"image-20210804181315494\" style=\"zoom:67%;\" />\n\n<p>① 同步任务由 JavaScript 主线程次序执行。<br>② 异步任务<strong>委托给</strong>宿主环境执行。<br>③ 已完成的异步任务<strong>对应的回调函数</strong>，会被加入到任务队列中等待执行。<br>④ JavaScript 主线程的<em><strong>执行栈</strong></em>被清空后，会读取任务队列中的回调函数，次序执行。<br>⑤ JavaScript 主线程不断重复上面的第 4 步 。</p>\n<h2 id=\"4-EventLoop的基本概念\"><a href=\"#4-EventLoop的基本概念\" class=\"headerlink\" title=\"4.EventLoop的基本概念\"></a>4.EventLoop的基本概念</h2><p>JavaScript 主线程从“任务队列”中读取异步任务的回调函数，放到执行栈中依次执行。这个过程是循环不断的，所以整个的这种运行机制又称为 EventLoop（事件循环）。  </p>\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041815433.png\" alt=\"image-20210804181557376\" style=\"zoom:67%;\" />\n\n<p>输出顺序：ADCB</p>\n<ul>\n<li>A 和 D 属于同步任务。会根据代码的先后顺序依次被执行。</li>\n<li>C 和 B 属于异步任务。它们的回调函数会被加入到任务队列中，等待主线程空闲时再执行 。</li>\n</ul>\n<h1 id=\"宏任务和微任务\"><a href=\"#宏任务和微任务\" class=\"headerlink\" title=\"宏任务和微任务\"></a>宏任务和微任务</h1><h2 id=\"1-什么是宏任务和微任务\"><a href=\"#1-什么是宏任务和微任务\" class=\"headerlink\" title=\"1. 什么是宏任务和微任务\"></a>1. 什么是宏任务和微任务</h2><p>JavaScript 把异步任务又做了进一步的划分，异步任务又分为两类，分别是：</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041820682.png\" alt=\"image-20210804182047617\"></p>\n<p>① 宏任务（macrotask）</p>\n<ul>\n<li>异步 Ajax 请求、</li>\n<li>setTimeout、setInterval、</li>\n<li>文件操作</li>\n<li>其它宏任务</li>\n</ul>\n<p>② 微任务（microtask）</p>\n<ul>\n<li>Promise.then、.catch 和 .finally</li>\n<li>process.nextTick</li>\n<li>其它微任务  </li>\n</ul>\n<h2 id=\"2-宏任务和微任务的执行顺序\"><a href=\"#2-宏任务和微任务的执行顺序\" class=\"headerlink\" title=\"2.宏任务和微任务的执行顺序\"></a>2.宏任务和微任务的执行顺序</h2><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041822151.png\" alt=\"image-20210804182243122\"></p>\n<p>每一个宏任务执行完之后，都会检查<strong>是否存在待执行的微任务</strong>。</p>\n<p>如果有，则执行完所有微任务之后，再继续执行下一个宏任务。  </p>\n<p><strong>宏任务和微任务同时存在的情况下，会先执行微任务。</strong></p>\n<h2 id=\"3-生活举例\"><a href=\"#3-生活举例\" class=\"headerlink\" title=\"3.生活举例\"></a>3.生活举例</h2><p>① 小云和小腾去银行办业务。首先，需要取号之后进行排队</p>\n<ul>\n<li>宏任务队列</li>\n</ul>\n<p>② 假设当前银行网点只有一个柜员，小云在办理存款业务时，小腾只能等待</p>\n<ul>\n<li>单线程，宏任务按次序执行</li>\n</ul>\n<p>③ 小云办完存款业务后，柜员询问他是否还想办理其它业务？</p>\n<ul>\n<li>当前宏任务执行完，检查是否有微任务</li>\n</ul>\n<p>④ 小云告诉柜员：想要买理财产品、再办个信用卡、最后再兑换点马年纪念币？</p>\n<ul>\n<li>执行微任务，后续宏任务被推迟</li>\n</ul>\n<p>⑤ 小云离开柜台后，柜员开始为小腾办理业务</p>\n<ul>\n<li>所有微任务执行完毕，开始执行下一个宏任务  </li>\n</ul>\n<h2 id=\"4-代码举例\"><a href=\"#4-代码举例\" class=\"headerlink\" title=\"4.代码举例\"></a>4.代码举例</h2><p>例子1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 宏任务</span><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);<br>&#125;, <span class=\"hljs-number\">0</span>);<br><br><span class=\"hljs-comment\">// Promise本身是同步的，但它的then方法和catch方法是异步的</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>);<br>    resolve();<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>);<br>&#125;);<br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">4</span>);<br></code></pre></td></tr></table></figure>\n\n<p>值得注意：<code>Promise()</code>本身是同步的，尽管它的then方法和catch方法是异步的。</p>\n<p>输出顺序：2431</p>\n<p>分析：</p>\n<p>1.先执行所有的同步任务</p>\n<ul>\n<li>new Promise()和console.log(4)</li>\n</ul>\n<p>2.再执行微任务</p>\n<ul>\n<li>.then()</li>\n</ul>\n<p>3.接着执行宏任务</p>\n<ul>\n<li>setTimeout()</li>\n</ul>\n<p>例子2：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.同步 </span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);<br><br><span class=\"hljs-comment\">// 宏任务</span><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>);<br>        resolve();<br>    &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">4</span>);<br>    &#125;)<br>&#125;, <span class=\"hljs-number\">0</span>);<br><br><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve</span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 2.Promise()是同步的</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">5</span>);<br>    resolve();<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 3.then()方法是异步微任务</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">6</span>);<br>&#125;)<br><br><span class=\"hljs-comment\">// 宏任务</span><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">7</span>);<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">8</span>);<br>        resolve();<br>    &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">9</span>);<br>    &#125;)<br>&#125;, <span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ES6模块化\"><a href=\"#ES6模块化\" class=\"headerlink\" title=\"ES6模块化\"></a>ES6模块化</h1><h2 id=\"1-node中如何实现模块化\"><a href=\"#1-node中如何实现模块化\" class=\"headerlink\" title=\"1. node中如何实现模块化\"></a>1. node中如何实现模块化</h2><p>node.js 遵循了 CommonJS 的模块化规范。其中：</p>\n<ul>\n<li><p>导入其它模块使用 require() 方法</p>\n</li>\n<li><p>模块对外共享成员使用 module.exports 对象</p>\n</li>\n</ul>\n<p>模块化的好处：<br>大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己 。</p>\n<h2 id=\"2-模块化规范分类\"><a href=\"#2-模块化规范分类\" class=\"headerlink\" title=\"2. 模块化规范分类\"></a>2. 模块化规范分类</h2><p>在 ES6 模块化规范诞生之前，JavaScript 社区已经尝试并提出了 AMD、CMD、CommonJS 等模块化规范。<br>但是，这些由社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块标准，例如：</p>\n<ul>\n<li> AMD 和 CMD 适用于浏览器端的 Javascript 模块化</li>\n<li> CommonJS 适用于服务器端的 Javascript 模块化<br>太多的模块化规范给开发者增加了学习的难度与开发的成本。因此，大一统的 ES6 模块化规范诞生了！</li>\n</ul>\n<h2 id=\"3-ES6-模块化规范\"><a href=\"#3-ES6-模块化规范\" class=\"headerlink\" title=\"3. ES6 模块化规范\"></a>3. ES6 模块化规范</h2><p>ES6 模块化规范是浏览器端与服务器端通用的模块化开发规范。它的出现极大的降低了前端开发者的模块化学习成本，开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范。<br>ES6 模块化规范中定义：</p>\n<ul>\n<li>每个 js 文件都是一个独立的模块</li>\n<li> 导入其它模块成员使用 import 关键字</li>\n<li>向外共享模块成员使用 export 关键字   </li>\n</ul>\n<h2 id=\"4-node-js中体验ES6-模块化\"><a href=\"#4-node-js中体验ES6-模块化\" class=\"headerlink\" title=\"4. node.js中体验ES6 模块化\"></a>4. node.js中体验ES6 模块化</h2><p>node.js 中默认仅支持 CommonJS 模块化规范，若想基于 node.js 体验与学习 ES6 的模块化语法，可以按照如下两个步骤进行配置：<br>① 确保安装了 v14.15.1 或更高版本的 node.js<br>②在终端中输入<code>npm init -y</code>生成package.json，然后在  package.json 的根节点中添加 “type”: “module” 节点 。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;type&quot;</span>:<span class=\"hljs-string\">&quot;module&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;8.es6&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;version&quot;</span>: <span class=\"hljs-string\">&quot;1.0.0&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;description&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;main&quot;</span>: <span class=\"hljs-string\">&quot;index.js&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;test&quot;</span>: <span class=\"hljs-string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class=\"hljs-attr\">&quot;keywords&quot;</span>: [],<br>  <span class=\"hljs-attr\">&quot;author&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;license&quot;</span>: <span class=\"hljs-string\">&quot;ISC&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-ES6-模块化的基本语法\"><a href=\"#5-ES6-模块化的基本语法\" class=\"headerlink\" title=\"5. ES6 模块化的基本语法\"></a>5. ES6 模块化的基本语法</h2><p>ES6 的模块化主要包含如下 3 种用法：<br>① 默认导出与默认导入<br>② 按需导出与按需导入<br>③ 直接导入并执行模块中的代码  </p>\n<h3 id=\"5-1-默认导出\"><a href=\"#5-1-默认导出\" class=\"headerlink\" title=\"5.1 默认导出\"></a>5.1 默认导出</h3><p>默认导出语法： <code>export default 需要导出的成员</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> n1=<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-keyword\">let</span> n2=<span class=\"hljs-number\">20</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br><br>&#125;<br><br><span class=\"hljs-comment\">// 使用export default 默认导出语法 向外共享n1和show 2个成员</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>    n1,<br>    show<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-1默认导入\"><a href=\"#5-1默认导入\" class=\"headerlink\" title=\"5.1默认导入\"></a>5.1默认导入</h3><p>默认导入的语法： <code>import 接收名称 from &#39;模块标识符&#39;  </code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span>  m1 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./01.默认导出.js&#x27;</span><br><span class=\"hljs-comment\">// m1是自定义的名字</span><br><span class=\"hljs-built_in\">console</span>.log(m1);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-默认导出的注意事项\"><a href=\"#5-1-默认导出的注意事项\" class=\"headerlink\" title=\"5.1 默认导出的注意事项\"></a>5.1 默认导出的注意事项</h3><p>每个模块中，只允许使用唯一的一次 export default，否则会报错！  </p>\n<p>默认导入时的接收名称可以任意名称，只要是合法的成员名称即可 。</p>\n<h3 id=\"5-2按需导出\"><a href=\"#5-2按需导出\" class=\"headerlink\" title=\"5.2按需导出\"></a>5.2按需导出</h3><p>按需导出语法： <code>export 需要导出的成员</code> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-string\">&#x27;aaa&#x27;</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> s2 = <span class=\"hljs-string\">&#x27;ccc&#x27;</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-按需导入\"><a href=\"#5-2-按需导入\" class=\"headerlink\" title=\"5.2 按需导入\"></a>5.2 按需导入</h3><p>按需导入的语法：<code>import &#123;s1&#125; from &#39;模块标识符&#39;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; s1, s2, say &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./03.按需导出.js&#x27;</span><br><br><span class=\"hljs-built_in\">console</span>.log(s1);<br><span class=\"hljs-built_in\">console</span>.log(s2);<br><span class=\"hljs-built_in\">console</span>.log(say);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-2按需导入和按需导出的注意事项\"><a href=\"#5-2按需导入和按需导出的注意事项\" class=\"headerlink\" title=\"5.2按需导入和按需导出的注意事项\"></a>5.2按需导入和按需导出的注意事项</h3><p>① 每个模块中可以使用多次<strong>按需导出</strong><br>② <strong>按需导入</strong>的成员名称必须和<strong>按需导出</strong>的名称<strong>保持一致</strong><br>③ 按需导入时，可以使用<strong>as 关键字</strong>进行重命名<br>④ 按需导入可以和默认导入一起使用  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> info,&#123; s1, s2 <span class=\"hljs-keyword\">as</span> str2, say &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./03.按需导出.js&#x27;</span><br><span class=\"hljs-comment\">// info 为默认导入</span><br><br><span class=\"hljs-built_in\">console</span>.log(s1);<br><span class=\"hljs-built_in\">console</span>.log(str2);<br><span class=\"hljs-built_in\">console</span>.log(say);<br><span class=\"hljs-built_in\">console</span>.log(info);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-直接导入并执行模块中的代码\"><a href=\"#5-3-直接导入并执行模块中的代码\" class=\"headerlink\" title=\"5.3 直接导入并执行模块中的代码\"></a>5.3 直接导入并执行模块中的代码</h3><p>如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。此时，可以<strong>直接导入模块</strong>即会执行模块代码，示例代码如下：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//05.直接运行模块中的代码</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">3</span>; i++)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(i);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;./05.直接运行模块中的代码.js&#x27;</span><br><span class=\"hljs-comment\">// 导入后便会直接执行</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Promise补充\"><a href=\"#Promise补充\" class=\"headerlink\" title=\"Promise补充\"></a>Promise补充</h1><h2 id=\"1-基于-then-fs-读取文件内容\"><a href=\"#1-基于-then-fs-读取文件内容\" class=\"headerlink\" title=\"1. 基于 then-fs 读取文件内容\"></a>1. 基于 then-fs 读取文件内容</h2><p>由于 node.js 官方提供的 fs 模块仅支持以回调函数的方式读取文件，不支持 Promise 的调用方式。因此，需要先运行如下的命令，安装 <code>then-fs</code> 这个第三方包，从而支持我们基于 Promise 的方式读取文件的内容。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">npm install then-fs<br></code></pre></td></tr></table></figure>\n\n<p>调用 then-fs 提供的 readFile() 方法，可以异步地读取文件的内容，它的返回值是 <strong>Promise 的实例对象</strong>。因此可以调用 .then() 方法为每个 Promise 异步操作指定成功和失败之后的回调函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 默认导入</span><br><span class=\"hljs-keyword\">import</span> thenFs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;then-fs&#x27;</span><br><br>thenFs.readFile(<span class=\"hljs-string\">&#x27;./files/1.txt&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;)<br>thenFs.readFile(<span class=\"hljs-string\">&#x27;./files/2.txt&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;)<br>thenFs.readFile(<span class=\"hljs-string\">&#x27;./files/3.txt&#x27;</span>,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span>=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>注意：上述的代码无法保证文件的读取顺序，需要做进一步的改进！  </p>\n<p>如果上一个 .then() 方法中返回了一个新的 Promise 实例对象，则可以通过下一个 .then() 继续进行处理。通过 .then() 方法的链式调用，就解决了回调地狱的问题。  </p>\n<p>Promise 支持链式调用，从而来解决回调地狱的问题。示例代码如下  :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> thenFs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;then-fs&#x27;</span><br><br><br>thenFs.readFile(<span class=\"hljs-string\">&#x27;files/1.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">r1</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(r1);<br>    <span class=\"hljs-comment\">// 返回一个新的promise对象</span><br>    <span class=\"hljs-keyword\">return</span> thenFs.readFile(<span class=\"hljs-string\">&#x27;./files/2.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>);<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">r2</span> =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">// 获取第2次的读取结果</span><br>    <span class=\"hljs-built_in\">console</span>.log(r2);<br>    <span class=\"hljs-comment\">// 再次返回一个promise对象</span><br>    <span class=\"hljs-keyword\">return</span> thenFs.readFile(<span class=\"hljs-string\">&#x27;./files/3.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>);<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-params\">r3</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(r3);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-基于promise封装读取文件的方法\"><a href=\"#2-基于promise封装读取文件的方法\" class=\"headerlink\" title=\"2.基于promise封装读取文件的方法\"></a>2.基于promise封装读取文件的方法</h2><p>方法的封装要求：<br>① 方法的名称要定义为 getFile<br>② 方法接收一个形参 fpath，表示要读取的文件的路径<br>③ 方法的返回值为 Promise 实例对象  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;fs&#x27;</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFile</span>(<span class=\"hljs-params\">fpath</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve,reject</span>)</span>&#123;<br>        fs.readFile(fpath,<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">err,data</span>)=&gt;</span>&#123;<br>            <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">return</span> reject(err);<br>            resolve(data);<br>        &#125;)<br>    &#125;)<br>&#125;<br><br>getFile(<span class=\"hljs-string\">&#x27;./files/1.txt&#x27;</span>).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">r1</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(r1);<br>&#125;,<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(err.message);<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"EventLoop\"><a href=\"#EventLoop\" class=\"headerlink\" title=\"EventLoop\"></a>EventLoop</h1><h2 id=\"1-JavaScript-是单线程的语言\"><a href=\"#1-JavaScript-是单线程的语言\" class=\"headerlink\" title=\"1. JavaScript 是单线程的语言\"></a>1. JavaScript 是单线程的语言</h2><p>JavaScript 是一门单线程执行的编程语言。也就是说，同一时间只能做一件事情。</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041755351.png\" alt=\"image-20210804175533250\"></p>\n<p>单线程执行任务队列的问题：<br>如果前一个任务非常耗时，则后续的任务就不得不一直等待，从而导致程序假死的问题。</p>\n<h2 id=\"2-同步任务和异步任务\"><a href=\"#2-同步任务和异步任务\" class=\"headerlink\" title=\"2. 同步任务和异步任务\"></a>2. 同步任务和异步任务</h2><p>为了防止某个耗时任务导致程序假死的问题，JavaScript 把待执行的任务分为了两类：<br>① 同步任务（synchronous）</p>\n<ul>\n<li> 又叫做非耗时任务，指的是在主线程上排队执行的那些任务</li>\n<li> 只有前一个任务执行完毕，才能执行后一个任务</li>\n</ul>\n<p> ② 异步任务（asynchronous）</p>\n<ul>\n<li>又叫做耗时任务，<em>异步任务由 JavaScript 委托给<strong>宿主环境</strong>进行执行</em></li>\n<li>当异步任务执行完成后，会通知 JavaScript 主线程执行异步任务的回调函数 。</li>\n</ul>\n<h2 id=\"3-同步任务和异步任务的执行过程\"><a href=\"#3-同步任务和异步任务的执行过程\" class=\"headerlink\" title=\"3.同步任务和异步任务的执行过程\"></a>3.同步任务和异步任务的执行过程</h2><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041813594.png\" alt=\"image-20210804181315494\" style=\"zoom:67%;\" />\n\n<p>① 同步任务由 JavaScript 主线程次序执行。<br>② 异步任务<strong>委托给</strong>宿主环境执行。<br>③ 已完成的异步任务<strong>对应的回调函数</strong>，会被加入到任务队列中等待执行。<br>④ JavaScript 主线程的<em><strong>执行栈</strong></em>被清空后，会读取任务队列中的回调函数，次序执行。<br>⑤ JavaScript 主线程不断重复上面的第 4 步 。</p>\n<h2 id=\"4-EventLoop的基本概念\"><a href=\"#4-EventLoop的基本概念\" class=\"headerlink\" title=\"4.EventLoop的基本概念\"></a>4.EventLoop的基本概念</h2><p>JavaScript 主线程从“任务队列”中读取异步任务的回调函数，放到执行栈中依次执行。这个过程是循环不断的，所以整个的这种运行机制又称为 EventLoop（事件循环）。  </p>\n<img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041815433.png\" alt=\"image-20210804181557376\" style=\"zoom:67%;\" />\n\n<p>输出顺序：ADCB</p>\n<ul>\n<li>A 和 D 属于同步任务。会根据代码的先后顺序依次被执行。</li>\n<li>C 和 B 属于异步任务。它们的回调函数会被加入到任务队列中，等待主线程空闲时再执行 。</li>\n</ul>\n<h1 id=\"宏任务和微任务\"><a href=\"#宏任务和微任务\" class=\"headerlink\" title=\"宏任务和微任务\"></a>宏任务和微任务</h1><h2 id=\"1-什么是宏任务和微任务\"><a href=\"#1-什么是宏任务和微任务\" class=\"headerlink\" title=\"1. 什么是宏任务和微任务\"></a>1. 什么是宏任务和微任务</h2><p>JavaScript 把异步任务又做了进一步的划分，异步任务又分为两类，分别是：</p>\n<p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041820682.png\" alt=\"image-20210804182047617\"></p>\n<p>① 宏任务（macrotask）</p>\n<ul>\n<li>异步 Ajax 请求、</li>\n<li>setTimeout、setInterval、</li>\n<li>文件操作</li>\n<li>其它宏任务</li>\n</ul>\n<p>② 微任务（microtask）</p>\n<ul>\n<li>Promise.then、.catch 和 .finally</li>\n<li>process.nextTick</li>\n<li>其它微任务  </li>\n</ul>\n<h2 id=\"2-宏任务和微任务的执行顺序\"><a href=\"#2-宏任务和微任务的执行顺序\" class=\"headerlink\" title=\"2.宏任务和微任务的执行顺序\"></a>2.宏任务和微任务的执行顺序</h2><p><img src=\"https://gitee.com/zyxbj/image-warehouse/raw/master/pics/202108041822151.png\" alt=\"image-20210804182243122\"></p>\n<p>每一个宏任务执行完之后，都会检查<strong>是否存在待执行的微任务</strong>。</p>\n<p>如果有，则执行完所有微任务之后，再继续执行下一个宏任务。  </p>\n<p><strong>宏任务和微任务同时存在的情况下，会先执行微任务。</strong></p>\n<h2 id=\"3-生活举例\"><a href=\"#3-生活举例\" class=\"headerlink\" title=\"3.生活举例\"></a>3.生活举例</h2><p>① 小云和小腾去银行办业务。首先，需要取号之后进行排队</p>\n<ul>\n<li>宏任务队列</li>\n</ul>\n<p>② 假设当前银行网点只有一个柜员，小云在办理存款业务时，小腾只能等待</p>\n<ul>\n<li>单线程，宏任务按次序执行</li>\n</ul>\n<p>③ 小云办完存款业务后，柜员询问他是否还想办理其它业务？</p>\n<ul>\n<li>当前宏任务执行完，检查是否有微任务</li>\n</ul>\n<p>④ 小云告诉柜员：想要买理财产品、再办个信用卡、最后再兑换点马年纪念币？</p>\n<ul>\n<li>执行微任务，后续宏任务被推迟</li>\n</ul>\n<p>⑤ 小云离开柜台后，柜员开始为小腾办理业务</p>\n<ul>\n<li>所有微任务执行完毕，开始执行下一个宏任务  </li>\n</ul>\n<h2 id=\"4-代码举例\"><a href=\"#4-代码举例\" class=\"headerlink\" title=\"4.代码举例\"></a>4.代码举例</h2><p>例子1：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 宏任务</span><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);<br>&#125;, <span class=\"hljs-number\">0</span>);<br><br><span class=\"hljs-comment\">// Promise本身是同步的，但它的then方法和catch方法是异步的</span><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>);<br>    resolve();<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>);<br>&#125;);<br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">4</span>);<br></code></pre></td></tr></table></figure>\n\n<p>值得注意：<code>Promise()</code>本身是同步的，尽管它的then方法和catch方法是异步的。</p>\n<p>输出顺序：2431</p>\n<p>分析：</p>\n<p>1.先执行所有的同步任务</p>\n<ul>\n<li>new Promise()和console.log(4)</li>\n</ul>\n<p>2.再执行微任务</p>\n<ul>\n<li>.then()</li>\n</ul>\n<p>3.接着执行宏任务</p>\n<ul>\n<li>setTimeout()</li>\n</ul>\n<p>例子2：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 1.同步 </span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);<br><br><span class=\"hljs-comment\">// 宏任务</span><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>);<br>        resolve();<br>    &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">4</span>);<br>    &#125;)<br>&#125;, <span class=\"hljs-number\">0</span>);<br><br><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve</span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 2.Promise()是同步的</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">5</span>);<br>    resolve();<br>&#125;).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 3.then()方法是异步微任务</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">6</span>);<br>&#125;)<br><br><span class=\"hljs-comment\">// 宏任务</span><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">7</span>);<br>    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve</span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">8</span>);<br>        resolve();<br>    &#125;).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">9</span>);<br>    &#125;)<br>&#125;, <span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckrr8ldbc0000moun1g5c0u49","tag_id":"ckrr8ldbi0002mound89adpf5","_id":"ckrr8ldbo0007mounf72w6acl"},{"post_id":"ckrr8ldbg0001moun2hcr29at","tag_id":"ckrr8ldbn0006mounfns375j2","_id":"ckrr8ldbp0009moun62lm9ss9"},{"post_id":"ckrr8ldbk0003moundzrx9z8d","tag_id":"ckrr8ldbp0008mounh9kh8tww","_id":"ckrr8ldbq000bmoun268p6vz7"},{"post_id":"ckrr8ldbl0004mound0nx5lqm","tag_id":"ckrr8ldbq000amoundyep22fe","_id":"ckrr8ldbs000emounceh5dvat"},{"post_id":"ckrr8ldbl0004mound0nx5lqm","tag_id":"ckrr8ldbq000cmounat0t1n12","_id":"ckrr8ldbs000fmoun42a927a8"},{"post_id":"ckrr8ldbm0005moun8em7foug","tag_id":"ckrr8ldbr000dmoun8sqhg751","_id":"ckrr8ldbs000gmounf6qcd7l3"},{"post_id":"ckrrwibqj0001m4unaysnaa6p","tag_id":"ckrrwibql0002m4unhp5m6cfd","_id":"ckrrwibqo0003m4un91zcahhs"},{"post_id":"ckrrwibqe0000m4unf9tr5e4g","tag_id":"ckrt09f3o0000ywun4glx19j1","_id":"ckrt09f3s0001ywun8vvqfyxa"},{"post_id":"ckrt09f3s0002ywunbke8cix2","tag_id":"ckrt09f3t0003ywunex6hcyjx","_id":"ckrt09f3u0004ywungm41eegj"},{"post_id":"ckrub5z0l00006sun90eycsua","tag_id":"ckrr8ldbn0006mounfns375j2","_id":"ckrub5z0w00056sunbhlq8s20"},{"post_id":"ckrub5z0l00006sun90eycsua","tag_id":"ckrub5z0r00026sun5epz6ov7","_id":"ckrub5z0x00066sun0tai383a"},{"post_id":"ckrub5z0p00016sun02hub3dq","tag_id":"ckrt09f3t0003ywunex6hcyjx","_id":"ckrub5z0x00086sunalrafv60"},{"post_id":"ckrub5z0p00016sun02hub3dq","tag_id":"ckrub5z0w00046sun4wcfgtmw","_id":"ckrub5z0y00096sun5wopaxmz"},{"post_id":"ckrub5z0p00016sun02hub3dq","tag_id":"ckrr8ldbn0006mounfns375j2","_id":"ckrub5z0y000b6sun87t9d8gz"},{"post_id":"ckrub5z0u00036sun3c665xqo","tag_id":"ckrub5z0x00076sunge3uab9y","_id":"ckrub5z0y000c6suncq72g2sg"},{"post_id":"ckrub5z0u00036sun3c665xqo","tag_id":"ckrub5z0y000a6sunf6tr8obb","_id":"ckrub5z0z000d6sun2jadh5ow"},{"post_id":"ckrxey99k0000x8une07b67me","tag_id":"ckrxey99r0001x8un0ueqadve","_id":"ckrxey99x0006x8uneunj9pgx"},{"post_id":"ckrxey99k0000x8une07b67me","tag_id":"ckrxey99v0002x8unbr5pgwm3","_id":"ckrxey99x0007x8ungfxgf1hv"},{"post_id":"ckrxey99k0000x8une07b67me","tag_id":"ckrxey99v0003x8un99nwgw08","_id":"ckrxey99x0008x8unc7pkeu21"},{"post_id":"ckrxey99k0000x8une07b67me","tag_id":"ckrxey99w0004x8un3d4qdio5","_id":"ckrxey99x0009x8un1xyk743j"},{"post_id":"ckrxey99k0000x8une07b67me","tag_id":"ckrxey99w0005x8un55vtdpom","_id":"ckrxey99x000ax8unfei5clwz"}],"Tag":[{"name":"JavaScript","_id":"ckrr8ldbi0002mound89adpf5"},{"name":"Vue","_id":"ckrr8ldbn0006mounfns375j2"},{"name":"正则","_id":"ckrr8ldbp0008mounh9kh8tww"},{"name":"VUE","_id":"ckrr8ldbq000amoundyep22fe"},{"name":"案例","_id":"ckrr8ldbq000cmounat0t1n12"},{"name":"javascript","_id":"ckrr8ldbr000dmoun8sqhg751"},{"name":"YAML","_id":"ckrrwibql0002m4unhp5m6cfd"},{"name":"Git","_id":"ckrt09f3o0000ywun4glx19j1"},{"name":"axios","_id":"ckrt09f3t0003ywunex6hcyjx"},{"name":"Vue路由","_id":"ckrub5z0r00026sun5epz6ov7"},{"name":"express","_id":"ckrub5z0w00046sun4wcfgtmw"},{"name":"fetch","_id":"ckrub5z0x00076sunge3uab9y"},{"name":"url","_id":"ckrub5z0y000a6sunf6tr8obb"},{"name":"es6","_id":"ckrxey99r0001x8un0ueqadve"},{"name":"模块化","_id":"ckrxey99v0002x8unbr5pgwm3"},{"name":"EventLoop","_id":"ckrxey99v0003x8un99nwgw08"},{"name":"宏任务","_id":"ckrxey99w0004x8un3d4qdio5"},{"name":"微任务","_id":"ckrxey99w0005x8un55vtdpom"}]}}